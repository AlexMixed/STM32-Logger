
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__cs3_interrupt_vector>:
 8000000:	00 50 00 20 b5 3a 01 08 c5 3a 01 08 c5 3a 01 08     .P. .:...:...:..
 8000010:	c5 3a 01 08 c5 3a 01 08 c5 3a 01 08 c5 3a 01 08     .:...:...:...:..
 8000020:	c5 3a 01 08 c5 3a 01 08 c5 3a 01 08 c5 3a 01 08     .:...:...:...:..
 8000030:	c5 3a 01 08 c5 3a 01 08 c5 3a 01 08 19 c1 00 08     .:...:...:......
 8000040:	49 c4 00 08 49 c4 00 08 49 c4 00 08 49 c4 00 08     I...I...I...I...
 8000050:	49 c4 00 08 49 c4 00 08 cd bf 00 08 49 c4 00 08     I...I.......I...
 8000060:	49 c4 00 08 49 c4 00 08 49 c4 00 08 59 c0 00 08     I...I...I...Y...
 8000070:	c5 3a 01 08 c5 3a 01 08 c5 3a 01 08 c5 3a 01 08     .:...:...:...:..
 8000080:	c5 3a 01 08 c5 3a 01 08 c5 3a 01 08 3d c4 00 08     .:...:...:..=...
 8000090:	41 c4 00 08 c5 3a 01 08 c5 3a 01 08 49 c4 00 08     A....:...:..I...
 80000a0:	49 c4 00 08 49 c4 00 08 49 c4 00 08 49 c4 00 08     I...I...I...I...
 80000b0:	49 c4 00 08 49 c4 00 08 49 c4 00 08 29 b6 00 08     I...I...I...)...
 80000c0:	99 bd 00 08 49 c4 00 08 49 c4 00 08 49 c4 00 08     ....I...I...I...
 80000d0:	49 c4 00 08 49 c4 00 08 49 c4 00 08 49 c4 00 08     I...I...I...I...
 80000e0:	49 c4 00 08 49 c4 00 08 49 c4 00 08                 I...I...I...

080000ec <__do_global_dtors_aux>:
 80000ec:	f240 6398 	movw	r3, #1688	; 0x698
 80000f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80000f4:	781a      	ldrb	r2, [r3, #0]
 80000f6:	b90a      	cbnz	r2, 80000fc <__do_global_dtors_aux+0x10>
 80000f8:	2001      	movs	r0, #1
 80000fa:	7018      	strb	r0, [r3, #0]
 80000fc:	4770      	bx	lr
 80000fe:	bf00      	nop

08000100 <frame_dummy>:
 8000100:	f240 0000 	movw	r0, #0
 8000104:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000108:	b508      	push	{r3, lr}
 800010a:	6803      	ldr	r3, [r0, #0]
 800010c:	b12b      	cbz	r3, 800011a <frame_dummy+0x1a>
 800010e:	f240 0300 	movw	r3, #0
 8000112:	f2c0 0300 	movt	r3, #0
 8000116:	b103      	cbz	r3, 800011a <frame_dummy+0x1a>
 8000118:	4798      	blx	r3
 800011a:	bd08      	pop	{r3, pc}
 800011c:	0000      	movs	r0, r0
	...

08000120 <PPG_LO_Filter>:
  * @brief  Run the baseband LO on the quadrature samples, then integrate and dump the baseband into indivdual LED bins
  * @param  Pointer to the output data buffer
  * @retval None
  * This will be called at 13.393KHz
  */
void PPG_LO_Filter(uint16_t* buff) {
 8000120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int32_t I=0,Q=0,a;			//I and Q integration bins, general purpose variable
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
 8000124:	4ea7      	ldr	r6, [pc, #668]	; (80003c4 <PPG_LO_Filter+0x2a4>)
  * @brief  Run the baseband LO on the quadrature samples, then integrate and dump the baseband into indivdual LED bins
  * @param  Pointer to the output data buffer
  * @retval None
  * This will be called at 13.393KHz
  */
void PPG_LO_Filter(uint16_t* buff) {
 8000126:	4604      	mov	r4, r0
	int32_t I=0,Q=0,a;			//I and Q integration bins, general purpose variable
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
 8000128:	4630      	mov	r0, r6
 800012a:	f00c fe41 	bl	800cdb0 <Tryfudge>
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800012e:	f8b4 c000 	ldrh.w	ip, [r4]
		Q+=buff[n++];
		I-=buff[n++];
 8000132:	f8b4 9004 	ldrh.w	r9, [r4, #4]
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000136:	8927      	ldrh	r7, [r4, #8]
		Q+=buff[n++];
		I-=buff[n++];
 8000138:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800013c:	ebc9 000c 	rsb	r0, r9, ip
 8000140:	f8b4 8010 	ldrh.w	r8, [r4, #16]
 8000144:	19c5      	adds	r5, r0, r7
		Q+=buff[n++];
		I-=buff[n++];
 8000146:	8aa1      	ldrh	r1, [r4, #20]
 8000148:	ebca 0205 	rsb	r2, sl, r5
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800014c:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 8000150:	eb02 0308 	add.w	r3, r2, r8
		Q+=buff[n++];
		I-=buff[n++];
 8000154:	8ba7      	ldrh	r7, [r4, #28]
 8000156:	ebc1 0903 	rsb	r9, r1, r3
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800015a:	8c20      	ldrh	r0, [r4, #32]
 800015c:	eb09 0a0c 	add.w	sl, r9, ip
		Q+=buff[n++];
 8000160:	f8b4 8002 	ldrh.w	r8, [r4, #2]
		I-=buff[n++];
		Q-=buff[n++];
 8000164:	88e2      	ldrh	r2, [r4, #6]
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 8000166:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8000168:	ebc7 050a 	rsb	r5, r7, sl
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800016c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		Q+=buff[n++];
 8000170:	8967      	ldrh	r7, [r4, #10]
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000172:	182b      	adds	r3, r5, r0
		Q+=buff[n++];
 8000174:	ebc2 0a08 	rsb	sl, r2, r8
		I-=buff[n++];
 8000178:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
		Q-=buff[n++];
 800017a:	89e0      	ldrh	r0, [r4, #14]
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 800017c:	ebc1 0903 	rsb	r9, r1, r3
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000180:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
		Q+=buff[n++];
 8000184:	8a61      	ldrh	r1, [r4, #18]
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000186:	eb09 030c 	add.w	r3, r9, ip
		Q+=buff[n++];
 800018a:	eb0a 0207 	add.w	r2, sl, r7
		I-=buff[n++];
 800018e:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
		Q-=buff[n++];
 8000192:	8ae7      	ldrh	r7, [r4, #22]
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 8000194:	ebc5 0903 	rsb	r9, r5, r3
		Q-=buff[n++];
 8000198:	ebc0 0a02 	rsb	sl, r0, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800019c:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		Q+=buff[n++];
 800019e:	8b60      	ldrh	r0, [r4, #26]
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001a0:	eb09 0308 	add.w	r3, r9, r8
		Q+=buff[n++];
 80001a4:	eb0a 0201 	add.w	r2, sl, r1
		I-=buff[n++];
 80001a8:	f8b4 803c 	ldrh.w	r8, [r4, #60]	; 0x3c
		Q-=buff[n++];
 80001ac:	8be1      	ldrh	r1, [r4, #30]
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 80001ae:	ebcc 0903 	rsb	r9, ip, r3
		Q-=buff[n++];
 80001b2:	ebc7 0a02 	rsb	sl, r7, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001b6:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		Q+=buff[n++];
 80001ba:	8c67      	ldrh	r7, [r4, #34]	; 0x22
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001bc:	eb09 0305 	add.w	r3, r9, r5
		Q+=buff[n++];
 80001c0:	eb0a 0200 	add.w	r2, sl, r0
		I-=buff[n++];
 80001c4:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
		Q-=buff[n++];
 80001c8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 80001ca:	ebc8 0903 	rsb	r9, r8, r3
		Q-=buff[n++];
 80001ce:	ebc1 0a02 	rsb	sl, r1, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001d2:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
		Q+=buff[n++];
 80001d6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001d8:	eb09 030c 	add.w	r3, r9, ip
		Q+=buff[n++];
 80001dc:	eb0a 0207 	add.w	r2, sl, r7
		I-=buff[n++];
 80001e0:	f8b4 c04c 	ldrh.w	ip, [r4, #76]	; 0x4c
		Q-=buff[n++];
 80001e4:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 80001e6:	ebc5 0903 	rsb	r9, r5, r3
		Q-=buff[n++];
 80001ea:	ebc0 0a02 	rsb	sl, r0, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001ee:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
		Q+=buff[n++];
 80001f2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80001f4:	eb09 0308 	add.w	r3, r9, r8
		Q+=buff[n++];
 80001f8:	eb0a 0201 	add.w	r2, sl, r1
		I-=buff[n++];
 80001fc:	f8b4 8054 	ldrh.w	r8, [r4, #84]	; 0x54
		Q-=buff[n++];
 8000200:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 8000202:	ebcc 0903 	rsb	r9, ip, r3
		Q-=buff[n++];
 8000206:	ebc7 0a02 	rsb	sl, r7, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800020a:	f8b4 c058 	ldrh.w	ip, [r4, #88]	; 0x58
		Q+=buff[n++];
 800020e:	8f67      	ldrh	r7, [r4, #58]	; 0x3a
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000210:	eb09 0305 	add.w	r3, r9, r5
		Q+=buff[n++];
 8000214:	eb0a 0200 	add.w	r2, sl, r0
		I-=buff[n++];
 8000218:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
		Q-=buff[n++];
 800021c:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 800021e:	ebc8 0903 	rsb	r9, r8, r3
		Q-=buff[n++];
 8000222:	ebc1 0a02 	rsb	sl, r1, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000226:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
		Q+=buff[n++];
 800022a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800022e:	eb09 030c 	add.w	r3, r9, ip
		Q+=buff[n++];
 8000232:	eb0a 0207 	add.w	r2, sl, r7
		I-=buff[n++];
 8000236:	f8b4 c064 	ldrh.w	ip, [r4, #100]	; 0x64
		Q-=buff[n++];
 800023a:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 800023e:	ebc5 0903 	rsb	r9, r5, r3
		Q-=buff[n++];
 8000242:	ebc0 0a02 	rsb	sl, r0, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000246:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		Q+=buff[n++];
 800024a:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 800024e:	eb09 0308 	add.w	r3, r9, r8
		Q+=buff[n++];
 8000252:	eb0a 0201 	add.w	r2, sl, r1
		I-=buff[n++];
 8000256:	f8b4 806c 	ldrh.w	r8, [r4, #108]	; 0x6c
		Q-=buff[n++];
 800025a:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 800025e:	ebcc 0903 	rsb	r9, ip, r3
		Q-=buff[n++];
 8000262:	ebc7 0a02 	rsb	sl, r7, r2
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000266:	f8b4 c070 	ldrh.w	ip, [r4, #112]	; 0x70
		Q+=buff[n++];
 800026a:	f8b4 7052 	ldrh.w	r7, [r4, #82]	; 0x52
 800026e:	eb0a 0200 	add.w	r2, sl, r0
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000272:	eb09 0305 	add.w	r3, r9, r5
		Q+=buff[n++];
		I-=buff[n++];
		Q-=buff[n++];
 8000276:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
 800027a:	1a55      	subs	r5, r2, r1
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
 800027c:	ebc8 0903 	rsb	r9, r8, r3
 8000280:	f8b4 a074 	ldrh.w	sl, [r4, #116]	; 0x74
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 8000284:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000288:	eb09 030c 	add.w	r3, r9, ip
		Q+=buff[n++];
 800028c:	eb05 0907 	add.w	r9, r5, r7
		I-=buff[n++];
		Q-=buff[n++];
 8000290:	ebc0 0209 	rsb	r2, r0, r9
 8000294:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 8000298:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
		Q+=buff[n++];
		I-=buff[n++];
 800029c:	f8b4 c07c 	ldrh.w	ip, [r4, #124]	; 0x7c
 80002a0:	ebca 0503 	rsb	r5, sl, r3
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 80002a4:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
 80002a8:	eb02 0a08 	add.w	sl, r2, r8
		I-=buff[n++];
		Q-=buff[n++];
 80002ac:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80002b0:	ebc7 080a 	rsb	r8, r7, sl
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
 80002b4:	6870      	ldr	r0, [r6, #4]
	static uint8_t bindex;			//Baseband decimation index
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
 80002b6:	1949      	adds	r1, r1, r5
		Q+=buff[n++];
		I-=buff[n++];
 80002b8:	ebcc 0101 	rsb	r1, ip, r1
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 80002bc:	f8b4 a06a 	ldrh.w	sl, [r4, #106]	; 0x6a
 80002c0:	eb08 0209 	add.w	r2, r8, r9
		I-=buff[n++];
		Q-=buff[n++];
 80002c4:	f8b4 c06e 	ldrh.w	ip, [r4, #110]	; 0x6e
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
 80002c8:	1808      	adds	r0, r1, r0
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
		Q-=buff[n++];
 80002ca:	1ad2      	subs	r2, r2, r3
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 80002cc:	f8b4 5072 	ldrh.w	r5, [r4, #114]	; 0x72
		I-=buff[n++];
		Q-=buff[n++];
 80002d0:	f8b4 7076 	ldrh.w	r7, [r4, #118]	; 0x76
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 80002d4:	f8b4 907a 	ldrh.w	r9, [r4, #122]	; 0x7a
		I-=buff[n++];
		Q-=buff[n++];
 80002d8:	f8b4 807e 	ldrh.w	r8, [r4, #126]	; 0x7e
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 80002dc:	4452      	add	r2, sl
		I-=buff[n++];
		Q-=buff[n++];
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
 80002de:	6070      	str	r0, [r6, #4]
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
 80002e0:	68f3      	ldr	r3, [r6, #12]
 80002e2:	6934      	ldr	r4, [r6, #16]
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
		Q-=buff[n++];
 80002e4:	ebcc 0202 	rsb	r2, ip, r2
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
 80002e8:	f240 6cee 	movw	ip, #1774	; 0x6ee
 80002ec:	fb0c fc03 	mul.w	ip, ip, r3
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 80002f0:	1952      	adds	r2, r2, r5
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
	Frequency_Bin[1][1]=Frequency_Bin[1][1]*1773+a*1024;//complex here
 80002f2:	029b      	lsls	r3, r3, #10
 80002f4:	f240 65ed 	movw	r5, #1773	; 0x6ed
 80002f8:	fb05 3504 	mla	r5, r5, r4, r3
	Frequency_Bin[1][1]>>=11;Frequency_Bin[1][0]>>=11;//divide by 2048
	Frequency_Bin[1][0]+=I;Frequency_Bin[1][1]+=Q;//I,Q is real,imaginary
	//End of decimating filters
	if(++bindex==12) {			//Decimation factor of 12 - 62.004Hz data output
 80002fc:	7d33      	ldrb	r3, [r6, #20]
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
		I-=buff[n++];
		Q-=buff[n++];
 80002fe:	1bd2      	subs	r2, r2, r7
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
 8000300:	02a4      	lsls	r4, r4, #10
		I-=buff[n++];
		Q-=buff[n++];
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
 8000302:	68b7      	ldr	r7, [r6, #8]
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
	Frequency_Bin[1][1]=Frequency_Bin[1][1]*1773+a*1024;//complex here
	Frequency_Bin[1][1]>>=11;Frequency_Bin[1][0]>>=11;//divide by 2048
	Frequency_Bin[1][0]+=I;Frequency_Bin[1][1]+=Q;//I,Q is real,imaginary
	//End of decimating filters
	if(++bindex==12) {			//Decimation factor of 12 - 62.004Hz data output
 8000304:	3301      	adds	r3, #1
	static int32_t Frequency_Bin[2][2];	//Only two frequencies in use atm - consisting of and I and Q component
	static uint32_t Fudgemask;
	Tryfudge(&Fudgemask);			//Try to correct timer phase here
	for(uint16_t n=0;n<ADC_BUFF_SIZE/4;) {	//buffer size/4 must be a multiple of 4
		I+=buff[n++];
		Q+=buff[n++];
 8000306:	444a      	add	r2, r9
		I-=buff[n++];
		Q-=buff[n++];
 8000308:	ebc8 0202 	rsb	r2, r8, r2
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
	Frequency_Bin[1][1]=Frequency_Bin[1][1]*1773+a*1024;//complex here
	Frequency_Bin[1][1]>>=11;Frequency_Bin[1][0]>>=11;//divide by 2048
	Frequency_Bin[1][0]+=I;Frequency_Bin[1][1]+=Q;//I,Q is real,imaginary
	//End of decimating filters
	if(++bindex==12) {			//Decimation factor of 12 - 62.004Hz data output
 800030c:	b2db      	uxtb	r3, r3
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
 800030e:	ebc4 040c 	rsb	r4, r4, ip
		I-=buff[n++];
		Q-=buff[n++];
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
 8000312:	19d7      	adds	r7, r2, r7
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
	Frequency_Bin[1][1]=Frequency_Bin[1][1]*1773+a*1024;//complex here
	Frequency_Bin[1][1]>>=11;Frequency_Bin[1][0]>>=11;//divide by 2048
	Frequency_Bin[1][0]+=I;Frequency_Bin[1][1]+=Q;//I,Q is real,imaginary
 8000314:	eb01 21e4 	add.w	r1, r1, r4, asr #11
 8000318:	eb02 22e5 	add.w	r2, r2, r5, asr #11
	//End of decimating filters
	if(++bindex==12) {			//Decimation factor of 12 - 62.004Hz data output
 800031c:	2b0c      	cmp	r3, #12
		I-=buff[n++];
		Q-=buff[n++];
	}
	//Now run the "baseband" decimating filter(s)
	//No positive frequencies at the moment - they would go here TODO
	Frequency_Bin[0][0]+=I;Frequency_Bin[0][1]+=Q;//Add the I and Q directly into the zero frequency bin
 800031e:	60b7      	str	r7, [r6, #8]
	//Negative frequencie(s) go here, need to get to 0hz, so multiply by a +ive complex exponential
	a=Frequency_Bin[1][0];Frequency_Bin[1][0]=Frequency_Bin[1][0]*1774-Frequency_Bin[1][1]*1024;//Rotate the phasor in the bin - real here
	Frequency_Bin[1][1]=Frequency_Bin[1][1]*1773+a*1024;//complex here
	Frequency_Bin[1][1]>>=11;Frequency_Bin[1][0]>>=11;//divide by 2048
	Frequency_Bin[1][0]+=I;Frequency_Bin[1][1]+=Q;//I,Q is real,imaginary
 8000320:	60f1      	str	r1, [r6, #12]
 8000322:	6132      	str	r2, [r6, #16]
	//End of decimating filters
	if(++bindex==12) {			//Decimation factor of 12 - 62.004Hz data output
 8000324:	7533      	strb	r3, [r6, #20]
 8000326:	d001      	beq.n	800032c <PPG_LO_Filter+0x20c>
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Last_PPG_Values[0]=(uint32_t)sqrt(pow((int64_t)Frequency_Bin[0][0],2)+pow((int64_t)Frequency_Bin[0][1],2));
 800032c:	f012 f874 	bl	8012418 <__aeabi_i2d>
 8000330:	4602      	mov	r2, r0
 8000332:	460b      	mov	r3, r1
 8000334:	f012 f8d6 	bl	80124e4 <__aeabi_dmul>
 8000338:	4604      	mov	r4, r0
 800033a:	4638      	mov	r0, r7
 800033c:	460d      	mov	r5, r1
 800033e:	f012 f86b 	bl	8012418 <__aeabi_i2d>
 8000342:	4602      	mov	r2, r0
 8000344:	460b      	mov	r3, r1
 8000346:	f012 f8cd 	bl	80124e4 <__aeabi_dmul>
 800034a:	4602      	mov	r2, r0
 800034c:	460b      	mov	r3, r1
 800034e:	4620      	mov	r0, r4
 8000350:	4629      	mov	r1, r5
 8000352:	f011 ff15 	bl	8012180 <__adddf3>
 8000356:	f010 fc2f 	bl	8010bb8 <sqrt>
 800035a:	f012 fb85 	bl	8012a68 <__aeabi_d2uiz>
 800035e:	4c1a      	ldr	r4, [pc, #104]	; (80003c8 <PPG_LO_Filter+0x2a8>)
 8000360:	4603      	mov	r3, r0
 8000362:	6023      	str	r3, [r4, #0]
		Last_PPG_Values[1]=(uint32_t)sqrt(pow((int64_t)Frequency_Bin[1][0],2)+pow((int64_t)Frequency_Bin[1][1],2));
 8000364:	68f0      	ldr	r0, [r6, #12]
 8000366:	f012 f857 	bl	8012418 <__aeabi_i2d>
 800036a:	4602      	mov	r2, r0
 800036c:	460b      	mov	r3, r1
 800036e:	f012 f8b9 	bl	80124e4 <__aeabi_dmul>
 8000372:	4680      	mov	r8, r0
 8000374:	6930      	ldr	r0, [r6, #16]
 8000376:	4689      	mov	r9, r1
 8000378:	f012 f84e 	bl	8012418 <__aeabi_i2d>
 800037c:	4602      	mov	r2, r0
 800037e:	460b      	mov	r3, r1
 8000380:	f012 f8b0 	bl	80124e4 <__aeabi_dmul>
 8000384:	4602      	mov	r2, r0
 8000386:	460b      	mov	r3, r1
 8000388:	4640      	mov	r0, r8
 800038a:	4649      	mov	r1, r9
 800038c:	f011 fef8 	bl	8012180 <__adddf3>
 8000390:	f010 fc12 	bl	8010bb8 <sqrt>
 8000394:	f012 fb68 	bl	8012a68 <__aeabi_d2uiz>
 8000398:	6060      	str	r0, [r4, #4]
		Add_To_Buffer(Last_PPG_Values[0],&(Buff[0]));
 800039a:	6820      	ldr	r0, [r4, #0]
 800039c:	490b      	ldr	r1, [pc, #44]	; (80003cc <PPG_LO_Filter+0x2ac>)
 800039e:	f001 fd13 	bl	8001dc8 <Add_To_Buffer>
		Add_To_Buffer(Last_PPG_Values[1],&(Buff[1]));
 80003a2:	490b      	ldr	r1, [pc, #44]	; (80003d0 <PPG_LO_Filter+0x2b0>)
 80003a4:	6860      	ldr	r0, [r4, #4]
 80003a6:	f001 fd0f 	bl	8001dc8 <Add_To_Buffer>
		//Other frequencies corresponding to different LEDs could go here - use the array of buffers?
		memset(Frequency_Bin,0,sizeof(Frequency_Bin));//Zero everything
		bindex=0;			//Reset this
		Fudgemask|=1;			//Sets a TIM3 fudge as requested
 80003aa:	6832      	ldr	r2, [r6, #0]
		Last_PPG_Values[0]=(uint32_t)sqrt(pow((int64_t)Frequency_Bin[0][0],2)+pow((int64_t)Frequency_Bin[0][1],2));
		Last_PPG_Values[1]=(uint32_t)sqrt(pow((int64_t)Frequency_Bin[1][0],2)+pow((int64_t)Frequency_Bin[1][1],2));
		Add_To_Buffer(Last_PPG_Values[0],&(Buff[0]));
		Add_To_Buffer(Last_PPG_Values[1],&(Buff[1]));
		//Other frequencies corresponding to different LEDs could go here - use the array of buffers?
		memset(Frequency_Bin,0,sizeof(Frequency_Bin));//Zero everything
 80003ac:	2300      	movs	r3, #0
		bindex=0;			//Reset this
		Fudgemask|=1;			//Sets a TIM3 fudge as requested
 80003ae:	f042 0101 	orr.w	r1, r2, #1
		Last_PPG_Values[0]=(uint32_t)sqrt(pow((int64_t)Frequency_Bin[0][0],2)+pow((int64_t)Frequency_Bin[0][1],2));
		Last_PPG_Values[1]=(uint32_t)sqrt(pow((int64_t)Frequency_Bin[1][0],2)+pow((int64_t)Frequency_Bin[1][1],2));
		Add_To_Buffer(Last_PPG_Values[0],&(Buff[0]));
		Add_To_Buffer(Last_PPG_Values[1],&(Buff[1]));
		//Other frequencies corresponding to different LEDs could go here - use the array of buffers?
		memset(Frequency_Bin,0,sizeof(Frequency_Bin));//Zero everything
 80003b2:	6073      	str	r3, [r6, #4]
 80003b4:	60b3      	str	r3, [r6, #8]
 80003b6:	60f3      	str	r3, [r6, #12]
 80003b8:	6133      	str	r3, [r6, #16]
		bindex=0;			//Reset this
 80003ba:	7533      	strb	r3, [r6, #20]
		Fudgemask|=1;			//Sets a TIM3 fudge as requested
 80003bc:	6031      	str	r1, [r6, #0]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	bf00      	nop
 80003c4:	2000069c 	.word	0x2000069c
 80003c8:	20000a48 	.word	0x20000a48
 80003cc:	20000b38 	.word	0x20000b38
 80003d0:	20000b44 	.word	0x20000b44

080003d4 <PPG_Automatic_Brightness_Control>:
/**
  * @brief  Corrects PWM values to get the ADC input in the correct range
  * @param  none
  * @retval none
*/
void PPG_Automatic_Brightness_Control(void) {
 80003d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t channel;
	uint16_t vals[3]={0,0,0};
 80003d8:	f04f 0900 	mov.w	r9, #0
 80003dc:	4f58      	ldr	r7, [pc, #352]	; (8000540 <PPG_Automatic_Brightness_Control+0x16c>)
 80003de:	4c59      	ldr	r4, [pc, #356]	; (8000544 <PPG_Automatic_Brightness_Control+0x170>)
	uint16_t old_vals[3];			//This function iterates until the PWM duty correction falls below a limit set in header
	do {
		memcpy(old_vals,vals,sizeof(old_vals));//Copy over to the old values
		for(channel=0;channel<PPG_CHANNELS;channel++) {	//Loop through the channels
			uint16_t pwm=Get_PWM_0();
 80003e0:	4e59      	ldr	r6, [pc, #356]	; (8000548 <PPG_Automatic_Brightness_Control+0x174>)
/**
  * @brief  Corrects PWM values to get the ADC input in the correct range
  * @param  none
  * @retval none
*/
void PPG_Automatic_Brightness_Control(void) {
 80003e2:	b083      	sub	sp, #12
	uint8_t channel;
	uint16_t vals[3]={0,0,0};
 80003e4:	46c8      	mov	r8, r9
	do {
		memcpy(old_vals,vals,sizeof(old_vals));//Copy over to the old values
		for(channel=0;channel<PPG_CHANNELS;channel++) {	//Loop through the channels
			uint16_t pwm=Get_PWM_0();
			if(channel==1)
				pwm=Get_PWM_1();
 80003e6:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
	uint16_t vals[3]={0,0,0};
	uint16_t old_vals[3];			//This function iterates until the PWM duty correction falls below a limit set in header
	do {
		memcpy(old_vals,vals,sizeof(old_vals));//Copy over to the old values
		for(channel=0;channel<PPG_CHANNELS;channel++) {	//Loop through the channels
			uint16_t pwm=Get_PWM_0();
 80003ea:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
			if(channel==1)
				pwm=Get_PWM_1();
			else if(channel==2)
				pwm=Get_PWM_2();//Retreives the set pwm for this channel
			vals[channel]=PPG_correct_brightness(Last_PPG_Values[channel], pwm);
 80003ec:	683d      	ldr	r5, [r7, #0]
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 80003ee:	b280      	uxth	r0, r0
 80003f0:	f012 fc60 	bl	8012cb4 <__aeabi_ui2f>
 80003f4:	4955      	ldr	r1, [pc, #340]	; (800054c <PPG_Automatic_Brightness_Control+0x178>)
 80003f6:	f012 fd69 	bl	8012ecc <__aeabi_fdiv>
 80003fa:	f012 f81f 	bl	801243c <__aeabi_f2d>
 80003fe:	a34c      	add	r3, pc, #304	; (adr r3, 8000530 <PPG_Automatic_Brightness_Control+0x15c>)
 8000400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000404:	f012 f86e 	bl	80124e4 <__aeabi_dmul>
 8000408:	f012 fb4e 	bl	8012aa8 <__aeabi_d2f>
 800040c:	f010 fb98 	bl	8010b40 <sinf>
 8000410:	4683      	mov	fp, r0
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 8000412:	4628      	mov	r0, r5
 8000414:	f012 fc4e 	bl	8012cb4 <__aeabi_ui2f>
 8000418:	4601      	mov	r1, r0
 800041a:	484d      	ldr	r0, [pc, #308]	; (8000550 <PPG_Automatic_Brightness_Control+0x17c>)
 800041c:	f012 fd56 	bl	8012ecc <__aeabi_fdiv>
 8000420:	4601      	mov	r1, r0
 8000422:	4658      	mov	r0, fp
 8000424:	f012 fc9e 	bl	8012d64 <__aeabi_fmul>
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
 8000428:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 800042c:	4605      	mov	r5, r0
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
 800042e:	f012 fe55 	bl	80130dc <__aeabi_fcmpgt>
 8000432:	b108      	cbz	r0, 8000438 <PPG_Automatic_Brightness_Control+0x64>
 8000434:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	return ((asinf(corrected_pwm)/M_PI)*PWM_PERIOD);//Convert back to a PWM period value
 8000438:	4628      	mov	r0, r5
 800043a:	f010 fc13 	bl	8010c64 <asinf>
 800043e:	f011 fffd 	bl	801243c <__aeabi_f2d>
 8000442:	a33b      	add	r3, pc, #236	; (adr r3, 8000530 <PPG_Automatic_Brightness_Control+0x15c>)
 8000444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000448:	f012 f976 	bl	8012738 <__aeabi_ddiv>
 800044c:	a33a      	add	r3, pc, #232	; (adr r3, 8000538 <PPG_Automatic_Brightness_Control+0x164>)
 800044e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000452:	f012 f847 	bl	80124e4 <__aeabi_dmul>
 8000456:	f012 fb07 	bl	8012a68 <__aeabi_d2uiz>
	uint16_t vals[3]={0,0,0};
	uint16_t old_vals[3];			//This function iterates until the PWM duty correction falls below a limit set in header
	do {
		memcpy(old_vals,vals,sizeof(old_vals));//Copy over to the old values
		for(channel=0;channel<PPG_CHANNELS;channel++) {	//Loop through the channels
			uint16_t pwm=Get_PWM_0();
 800045a:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
			if(channel==1)
				pwm=Get_PWM_1();
 800045c:	f8ba 303c 	ldrh.w	r3, [sl, #60]	; 0x3c
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
	return ((asinf(corrected_pwm)/M_PI)*PWM_PERIOD);//Convert back to a PWM period value
 8000460:	b285      	uxth	r5, r0
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 8000462:	b298      	uxth	r0, r3
 8000464:	f012 fc26 	bl	8012cb4 <__aeabi_ui2f>
 8000468:	4938      	ldr	r1, [pc, #224]	; (800054c <PPG_Automatic_Brightness_Control+0x178>)
 800046a:	f012 fd2f 	bl	8012ecc <__aeabi_fdiv>
 800046e:	f011 ffe5 	bl	801243c <__aeabi_f2d>
 8000472:	a32f      	add	r3, pc, #188	; (adr r3, 8000530 <PPG_Automatic_Brightness_Control+0x15c>)
 8000474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000478:	f012 f834 	bl	80124e4 <__aeabi_dmul>
 800047c:	f012 fb14 	bl	8012aa8 <__aeabi_d2f>
			uint16_t pwm=Get_PWM_0();
			if(channel==1)
				pwm=Get_PWM_1();
			else if(channel==2)
				pwm=Get_PWM_2();//Retreives the set pwm for this channel
			vals[channel]=PPG_correct_brightness(Last_PPG_Values[channel], pwm);
 8000480:	687b      	ldr	r3, [r7, #4]
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	f010 fb5c 	bl	8010b40 <sinf>
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 8000488:	9b01      	ldr	r3, [sp, #4]
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 800048a:	4683      	mov	fp, r0
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 800048c:	4618      	mov	r0, r3
 800048e:	f012 fc11 	bl	8012cb4 <__aeabi_ui2f>
 8000492:	4601      	mov	r1, r0
 8000494:	482e      	ldr	r0, [pc, #184]	; (8000550 <PPG_Automatic_Brightness_Control+0x17c>)
 8000496:	f012 fd19 	bl	8012ecc <__aeabi_fdiv>
 800049a:	4601      	mov	r1, r0
 800049c:	4658      	mov	r0, fp
 800049e:	f012 fc61 	bl	8012d64 <__aeabi_fmul>
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
 80004a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 80004a6:	4683      	mov	fp, r0
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
 80004a8:	f012 fe18 	bl	80130dc <__aeabi_fcmpgt>
 80004ac:	b108      	cbz	r0, 80004b2 <PPG_Automatic_Brightness_Control+0xde>
 80004ae:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
	return ((asinf(corrected_pwm)/M_PI)*PWM_PERIOD);//Convert back to a PWM period value
 80004b2:	4658      	mov	r0, fp
 80004b4:	f010 fbd6 	bl	8010c64 <asinf>
 80004b8:	f011 ffc0 	bl	801243c <__aeabi_f2d>
 80004bc:	a31c      	add	r3, pc, #112	; (adr r3, 8000530 <PPG_Automatic_Brightness_Control+0x15c>)
 80004be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004c2:	f012 f939 	bl	8012738 <__aeabi_ddiv>
 80004c6:	a31c      	add	r3, pc, #112	; (adr r3, 8000538 <PPG_Automatic_Brightness_Control+0x164>)
 80004c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004cc:	f012 f80a 	bl	80124e4 <__aeabi_dmul>
 80004d0:	f012 faca 	bl	8012a68 <__aeabi_d2uiz>
			else if(channel==2)
				pwm=Get_PWM_2();//Retreives the set pwm for this channel
			vals[channel]=PPG_correct_brightness(Last_PPG_Values[channel], pwm);
		}
		//Apply the pwm duty correction here
		Set_PWM_2(vals[2]);
 80004d4:	2100      	movs	r1, #0
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
	return ((asinf(corrected_pwm)/M_PI)*PWM_PERIOD);//Convert back to a PWM period value
 80004d6:	fa1f fb80 	uxth.w	fp, r0
			else if(channel==2)
				pwm=Get_PWM_2();//Retreives the set pwm for this channel
			vals[channel]=PPG_correct_brightness(Last_PPG_Values[channel], pwm);
		}
		//Apply the pwm duty correction here
		Set_PWM_2(vals[2]);
 80004da:	481b      	ldr	r0, [pc, #108]	; (8000548 <PPG_Automatic_Brightness_Control+0x174>)
 80004dc:	f00e fd31 	bl	800ef42 <TIM_SetCompare4>
		Set_PWM_1(vals[1]);
 80004e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004e4:	4659      	mov	r1, fp
 80004e6:	f00e fd2a 	bl	800ef3e <TIM_SetCompare3>
		Set_PWM_0(vals[0]);
 80004ea:	4817      	ldr	r0, [pc, #92]	; (8000548 <PPG_Automatic_Brightness_Control+0x174>)
 80004ec:	4629      	mov	r1, r5
 80004ee:	f00e fd26 	bl	800ef3e <TIM_SetCompare3>
		uint32_t time=Millis;	//Store the system time here
 80004f2:	6822      	ldr	r2, [r4, #0]
		time+=(uint32_t)(4000.0/PPG_SAMPLE_RATE);//four samples
 80004f4:	3240      	adds	r2, #64	; 0x40
		while(Millis<time);	//Delay for a couple of PPG samples to set the analogue stabilise	
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d8fc      	bhi.n	80004f6 <PPG_Automatic_Brightness_Control+0x122>
	}while((abs(vals[0]-old_vals[0])>PWM_STEP_LIM)||(abs(vals[1]-old_vals[1])>PWM_STEP_LIM)||(abs(vals[2]-old_vals[2])>PWM_STEP_LIM));
 80004fc:	ebc8 0805 	rsb	r8, r8, r5
 8000500:	f1b8 0f00 	cmp.w	r8, #0
 8000504:	bfb8      	it	lt
 8000506:	f1c8 0800 	rsblt	r8, r8, #0
 800050a:	f1b8 0f03 	cmp.w	r8, #3
 800050e:	dc0c      	bgt.n	800052a <PPG_Automatic_Brightness_Control+0x156>
 8000510:	ebc9 090b 	rsb	r9, r9, fp
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	bfb8      	it	lt
 800051a:	f1c9 0900 	rsblt	r9, r9, #0
 800051e:	f1b9 0f03 	cmp.w	r9, #3
 8000522:	dc02      	bgt.n	800052a <PPG_Automatic_Brightness_Control+0x156>
}
 8000524:	b003      	add	sp, #12
 8000526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/**
  * @brief  Corrects PWM values to get the ADC input in the correct range
  * @param  none
  * @retval none
*/
void PPG_Automatic_Brightness_Control(void) {
 800052a:	46d9      	mov	r9, fp
 800052c:	46a8      	mov	r8, r5
 800052e:	e75c      	b.n	80003ea <PPG_Automatic_Brightness_Control+0x16>
 8000530:	54442d18 	.word	0x54442d18
 8000534:	400921fb 	.word	0x400921fb
 8000538:	00000000 	.word	0x00000000
 800053c:	40779000 	.word	0x40779000
 8000540:	20000a48 	.word	0x20000a48
 8000544:	20000b54 	.word	0x20000b54
 8000548:	40000800 	.word	0x40000800
 800054c:	43bc8000 	.word	0x43bc8000
 8000550:	48600000 	.word	0x48600000

08000554 <PPG_correct_brightness>:
  * @retval A new corrected duty cycle value
  * This will be called from the main code between pressure applications and timed refills
  * If more leds are added at different pwm frequencies, then we need to take the sum of Decimated values and scale
  * To avoid clipping of the frontend
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
 8000554:	b538      	push	{r3, r4, r5, lr}
 8000556:	4604      	mov	r4, r0
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 8000558:	4608      	mov	r0, r1
 800055a:	f012 fbab 	bl	8012cb4 <__aeabi_ui2f>
 800055e:	491e      	ldr	r1, [pc, #120]	; (80005d8 <PPG_correct_brightness+0x84>)
 8000560:	f012 fcb4 	bl	8012ecc <__aeabi_fdiv>
 8000564:	f011 ff6a 	bl	801243c <__aeabi_f2d>
 8000568:	a317      	add	r3, pc, #92	; (adr r3, 80005c8 <PPG_correct_brightness+0x74>)
 800056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800056e:	f011 ffb9 	bl	80124e4 <__aeabi_dmul>
 8000572:	f012 fa99 	bl	8012aa8 <__aeabi_d2f>
 8000576:	f010 fae3 	bl	8010b40 <sinf>
 800057a:	4605      	mov	r5, r0
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 800057c:	4620      	mov	r0, r4
 800057e:	f012 fb99 	bl	8012cb4 <__aeabi_ui2f>
 8000582:	4601      	mov	r1, r0
 8000584:	4815      	ldr	r0, [pc, #84]	; (80005dc <PPG_correct_brightness+0x88>)
 8000586:	f012 fca1 	bl	8012ecc <__aeabi_fdiv>
 800058a:	4629      	mov	r1, r5
 800058c:	f012 fbea 	bl	8012d64 <__aeabi_fmul>
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
 8000590:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  */
uint16_t PPG_correct_brightness(uint32_t Decimated_value, uint16_t PWM_value) {
	//2^adc_bits*samples_in_half_buffer/4*baseband_decimator
	//(2^12)*(64/4)*21 == 1376256 == 2*target_decimated_value TODO impliment this with macros full - atm just TARGET_ADC
	float corrected_pwm=PWM_Linear(PWM_value);
	corrected_pwm*=(float)(TARGET_ADC)/(float)Decimated_value;//This is the linearised pwm value required to get target amplitude
 8000594:	4604      	mov	r4, r0
	corrected_pwm=(corrected_pwm>1.0)?1.0:corrected_pwm;//Enforce limit on range to 100%
 8000596:	f012 fda1 	bl	80130dc <__aeabi_fcmpgt>
 800059a:	b108      	cbz	r0, 80005a0 <PPG_correct_brightness+0x4c>
 800059c:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	return ((asinf(corrected_pwm)/M_PI)*PWM_PERIOD);//Convert back to a PWM period value
 80005a0:	4620      	mov	r0, r4
 80005a2:	f010 fb5f 	bl	8010c64 <asinf>
 80005a6:	f011 ff49 	bl	801243c <__aeabi_f2d>
 80005aa:	a307      	add	r3, pc, #28	; (adr r3, 80005c8 <PPG_correct_brightness+0x74>)
 80005ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b0:	f012 f8c2 	bl	8012738 <__aeabi_ddiv>
 80005b4:	a306      	add	r3, pc, #24	; (adr r3, 80005d0 <PPG_correct_brightness+0x7c>)
 80005b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ba:	f011 ff93 	bl	80124e4 <__aeabi_dmul>
 80005be:	f012 fa53 	bl	8012a68 <__aeabi_d2uiz>
}
 80005c2:	b280      	uxth	r0, r0
 80005c4:	bd38      	pop	{r3, r4, r5, pc}
 80005c6:	bf00      	nop
 80005c8:	54442d18 	.word	0x54442d18
 80005cc:	400921fb 	.word	0x400921fb
 80005d0:	00000000 	.word	0x00000000
 80005d4:	40779000 	.word	0x40779000
 80005d8:	43bc8000 	.word	0x43bc8000
 80005dc:	48600000 	.word	0x48600000

080005e0 <PWM_Linear>:
/**
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
 80005e0:	b510      	push	{r4, lr}
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 80005e2:	f012 fb67 	bl	8012cb4 <__aeabi_ui2f>
 80005e6:	490a      	ldr	r1, [pc, #40]	; (8000610 <PWM_Linear+0x30>)
 80005e8:	f012 fc70 	bl	8012ecc <__aeabi_fdiv>
 80005ec:	f011 ff26 	bl	801243c <__aeabi_f2d>
 80005f0:	a305      	add	r3, pc, #20	; (adr r3, 8000608 <PWM_Linear+0x28>)
 80005f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f6:	f011 ff75 	bl	80124e4 <__aeabi_dmul>
 80005fa:	f012 fa55 	bl	8012aa8 <__aeabi_d2f>
}
 80005fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @brief  Output a linearised value in range 0 to 1 from a PWM duty cycle
  * @param  PWM duty cycle
  * @retval A linearised value as a float in the range 0 to 1
  */
float PWM_Linear(uint16_t PWM_value) {
	return sinf(((float)PWM_value/(float)PWM_PERIOD)*M_PI);//returns the effecive sinusoidal amplitude in range 0-1
 8000602:	f010 ba9d 	b.w	8010b40 <sinf>
 8000606:	bf00      	nop
 8000608:	54442d18 	.word	0x54442d18
 800060c:	400921fb 	.word	0x400921fb
 8000610:	43bc8000 	.word	0x43bc8000
 8000614:	f3af 8000 	nop.w

08000618 <calibrate_sensor>:
/**
  * @brief  This function calibrates the adc offset on the pressure sensor
  * @param  None
  * @retval None
  */
void calibrate_sensor(void) {
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	24ff      	movs	r4, #255	; 0xff
 800061c:	b082      	sub	sp, #8
	uint32_t pressoff=0;
 800061e:	2500      	movs	r5, #0
	volatile uint32_t l;
	for(uint8_t n=1;n;n++) {		//take 256 samples from the pressure sensor
		pressoff+=readADC2(1);
		for(l=10000;l;l--);		//~1ms between samples
 8000620:	f242 7610 	movw	r6, #10000	; 0x2710
  */
void calibrate_sensor(void) {
	uint32_t pressoff=0;
	volatile uint32_t l;
	for(uint8_t n=1;n;n++) {		//take 256 samples from the pressure sensor
		pressoff+=readADC2(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f00a fe9f 	bl	800b368 <readADC2>
		for(l=10000;l;l--);		//~1ms between samples
 800062a:	9601      	str	r6, [sp, #4]
 800062c:	9b01      	ldr	r3, [sp, #4]
  */
void calibrate_sensor(void) {
	uint32_t pressoff=0;
	volatile uint32_t l;
	for(uint8_t n=1;n;n++) {		//take 256 samples from the pressure sensor
		pressoff+=readADC2(1);
 800062e:	182d      	adds	r5, r5, r0
		for(l=10000;l;l--);		//~1ms between samples
 8000630:	b12b      	cbz	r3, 800063e <calibrate_sensor+0x26>
 8000632:	9a01      	ldr	r2, [sp, #4]
 8000634:	1e51      	subs	r1, r2, #1
 8000636:	9101      	str	r1, [sp, #4]
 8000638:	9801      	ldr	r0, [sp, #4]
 800063a:	2800      	cmp	r0, #0
 800063c:	d1f9      	bne.n	8000632 <calibrate_sensor+0x1a>
 800063e:	3c01      	subs	r4, #1
 8000640:	b2e4      	uxtb	r4, r4
  * @retval None
  */
void calibrate_sensor(void) {
	uint32_t pressoff=0;
	volatile uint32_t l;
	for(uint8_t n=1;n;n++) {		//take 256 samples from the pressure sensor
 8000642:	2c00      	cmp	r4, #0
 8000644:	d1ee      	bne.n	8000624 <calibrate_sensor+0xc>
		pressoff+=readADC2(1);
		for(l=10000;l;l--);		//~1ms between samples
	}
	pressure_offset=(float)pressoff/(float)255.0;
 8000646:	4628      	mov	r0, r5
 8000648:	f012 fb34 	bl	8012cb4 <__aeabi_ui2f>
 800064c:	4903      	ldr	r1, [pc, #12]	; (800065c <calibrate_sensor+0x44>)
 800064e:	f012 fc3d 	bl	8012ecc <__aeabi_fdiv>
 8000652:	4b03      	ldr	r3, [pc, #12]	; (8000660 <calibrate_sensor+0x48>)
 8000654:	6018      	str	r0, [r3, #0]
}
 8000656:	b002      	add	sp, #8
 8000658:	bd70      	pop	{r4, r5, r6, pc}
 800065a:	bf00      	nop
 800065c:	437f0000 	.word	0x437f0000
 8000660:	20000a54 	.word	0x20000a54

08000664 <conv_adc_diff>:
/**
  * @brief  This function returns the converted pressure - blocking
  * @param  None
  * @retval Pressure in PSI
  */
float conv_adc_diff(void) {
 8000664:	b510      	push	{r4, lr}
	uint16_t p=readADC2(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f00a fe7e 	bl	800b368 <readADC2>
	return 	(DIFF_GAIN)*((float)p-pressure_offset);
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <conv_adc_diff+0x34>)
 800066e:	681c      	ldr	r4, [r3, #0]
 8000670:	f012 fb20 	bl	8012cb4 <__aeabi_ui2f>
 8000674:	4621      	mov	r1, r4
 8000676:	f012 fa6b 	bl	8012b50 <__aeabi_fsub>
 800067a:	f011 fedf 	bl	801243c <__aeabi_f2d>
 800067e:	a304      	add	r3, pc, #16	; (adr r3, 8000690 <conv_adc_diff+0x2c>)
 8000680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000684:	f011 ff2e 	bl	80124e4 <__aeabi_dmul>
 8000688:	f012 fa0e 	bl	8012aa8 <__aeabi_d2f>
}
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	ccd68c5d 	.word	0xccd68c5d
 8000694:	3f82164a 	.word	0x3f82164a
 8000698:	20000a54 	.word	0x20000a54

0800069c <conv_diff>:
  * @brief  This function returns the converted pressure from an unsigned integer
  * @param  uint16_t from ADC
  * @retval Pressure in PSI
  */
float conv_diff(uint16_t diff) {
	return 	(DIFF_GAIN)*((float)diff-pressure_offset);
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <conv_diff+0x2c>)
/**
  * @brief  This function returns the converted pressure from an unsigned integer
  * @param  uint16_t from ADC
  * @retval Pressure in PSI
  */
float conv_diff(uint16_t diff) {
 800069e:	b510      	push	{r4, lr}
	return 	(DIFF_GAIN)*((float)diff-pressure_offset);
 80006a0:	681c      	ldr	r4, [r3, #0]
 80006a2:	f012 fb07 	bl	8012cb4 <__aeabi_ui2f>
 80006a6:	4621      	mov	r1, r4
 80006a8:	f012 fa52 	bl	8012b50 <__aeabi_fsub>
 80006ac:	f011 fec6 	bl	801243c <__aeabi_f2d>
 80006b0:	a303      	add	r3, pc, #12	; (adr r3, 80006c0 <conv_diff+0x24>)
 80006b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006b6:	f011 ff15 	bl	80124e4 <__aeabi_dmul>
 80006ba:	f012 f9f5 	bl	8012aa8 <__aeabi_d2f>
}
 80006be:	bd10      	pop	{r4, pc}
 80006c0:	ccd68c5d 	.word	0xccd68c5d
 80006c4:	3f82164a 	.word	0x3f82164a
 80006c8:	20000a54 	.word	0x20000a54

080006cc <filterloop>:
    +1.1280796826, +0.9605418945, +0.7564635992, +0.5401012303,
    +0.3351250371,
  };

float filterloop(float input)
  { for (;;)
 80006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { float sum; uint8_t i;
        for (i = 0; i < NZEROS; i++) xv[i] = xv[i+1];
 80006d0:	4c5f      	ldr	r4, [pc, #380]	; (8000850 <filterloop+0x184>)
    +1.1280796826, +0.9605418945, +0.7564635992, +0.5401012303,
    +0.3351250371,
  };

float filterloop(float input)
  { for (;;)
 80006d2:	b087      	sub	sp, #28
      { float sum; uint8_t i;
        for (i = 0; i < NZEROS; i++) xv[i] = xv[i+1];
 80006d4:	f8d4 c020 	ldr.w	ip, [r4, #32]
 80006d8:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 80006dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80006e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006e2:	f8cd c004 	str.w	ip, [sp, #4]
 80006e6:	f8cd e008 	str.w	lr, [sp, #8]
 80006ea:	9203      	str	r2, [sp, #12]
 80006ec:	9104      	str	r1, [sp, #16]
 80006ee:	9305      	str	r3, [sp, #20]
 80006f0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80006f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80006f8:	6867      	ldr	r7, [r4, #4]
 80006fa:	68a6      	ldr	r6, [r4, #8]
 80006fc:	68e5      	ldr	r5, [r4, #12]
 80006fe:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8000702:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8000706:	f8d4 a018 	ldr.w	sl, [r4, #24]
 800070a:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800070e:	9a03      	ldr	r2, [sp, #12]
 8000710:	9904      	ldr	r1, [sp, #16]
 8000712:	9b05      	ldr	r3, [sp, #20]
 8000714:	f8c4 e020 	str.w	lr, [r4, #32]
 8000718:	f8c4 c01c 	str.w	ip, [r4, #28]
 800071c:	6262      	str	r2, [r4, #36]	; 0x24
 800071e:	6027      	str	r7, [r4, #0]
 8000720:	6066      	str	r6, [r4, #4]
 8000722:	60a5      	str	r5, [r4, #8]
 8000724:	f8c4 800c 	str.w	r8, [r4, #12]
 8000728:	f8c4 9010 	str.w	r9, [r4, #16]
 800072c:	f8c4 a014 	str.w	sl, [r4, #20]
 8000730:	f8c4 b018 	str.w	fp, [r4, #24]
 8000734:	62a1      	str	r1, [r4, #40]	; 0x28
 8000736:	62e3      	str	r3, [r4, #44]	; 0x2c
        xv[NZEROS] = input / GAIN;
 8000738:	f8cd b000 	str.w	fp, [sp]
 800073c:	f011 fe7e 	bl	801243c <__aeabi_f2d>
 8000740:	a341      	add	r3, pc, #260	; (adr r3, 8000848 <filterloop+0x17c>)
 8000742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000746:	f011 fff7 	bl	8012738 <__aeabi_ddiv>
 800074a:	f012 f9ad 	bl	8012aa8 <__aeabi_d2f>
 800074e:	4683      	mov	fp, r0
 8000750:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        sum = 0.0;
        for (i = 0; i <= NZEROS; i++) sum += (xcoeffs[i] * xv[i]);
 8000754:	493f      	ldr	r1, [pc, #252]	; (8000854 <filterloop+0x188>)
 8000756:	4638      	mov	r0, r7
 8000758:	f012 fb04 	bl	8012d64 <__aeabi_fmul>
 800075c:	2100      	movs	r1, #0
 800075e:	f012 f9f9 	bl	8012b54 <__addsf3>
 8000762:	493d      	ldr	r1, [pc, #244]	; (8000858 <filterloop+0x18c>)
 8000764:	4604      	mov	r4, r0
 8000766:	4630      	mov	r0, r6
 8000768:	f012 fafc 	bl	8012d64 <__aeabi_fmul>
 800076c:	4601      	mov	r1, r0
 800076e:	4620      	mov	r0, r4
 8000770:	f012 f9f0 	bl	8012b54 <__addsf3>
 8000774:	4939      	ldr	r1, [pc, #228]	; (800085c <filterloop+0x190>)
 8000776:	4604      	mov	r4, r0
 8000778:	4628      	mov	r0, r5
 800077a:	f012 faf3 	bl	8012d64 <__aeabi_fmul>
 800077e:	4601      	mov	r1, r0
 8000780:	4620      	mov	r0, r4
 8000782:	f012 f9e7 	bl	8012b54 <__addsf3>
 8000786:	4936      	ldr	r1, [pc, #216]	; (8000860 <filterloop+0x194>)
 8000788:	4604      	mov	r4, r0
 800078a:	4640      	mov	r0, r8
 800078c:	f012 faea 	bl	8012d64 <__aeabi_fmul>
 8000790:	4601      	mov	r1, r0
 8000792:	4620      	mov	r0, r4
 8000794:	f012 f9de 	bl	8012b54 <__addsf3>
 8000798:	4932      	ldr	r1, [pc, #200]	; (8000864 <filterloop+0x198>)
 800079a:	4604      	mov	r4, r0
 800079c:	4648      	mov	r0, r9
 800079e:	f012 fae1 	bl	8012d64 <__aeabi_fmul>
 80007a2:	4601      	mov	r1, r0
 80007a4:	4620      	mov	r0, r4
 80007a6:	f012 f9d5 	bl	8012b54 <__addsf3>
 80007aa:	492f      	ldr	r1, [pc, #188]	; (8000868 <filterloop+0x19c>)
 80007ac:	4604      	mov	r4, r0
 80007ae:	4650      	mov	r0, sl
 80007b0:	f012 fad8 	bl	8012d64 <__aeabi_fmul>
 80007b4:	4601      	mov	r1, r0
 80007b6:	4620      	mov	r0, r4
 80007b8:	f012 f9cc 	bl	8012b54 <__addsf3>
 80007bc:	f8dd c000 	ldr.w	ip, [sp]
 80007c0:	4604      	mov	r4, r0
 80007c2:	492a      	ldr	r1, [pc, #168]	; (800086c <filterloop+0x1a0>)
 80007c4:	4660      	mov	r0, ip
 80007c6:	f012 facd 	bl	8012d64 <__aeabi_fmul>
 80007ca:	4601      	mov	r1, r0
 80007cc:	4620      	mov	r0, r4
 80007ce:	f012 f9c1 	bl	8012b54 <__addsf3>
 80007d2:	4925      	ldr	r1, [pc, #148]	; (8000868 <filterloop+0x19c>)
 80007d4:	4604      	mov	r4, r0
 80007d6:	9801      	ldr	r0, [sp, #4]
 80007d8:	f012 fac4 	bl	8012d64 <__aeabi_fmul>
 80007dc:	4601      	mov	r1, r0
 80007de:	4620      	mov	r0, r4
 80007e0:	f012 f9b8 	bl	8012b54 <__addsf3>
 80007e4:	491f      	ldr	r1, [pc, #124]	; (8000864 <filterloop+0x198>)
 80007e6:	4604      	mov	r4, r0
 80007e8:	9802      	ldr	r0, [sp, #8]
 80007ea:	f012 fabb 	bl	8012d64 <__aeabi_fmul>
 80007ee:	4601      	mov	r1, r0
 80007f0:	4620      	mov	r0, r4
 80007f2:	f012 f9af 	bl	8012b54 <__addsf3>
 80007f6:	491a      	ldr	r1, [pc, #104]	; (8000860 <filterloop+0x194>)
 80007f8:	4604      	mov	r4, r0
 80007fa:	9803      	ldr	r0, [sp, #12]
 80007fc:	f012 fab2 	bl	8012d64 <__aeabi_fmul>
 8000800:	4601      	mov	r1, r0
 8000802:	4620      	mov	r0, r4
 8000804:	f012 f9a6 	bl	8012b54 <__addsf3>
 8000808:	4914      	ldr	r1, [pc, #80]	; (800085c <filterloop+0x190>)
 800080a:	4604      	mov	r4, r0
 800080c:	9804      	ldr	r0, [sp, #16]
 800080e:	f012 faa9 	bl	8012d64 <__aeabi_fmul>
 8000812:	4601      	mov	r1, r0
 8000814:	4620      	mov	r0, r4
 8000816:	f012 f99d 	bl	8012b54 <__addsf3>
 800081a:	490f      	ldr	r1, [pc, #60]	; (8000858 <filterloop+0x18c>)
 800081c:	4604      	mov	r4, r0
 800081e:	9805      	ldr	r0, [sp, #20]
 8000820:	f012 faa0 	bl	8012d64 <__aeabi_fmul>
 8000824:	4601      	mov	r1, r0
 8000826:	4620      	mov	r0, r4
 8000828:	f012 f994 	bl	8012b54 <__addsf3>
 800082c:	4909      	ldr	r1, [pc, #36]	; (8000854 <filterloop+0x188>)
 800082e:	4604      	mov	r4, r0
 8000830:	4658      	mov	r0, fp
 8000832:	f012 fa97 	bl	8012d64 <__aeabi_fmul>
 8000836:	4621      	mov	r1, r4
 8000838:	f012 f98c 	bl	8012b54 <__addsf3>
        return sum;
      }
  }
 800083c:	b007      	add	sp, #28
 800083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000842:	bf00      	nop
 8000844:	f3af 8000 	nop.w
 8000848:	9663da1a 	.word	0x9663da1a
 800084c:	402662fb 	.word	0x402662fb
 8000850:	200006b4 	.word	0x200006b4
 8000854:	3eab9582 	.word	0x3eab9582
 8000858:	3f0a4413 	.word	0x3f0a4413
 800085c:	3f41a799 	.word	0x3f41a799
 8000860:	3f75e613 	.word	0x3f75e613
 8000864:	3f9064ea 	.word	0x3f9064ea
 8000868:	3f9e7aa1 	.word	0x3f9e7aa1
 800086c:	3fa3634e 	.word	0x3fa3634e

08000870 <convert_die_temp>:
#include "temperature.h"

volatile uint16_t TMP102_Data_Buffer;

float convert_die_temp(uint16_t adcval) {
 8000870:	b508      	push	{r3, lr}
	return ((float)adcval*TEMPERATURE_GAIN)-TEMPERATURE_OFFSET;
 8000872:	f012 fa1f 	bl	8012cb4 <__aeabi_ui2f>
 8000876:	4903      	ldr	r1, [pc, #12]	; (8000884 <convert_die_temp+0x14>)
 8000878:	f012 fa74 	bl	8012d64 <__aeabi_fmul>
 800087c:	4902      	ldr	r1, [pc, #8]	; (8000888 <convert_die_temp+0x18>)
 800087e:	f012 f967 	bl	8012b50 <__aeabi_fsub>
}
 8000882:	bd08      	pop	{r3, pc}
 8000884:	3e3fdb4d 	.word	0x3e3fdb4d
 8000888:	43b2cccd 	.word	0x43b2cccd

0800088c <convert_tmp102_temp>:

float convert_tmp102_temp(uint16_t adcval) {
 800088c:	b508      	push	{r3, lr}
	Flipbytes(adcval);			//Fix the endianess
 800088e:	0a03      	lsrs	r3, r0, #8
 8000890:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	adcval>>=3;				//Move to right aligned
 8000894:	f3c0 00cc 	ubfx	r0, r0, #3, #13
	if(adcval&(1<<12))			//If this bit is set, its negative
 8000898:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800089c:	d106      	bne.n	80008ac <convert_tmp102_temp+0x20>
		return ((float)(adcval&0x0FFF)*0.0625);
	return (((float)adcval)*0.0625);	//TMP102 is 0.0625C/LSB
 800089e:	f012 fa09 	bl	8012cb4 <__aeabi_ui2f>
 80008a2:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80008a6:	f012 fa5d 	bl	8012d64 <__aeabi_fmul>
}
 80008aa:	bd08      	pop	{r3, pc}

float convert_tmp102_temp(uint16_t adcval) {
	Flipbytes(adcval);			//Fix the endianess
	adcval>>=3;				//Move to right aligned
	if(adcval&(1<<12))			//If this bit is set, its negative
		return ((float)(adcval&0x0FFF)*0.0625);
 80008ac:	0501      	lsls	r1, r0, #20
 80008ae:	0d08      	lsrs	r0, r1, #20
 80008b0:	f012 fa04 	bl	8012cbc <__aeabi_i2f>
 80008b4:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80008b8:	f012 fa54 	bl	8012d64 <__aeabi_fmul>
 80008bc:	bd08      	pop	{r3, pc}
 80008be:	bf00      	nop

080008c0 <Set_System>:
* Input          : None.
* Return         : None.
*******************************************************************************/
uint16_t MAL_Config(void)
{
  return MAL_Init(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 b94d 	b.w	8000b60 <MAL_Init>
 80008c6:	bf00      	nop

080008c8 <Set_USBClock>:

  /* Enable the USB clock */ 
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_OTG_FS, ENABLE) ;
#else
  /* Select USBCLK source */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 80008c8:	2000      	movs	r0, #0
* Description    : Configures USB Clock input (48MHz)
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
 80008ca:	b510      	push	{r4, lr}

  /* Enable the USB clock */ 
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_OTG_FS, ENABLE) ;
#else
  /* Select USBCLK source */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 80008cc:	f00d fbcc 	bl	800e068 <RCC_USBCLKConfig>
  
  /* Enable the USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 80008d0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80008d4:	2101      	movs	r1, #1
#endif /* STM32L1XX_MD */
}
 80008d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#else
  /* Select USBCLK source */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
  
  /* Enable the USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 80008da:	f00d bc63 	b.w	800e1a4 <RCC_APB1PeriphClockCmd>
 80008de:	bf00      	nop

080008e0 <Enter_LowPowerMode>:
* Return         : None.
*******************************************************************************/
void Enter_LowPowerMode(void)
{
  /* Set the device state to suspend */
  bDeviceState = SUSPENDED;
 80008e0:	4b01      	ldr	r3, [pc, #4]	; (80008e8 <Enter_LowPowerMode+0x8>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	4770      	bx	lr
 80008e8:	20000720 	.word	0x20000720

080008ec <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <Leave_LowPowerMode+0x18>)
 80008ee:	7a83      	ldrb	r3, [r0, #10]
 80008f0:	b91b      	cbnz	r3, 80008fa <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <Leave_LowPowerMode+0x1c>)
 80008f4:	2001      	movs	r0, #1
 80008f6:	6018      	str	r0, [r3, #0]
 80008f8:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80008fa:	4903      	ldr	r1, [pc, #12]	; (8000908 <Leave_LowPowerMode+0x1c>)
 80008fc:	2205      	movs	r2, #5
 80008fe:	600a      	str	r2, [r1, #0]
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000ec4 	.word	0x20000ec4
 8000908:	20000720 	.word	0x20000720

0800090c <USB_Interrupts_Config>:
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 800090c:	b510      	push	{r4, lr}
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800090e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8000912:	b082      	sub	sp, #8
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8000914:	f00c fb44 	bl	800cfa0 <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
#else
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000918:	2401      	movs	r4, #1
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 800091a:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
#else
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800091c:	2214      	movs	r2, #20
 800091e:	f88d 2004 	strb.w	r2, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000922:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000926:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800092a:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 800092e:	f00c fb41 	bl	800cfb4 <NVIC_Init>

  NVIC_InitStructure.NVIC_IRQChannel = USB_HP_CAN1_TX_IRQn;
 8000932:	2113      	movs	r1, #19
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000934:	2300      	movs	r3, #0
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8000936:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  NVIC_InitStructure.NVIC_IRQChannel = USB_HP_CAN1_TX_IRQn;
 8000938:	f88d 1004 	strb.w	r1, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800093c:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000940:	f88d 3006 	strb.w	r3, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000944:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000948:	f00c fb34 	bl	800cfb4 <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_Init(&NVIC_InitStructure);
#endif /* STM32L1XX_MD */
  
}
 800094c:	b002      	add	sp, #8
 800094e:	bd10      	pop	{r4, pc}

08000950 <Led_RW_ON>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Led_RW_ON(void)
{
  GREEN_LED_ON;
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <Led_RW_ON+0xc>)
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	2201      	movs	r2, #1
 8000958:	f00d b80f 	b.w	800d97a <GPIO_WriteBit>
 800095c:	40010c00 	.word	0x40010c00

08000960 <Led_RW_OFF>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Led_RW_OFF(void)
{
  GREEN_LED_OFF;
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <Led_RW_OFF+0xc>)
 8000962:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000966:	2200      	movs	r2, #0
 8000968:	f00d b807 	b.w	800d97a <GPIO_WriteBit>
 800096c:	40010c00 	.word	0x40010c00

08000970 <USB_Configured_LED>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Configured_LED(void)
{
  RED_LED_ON;
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <USB_Configured_LED+0xc>)
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	2201      	movs	r2, #1
 8000978:	f00c bfff 	b.w	800d97a <GPIO_WriteBit>
 800097c:	40010c00 	.word	0x40010c00

08000980 <USB_NotConfigured_LED>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_NotConfigured_LED(void)
{
  RED_LED_OFF;
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <USB_NotConfigured_LED+0xc>)
 8000982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000986:	2200      	movs	r2, #0
 8000988:	f00c bff7 	b.w	800d97a <GPIO_WriteBit>
 800098c:	40010c00 	.word	0x40010c00

08000990 <USB_Cable_Config>:
  else
  {
    GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
  }
#endif /* STM32L1XX_MD */
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <Get_SerialNum>:
  Device_Serial0 = *(uint32_t*)(0x1FF80050);
  Device_Serial1 = *(uint32_t*)(0x1FF80054);
  Device_Serial2 = *(uint32_t*)(0x1FF80064);
#else  
  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
 8000994:	4a6d      	ldr	r2, [pc, #436]	; (8000b4c <Get_SerialNum+0x1b8>)
#ifdef STM32L1XX_MD
  Device_Serial0 = *(uint32_t*)(0x1FF80050);
  Device_Serial1 = *(uint32_t*)(0x1FF80054);
  Device_Serial2 = *(uint32_t*)(0x1FF80064);
#else  
  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 8000996:	496e      	ldr	r1, [pc, #440]	; (8000b50 <Get_SerialNum+0x1bc>)
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
 8000998:	1d10      	adds	r0, r2, #4
#ifdef STM32L1XX_MD
  Device_Serial0 = *(uint32_t*)(0x1FF80050);
  Device_Serial1 = *(uint32_t*)(0x1FF80054);
  Device_Serial2 = *(uint32_t*)(0x1FF80064);
#else  
  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 800099a:	680b      	ldr	r3, [r1, #0]
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
 800099c:	6811      	ldr	r1, [r2, #0]
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
 800099e:	6802      	ldr	r2, [r0, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80009a0:	b410      	push	{r4}
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
#endif /* STM32L1XX_MD */

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80009a2:	18d2      	adds	r2, r2, r3
 80009a4:	d101      	bne.n	80009aa <Get_SerialNum+0x16>
  {
    IntToUnicode (Device_Serial0, &MASS_StringSerial[2] , 8);
    IntToUnicode (Device_Serial1, &MASS_StringSerial[18], 4);
  }
}
 80009a6:	bc10      	pop	{r4}
 80009a8:	4770      	bx	lr
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009aa:	0f10      	lsrs	r0, r2, #28
 80009ac:	2809      	cmp	r0, #9
 80009ae:	d967      	bls.n	8000a80 <Get_SerialNum+0xec>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009b0:	4b68      	ldr	r3, [pc, #416]	; (8000b54 <Get_SerialNum+0x1c0>)
 80009b2:	3037      	adds	r0, #55	; 0x37
    }
    
    value = value << 4;
 80009b4:	0112      	lsls	r2, r2, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009b6:	7098      	strb	r0, [r3, #2]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009b8:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009ba:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009bc:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009be:	70dc      	strb	r4, [r3, #3]
 80009c0:	4c64      	ldr	r4, [pc, #400]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009c2:	d967      	bls.n	8000a94 <Get_SerialNum+0x100>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009c4:	3037      	adds	r0, #55	; 0x37
    }
    
    value = value << 4;
 80009c6:	0112      	lsls	r2, r2, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009c8:	7120      	strb	r0, [r4, #4]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009ca:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009cc:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009ce:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009d0:	715c      	strb	r4, [r3, #5]
 80009d2:	4c60      	ldr	r4, [pc, #384]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009d4:	d967      	bls.n	8000aa6 <Get_SerialNum+0x112>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009d6:	3037      	adds	r0, #55	; 0x37
    }
    
    value = value << 4;
 80009d8:	0112      	lsls	r2, r2, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009da:	71a0      	strb	r0, [r4, #6]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009dc:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009de:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009e0:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009e2:	71dc      	strb	r4, [r3, #7]
 80009e4:	4c5b      	ldr	r4, [pc, #364]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009e6:	d967      	bls.n	8000ab8 <Get_SerialNum+0x124>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009e8:	3037      	adds	r0, #55	; 0x37
    }
    
    value = value << 4;
 80009ea:	0112      	lsls	r2, r2, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009ec:	7220      	strb	r0, [r4, #8]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009ee:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009f0:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009f2:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80009f4:	725c      	strb	r4, [r3, #9]
 80009f6:	4c57      	ldr	r4, [pc, #348]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80009f8:	d967      	bls.n	8000aca <Get_SerialNum+0x136>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009fa:	3037      	adds	r0, #55	; 0x37
    }
    
    value = value << 4;
 80009fc:	0112      	lsls	r2, r2, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80009fe:	72a0      	strb	r0, [r4, #10]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a00:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a02:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a04:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a06:	72dc      	strb	r4, [r3, #11]
 8000a08:	4c52      	ldr	r4, [pc, #328]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a0a:	d967      	bls.n	8000adc <Get_SerialNum+0x148>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a0c:	3037      	adds	r0, #55	; 0x37
    }
    
    value = value << 4;
 8000a0e:	0112      	lsls	r2, r2, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a10:	7320      	strb	r0, [r4, #12]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a12:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a14:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a16:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a18:	735c      	strb	r4, [r3, #13]
 8000a1a:	4c4e      	ldr	r4, [pc, #312]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a1c:	d967      	bls.n	8000aee <Get_SerialNum+0x15a>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a1e:	3037      	adds	r0, #55	; 0x37
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a20:	f3c2 6203 	ubfx	r2, r2, #24, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a24:	73a0      	strb	r0, [r4, #14]
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a26:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a28:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a2a:	73d8      	strb	r0, [r3, #15]
 8000a2c:	4849      	ldr	r0, [pc, #292]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a2e:	d867      	bhi.n	8000b00 <Get_SerialNum+0x16c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a30:	3230      	adds	r2, #48	; 0x30
 8000a32:	7402      	strb	r2, [r0, #16]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a34:	0f0a      	lsrs	r2, r1, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a36:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a38:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a3a:	7458      	strb	r0, [r3, #17]
 8000a3c:	4845      	ldr	r0, [pc, #276]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a3e:	d967      	bls.n	8000b10 <Get_SerialNum+0x17c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a40:	3237      	adds	r2, #55	; 0x37
    }
    
    value = value << 4;
 8000a42:	0109      	lsls	r1, r1, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a44:	7482      	strb	r2, [r0, #18]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a46:	0f0a      	lsrs	r2, r1, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a48:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a4a:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a4c:	74d8      	strb	r0, [r3, #19]
 8000a4e:	4841      	ldr	r0, [pc, #260]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a50:	d967      	bls.n	8000b22 <Get_SerialNum+0x18e>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a52:	3237      	adds	r2, #55	; 0x37
    }
    
    value = value << 4;
 8000a54:	0109      	lsls	r1, r1, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a56:	7502      	strb	r2, [r0, #20]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a58:	0f0a      	lsrs	r2, r1, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a5a:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a5c:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a5e:	7558      	strb	r0, [r3, #21]
 8000a60:	483c      	ldr	r0, [pc, #240]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a62:	d967      	bls.n	8000b34 <Get_SerialNum+0x1a0>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a64:	3237      	adds	r2, #55	; 0x37
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a66:	f3c1 6103 	ubfx	r1, r1, #24, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000a6a:	7582      	strb	r2, [r0, #22]
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a6c:	2200      	movs	r2, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a6e:	2909      	cmp	r1, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a70:	75da      	strb	r2, [r3, #23]
 8000a72:	4a38      	ldr	r2, [pc, #224]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a74:	d867      	bhi.n	8000b46 <Get_SerialNum+0x1b2>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a76:	3130      	adds	r1, #48	; 0x30
 8000a78:	7611      	strb	r1, [r2, #24]
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	7659      	strb	r1, [r3, #25]
 8000a7e:	e792      	b.n	80009a6 <Get_SerialNum+0x12>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a80:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <Get_SerialNum+0x1c0>)
 8000a82:	3030      	adds	r0, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000a84:	0112      	lsls	r2, r2, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a86:	7098      	strb	r0, [r3, #2]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a88:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a8a:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a8c:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a8e:	70dc      	strb	r4, [r3, #3]
 8000a90:	4c30      	ldr	r4, [pc, #192]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a92:	d897      	bhi.n	80009c4 <Get_SerialNum+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a94:	3030      	adds	r0, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000a96:	0112      	lsls	r2, r2, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a98:	7120      	strb	r0, [r4, #4]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a9a:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000a9c:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000a9e:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000aa0:	715c      	strb	r4, [r3, #5]
 8000aa2:	4c2c      	ldr	r4, [pc, #176]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000aa4:	d897      	bhi.n	80009d6 <Get_SerialNum+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000aa6:	3030      	adds	r0, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000aa8:	0112      	lsls	r2, r2, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000aaa:	71a0      	strb	r0, [r4, #6]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000aac:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000aae:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ab0:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ab2:	71dc      	strb	r4, [r3, #7]
 8000ab4:	4c27      	ldr	r4, [pc, #156]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ab6:	d897      	bhi.n	80009e8 <Get_SerialNum+0x54>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000ab8:	3030      	adds	r0, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000aba:	0112      	lsls	r2, r2, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000abc:	7220      	strb	r0, [r4, #8]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000abe:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ac0:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ac2:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ac4:	725c      	strb	r4, [r3, #9]
 8000ac6:	4c23      	ldr	r4, [pc, #140]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ac8:	d897      	bhi.n	80009fa <Get_SerialNum+0x66>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000aca:	3030      	adds	r0, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000acc:	0112      	lsls	r2, r2, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000ace:	72a0      	strb	r0, [r4, #10]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ad0:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ad2:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ad4:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ad6:	72dc      	strb	r4, [r3, #11]
 8000ad8:	4c1e      	ldr	r4, [pc, #120]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ada:	d897      	bhi.n	8000a0c <Get_SerialNum+0x78>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000adc:	3030      	adds	r0, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000ade:	0112      	lsls	r2, r2, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000ae0:	7320      	strb	r0, [r4, #12]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ae2:	0f10      	lsrs	r0, r2, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ae4:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000ae6:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000ae8:	735c      	strb	r4, [r3, #13]
 8000aea:	4c1a      	ldr	r4, [pc, #104]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000aec:	d897      	bhi.n	8000a1e <Get_SerialNum+0x8a>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000aee:	3030      	adds	r0, #48	; 0x30
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000af0:	f3c2 6203 	ubfx	r2, r2, #24, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000af4:	73a0      	strb	r0, [r4, #14]
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000af6:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000af8:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000afa:	73d8      	strb	r0, [r3, #15]
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000afe:	d997      	bls.n	8000a30 <Get_SerialNum+0x9c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000b00:	3237      	adds	r2, #55	; 0x37
 8000b02:	7402      	strb	r2, [r0, #16]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b04:	0f0a      	lsrs	r2, r1, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b06:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b08:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b0a:	7458      	strb	r0, [r3, #17]
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b0e:	d897      	bhi.n	8000a40 <Get_SerialNum+0xac>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000b10:	3230      	adds	r2, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000b12:	0109      	lsls	r1, r1, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000b14:	7482      	strb	r2, [r0, #18]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b16:	0f0a      	lsrs	r2, r1, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b18:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b1a:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b1c:	74d8      	strb	r0, [r3, #19]
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b20:	d897      	bhi.n	8000a52 <Get_SerialNum+0xbe>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000b22:	3230      	adds	r2, #48	; 0x30
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8000b24:	0109      	lsls	r1, r1, #4
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000b26:	7502      	strb	r2, [r0, #20]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b28:	0f0a      	lsrs	r2, r1, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b2a:	2000      	movs	r0, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b2c:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b2e:	7558      	strb	r0, [r3, #21]
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b32:	d897      	bhi.n	8000a64 <Get_SerialNum+0xd0>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000b34:	3230      	adds	r2, #48	; 0x30
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b36:	f3c1 6103 	ubfx	r1, r1, #24, #4
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000b3a:	7582      	strb	r2, [r0, #22]
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b3c:	2200      	movs	r2, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b3e:	2909      	cmp	r1, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000b40:	75da      	strb	r2, [r3, #23]
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <Get_SerialNum+0x1c0>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8000b44:	d997      	bls.n	8000a76 <Get_SerialNum+0xe2>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000b46:	3137      	adds	r1, #55	; 0x37
 8000b48:	7611      	strb	r1, [r2, #24]
 8000b4a:	e796      	b.n	8000a7a <Get_SerialNum+0xe6>
 8000b4c:	1ffff7ec 	.word	0x1ffff7ec
 8000b50:	1ffff7e8 	.word	0x1ffff7e8
 8000b54:	20000078 	.word	0x20000078

08000b58 <MAL_Config>:
* Input          : None.
* Return         : None.
*******************************************************************************/
uint16_t MAL_Config(void)
{
  return MAL_Init(0);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 b801 	b.w	8000b60 <MAL_Init>
 8000b5e:	bf00      	nop

08000b60 <MAL_Init>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t MAL_Init(uint8_t lun)
{
 8000b60:	b538      	push	{r3, r4, r5, lr}
  uint16_t status = MAL_OK;

  switch (lun)
 8000b62:	4605      	mov	r5, r0
 8000b64:	b950      	cbnz	r0, 8000b7c <MAL_Init+0x1c>
  {
    case 0:
      Status = disk_initialize(0);/* Physical drive number (0) */
 8000b66:	f008 f953 	bl	8008e10 <disk_initialize>
 8000b6a:	4c0e      	ldr	r4, [pc, #56]	; (8000ba4 <MAL_Init+0x44>)
 8000b6c:	6020      	str	r0, [r4, #0]
      if(Status) Status = disk_initialize(0);/*Try again on error*/
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	b93b      	cbnz	r3, 8000b82 <MAL_Init+0x22>
      if(!Status) Data_Buffer=(uint32_t*)malloc(MAX_DMA_BUFF_SIZE);/*Allocate the data buffer*/
 8000b72:	6824      	ldr	r4, [r4, #0]
 8000b74:	b164      	cbz	r4, 8000b90 <MAL_Init+0x30>
      break;
#endif
    default:
      return MAL_FAIL;
  }
  return status;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
    case 1:
      NAND_Init();
      break;
#endif
    default:
      return MAL_FAIL;
 8000b7c:	2301      	movs	r3, #1
  }
  return status;
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd38      	pop	{r3, r4, r5, pc}

  switch (lun)
  {
    case 0:
      Status = disk_initialize(0);/* Physical drive number (0) */
      if(Status) Status = disk_initialize(0);/*Try again on error*/
 8000b82:	4628      	mov	r0, r5
 8000b84:	f008 f944 	bl	8008e10 <disk_initialize>
 8000b88:	6020      	str	r0, [r4, #0]
      if(!Status) Data_Buffer=(uint32_t*)malloc(MAX_DMA_BUFF_SIZE);/*Allocate the data buffer*/
 8000b8a:	6824      	ldr	r4, [r4, #0]
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d1f2      	bne.n	8000b76 <MAL_Init+0x16>
 8000b90:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000b94:	f012 faf8 	bl	8013188 <malloc>
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <MAL_Init+0x48>)
      break;
#endif
    default:
      return MAL_FAIL;
  }
  return status;
 8000b9a:	4623      	mov	r3, r4
  switch (lun)
  {
    case 0:
      Status = disk_initialize(0);/* Physical drive number (0) */
      if(Status) Status = disk_initialize(0);/*Try again on error*/
      if(!Status) Data_Buffer=(uint32_t*)malloc(MAX_DMA_BUFF_SIZE);/*Allocate the data buffer*/
 8000b9c:	6010      	str	r0, [r2, #0]
#endif
    default:
      return MAL_FAIL;
  }
  return status;
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd38      	pop	{r3, r4, r5, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200006e8 	.word	0x200006e8
 8000ba8:	20000a74 	.word	0x20000a74

08000bac <MAL_Write>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Length)
{
 8000bac:	b538      	push	{r3, r4, r5, lr}
 8000bae:	460d      	mov	r5, r1

  switch (lun)
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	b948      	cbnz	r0, 8000bc8 <MAL_Write+0x1c>
  {
    case 0:/* Physical drive number (0) */
      Status = disk_write (0, (uint8_t*)Writebuff, Memory_Offset/512, Transfer_Length/512);//assume integer sectors - 512 bytes
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	0a6a      	lsrs	r2, r5, #9
 8000bba:	f008 fac5 	bl	8009148 <disk_write>
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <MAL_Write+0x20>)
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	601a      	str	r2, [r3, #0]
      break;
#endif /* USE_STM3210E_EVAL */  
    default:
      return MAL_FAIL;
  }
  return MAL_OK;
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
    case 1:
      NAND_Write(Memory_Offset, Writebuff, Transfer_Length);
      break;
#endif /* USE_STM3210E_EVAL */  
    default:
      return MAL_FAIL;
 8000bc8:	2001      	movs	r0, #1
  }
  return MAL_OK;
}
 8000bca:	bd38      	pop	{r3, r4, r5, pc}
 8000bcc:	200006e8 	.word	0x200006e8

08000bd0 <MAL_Read>:
* Input          : None
* Output         : None
* Return         : Buffer pointer
*******************************************************************************/
uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length)
{
 8000bd0:	b538      	push	{r3, r4, r5, lr}
 8000bd2:	460d      	mov	r5, r1

  switch (lun)
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	b948      	cbnz	r0, 8000bec <MAL_Read+0x1c>
  {
    case 0: /* Physical drive number (0) */
      Status = disk_read (0, (uint8_t*)Readbuff, Memory_Offset/512, Transfer_Length/512);
 8000bd8:	4611      	mov	r1, r2
 8000bda:	0a5b      	lsrs	r3, r3, #9
 8000bdc:	0a6a      	lsrs	r2, r5, #9
 8000bde:	f008 f9f5 	bl	8008fcc <disk_read>
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <MAL_Read+0x20>)
 8000be4:	4602      	mov	r2, r0
 8000be6:	601a      	str	r2, [r3, #0]
      break;
#endif
    default:
      return MAL_FAIL;
  }
  return MAL_OK;
 8000be8:	4620      	mov	r0, r4
 8000bea:	bd38      	pop	{r3, r4, r5, pc}
      NAND_Read(Memory_Offset, Readbuff, Transfer_Length);
      ;
      break;
#endif
    default:
      return MAL_FAIL;
 8000bec:	2001      	movs	r0, #1
  }
  return MAL_OK;
}
 8000bee:	bd38      	pop	{r3, r4, r5, pc}
 8000bf0:	200006e8 	.word	0x200006e8

08000bf4 <MAL_GetStatus>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t MAL_GetStatus (uint8_t lun)
{
 8000bf4:	b570      	push	{r4, r5, r6, lr}
  //SD_CSD SD_csd;
  //uint32_t DeviceSizeMul = 0;
#endif /* USE_STM3210E_EVAL */


  if (lun == 0)
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	b138      	cbz	r0, 8000c0a <MAL_GetStatus+0x16>
      return MAL_OK;
    }
  }
#endif /* USE_STM3210E_EVAL */
	#ifdef CRT
      GREEN_LED_OFF;
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MAL_GetStatus+0x40>)
 8000bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c00:	2200      	movs	r2, #0
 8000c02:	f00c feba 	bl	800d97a <GPIO_WriteBit>
	#else
      STM_EVAL_LEDOff(LED2);
	#endif
  return MAL_FAIL;
 8000c06:	2001      	movs	r0, #1
}
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
     
#else
    //SD_GetCSDRegister(&SD_csd);
    //DeviceSizeMul = SD_csd.DeviceSizeMul + 2;
    //temp_block_mul = (1 << SD_csd.RdBlockLen)/ 512;/* Physical drive number (0) */
    disk_ioctl (0, GET_SECTOR_COUNT, &Mass_Block_Count[0]);//Sectors are the same as blocks and 512 bytes long?
 8000c0a:	4e0b      	ldr	r6, [pc, #44]	; (8000c38 <MAL_GetStatus+0x44>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4632      	mov	r2, r6
 8000c10:	f008 fb6a 	bl	80092e8 <disk_ioctl>
    //Mass_Block_Count[0] = ((SD_csd.DeviceSize + 1) * (1 << (DeviceSizeMul))) * temp_block_mul;
    Mass_Block_Size[0] = 512;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MAL_GetStatus+0x48>)
#endif /* USE_STM3210E_EVAL */
      Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
 8000c16:	6835      	ldr	r5, [r6, #0]
    //SD_GetCSDRegister(&SD_csd);
    //DeviceSizeMul = SD_csd.DeviceSizeMul + 2;
    //temp_block_mul = (1 << SD_csd.RdBlockLen)/ 512;/* Physical drive number (0) */
    disk_ioctl (0, GET_SECTOR_COUNT, &Mass_Block_Count[0]);//Sectors are the same as blocks and 512 bytes long?
    //Mass_Block_Count[0] = ((SD_csd.DeviceSize + 1) * (1 << (DeviceSizeMul))) * temp_block_mul;
    Mass_Block_Size[0] = 512;
 8000c18:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000c1c:	601e      	str	r6, [r3, #0]
#endif /* USE_STM3210E_EVAL */
      Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MAL_GetStatus+0x4c>)
 8000c20:	026d      	lsls	r5, r5, #9
	#ifdef CRT
      GREEN_LED_ON;
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MAL_GetStatus+0x40>)
 8000c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c28:	2201      	movs	r2, #1
    //temp_block_mul = (1 << SD_csd.RdBlockLen)/ 512;/* Physical drive number (0) */
    disk_ioctl (0, GET_SECTOR_COUNT, &Mass_Block_Count[0]);//Sectors are the same as blocks and 512 bytes long?
    //Mass_Block_Count[0] = ((SD_csd.DeviceSize + 1) * (1 << (DeviceSizeMul))) * temp_block_mul;
    Mass_Block_Size[0] = 512;
#endif /* USE_STM3210E_EVAL */
      Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
 8000c2a:	601d      	str	r5, [r3, #0]
	#ifdef CRT
      GREEN_LED_ON;
 8000c2c:	f00c fea5 	bl	800d97a <GPIO_WriteBit>
	#else
      STM_EVAL_LEDOn(LED2);
	#endif
      return MAL_OK;
 8000c30:	4620      	mov	r0, r4
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	20000a6c 	.word	0x20000a6c
 8000c3c:	20000a64 	.word	0x20000a64
 8000c40:	20000a5c 	.word	0x20000a5c

08000c44 <Read_Memory>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Read_Memory(uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
{
 8000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static uint32_t Offset, Length;
  uint32_t This_SD_Transfer;
  if (TransferState == TXFR_IDLE )
 8000c48:	4c31      	ldr	r4, [pc, #196]	; (8000d10 <Read_Memory+0xcc>)
 8000c4a:	7823      	ldrb	r3, [r4, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d147      	bne.n	8000ce0 <Read_Memory+0x9c>
  {
    Offset = Memory_Offset * Mass_Block_Size[lun];
 8000c50:	4e30      	ldr	r6, [pc, #192]	; (8000d14 <Read_Memory+0xd0>)
    Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
 8000c52:	2501      	movs	r5, #1
{
  static uint32_t Offset, Length;
  uint32_t This_SD_Transfer;
  if (TransferState == TXFR_IDLE )
  {
    Offset = Memory_Offset * Mass_Block_Size[lun];
 8000c54:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
    Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
 8000c58:	7025      	strb	r5, [r4, #0]
{
  static uint32_t Offset, Length;
  uint32_t This_SD_Transfer;
  if (TransferState == TXFR_IDLE )
  {
    Offset = Memory_Offset * Mass_Block_Size[lun];
 8000c5a:	fb01 f103 	mul.w	r1, r1, r3
    Length = Transfer_Length * Mass_Block_Size[lun];
 8000c5e:	fb03 f202 	mul.w	r2, r3, r2
{
  static uint32_t Offset, Length;
  uint32_t This_SD_Transfer;
  if (TransferState == TXFR_IDLE )
  {
    Offset = Memory_Offset * Mass_Block_Size[lun];
 8000c62:	6061      	str	r1, [r4, #4]
    Length = Transfer_Length * Mass_Block_Size[lun];
 8000c64:	60a2      	str	r2, [r4, #8]
    TransferState = TXFR_ONGOING;
  }
  if (TransferState == TXFR_ONGOING )
  {
    if (!Block_Read_count)			//We have completed sending the data over the USB, time to get more
 8000c66:	68e2      	ldr	r2, [r4, #12]
 8000c68:	4d29      	ldr	r5, [pc, #164]	; (8000d10 <Read_Memory+0xcc>)
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d140      	bne.n	8000cf0 <Read_Memory+0xac>
 8000c6e:	68ae      	ldr	r6, [r5, #8]
    {
      if( Length > MAX_DMA_BUFF_SIZE)		//Try to do transfers in multiple blocks at a time, but we have limited ram
	This_SD_Transfer = MAX_DMA_BUFF_SIZE;	//Amount to transfer in this SD DMA transaction
      else
	This_SD_Transfer = Length;		//Transfer the remainder
      MAL_Read(lun ,
 8000c70:	4f29      	ldr	r7, [pc, #164]	; (8000d18 <Read_Memory+0xd4>)
    Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
  }
  if (TransferState == TXFR_ONGOING )
  {
    if (!Block_Read_count)			//We have completed sending the data over the USB, time to get more
 8000c72:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
 8000c76:	bf28      	it	cs
 8000c78:	f44f 56a0 	movcs.w	r6, #5120	; 0x1400
    {
      if( Length > MAX_DMA_BUFF_SIZE)		//Try to do transfers in multiple blocks at a time, but we have limited ram
	This_SD_Transfer = MAX_DMA_BUFF_SIZE;	//Amount to transfer in this SD DMA transaction
      else
	This_SD_Transfer = Length;		//Transfer the remainder
      MAL_Read(lun ,
 8000c7c:	b2b3      	uxth	r3, r6
 8000c7e:	6869      	ldr	r1, [r5, #4]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	f7ff ffa5 	bl	8000bd0 <MAL_Read>
               Offset ,
               Data_Buffer,
               This_SD_Transfer);

      USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);
 8000c86:	6839      	ldr	r1, [r7, #0]
 8000c88:	2081      	movs	r0, #129	; 0x81
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	f00f ff32 	bl	8010af4 <USB_SIL_Write>

      Block_Read_count = This_SD_Transfer - BULK_MAX_PACKET_SIZE;
      Block_offset = BULK_MAX_PACKET_SIZE;
 8000c90:	4922      	ldr	r1, [pc, #136]	; (8000d1c <Read_Memory+0xd8>)
               Data_Buffer,
               This_SD_Transfer);

      USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);

      Block_Read_count = This_SD_Transfer - BULK_MAX_PACKET_SIZE;
 8000c92:	3e40      	subs	r6, #64	; 0x40
      Block_offset = BULK_MAX_PACKET_SIZE;
 8000c94:	2040      	movs	r0, #64	; 0x40
               Data_Buffer,
               This_SD_Transfer);

      USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);

      Block_Read_count = This_SD_Transfer - BULK_MAX_PACKET_SIZE;
 8000c96:	60ee      	str	r6, [r5, #12]
      Block_offset = BULK_MAX_PACKET_SIZE;
 8000c98:	6008      	str	r0, [r1, #0]

      Block_Read_count -= BULK_MAX_PACKET_SIZE;
      Block_offset += BULK_MAX_PACKET_SIZE;
    }

    SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	f00f fd09 	bl	80106b4 <SetEPTxCount>
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2130      	movs	r1, #48	; 0x30
 8000ca6:	f00f fb37 	bl	8010318 <SetEPTxStatus>
#endif    
    Offset += BULK_MAX_PACKET_SIZE;
    Length -= BULK_MAX_PACKET_SIZE;

    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <Read_Memory+0xdc>)

    SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif    
    Offset += BULK_MAX_PACKET_SIZE;
 8000cac:	6860      	ldr	r0, [r4, #4]
    Length -= BULK_MAX_PACKET_SIZE;

    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
 8000cae:	689a      	ldr	r2, [r3, #8]
    SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif    
    Offset += BULK_MAX_PACKET_SIZE;
    Length -= BULK_MAX_PACKET_SIZE;
 8000cb0:	68a1      	ldr	r1, [r4, #8]

    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
 8000cb2:	3a40      	subs	r2, #64	; 0x40
 8000cb4:	609a      	str	r2, [r3, #8]

    SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif    
    Offset += BULK_MAX_PACKET_SIZE;
 8000cb6:	3040      	adds	r0, #64	; 0x40
    Length -= BULK_MAX_PACKET_SIZE;
 8000cb8:	3940      	subs	r1, #64	; 0x40

    SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif    
    Offset += BULK_MAX_PACKET_SIZE;
 8000cba:	6060      	str	r0, [r4, #4]
    Length -= BULK_MAX_PACKET_SIZE;
 8000cbc:	60a1      	str	r1, [r4, #8]

    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
    Led_RW_ON();
 8000cbe:	f7ff fe47 	bl	8000950 <Led_RW_ON>
  }
  if (Length == 0)
 8000cc2:	68a3      	ldr	r3, [r4, #8]
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <Read_Memory+0xcc>)
 8000cc6:	b98b      	cbnz	r3, 8000cec <Read_Memory+0xa8>
  {
    Block_Read_count = 0;
    Block_offset = 0;
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <Read_Memory+0xd8>)
    Offset = 0;
    Bot_State = BOT_DATA_IN_LAST;
 8000cca:	4916      	ldr	r1, [pc, #88]	; (8000d24 <Read_Memory+0xe0>)
    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
    Led_RW_ON();
  }
  if (Length == 0)
  {
    Block_Read_count = 0;
 8000ccc:	60d3      	str	r3, [r2, #12]
    Block_offset = 0;
 8000cce:	6003      	str	r3, [r0, #0]
    Offset = 0;
    Bot_State = BOT_DATA_IN_LAST;
 8000cd0:	2003      	movs	r0, #3
  }
  if (Length == 0)
  {
    Block_Read_count = 0;
    Block_offset = 0;
    Offset = 0;
 8000cd2:	6053      	str	r3, [r2, #4]
    Bot_State = BOT_DATA_IN_LAST;
 8000cd4:	7008      	strb	r0, [r1, #0]
    TransferState = TXFR_IDLE;
 8000cd6:	7013      	strb	r3, [r2, #0]
    Led_RW_OFF();
  }
}
 8000cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Block_Read_count = 0;
    Block_offset = 0;
    Offset = 0;
    Bot_State = BOT_DATA_IN_LAST;
    TransferState = TXFR_IDLE;
    Led_RW_OFF();
 8000cdc:	f7ff be40 	b.w	8000960 <Led_RW_OFF>
  {
    Offset = Memory_Offset * Mass_Block_Size[lun];
    Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
  }
  if (TransferState == TXFR_ONGOING )
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d0c0      	beq.n	8000c66 <Read_Memory+0x22>
    Length -= BULK_MAX_PACKET_SIZE;

    CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
    Led_RW_ON();
  }
  if (Length == 0)
 8000ce4:	68a3      	ldr	r3, [r4, #8]
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <Read_Memory+0xcc>)
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0ed      	beq.n	8000cc8 <Read_Memory+0x84>
 8000cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Block_Read_count = This_SD_Transfer - BULK_MAX_PACKET_SIZE;
      Block_offset = BULK_MAX_PACKET_SIZE;
    }
    else
    {
      USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
 8000cf0:	4e0a      	ldr	r6, [pc, #40]	; (8000d1c <Read_Memory+0xd8>)
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <Read_Memory+0xd4>)
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	6801      	ldr	r1, [r0, #0]
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	18c9      	adds	r1, r1, r3
 8000cfc:	2081      	movs	r0, #129	; 0x81
 8000cfe:	f00f fef9 	bl	8010af4 <USB_SIL_Write>

      Block_Read_count -= BULK_MAX_PACKET_SIZE;
 8000d02:	68ea      	ldr	r2, [r5, #12]
 8000d04:	3a40      	subs	r2, #64	; 0x40
 8000d06:	60ea      	str	r2, [r5, #12]
      Block_offset += BULK_MAX_PACKET_SIZE;
 8000d08:	6833      	ldr	r3, [r6, #0]
 8000d0a:	3340      	adds	r3, #64	; 0x40
 8000d0c:	6033      	str	r3, [r6, #0]
 8000d0e:	e7c4      	b.n	8000c9a <Read_Memory+0x56>
 8000d10:	200006ec 	.word	0x200006ec
 8000d14:	20000a64 	.word	0x20000a64
 8000d18:	20000a74 	.word	0x20000a74
 8000d1c:	20000a78 	.word	0x20000a78
 8000d20:	20000aa8 	.word	0x20000aa8
 8000d24:	20000aa2 	.word	0x20000aa2

08000d28 <Write_Memory>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
{
 8000d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  static uint32_t W_Offset, W_Length;

  uint32_t temp =  Counter + 64;
 8000d2c:	4c33      	ldr	r4, [pc, #204]	; (8000dfc <Write_Memory+0xd4>)

  if (TransferState == TXFR_IDLE )
 8000d2e:	7823      	ldrb	r3, [r4, #0]
void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
{

  static uint32_t W_Offset, W_Length;

  uint32_t temp =  Counter + 64;
 8000d30:	6925      	ldr	r5, [r4, #16]

  if (TransferState == TXFR_IDLE )
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d155      	bne.n	8000de2 <Write_Memory+0xba>
  {
    W_Offset = Memory_Offset * Mass_Block_Size[lun];
 8000d36:	4f32      	ldr	r7, [pc, #200]	; (8000e00 <Write_Memory+0xd8>)
    W_Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
 8000d38:	2601      	movs	r6, #1

  uint32_t temp =  Counter + 64;

  if (TransferState == TXFR_IDLE )
  {
    W_Offset = Memory_Offset * Mass_Block_Size[lun];
 8000d3a:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
    W_Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
 8000d3e:	7026      	strb	r6, [r4, #0]

  uint32_t temp =  Counter + 64;

  if (TransferState == TXFR_IDLE )
  {
    W_Offset = Memory_Offset * Mass_Block_Size[lun];
 8000d40:	fb01 f103 	mul.w	r1, r1, r3
    W_Length = Transfer_Length * Mass_Block_Size[lun];
 8000d44:	fb03 f202 	mul.w	r2, r3, r2

  uint32_t temp =  Counter + 64;

  if (TransferState == TXFR_IDLE )
  {
    W_Offset = Memory_Offset * Mass_Block_Size[lun];
 8000d48:	6161      	str	r1, [r4, #20]
    W_Length = Transfer_Length * Mass_Block_Size[lun];
 8000d4a:	61a2      	str	r2, [r4, #24]
  }

  if (TransferState == TXFR_ONGOING )
  {

    for (Idx = 0 ; Counter < temp; Counter++)
 8000d4c:	6922      	ldr	r2, [r4, #16]
 8000d4e:	4f2d      	ldr	r7, [pc, #180]	; (8000e04 <Write_Memory+0xdc>)
void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
{

  static uint32_t W_Offset, W_Length;

  uint32_t temp =  Counter + 64;
 8000d50:	3540      	adds	r5, #64	; 0x40
  }

  if (TransferState == TXFR_ONGOING )
  {

    for (Idx = 0 ; Counter < temp; Counter++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	4295      	cmp	r5, r2
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	d911      	bls.n	8000d7e <Write_Memory+0x56>
 8000d5a:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8000e0c <Write_Memory+0xe4>
 8000d5e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8000e18 <Write_Memory+0xf0>
    {
      *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
 8000d62:	6922      	ldr	r2, [r4, #16]
 8000d64:	f81e 6003 	ldrb.w	r6, [lr, r3]
 8000d68:	f8dc 1000 	ldr.w	r1, [ip]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	548e      	strb	r6, [r1, r2]
  }

  if (TransferState == TXFR_ONGOING )
  {

    for (Idx = 0 ; Counter < temp; Counter++)
 8000d70:	6922      	ldr	r2, [r4, #16]
    {
      *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
 8000d72:	603b      	str	r3, [r7, #0]
  }

  if (TransferState == TXFR_ONGOING )
  {

    for (Idx = 0 ; Counter < temp; Counter++)
 8000d74:	1c56      	adds	r6, r2, #1
 8000d76:	6126      	str	r6, [r4, #16]
 8000d78:	6921      	ldr	r1, [r4, #16]
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	d8f1      	bhi.n	8000d62 <Write_Memory+0x3a>
    {
      *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
    }

    W_Offset += Data_Len;
 8000d7e:	4d22      	ldr	r5, [pc, #136]	; (8000e08 <Write_Memory+0xe0>)
 8000d80:	6962      	ldr	r2, [r4, #20]
 8000d82:	882b      	ldrh	r3, [r5, #0]
    W_Length -= Data_Len;
 8000d84:	69a1      	ldr	r1, [r4, #24]

    if (Counter>=MAX_DMA_BUFF_SIZE || !W_Length)
 8000d86:	6926      	ldr	r6, [r4, #16]
    for (Idx = 0 ; Counter < temp; Counter++)
    {
      *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
    }

    W_Offset += Data_Len;
 8000d88:	189a      	adds	r2, r3, r2
    W_Length -= Data_Len;
 8000d8a:	1ac9      	subs	r1, r1, r3

    if (Counter>=MAX_DMA_BUFF_SIZE || !W_Length)
 8000d8c:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
    for (Idx = 0 ; Counter < temp; Counter++)
    {
      *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
    }

    W_Offset += Data_Len;
 8000d90:	6162      	str	r2, [r4, #20]
    W_Length -= Data_Len;
 8000d92:	61a1      	str	r1, [r4, #24]

    if (Counter>=MAX_DMA_BUFF_SIZE || !W_Length)
 8000d94:	d200      	bcs.n	8000d98 <Write_Memory+0x70>
 8000d96:	b961      	cbnz	r1, 8000db2 <Write_Memory+0x8a>
    {
     MAL_Write(lun ,
 8000d98:	4919      	ldr	r1, [pc, #100]	; (8000e00 <Write_Memory+0xd8>)
 8000d9a:	6923      	ldr	r3, [r4, #16]
 8000d9c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	1a51      	subs	r1, r2, r1
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <Write_Memory+0xe4>)
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	f7ff ff00 	bl	8000bac <MAL_Write>
                W_Offset - Mass_Block_Size[lun],
                Data_Buffer,
                Counter);
     Counter=0;
 8000dac:	2000      	movs	r0, #0
 8000dae:	882b      	ldrh	r3, [r5, #0]
 8000db0:	6120      	str	r0, [r4, #16]
    }

    CSW.dDataResidue -= Data_Len;
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <Write_Memory+0xe8>)
  #ifndef STM32F10X_CL
    SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
 8000db4:	2002      	movs	r0, #2
                Data_Buffer,
                Counter);
     Counter=0;
    }

    CSW.dDataResidue -= Data_Len;
 8000db6:	6895      	ldr	r5, [r2, #8]
  #ifndef STM32F10X_CL
    SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
 8000db8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
                Data_Buffer,
                Counter);
     Counter=0;
    }

    CSW.dDataResidue -= Data_Len;
 8000dbc:	1aeb      	subs	r3, r5, r3
 8000dbe:	6093      	str	r3, [r2, #8]
  #ifndef STM32F10X_CL
    SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
 8000dc0:	f00f faca 	bl	8010358 <SetEPRxStatus>
  #endif /* STM32F10X_CL */

    Led_RW_ON();
 8000dc4:	f7ff fdc4 	bl	8000950 <Led_RW_ON>
  }

  if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
 8000dc8:	69a0      	ldr	r0, [r4, #24]
 8000dca:	b978      	cbnz	r0, 8000dec <Write_Memory+0xc4>
  {
    Counter = 0;
 8000dcc:	2500      	movs	r5, #0
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8000dce:	4628      	mov	r0, r5
 8000dd0:	2101      	movs	r1, #1
    Led_RW_ON();
  }

  if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
  {
    Counter = 0;
 8000dd2:	6125      	str	r5, [r4, #16]
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8000dd4:	f000 faf8 	bl	80013c8 <Set_CSW>
    TransferState = TXFR_IDLE;
 8000dd8:	7025      	strb	r5, [r4, #0]
    Led_RW_OFF();
  }
}
 8000dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
  {
    Counter = 0;
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    TransferState = TXFR_IDLE;
    Led_RW_OFF();
 8000dde:	f7ff bdbf 	b.w	8000960 <Led_RW_OFF>
    W_Offset = Memory_Offset * Mass_Block_Size[lun];
    W_Length = Transfer_Length * Mass_Block_Size[lun];
    TransferState = TXFR_ONGOING;
  }

  if (TransferState == TXFR_ONGOING )
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d0b2      	beq.n	8000d4c <Write_Memory+0x24>
  #endif /* STM32F10X_CL */

    Led_RW_ON();
  }

  if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
 8000de6:	69a0      	ldr	r0, [r4, #24]
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d0ef      	beq.n	8000dcc <Write_Memory+0xa4>
 8000dec:	4909      	ldr	r1, [pc, #36]	; (8000e14 <Write_Memory+0xec>)
 8000dee:	f891 c000 	ldrb.w	ip, [r1]
 8000df2:	f1bc 0f04 	cmp.w	ip, #4
 8000df6:	d0e9      	beq.n	8000dcc <Write_Memory+0xa4>
 8000df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dfc:	200006ec 	.word	0x200006ec
 8000e00:	20000a64 	.word	0x20000a64
 8000e04:	20000a7c 	.word	0x20000a7c
 8000e08:	20000aa0 	.word	0x20000aa0
 8000e0c:	20000a74 	.word	0x20000a74
 8000e10:	20000aa8 	.word	0x20000aa8
 8000e14:	20000aa2 	.word	0x20000aa2
 8000e18:	20000abc 	.word	0x20000abc

08000e1c <Mass_Storage_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Mass_Storage_In (void)
{
 8000e1c:	b570      	push	{r4, r5, r6, lr}
  switch (Bot_State)
 8000e1e:	4c1b      	ldr	r4, [pc, #108]	; (8000e8c <Mass_Storage_In+0x70>)
 8000e20:	7820      	ldrb	r0, [r4, #0]
 8000e22:	1e83      	subs	r3, r0, #2
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d807      	bhi.n	8000e38 <Mass_Storage_In+0x1c>
 8000e28:	e8df f003 	tbb	[pc, r3]
 8000e2c:	07071002 	.word	0x07071002
        SetEPRxStatus(EP2_OUT, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
      }
    #endif /* STM32F10X_CL */
      break;
    case BOT_DATA_IN:
      switch (CBW.CB[0])
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <Mass_Storage_In+0x74>)
 8000e32:	7bd9      	ldrb	r1, [r3, #15]
 8000e34:	2928      	cmp	r1, #40	; 0x28
 8000e36:	d020      	beq.n	8000e7a <Mass_Storage_In+0x5e>
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
{
  switch (Bot_State)
  {
    case BOT_CSW_Send:
    case BOT_ERROR:
      Bot_State = BOT_IDLE;
 8000e3a:	2200      	movs	r2, #0
    #ifndef STM32F10X_CL
      SetEPRxStatus(ENDP2, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
{
  switch (Bot_State)
  {
    case BOT_CSW_Send:
    case BOT_ERROR:
      Bot_State = BOT_IDLE;
 8000e42:	7022      	strb	r2, [r4, #0]
      break;

    default:
      break;
  }
}
 8000e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  {
    case BOT_CSW_Send:
    case BOT_ERROR:
      Bot_State = BOT_IDLE;
    #ifndef STM32F10X_CL
      SetEPRxStatus(ENDP2, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
 8000e48:	f00f ba86 	b.w	8010358 <SetEPRxStatus>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <Mass_Storage_In+0x78>)
 8000e4e:	4d12      	ldr	r5, [pc, #72]	; (8000e98 <Mass_Storage_In+0x7c>)
  CSW.bStatus = CSW_Status;

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 8000e50:	4619      	mov	r1, r3
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 8000e52:	601d      	str	r5, [r3, #0]
  CSW.bStatus = CSW_Status;
 8000e54:	2500      	movs	r5, #0

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 8000e56:	220d      	movs	r2, #13
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
  CSW.bStatus = CSW_Status;
 8000e58:	731d      	strb	r5, [r3, #12]

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 8000e5a:	2081      	movs	r0, #129	; 0x81
 8000e5c:	f00f fe4a 	bl	8010af4 <USB_SIL_Write>
  Bot_State = BOT_ERROR;
  if (Send_Permission)
  {
    Bot_State = BOT_CSW_Send;
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
 8000e60:	2001      	movs	r0, #1
 8000e62:	2130      	movs	r1, #48	; 0x30
  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);

  Bot_State = BOT_ERROR;
  if (Send_Permission)
  {
    Bot_State = BOT_CSW_Send;
 8000e64:	2304      	movs	r3, #4
 8000e66:	7023      	strb	r3, [r4, #0]
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
 8000e68:	f00f fa56 	bl	8010318 <SetEPTxStatus>
      }
      break;
    case BOT_DATA_IN_LAST:
      Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    #ifndef STM32F10X_CL
      SetEPRxStatus(ENDP2, EP_RX_VALID);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
      break;

    default:
      break;
  }
}
 8000e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }
      break;
    case BOT_DATA_IN_LAST:
      Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    #ifndef STM32F10X_CL
      SetEPRxStatus(ENDP2, EP_RX_VALID);
 8000e76:	f00f ba6f 	b.w	8010358 <SetEPRxStatus>
      break;
    case BOT_DATA_IN:
      switch (CBW.CB[0])
      {
        case SCSI_READ10:
          SCSI_Read10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 8000e7a:	7b58      	ldrb	r0, [r3, #13]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <Mass_Storage_In+0x80>)
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <Mass_Storage_In+0x84>)
 8000e80:	6811      	ldr	r1, [r2, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
      break;

    default:
      break;
  }
}
 8000e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    case BOT_DATA_IN:
      switch (CBW.CB[0])
      {
        case SCSI_READ10:
          SCSI_Read10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 8000e88:	f000 be24 	b.w	8001ad4 <SCSI_Read10_Cmd>
 8000e8c:	20000aa2 	.word	0x20000aa2
 8000e90:	20000a80 	.word	0x20000a80
 8000e94:	20000aa8 	.word	0x20000aa8
 8000e98:	53425355 	.word	0x53425355
 8000e9c:	20000aa4 	.word	0x20000aa4
 8000ea0:	20000ab8 	.word	0x20000ab8

08000ea4 <CBW_Decode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CBW_Decode(void)
{
 8000ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000ea8:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <CBW_Decode+0x154>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CBW_Decode(void)
{
 8000eaa:	b081      	sub	sp, #4
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000eac:	f8b3 9000 	ldrh.w	r9, [r3]
 8000eb0:	f1b9 0f00 	cmp.w	r9, #0
 8000eb4:	f000 81a5 	beq.w	8001202 <CBW_Decode+0x35e>
 8000eb8:	ea4f 0a99 	mov.w	sl, r9, lsr #2
 8000ebc:	f1b9 0f03 	cmp.w	r9, #3
 8000ec0:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8000ec4:	f240 8208 	bls.w	80012d8 <CBW_Decode+0x434>
 8000ec8:	f1bb 0f00 	cmp.w	fp, #0
 8000ecc:	f000 8204 	beq.w	80012d8 <CBW_Decode+0x434>
 8000ed0:	494a      	ldr	r1, [pc, #296]	; (8000ffc <CBW_Decode+0x158>)
 8000ed2:	4c4b      	ldr	r4, [pc, #300]	; (8001000 <CBW_Decode+0x15c>)
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	f852 5b04 	ldr.w	r5, [r2], #4
 8000eda:	2601      	movs	r6, #1
 8000edc:	f10a 30ff 	add.w	r0, sl, #4294967295
 8000ee0:	4623      	mov	r3, r4
 8000ee2:	45b2      	cmp	sl, r6
 8000ee4:	f843 5b04 	str.w	r5, [r3], #4
 8000ee8:	f000 0003 	and.w	r0, r0, #3
 8000eec:	d92a      	bls.n	8000f44 <CBW_Decode+0xa0>
 8000eee:	b1b0      	cbz	r0, 8000f1e <CBW_Decode+0x7a>
 8000ef0:	2801      	cmp	r0, #1
 8000ef2:	d00d      	beq.n	8000f10 <CBW_Decode+0x6c>
 8000ef4:	2802      	cmp	r0, #2
 8000ef6:	d006      	beq.n	8000f06 <CBW_Decode+0x62>
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	2602      	movs	r6, #2
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	f101 0208 	add.w	r2, r1, #8
 8000f02:	f104 0308 	add.w	r3, r4, #8
 8000f06:	f852 5b04 	ldr.w	r5, [r2], #4
 8000f0a:	3601      	adds	r6, #1
 8000f0c:	f843 5b04 	str.w	r5, [r3], #4
 8000f10:	f852 0b04 	ldr.w	r0, [r2], #4
 8000f14:	3601      	adds	r6, #1
 8000f16:	45b2      	cmp	sl, r6
 8000f18:	f843 0b04 	str.w	r0, [r3], #4
 8000f1c:	d912      	bls.n	8000f44 <CBW_Decode+0xa0>
 8000f1e:	4615      	mov	r5, r2
 8000f20:	f855 8b04 	ldr.w	r8, [r5], #4
 8000f24:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8000f28:	68d7      	ldr	r7, [r2, #12]
 8000f2a:	686d      	ldr	r5, [r5, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f840 8b04 	str.w	r8, [r0], #4
 8000f32:	3604      	adds	r6, #4
 8000f34:	f8c3 c004 	str.w	ip, [r3, #4]
 8000f38:	3210      	adds	r2, #16
 8000f3a:	6045      	str	r5, [r0, #4]
 8000f3c:	60df      	str	r7, [r3, #12]
 8000f3e:	3310      	adds	r3, #16
 8000f40:	45b2      	cmp	sl, r6
 8000f42:	d8ec      	bhi.n	8000f1e <CBW_Decode+0x7a>
 8000f44:	45d9      	cmp	r9, fp
 8000f46:	d031      	beq.n	8000fac <CBW_Decode+0x108>
 8000f48:	ea6f 030b 	mvn.w	r3, fp
 8000f4c:	eb03 0209 	add.w	r2, r3, r9
 8000f50:	f811 000b 	ldrb.w	r0, [r1, fp]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f54:	f10b 0301 	add.w	r3, fp, #1
 8000f58:	4599      	cmp	r9, r3
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000f5a:	f804 000b 	strb.w	r0, [r4, fp]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f62:	d923      	bls.n	8000fac <CBW_Decode+0x108>
 8000f64:	b182      	cbz	r2, 8000f88 <CBW_Decode+0xe4>
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d009      	beq.n	8000f7e <CBW_Decode+0xda>
 8000f6a:	2a02      	cmp	r2, #2
 8000f6c:	d002      	beq.n	8000f74 <CBW_Decode+0xd0>
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000f6e:	5ccd      	ldrb	r5, [r1, r3]
 8000f70:	54e5      	strb	r5, [r4, r3]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f72:	3301      	adds	r3, #1
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000f74:	f811 c003 	ldrb.w	ip, [r1, r3]
 8000f78:	f804 c003 	strb.w	ip, [r4, r3]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f7c:	3301      	adds	r3, #1
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000f7e:	5cc8      	ldrb	r0, [r1, r3]
 8000f80:	54e0      	strb	r0, [r4, r3]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f82:	3301      	adds	r3, #1
 8000f84:	4599      	cmp	r9, r3
 8000f86:	d911      	bls.n	8000fac <CBW_Decode+0x108>
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000f88:	f811 8003 	ldrb.w	r8, [r1, r3]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	1cd8      	adds	r0, r3, #3
 8000f90:	1c9d      	adds	r5, r3, #2
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000f92:	f811 c002 	ldrb.w	ip, [r1, r2]
 8000f96:	5d4f      	ldrb	r7, [r1, r5]
 8000f98:	5c0e      	ldrb	r6, [r1, r0]
 8000f9a:	f804 8003 	strb.w	r8, [r4, r3]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	4599      	cmp	r9, r3
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 8000fa2:	f804 c002 	strb.w	ip, [r4, r2]
 8000fa6:	5567      	strb	r7, [r4, r5]
 8000fa8:	5426      	strb	r6, [r4, r0]
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 8000faa:	d8ed      	bhi.n	8000f88 <CBW_Decode+0xe4>
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
  }
  CSW.dTag = CBW.dTag;
 8000fac:	4d15      	ldr	r5, [pc, #84]	; (8001004 <CBW_Decode+0x160>)
 8000fae:	6863      	ldr	r3, [r4, #4]
  CSW.dDataResidue = CBW.dDataLength;
 8000fb0:	68a1      	ldr	r1, [r4, #8]
  if (Data_Len != BOT_CBW_PACKET_LENGTH)
 8000fb2:	f1b9 0f1f 	cmp.w	r9, #31

  for (Counter = 0; Counter < Data_Len; Counter++)
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
  }
  CSW.dTag = CBW.dTag;
 8000fb6:	606b      	str	r3, [r5, #4]
  CSW.dDataResidue = CBW.dDataLength;
 8000fb8:	60a9      	str	r1, [r5, #8]
  if (Data_Len != BOT_CBW_PACKET_LENGTH)
 8000fba:	f040 8128 	bne.w	800120e <CBW_Decode+0x36a>
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, PARAMETER_LIST_LENGTH_ERROR);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    return;
  }

  if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
 8000fbe:	4e10      	ldr	r6, [pc, #64]	; (8001000 <CBW_Decode+0x15c>)
 8000fc0:	7bf3      	ldrb	r3, [r6, #15]
 8000fc2:	2b28      	cmp	r3, #40	; 0x28
 8000fc4:	f000 80d9 	beq.w	800117a <CBW_Decode+0x2d6>
 8000fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000fca:	f000 80d6 	beq.w	800117a <CBW_Decode+0x2d6>
    SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
    /* Calculate the Number of Blocks to transfer */
    SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
  }

  if (CBW.dSignature == BOT_CBW_SIGNATURE)
 8000fce:	6820      	ldr	r0, [r4, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <CBW_Decode+0x164>)
 8000fd2:	4e0b      	ldr	r6, [pc, #44]	; (8001000 <CBW_Decode+0x15c>)
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	f040 80ea 	bne.w	80011ae <CBW_Decode+0x30a>
  {
    /* Valid CBW */
    if ((CBW.bLUN > Max_Lun) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
 8000fda:	4a0c      	ldr	r2, [pc, #48]	; (800100c <CBW_Decode+0x168>)
 8000fdc:	7b70      	ldrb	r0, [r6, #13]
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	4288      	cmp	r0, r1
 8000fe2:	f200 80f1 	bhi.w	80011c8 <CBW_Decode+0x324>
 8000fe6:	7bb2      	ldrb	r2, [r6, #14]
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	f000 80ed 	beq.w	80011c8 <CBW_Decode+0x324>
 8000fee:	2a10      	cmp	r2, #16
 8000ff0:	f200 80ea 	bhi.w	80011c8 <CBW_Decode+0x324>
 8000ff4:	e00c      	b.n	8001010 <CBW_Decode+0x16c>
 8000ff6:	bf00      	nop
 8000ff8:	20000aa0 	.word	0x20000aa0
 8000ffc:	20000abc 	.word	0x20000abc
 8001000:	20000a80 	.word	0x20000a80
 8001004:	20000aa8 	.word	0x20000aa8
 8001008:	43425355 	.word	0x43425355
 800100c:	2000071c 	.word	0x2000071c
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    }
    else
    {
      switch (CBW.CB[0])
 8001010:	2baf      	cmp	r3, #175	; 0xaf
 8001012:	f200 814a 	bhi.w	80012aa <CBW_Decode+0x406>
 8001016:	e8df f013 	tbh	[pc, r3, lsl #1]
 800101a:	0143      	.short	0x0143
 800101c:	01480148 	.word	0x01480148
 8001020:	0139013e 	.word	0x0139013e
 8001024:	01480148 	.word	0x01480148
 8001028:	01090148 	.word	0x01090148
 800102c:	01090148 	.word	0x01090148
 8001030:	01480148 	.word	0x01480148
 8001034:	01480148 	.word	0x01480148
 8001038:	01480148 	.word	0x01480148
 800103c:	012f0148 	.word	0x012f0148
 8001040:	01480148 	.word	0x01480148
 8001044:	01480109 	.word	0x01480109
 8001048:	01480148 	.word	0x01480148
 800104c:	01250148 	.word	0x01250148
 8001050:	0148010e 	.word	0x0148010e
 8001054:	010e0109 	.word	0x010e0109
 8001058:	01480148 	.word	0x01480148
 800105c:	01480148 	.word	0x01480148
 8001060:	0148015a 	.word	0x0148015a
 8001064:	01480155 	.word	0x01480155
 8001068:	01130148 	.word	0x01130148
 800106c:	011c0148 	.word	0x011c0148
 8001070:	01480148 	.word	0x01480148
 8001074:	01480148 	.word	0x01480148
 8001078:	0148012a 	.word	0x0148012a
 800107c:	01480148 	.word	0x01480148
 8001080:	01480148 	.word	0x01480148
 8001084:	01480148 	.word	0x01480148
 8001088:	01480148 	.word	0x01480148
 800108c:	01480148 	.word	0x01480148
 8001090:	01480148 	.word	0x01480148
 8001094:	01480148 	.word	0x01480148
 8001098:	01480148 	.word	0x01480148
 800109c:	01480148 	.word	0x01480148
 80010a0:	01480148 	.word	0x01480148
 80010a4:	01480148 	.word	0x01480148
 80010a8:	01480148 	.word	0x01480148
 80010ac:	01480148 	.word	0x01480148
 80010b0:	01480148 	.word	0x01480148
 80010b4:	01480148 	.word	0x01480148
 80010b8:	01480148 	.word	0x01480148
 80010bc:	01480148 	.word	0x01480148
 80010c0:	01480148 	.word	0x01480148
 80010c4:	01480109 	.word	0x01480109
 80010c8:	01480148 	.word	0x01480148
 80010cc:	01340148 	.word	0x01340148
 80010d0:	01480148 	.word	0x01480148
 80010d4:	01480148 	.word	0x01480148
 80010d8:	01480148 	.word	0x01480148
 80010dc:	01480148 	.word	0x01480148
 80010e0:	01480148 	.word	0x01480148
 80010e4:	01480148 	.word	0x01480148
 80010e8:	01480148 	.word	0x01480148
 80010ec:	01480148 	.word	0x01480148
 80010f0:	01480148 	.word	0x01480148
 80010f4:	01480148 	.word	0x01480148
 80010f8:	01480148 	.word	0x01480148
 80010fc:	01480148 	.word	0x01480148
 8001100:	01480148 	.word	0x01480148
 8001104:	01480148 	.word	0x01480148
 8001108:	01480148 	.word	0x01480148
 800110c:	01480148 	.word	0x01480148
 8001110:	01480148 	.word	0x01480148
 8001114:	01480148 	.word	0x01480148
 8001118:	01480148 	.word	0x01480148
 800111c:	01480148 	.word	0x01480148
 8001120:	01480148 	.word	0x01480148
 8001124:	01480148 	.word	0x01480148
 8001128:	01090148 	.word	0x01090148
 800112c:	01090148 	.word	0x01090148
 8001130:	01480148 	.word	0x01480148
 8001134:	01480148 	.word	0x01480148
 8001138:	01480109 	.word	0x01480109
 800113c:	01480148 	.word	0x01480148
 8001140:	01480148 	.word	0x01480148
 8001144:	01480148 	.word	0x01480148
 8001148:	01480148 	.word	0x01480148
 800114c:	01480148 	.word	0x01480148
 8001150:	01480148 	.word	0x01480148
 8001154:	01090148 	.word	0x01090148
 8001158:	01480148 	.word	0x01480148
 800115c:	01480148 	.word	0x01480148
 8001160:	01480148 	.word	0x01480148
 8001164:	01480148 	.word	0x01480148
 8001168:	01090148 	.word	0x01090148
 800116c:	01090148 	.word	0x01090148
 8001170:	01480148 	.word	0x01480148
 8001174:	01480148 	.word	0x01480148
 8001178:	0109      	.short	0x0109
  }

  if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
  {
    /* Calculate Logical Block Address */
    SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
 800117a:	7ca1      	ldrb	r1, [r4, #18]
 800117c:	7c67      	ldrb	r7, [r4, #17]
 800117e:	040a      	lsls	r2, r1, #16
 8001180:	7d20      	ldrb	r0, [r4, #20]
 8001182:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001186:	7ce6      	ldrb	r6, [r4, #19]
 8001188:	ea47 0000 	orr.w	r0, r7, r0
    /* Calculate the Number of Blocks to transfer */
    SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
 800118c:	f894 c016 	ldrb.w	ip, [r4, #22]
 8001190:	7de1      	ldrb	r1, [r4, #23]
  }

  if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
  {
    /* Calculate Logical Block Address */
    SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
 8001192:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 8001196:	4a53      	ldr	r2, [pc, #332]	; (80012e4 <CBW_Decode+0x440>)
    /* Calculate the Number of Blocks to transfer */
    SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
 8001198:	4853      	ldr	r0, [pc, #332]	; (80012e8 <CBW_Decode+0x444>)
 800119a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
  }

  if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
  {
    /* Calculate Logical Block Address */
    SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
 800119e:	6016      	str	r6, [r2, #0]
    /* Calculate the Number of Blocks to transfer */
    SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
 80011a0:	6001      	str	r1, [r0, #0]
  }

  if (CBW.dSignature == BOT_CBW_SIGNATURE)
 80011a2:	4a52      	ldr	r2, [pc, #328]	; (80012ec <CBW_Decode+0x448>)
 80011a4:	6820      	ldr	r0, [r4, #0]
 80011a6:	4e52      	ldr	r6, [pc, #328]	; (80012f0 <CBW_Decode+0x44c>)
 80011a8:	4290      	cmp	r0, r2
 80011aa:	f43f af16 	beq.w	8000fda <CBW_Decode+0x136>
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 80011ae:	2001      	movs	r0, #1
 80011b0:	2110      	movs	r1, #16
 80011b2:	f00f f8b1 	bl	8010318 <SetEPTxStatus>
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	f00f f8cc 	bl	8010358 <SetEPRxStatus>
  }
  else
  {
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 80011c0:	7b70      	ldrb	r0, [r6, #13]
 80011c2:	2105      	movs	r1, #5
 80011c4:	2220      	movs	r2, #32
 80011c6:	e00b      	b.n	80011e0 <CBW_Decode+0x33c>
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 80011c8:	2001      	movs	r0, #1
 80011ca:	2110      	movs	r1, #16
 80011cc:	f00f f8a4 	bl	8010318 <SetEPTxStatus>
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	f00f f8bf 	bl	8010358 <SetEPRxStatus>
  {
    /* Valid CBW */
    if ((CBW.bLUN > Max_Lun) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
    {
      Bot_Abort(BOTH_DIR);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80011da:	7b60      	ldrb	r0, [r4, #13]
 80011dc:	2105      	movs	r1, #5
 80011de:	2224      	movs	r2, #36	; 0x24
  }
  else
  {
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 80011e0:	f000 fc6e 	bl	8001ac0 <Set_Scsi_Sense_Data>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <CBW_Decode+0x450>)
  CSW.bStatus = CSW_Status;

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 80011e6:	4944      	ldr	r1, [pc, #272]	; (80012f8 <CBW_Decode+0x454>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 80011e8:	602b      	str	r3, [r5, #0]
  CSW.bStatus = CSW_Status;
 80011ea:	2301      	movs	r3, #1

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 80011ec:	2081      	movs	r0, #129	; 0x81
 80011ee:	220d      	movs	r2, #13
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
  CSW.bStatus = CSW_Status;
 80011f0:	732b      	strb	r3, [r5, #12]

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 80011f2:	f00f fc7f 	bl	8010af4 <USB_SIL_Write>

  Bot_State = BOT_ERROR;
 80011f6:	4941      	ldr	r1, [pc, #260]	; (80012fc <CBW_Decode+0x458>)
 80011f8:	2005      	movs	r0, #5
 80011fa:	7008      	strb	r0, [r1, #0]
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 80011fc:	b001      	add	sp, #4
 80011fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  for (Counter = 0; Counter < Data_Len; Counter++)
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
  }
  CSW.dTag = CBW.dTag;
 8001202:	4c3b      	ldr	r4, [pc, #236]	; (80012f0 <CBW_Decode+0x44c>)
 8001204:	4d3c      	ldr	r5, [pc, #240]	; (80012f8 <CBW_Decode+0x454>)
 8001206:	6862      	ldr	r2, [r4, #4]
  CSW.dDataResidue = CBW.dDataLength;
 8001208:	68a0      	ldr	r0, [r4, #8]

  for (Counter = 0; Counter < Data_Len; Counter++)
  {
    *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
  }
  CSW.dTag = CBW.dTag;
 800120a:	606a      	str	r2, [r5, #4]
  CSW.dDataResidue = CBW.dDataLength;
 800120c:	60a8      	str	r0, [r5, #8]
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 800120e:	2001      	movs	r0, #1
 8001210:	2110      	movs	r1, #16
 8001212:	f00f f881 	bl	8010318 <SetEPTxStatus>
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 8001216:	2002      	movs	r0, #2
 8001218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121c:	f00f f89c 	bl	8010358 <SetEPRxStatus>
  CSW.dDataResidue = CBW.dDataLength;
  if (Data_Len != BOT_CBW_PACKET_LENGTH)
  {
    Bot_Abort(BOTH_DIR);
    /* reset the CBW.dSignature to disable the clear feature until receiving a Mass storage reset*/
    CBW.dSignature = 0;
 8001220:	2300      	movs	r3, #0
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, PARAMETER_LIST_LENGTH_ERROR);
 8001222:	7b60      	ldrb	r0, [r4, #13]
 8001224:	2105      	movs	r1, #5
 8001226:	221a      	movs	r2, #26
  CSW.dDataResidue = CBW.dDataLength;
  if (Data_Len != BOT_CBW_PACKET_LENGTH)
  {
    Bot_Abort(BOTH_DIR);
    /* reset the CBW.dSignature to disable the clear feature until receiving a Mass storage reset*/
    CBW.dSignature = 0;
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	e7d9      	b.n	80011e0 <CBW_Decode+0x33c>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 800122c:	b001      	add	sp, #4
 800122e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_VERIFY12:
          SCSI_Verify12_Cmd(CBW.bLUN);
          break;
        case SCSI_VERIFY16:
          SCSI_Verify16_Cmd(CBW.bLUN);
 8001232:	f000 bd69 	b.w	8001d08 <SCSI_Invalid_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001236:	b001      	add	sp, #4
 8001238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_START_STOP_UNIT:
          SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
          break;
        case SCSI_ALLOW_MEDIUM_REMOVAL:
          SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
 800123c:	f000 bc46 	b.w	8001acc <SCSI_Start_Stop_Unit_Cmd>
          break;
        case SCSI_TEST_UNIT_READY:
          SCSI_TestUnitReady_Cmd(CBW.bLUN);
          break;
        case SCSI_READ10:
          SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <CBW_Decode+0x444>)
 8001242:	4928      	ldr	r1, [pc, #160]	; (80012e4 <CBW_Decode+0x440>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	6809      	ldr	r1, [r1, #0]
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001248:	b001      	add	sp, #4
 800124a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_TEST_UNIT_READY:
          SCSI_TestUnitReady_Cmd(CBW.bLUN);
          break;
        case SCSI_READ10:
          SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 800124e:	f000 bc41 	b.w	8001ad4 <SCSI_Read10_Cmd>
          break;
        case SCSI_WRITE10:
          SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <CBW_Decode+0x440>)
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <CBW_Decode+0x444>)
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	6812      	ldr	r2, [r2, #0]
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 800125a:	b001      	add	sp, #4
 800125c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_READ10:
          SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
          break;
        case SCSI_WRITE10:
          SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 8001260:	f000 bc90 	b.w	8001b84 <SCSI_Write10_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001264:	b001      	add	sp, #4
 8001266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_ALLOW_MEDIUM_REMOVAL:
          SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
          break;
        case SCSI_MODE_SENSE6:
          SCSI_ModeSense6_Cmd (CBW.bLUN);
 800126a:	f000 bc11 	b.w	8001a90 <SCSI_ModeSense6_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 800126e:	b001      	add	sp, #4
 8001270:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_WRITE10:
          SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
          break;
        case SCSI_VERIFY10:
          SCSI_Verify10_Cmd(CBW.bLUN);
 8001274:	f000 bcdc 	b.w	8001c30 <SCSI_Verify10_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001278:	b001      	add	sp, #4
 800127a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        case SCSI_REQUEST_SENSE:
          SCSI_RequestSense_Cmd (CBW.bLUN);
          break;
        case SCSI_INQUIRY:
          SCSI_Inquiry_Cmd(CBW.bLUN);
 800127e:	f000 bb73 	b.w	8001968 <SCSI_Inquiry_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001282:	b001      	add	sp, #4
 8001284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_MODE_SENSE6:
          SCSI_ModeSense6_Cmd (CBW.bLUN);
          break;
        case SCSI_MODE_SENSE10:
          SCSI_ModeSense10_Cmd (CBW.bLUN);
 8001288:	f000 bc08 	b.w	8001a9c <SCSI_ModeSense10_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 800128c:	b001      	add	sp, #4
 800128e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_VERIFY10:
          SCSI_Verify10_Cmd(CBW.bLUN);
          break;
        case SCSI_FORMAT_UNIT:
          SCSI_Format_Cmd(CBW.bLUN);
 8001292:	f000 bd23 	b.w	8001cdc <SCSI_Format_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001296:	b001      	add	sp, #4
 8001298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else
    {
      switch (CBW.CB[0])
      {
        case SCSI_REQUEST_SENSE:
          SCSI_RequestSense_Cmd (CBW.bLUN);
 800129c:	f000 bc04 	b.w	8001aa8 <SCSI_RequestSense_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 80012a0:	b001      	add	sp, #4
 80012a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_READ_CAPACITY10:
          SCSI_ReadCapacity10_Cmd(CBW.bLUN);
          break;
        case SCSI_TEST_UNIT_READY:
          SCSI_TestUnitReady_Cmd(CBW.bLUN);
 80012a6:	f000 bcff 	b.w	8001ca8 <SCSI_TestUnitReady_Cmd>
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 80012aa:	2001      	movs	r0, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	f00f f833 	bl	8010318 <SetEPTxStatus>
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 80012b2:	2002      	movs	r0, #2
 80012b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b8:	f00f f84e 	bl	8010358 <SetEPRxStatus>
          break;

        default:
        {
          Bot_Abort(BOTH_DIR);
          Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 80012bc:	7b60      	ldrb	r0, [r4, #13]
  }
  else
  {
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 80012be:	2105      	movs	r1, #5
 80012c0:	2220      	movs	r2, #32
 80012c2:	e78d      	b.n	80011e0 <CBW_Decode+0x33c>
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 80012c4:	b001      	add	sp, #4
 80012c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_READ_FORMAT_CAPACITIES:
          SCSI_ReadFormatCapacity_Cmd(CBW.bLUN);
          break;
        case SCSI_READ_CAPACITY10:
          SCSI_ReadCapacity10_Cmd(CBW.bLUN);
 80012ca:	f000 bba3 	b.w	8001a14 <SCSI_ReadCapacity10_Cmd>
    /* Invalid CBW */
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 80012ce:	b001      	add	sp, #4
 80012d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          break;
        case SCSI_MODE_SENSE10:
          SCSI_ModeSense10_Cmd (CBW.bLUN);
          break;
        case SCSI_READ_FORMAT_CAPACITIES:
          SCSI_ReadFormatCapacity_Cmd(CBW.bLUN);
 80012d4:	f000 bb64 	b.w	80019a0 <SCSI_ReadFormatCapacity_Cmd>
 80012d8:	4c05      	ldr	r4, [pc, #20]	; (80012f0 <CBW_Decode+0x44c>)
 80012da:	4909      	ldr	r1, [pc, #36]	; (8001300 <CBW_Decode+0x45c>)
*******************************************************************************/
void CBW_Decode(void)
{
  uint32_t Counter;

  for (Counter = 0; Counter < Data_Len; Counter++)
 80012dc:	f04f 0b00 	mov.w	fp, #0
 80012e0:	e632      	b.n	8000f48 <CBW_Decode+0xa4>
 80012e2:	bf00      	nop
 80012e4:	20000aa4 	.word	0x20000aa4
 80012e8:	20000ab8 	.word	0x20000ab8
 80012ec:	43425355 	.word	0x43425355
 80012f0:	20000a80 	.word	0x20000a80
 80012f4:	53425355 	.word	0x53425355
 80012f8:	20000aa8 	.word	0x20000aa8
 80012fc:	20000aa2 	.word	0x20000aa2
 8001300:	20000abc 	.word	0x20000abc

08001304 <Mass_Storage_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Mass_Storage_Out (void)
{
 8001304:	b570      	push	{r4, r5, r6, lr}
  uint8_t CMD;
  CMD = CBW.CB[0];
 8001306:	4d1b      	ldr	r5, [pc, #108]	; (8001374 <Mass_Storage_Out+0x70>)

  Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);
 8001308:	2002      	movs	r0, #2
 800130a:	491b      	ldr	r1, [pc, #108]	; (8001378 <Mass_Storage_Out+0x74>)
* Return         : None.
*******************************************************************************/
void Mass_Storage_Out (void)
{
  uint8_t CMD;
  CMD = CBW.CB[0];
 800130c:	7bee      	ldrb	r6, [r5, #15]

  Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);
 800130e:	f00f fc05 	bl	8010b1c <USB_SIL_Read>

  switch (Bot_State)
 8001312:	4c1a      	ldr	r4, [pc, #104]	; (800137c <Mass_Storage_Out+0x78>)
void Mass_Storage_Out (void)
{
  uint8_t CMD;
  CMD = CBW.CB[0];

  Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <Mass_Storage_Out+0x7c>)

  switch (Bot_State)
 8001316:	7823      	ldrb	r3, [r4, #0]
void Mass_Storage_Out (void)
{
  uint8_t CMD;
  CMD = CBW.CB[0];

  Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);
 8001318:	8010      	strh	r0, [r2, #0]

  switch (Bot_State)
 800131a:	b913      	cbnz	r3, 8001322 <Mass_Storage_Out+0x1e>
      Bot_Abort(BOTH_DIR);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
      break;
  }
}
 800131c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);

  switch (Bot_State)
  {
    case BOT_IDLE:
      CBW_Decode();
 8001320:	e5c0      	b.n	8000ea4 <CBW_Decode>
  uint8_t CMD;
  CMD = CBW.CB[0];

  Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff);

  switch (Bot_State)
 8001322:	2b01      	cmp	r3, #1
 8001324:	d01a      	beq.n	800135c <Mass_Storage_Out+0x58>
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 8001326:	2001      	movs	r0, #1
 8001328:	2110      	movs	r1, #16
 800132a:	f00e fff5 	bl	8010318 <SetEPTxStatus>
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 800132e:	2002      	movs	r0, #2
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	f00f f810 	bl	8010358 <SetEPRxStatus>
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
      break;
    default:
      Bot_Abort(BOTH_DIR);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8001338:	7b68      	ldrb	r0, [r5, #13]
 800133a:	2105      	movs	r1, #5
 800133c:	2224      	movs	r2, #36	; 0x24
 800133e:	f000 fbbf 	bl	8001ac0 <Set_Scsi_Sense_Data>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 8001342:	4d10      	ldr	r5, [pc, #64]	; (8001384 <Mass_Storage_Out+0x80>)
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <Mass_Storage_Out+0x84>)
  CSW.bStatus = CSW_Status;

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 8001346:	2081      	movs	r0, #129	; 0x81
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 8001348:	601d      	str	r5, [r3, #0]
  CSW.bStatus = CSW_Status;
 800134a:	2502      	movs	r5, #2

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 800134c:	4619      	mov	r1, r3
 800134e:	220d      	movs	r2, #13
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
  CSW.bStatus = CSW_Status;
 8001350:	731d      	strb	r5, [r3, #12]

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 8001352:	f00f fbcf 	bl	8010af4 <USB_SIL_Write>

  Bot_State = BOT_ERROR;
 8001356:	2005      	movs	r0, #5
 8001358:	7020      	strb	r0, [r4, #0]
 800135a:	bd70      	pop	{r4, r5, r6, pc}
  {
    case BOT_IDLE:
      CBW_Decode();
      break;
    case BOT_DATA_OUT:
      if (CMD == SCSI_WRITE10)
 800135c:	2e2a      	cmp	r6, #42	; 0x2a
 800135e:	d1e6      	bne.n	800132e <Mass_Storage_Out+0x2a>
      {
        SCSI_Write10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <Mass_Storage_Out+0x88>)
 8001362:	490b      	ldr	r1, [pc, #44]	; (8001390 <Mass_Storage_Out+0x8c>)
 8001364:	7b68      	ldrb	r0, [r5, #13]
 8001366:	6809      	ldr	r1, [r1, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
      Bot_Abort(BOTH_DIR);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
      break;
  }
}
 800136a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      CBW_Decode();
      break;
    case BOT_DATA_OUT:
      if (CMD == SCSI_WRITE10)
      {
        SCSI_Write10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 800136e:	f000 bc09 	b.w	8001b84 <SCSI_Write10_Cmd>
 8001372:	bf00      	nop
 8001374:	20000a80 	.word	0x20000a80
 8001378:	20000abc 	.word	0x20000abc
 800137c:	20000aa2 	.word	0x20000aa2
 8001380:	20000aa0 	.word	0x20000aa0
 8001384:	53425355 	.word	0x53425355
 8001388:	20000aa8 	.word	0x20000aa8
 800138c:	20000ab8 	.word	0x20000ab8
 8001390:	20000aa4 	.word	0x20000aa4

08001394 <Transfer_Data_Request>:
*                  uint16_t Data_Length : the number of Bytes to transfer.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Transfer_Data_Request(uint8_t* Data_Pointer, uint16_t Data_Len)
{
 8001394:	b510      	push	{r4, lr}
 8001396:	460c      	mov	r4, r1
  USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);
 8001398:	4622      	mov	r2, r4
*                  uint16_t Data_Length : the number of Bytes to transfer.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Transfer_Data_Request(uint8_t* Data_Pointer, uint16_t Data_Len)
{
 800139a:	4601      	mov	r1, r0
  USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);
 800139c:	2081      	movs	r0, #129	; 0x81
 800139e:	f00f fba9 	bl	8010af4 <USB_SIL_Write>

#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
 80013a2:	2001      	movs	r0, #1
 80013a4:	2130      	movs	r1, #48	; 0x30
 80013a6:	f00e ffb7 	bl	8010318 <SetEPTxStatus>
#endif  
  Bot_State = BOT_DATA_IN_LAST;
  CSW.dDataResidue -= Data_Len;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <Transfer_Data_Request+0x2c>)
  USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);

#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif  
  Bot_State = BOT_DATA_IN_LAST;
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <Transfer_Data_Request+0x30>)
  CSW.dDataResidue -= Data_Len;
 80013ae:	689a      	ldr	r2, [r3, #8]
  USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);

#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif  
  Bot_State = BOT_DATA_IN_LAST;
 80013b0:	2103      	movs	r1, #3
  CSW.dDataResidue -= Data_Len;
 80013b2:	1b14      	subs	r4, r2, r4
  CSW.bStatus = CSW_CMD_PASSED;
 80013b4:	2200      	movs	r2, #0
  USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);

#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif  
  Bot_State = BOT_DATA_IN_LAST;
 80013b6:	7001      	strb	r1, [r0, #0]
  CSW.dDataResidue -= Data_Len;
 80013b8:	609c      	str	r4, [r3, #8]
  CSW.bStatus = CSW_CMD_PASSED;
 80013ba:	731a      	strb	r2, [r3, #12]
}
 80013bc:	bd10      	pop	{r4, pc}
 80013be:	bf00      	nop
 80013c0:	20000aa8 	.word	0x20000aa8
 80013c4:	20000aa2 	.word	0x20000aa2

080013c8 <Set_CSW>:
*                  or CSW_PHASE_ERROR.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
  CSW.dSignature = BOT_CSW_SIGNATURE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <Set_CSW+0x30>)
 80013cc:	4d0b      	ldr	r5, [pc, #44]	; (80013fc <Set_CSW+0x34>)
  CSW.bStatus = CSW_Status;
 80013ce:	7318      	strb	r0, [r3, #12]

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 80013d0:	220d      	movs	r2, #13
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
  CSW.dSignature = BOT_CSW_SIGNATURE;
 80013d2:	601d      	str	r5, [r3, #0]
*                  or CSW_PHASE_ERROR.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
{
 80013d4:	460c      	mov	r4, r1
  CSW.dSignature = BOT_CSW_SIGNATURE;
  CSW.bStatus = CSW_Status;

  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 80013d6:	2081      	movs	r0, #129	; 0x81
 80013d8:	4619      	mov	r1, r3
 80013da:	f00f fb8b 	bl	8010af4 <USB_SIL_Write>

  Bot_State = BOT_ERROR;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <Set_CSW+0x38>)
 80013e0:	2205      	movs	r2, #5
 80013e2:	701a      	strb	r2, [r3, #0]
  if (Send_Permission)
 80013e4:	b904      	cbnz	r4, 80013e8 <Set_CSW+0x20>
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
  {
    Bot_State = BOT_CSW_Send;
 80013e8:	2204      	movs	r2, #4
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
 80013ea:	2001      	movs	r0, #1
 80013ec:	2130      	movs	r1, #48	; 0x30
  USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);

  Bot_State = BOT_ERROR;
  if (Send_Permission)
  {
    Bot_State = BOT_CSW_Send;
 80013ee:	701a      	strb	r2, [r3, #0]
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
#endif  
  }

}
 80013f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Bot_State = BOT_ERROR;
  if (Send_Permission)
  {
    Bot_State = BOT_CSW_Send;
#ifndef USE_STM3210C_EVAL
    SetEPTxStatus(ENDP1, EP_TX_VALID);
 80013f4:	f00e bf90 	b.w	8010318 <SetEPTxStatus>
 80013f8:	20000aa8 	.word	0x20000aa8
 80013fc:	53425355 	.word	0x53425355
 8001400:	20000aa2 	.word	0x20000aa2

08001404 <Bot_Abort>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Bot_Abort(uint8_t Direction)
{
  switch (Direction)
 8001404:	2801      	cmp	r0, #1
* Input          : Endpoint direction IN, OUT or both directions
* Output         : None.
* Return         : None.
*******************************************************************************/
void Bot_Abort(uint8_t Direction)
{
 8001406:	b510      	push	{r4, lr}
 8001408:	4604      	mov	r4, r0
  switch (Direction)
 800140a:	d009      	beq.n	8001420 <Bot_Abort+0x1c>
 800140c:	d302      	bcc.n	8001414 <Bot_Abort+0x10>
 800140e:	2802      	cmp	r0, #2
 8001410:	d00d      	beq.n	800142e <Bot_Abort+0x2a>
 8001412:	bd10      	pop	{r4, pc}
  {
    case DIR_IN :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 8001414:	2001      	movs	r0, #1
 8001416:	2110      	movs	r1, #16
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    default:
      break;
  }
}
 8001418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Bot_Abort(uint8_t Direction)
{
  switch (Direction)
  {
    case DIR_IN :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 800141c:	f00e bf7c 	b.w	8010318 <SetEPTxStatus>
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 8001420:	2002      	movs	r0, #2
 8001422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    default:
      break;
  }
}
 8001426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    case DIR_IN :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
      break;
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 800142a:	f00e bf95 	b.w	8010358 <SetEPRxStatus>
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
 800142e:	2110      	movs	r1, #16
 8001430:	2001      	movs	r0, #1
 8001432:	f00e ff71 	bl	8010318 <SetEPTxStatus>
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 8001436:	4620      	mov	r0, r4
 8001438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      break;
    default:
      break;
  }
}
 800143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case DIR_OUT :
      SetEPRxStatus(ENDP2, EP_RX_STALL);
      break;
    case BOTH_DIR :
      SetEPTxStatus(ENDP1, EP_TX_STALL);
      SetEPRxStatus(ENDP2, EP_RX_STALL);
 8001440:	f00e bf8a 	b.w	8010358 <SetEPRxStatus>

08001444 <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback(void)
{
  Mass_Storage_In();
 8001444:	f7ff bcea 	b.w	8000e1c <Mass_Storage_In>

08001448 <EP2_OUT_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP2_OUT_Callback(void)
{
  Mass_Storage_Out();
 8001448:	f7ff bf5c 	b.w	8001304 <Mass_Storage_Out>

0800144c <USB_Istr>:
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800144c:	4935      	ldr	r1, [pc, #212]	; (8001524 <USB_Istr+0xd8>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800144e:	b570      	push	{r4, r5, r6, lr}

  wIstr = _GetISTR();
 8001450:	680b      	ldr	r3, [r1, #0]
 8001452:	4c35      	ldr	r4, [pc, #212]	; (8001528 <USB_Istr+0xdc>)

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8001454:	4d35      	ldr	r5, [pc, #212]	; (800152c <USB_Istr+0xe0>)
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 8001456:	8023      	strh	r3, [r4, #0]

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8001458:	8820      	ldrh	r0, [r4, #0]
 800145a:	882b      	ldrh	r3, [r5, #0]
 800145c:	ea03 0200 	and.w	r2, r3, r0
 8001460:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001464:	d13d      	bne.n	80014e2 <USB_Istr+0x96>
#endif
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8001466:	8822      	ldrh	r2, [r4, #0]
 8001468:	f402 6c80 	and.w	ip, r2, #1024	; 0x400
 800146c:	ea1c 0f03 	tst.w	ip, r3
 8001470:	d140      	bne.n	80014f4 <USB_Istr+0xa8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001472:	8820      	ldrh	r0, [r4, #0]
 8001474:	f400 5c80 	and.w	ip, r0, #4096	; 0x1000
 8001478:	ea1c 0f03 	tst.w	ip, r3
 800147c:	d148      	bne.n	8001510 <USB_Istr+0xc4>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & CNTR_SUSPM)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 800147e:	f8b4 c000 	ldrh.w	ip, [r4]
 8001482:	f40c 6200 	and.w	r2, ip, #2048	; 0x800
 8001486:	421a      	tst	r2, r3
 8001488:	d00a      	beq.n	80014a0 <USB_Istr+0x54>
  {

    /* check if SUSPEND is possible */
    if (fSuspendEnabled)
 800148a:	4929      	ldr	r1, [pc, #164]	; (8001530 <USB_Istr+0xe4>)
 800148c:	7808      	ldrb	r0, [r1, #0]
 800148e:	b9e0      	cbnz	r0, 80014ca <USB_Istr+0x7e>
      Suspend();
    }
    else
    {
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8001490:	2002      	movs	r0, #2
 8001492:	f000 f9f3 	bl	800187c <Resume>
    }
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <USB_Istr+0xd8>)
 8001498:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
 800149c:	882b      	ldrh	r3, [r5, #0]
 800149e:	6010      	str	r0, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80014a0:	8821      	ldrh	r1, [r4, #0]
 80014a2:	f401 7c00 	and.w	ip, r1, #512	; 0x200
 80014a6:	ea1c 0f03 	tst.w	ip, r3
 80014aa:	d007      	beq.n	80014bc <USB_Istr+0x70>
  {
    _SetISTR((uint16_t)CLR_SOF);
 80014ac:	491d      	ldr	r1, [pc, #116]	; (8001524 <USB_Istr+0xd8>)
    bIntPackSOF++;
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <USB_Istr+0xe8>)
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_SOF);
 80014b0:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 80014b4:	6008      	str	r0, [r1, #0]
    bIntPackSOF++;
 80014b6:	7811      	ldrb	r1, [r2, #0]
 80014b8:	1c48      	adds	r0, r1, #1
 80014ba:	7010      	strb	r0, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 80014bc:	8822      	ldrh	r2, [r4, #0]
 80014be:	f402 7c80 	and.w	ip, r2, #256	; 0x100
 80014c2:	ea1c 0f03 	tst.w	ip, r3
 80014c6:	d103      	bne.n	80014d0 <USB_Istr+0x84>
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
  {

    /* check if SUSPEND is possible */
    if (fSuspendEnabled)
    {
      Suspend();
 80014ca:	f000 f995 	bl	80017f8 <Suspend>
 80014ce:	e7e2      	b.n	8001496 <USB_Istr+0x4a>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_ESOF);
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <USB_Istr+0xd8>)
 80014d2:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 80014d6:	2007      	movs	r0, #7
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_ESOF);
 80014d8:	6019      	str	r1, [r3, #0]
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80014da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_ESOF);
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 80014de:	f000 b9cd 	b.w	800187c <Resume>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80014e2:	f00e fd2d 	bl	800ff40 <CTR_LP>
#endif
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80014e6:	8822      	ldrh	r2, [r4, #0]
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80014e8:	882b      	ldrh	r3, [r5, #0]
#endif
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80014ea:	f402 6c80 	and.w	ip, r2, #1024	; 0x400
 80014ee:	ea1c 0f03 	tst.w	ip, r3
 80014f2:	d0be      	beq.n	8001472 <USB_Istr+0x26>
  {
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <USB_Istr+0xec>)
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <USB_Istr+0xd8>)
 80014f8:	f64f 31ff 	movw	r1, #64511	; 0xfbff
    Device_Property.Reset();
 80014fc:	6858      	ldr	r0, [r3, #4]
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
 80014fe:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 8001500:	4780      	blx	r0
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001502:	8820      	ldrh	r0, [r4, #0]
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8001504:	882b      	ldrh	r3, [r5, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001506:	f400 5c80 	and.w	ip, r0, #4096	; 0x1000
 800150a:	ea1c 0f03 	tst.w	ip, r3
 800150e:	d0b6      	beq.n	800147e <USB_Istr+0x32>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <USB_Istr+0xd8>)
 8001512:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8001516:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 f9af 	bl	800187c <Resume>
 800151e:	882b      	ldrh	r3, [r5, #0]
 8001520:	e7ad      	b.n	800147e <USB_Istr+0x32>
 8001522:	bf00      	nop
 8001524:	40005c44 	.word	0x40005c44
 8001528:	20000afc 	.word	0x20000afc
 800152c:	20000ee8 	.word	0x20000ee8
 8001530:	2000015c 	.word	0x2000015c
 8001534:	20000718 	.word	0x20000718
 8001538:	20000104 	.word	0x20000104

0800153c <Mass_Storage_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Mass_Storage_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800153c:	4b01      	ldr	r3, [pc, #4]	; (8001544 <Mass_Storage_SetDeviceAddress+0x8>)
 800153e:	2204      	movs	r2, #4
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	4770      	bx	lr
 8001544:	20000720 	.word	0x20000720

08001548 <MASS_Status_In>:
* Return         : None.
*******************************************************************************/
void MASS_Status_In(void)
{
  return;
}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop

0800154c <MASS_Status_Out>:
* Return         : None.
*******************************************************************************/
void MASS_Status_Out(void)
{
  return;
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <MASS_Get_Interface_Setting>:
* Output         : None.
* Return         : RESULT.
*******************************************************************************/
RESULT MASS_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8001550:	b919      	cbnz	r1, 800155a <MASS_Get_Interface_Setting+0xa>
  {
    return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
  }
  else if (Interface > 0)
 8001552:	2800      	cmp	r0, #0
  {
    return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
 8001554:	bf18      	it	ne
 8001556:	2002      	movne	r0, #2
 8001558:	4770      	bx	lr
*******************************************************************************/
RESULT MASS_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
 800155a:	2002      	movs	r0, #2
  else if (Interface > 0)
  {
    return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
  }
  return USB_SUCCESS;
}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <Get_Max_Lun>:
* Output         : None.
* Return         : None.
*******************************************************************************/
uint8_t *Get_Max_Lun(uint16_t Length)
{
  if (Length == 0)
 8001560:	b108      	cbz	r0, 8001566 <Get_Max_Lun+0x6>
    pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
    return 0;
  }
  else
  {
    return((uint8_t*)(&Max_Lun));
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <Get_Max_Lun+0x10>)
  }
}
 8001564:	4770      	bx	lr
*******************************************************************************/
uint8_t *Get_Max_Lun(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
 8001566:	4903      	ldr	r1, [pc, #12]	; (8001574 <Get_Max_Lun+0x14>)
 8001568:	2201      	movs	r2, #1
 800156a:	680b      	ldr	r3, [r1, #0]
 800156c:	821a      	strh	r2, [r3, #16]
    return 0;
 800156e:	4770      	bx	lr
 8001570:	2000071c 	.word	0x2000071c
 8001574:	20000ee4 	.word	0x20000ee4

08001578 <MASS_Data_Setup>:
* Input          : RequestNo.
* Output         : None.
* Return         : RESULT.
*******************************************************************************/
RESULT MASS_Data_Setup(uint8_t RequestNo)
{
 8001578:	b510      	push	{r4, lr}
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
  if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MASS_Data_Setup+0x3c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	7819      	ldrb	r1, [r3, #0]
 8001580:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8001584:	2a21      	cmp	r2, #33	; 0x21
 8001586:	d001      	beq.n	800158c <MASS_Data_Setup+0x14>
  {
    CopyRoutine = Get_Max_Lun;
  }
  else
  {
    return USB_UNSUPPORT;
 8001588:	2002      	movs	r0, #2
 800158a:	bd10      	pop	{r4, pc}
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
  if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
      && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
 800158c:	28fe      	cmp	r0, #254	; 0xfe
 800158e:	d1fb      	bne.n	8001588 <MASS_Data_Setup+0x10>
 8001590:	885c      	ldrh	r4, [r3, #2]
 8001592:	2c00      	cmp	r4, #0
 8001594:	d1f8      	bne.n	8001588 <MASS_Data_Setup+0x10>
      && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
 8001596:	6858      	ldr	r0, [r3, #4]
 8001598:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800159c:	d001      	beq.n	80015a2 <MASS_Data_Setup+0x2a>
  {
    CopyRoutine = Get_Max_Lun;
  }
  else
  {
    return USB_UNSUPPORT;
 800159e:	2002      	movs	r0, #2
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);

  return USB_SUCCESS;

}
 80015a0:	bd10      	pop	{r4, pc}
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <MASS_Data_Setup+0x40>)
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80015a4:	825c      	strh	r4, [r3, #18]
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80015a6:	619a      	str	r2, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff ffd9 	bl	8001560 <Get_Max_Lun>

  return USB_SUCCESS;
 80015ae:	4620      	mov	r0, r4
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	20000ee4 	.word	0x20000ee4
 80015b8:	08001561 	.word	0x08001561

080015bc <MASS_GetStringDescriptor>:
* Output         : None.
* Return         : None.
*******************************************************************************/
uint8_t *MASS_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 80015bc:	4905      	ldr	r1, [pc, #20]	; (80015d4 <MASS_GetStringDescriptor+0x18>)
 80015be:	680b      	ldr	r3, [r1, #0]
 80015c0:	78db      	ldrb	r3, [r3, #3]

  if (wValue0 > 5)
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d901      	bls.n	80015ca <MASS_GetStringDescriptor+0xe>
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80015c6:	2000      	movs	r0, #0
 80015c8:	4770      	bx	lr
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80015ca:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <MASS_GetStringDescriptor+0x1c>)
 80015cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80015d0:	f00e b982 	b.w	800f8d8 <Standard_GetDescriptorData>
 80015d4:	20000ee4 	.word	0x20000ee4
 80015d8:	200000cc 	.word	0x200000cc

080015dc <MASS_GetConfigDescriptor>:
* Output         : None.
* Return         : None.
*******************************************************************************/
uint8_t *MASS_GetConfigDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Config_Descriptor );
 80015dc:	4901      	ldr	r1, [pc, #4]	; (80015e4 <MASS_GetConfigDescriptor+0x8>)
 80015de:	f00e b97b 	b.w	800f8d8 <Standard_GetDescriptorData>
 80015e2:	bf00      	nop
 80015e4:	200000f4 	.word	0x200000f4

080015e8 <MASS_GetDeviceDescriptor>:
* Output         : None.
* Return         : None.
*******************************************************************************/
uint8_t *MASS_GetDeviceDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Device_Descriptor );
 80015e8:	4901      	ldr	r1, [pc, #4]	; (80015f0 <MASS_GetDeviceDescriptor+0x8>)
 80015ea:	f00e b975 	b.w	800f8d8 <Standard_GetDescriptorData>
 80015ee:	bf00      	nop
 80015f0:	200000fc 	.word	0x200000fc

080015f4 <MASS_NoData_Setup>:
* Input          : RequestNo.
* Output         : None.
* Return         : RESULT.
*******************************************************************************/
RESULT MASS_NoData_Setup(uint8_t RequestNo)
{
 80015f4:	b510      	push	{r4, lr}
  if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MASS_NoData_Setup+0x40>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	7819      	ldrb	r1, [r3, #0]
 80015fc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8001600:	2a21      	cmp	r2, #33	; 0x21
 8001602:	d001      	beq.n	8001608 <MASS_NoData_Setup+0x14>
    CBW.dSignature = BOT_CBW_SIGNATURE;
    Bot_State = BOT_IDLE;

    return USB_SUCCESS;
  }
  return USB_UNSUPPORT;
 8001604:	2002      	movs	r0, #2
 8001606:	bd10      	pop	{r4, pc}
* Return         : RESULT.
*******************************************************************************/
RESULT MASS_NoData_Setup(uint8_t RequestNo)
{
  if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
      && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
 8001608:	28ff      	cmp	r0, #255	; 0xff
 800160a:	d1fb      	bne.n	8001604 <MASS_NoData_Setup+0x10>
 800160c:	8858      	ldrh	r0, [r3, #2]
 800160e:	2800      	cmp	r0, #0
 8001610:	d1f8      	bne.n	8001604 <MASS_NoData_Setup+0x10>
      && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
 8001612:	685c      	ldr	r4, [r3, #4]
 8001614:	b10c      	cbz	r4, 800161a <MASS_NoData_Setup+0x26>
    CBW.dSignature = BOT_CBW_SIGNATURE;
    Bot_State = BOT_IDLE;

    return USB_SUCCESS;
  }
  return USB_UNSUPPORT;
 8001616:	2002      	movs	r0, #2
}
 8001618:	bd10      	pop	{r4, pc}
  
    /* Init EP2 OUT as Bulk endpoint */
    OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);     
   #else
    /* Initialize Endpoint 1 */
    ClearDTOG_TX(ENDP1);
 800161a:	2001      	movs	r0, #1
 800161c:	f00e ffd4 	bl	80105c8 <ClearDTOG_TX>

    /* Initialize Endpoint 2 */
    ClearDTOG_RX(ENDP2);
 8001620:	2002      	movs	r0, #2
 8001622:	f00e ffbd 	bl	80105a0 <ClearDTOG_RX>
   #endif /* STM32F10X_CL */

    /*initialize the CBW signature to enable the clear feature*/
    CBW.dSignature = BOT_CBW_SIGNATURE;
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <MASS_NoData_Setup+0x44>)
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <MASS_NoData_Setup+0x48>)
    Bot_State = BOT_IDLE;
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <MASS_NoData_Setup+0x4c>)
    /* Initialize Endpoint 2 */
    ClearDTOG_RX(ENDP2);
   #endif /* STM32F10X_CL */

    /*initialize the CBW signature to enable the clear feature*/
    CBW.dSignature = BOT_CBW_SIGNATURE;
 800162c:	6019      	str	r1, [r3, #0]
    Bot_State = BOT_IDLE;
 800162e:	7014      	strb	r4, [r2, #0]

    return USB_SUCCESS;
 8001630:	4620      	mov	r0, r4
 8001632:	bd10      	pop	{r4, pc}
 8001634:	20000ee4 	.word	0x20000ee4
 8001638:	43425355 	.word	0x43425355
 800163c:	20000a80 	.word	0x20000a80
 8001640:	20000aa2 	.word	0x20000aa2

08001644 <Mass_Storage_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Mass_Storage_SetConfiguration(void)
{
 8001644:	b508      	push	{r3, lr}
  if (pInformation->Current_Configuration != 0)
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <Mass_Storage_SetConfiguration+0x24>)
 8001648:	6808      	ldr	r0, [r1, #0]
 800164a:	7a83      	ldrb	r3, [r0, #10]
 800164c:	b15b      	cbz	r3, 8001666 <Mass_Storage_SetConfiguration+0x22>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <Mass_Storage_SetConfiguration+0x28>)
 8001650:	2105      	movs	r1, #5
 8001652:	6011      	str	r1, [r2, #0]
    OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
  
    /* Init EP2 OUT as Bulk endpoint */
    OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);     
#else    
    ClearDTOG_TX(ENDP1);
 8001654:	2001      	movs	r0, #1
 8001656:	f00e ffb7 	bl	80105c8 <ClearDTOG_TX>
    ClearDTOG_RX(ENDP2);
 800165a:	2002      	movs	r0, #2
 800165c:	f00e ffa0 	bl	80105a0 <ClearDTOG_RX>
#endif /* STM32F10X_CL */

    Bot_State = BOT_IDLE; /* set the Bot state machine to the IDLE state */
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <Mass_Storage_SetConfiguration+0x2c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	bd08      	pop	{r3, pc}
 8001668:	20000ee4 	.word	0x20000ee4
 800166c:	20000720 	.word	0x20000720
 8001670:	20000aa2 	.word	0x20000aa2

08001674 <Mass_Storage_ClearFeature>:
*******************************************************************************/
void Mass_Storage_ClearFeature(void)
{
  /* when the host send a CBW with invalid signature or invalid length the two
     Endpoints (IN & OUT) shall stall until receiving a Mass Storage Reset     */
  if (CBW.dSignature != BOT_CBW_SIGNATURE)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <Mass_Storage_ClearFeature+0x14>)
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <Mass_Storage_ClearFeature+0x18>)
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d002      	beq.n	8001684 <Mass_Storage_ClearFeature+0x10>
    Bot_Abort(BOTH_DIR);
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff bec0 	b.w	8001404 <Bot_Abort>
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000a80 	.word	0x20000a80
 800168c:	43425355 	.word	0x43425355

08001690 <MASS_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void MASS_Reset()
{
 8001690:	b570      	push	{r4, r5, r6, lr}
  /* Set the device as not configured */
  Device_Info.Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = MASS_ConfigDescriptor[7];
 8001692:	4a33      	ldr	r2, [pc, #204]	; (8001760 <MASS_Reset+0xd0>)
 8001694:	4c33      	ldr	r4, [pc, #204]	; (8001764 <MASS_Reset+0xd4>)
 8001696:	6810      	ldr	r0, [r2, #0]
 8001698:	f894 c007 	ldrb.w	ip, [r4, #7]
* Return         : None.
*******************************************************************************/
void MASS_Reset()
{
  /* Set the device as not configured */
  Device_Info.Current_Configuration = 0;
 800169c:	4d32      	ldr	r5, [pc, #200]	; (8001768 <MASS_Reset+0xd8>)
 800169e:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = MASS_ConfigDescriptor[7];
 80016a0:	f880 c009 	strb.w	ip, [r0, #9]
* Return         : None.
*******************************************************************************/
void MASS_Reset()
{
  /* Set the device as not configured */
  Device_Info.Current_Configuration = 0;
 80016a4:	72ac      	strb	r4, [r5, #10]
  /* Init EP2 OUT as Bulk endpoint */
  OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE); 
  
#else 

  SetBTABLE(BTABLE_ADDRESS);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f00e fdfe 	bl	80102a8 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 80016ac:	4620      	mov	r0, r4
 80016ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b2:	f00e fe19 	bl	80102e8 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_NAK);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80016b6:	4d2d      	ldr	r5, [pc, #180]	; (800176c <MASS_Reset+0xdc>)

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_NAK);
 80016b8:	4620      	mov	r0, r4
 80016ba:	2120      	movs	r1, #32
 80016bc:	f00e fe2c 	bl	8010318 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80016c0:	4620      	mov	r0, r4
 80016c2:	2118      	movs	r1, #24
 80016c4:	f00e ffc2 	bl	801064c <SetEPRxAddr>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80016c8:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
 80016cc:	4620      	mov	r0, r4
 80016ce:	f00f f817 	bl	8010700 <SetEPRxCount>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80016d2:	2158      	movs	r1, #88	; 0x58
 80016d4:	4620      	mov	r0, r4
 80016d6:	f00e ffa7 	bl	8010628 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 80016da:	4620      	mov	r0, r4
 80016dc:	f00e fec8 	bl	8010470 <Clear_Status_Out>
  SetEPRxValid(ENDP0);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f00e fe93 	bl	801040c <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80016e6:	2001      	movs	r0, #1
 80016e8:	4621      	mov	r1, r4
 80016ea:	f00e fdfd 	bl	80102e8 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80016ee:	2001      	movs	r0, #1
 80016f0:	2198      	movs	r1, #152	; 0x98
 80016f2:	f00e ff99 	bl	8010628 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80016f6:	2001      	movs	r0, #1
 80016f8:	2120      	movs	r1, #32
 80016fa:	f00e fe0d 	bl	8010318 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80016fe:	2001      	movs	r0, #1
 8001700:	4621      	mov	r1, r4
 8001702:	f00e fe29 	bl	8010358 <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_BULK);
 8001706:	2002      	movs	r0, #2
 8001708:	4621      	mov	r1, r4
 800170a:	f00e fded 	bl	80102e8 <SetEPType>
  SetEPRxAddr(ENDP2, ENDP2_RXADDR);
 800170e:	2002      	movs	r0, #2
 8001710:	21d8      	movs	r1, #216	; 0xd8
 8001712:	f00e ff9b 	bl	801064c <SetEPRxAddr>
  SetEPRxCount(ENDP2, Device_Property.MaxPacketSize);
 8001716:	2002      	movs	r0, #2
 8001718:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
 800171c:	f00e fff0 	bl	8010700 <SetEPRxCount>
  SetEPRxStatus(ENDP2, EP_RX_VALID);
 8001720:	2002      	movs	r0, #2
 8001722:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001726:	f00e fe17 	bl	8010358 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_DIS);
 800172a:	4621      	mov	r1, r4
 800172c:	2002      	movs	r0, #2
 800172e:	f00e fdf3 	bl	8010318 <SetEPTxStatus>


  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001732:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
 8001736:	4620      	mov	r0, r4
 8001738:	f00e ffe2 	bl	8010700 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800173c:	4620      	mov	r0, r4
 800173e:	f00e fe65 	bl	801040c <SetEPRxValid>

  /* Set the device to response on default address */
  SetDeviceAddress(0);
 8001742:	4620      	mov	r0, r4
 8001744:	f00e fb50 	bl	800fde8 <SetDeviceAddress>
#endif /* STM32F10X_CL */

  bDeviceState = ATTACHED;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MASS_Reset+0xe0>)
 800174a:	2101      	movs	r1, #1
 800174c:	6019      	str	r1, [r3, #0]

  CBW.dSignature = BOT_CBW_SIGNATURE;
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <MASS_Reset+0xe4>)
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <MASS_Reset+0xe8>)
  Bot_State = BOT_IDLE;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MASS_Reset+0xec>)
  SetDeviceAddress(0);
#endif /* STM32F10X_CL */

  bDeviceState = ATTACHED;

  CBW.dSignature = BOT_CBW_SIGNATURE;
 8001754:	6002      	str	r2, [r0, #0]
  Bot_State = BOT_IDLE;
 8001756:	701c      	strb	r4, [r3, #0]

  USB_NotConfigured_LED();
}
 8001758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bDeviceState = ATTACHED;

  CBW.dSignature = BOT_CBW_SIGNATURE;
  Bot_State = BOT_IDLE;

  USB_NotConfigured_LED();
 800175c:	f7ff b910 	b.w	8000980 <USB_NotConfigured_LED>
 8001760:	20000ee4 	.word	0x20000ee4
 8001764:	08013b2c 	.word	0x08013b2c
 8001768:	20000ec4 	.word	0x20000ec4
 800176c:	200000cc 	.word	0x200000cc
 8001770:	20000720 	.word	0x20000720
 8001774:	43425355 	.word	0x43425355
 8001778:	20000a80 	.word	0x20000a80
 800177c:	20000aa2 	.word	0x20000aa2

08001780 <MASS_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void MASS_init()
{
 8001780:	b510      	push	{r4, lr}
  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001782:	f7ff f907 	bl	8000994 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 8001786:	4905      	ldr	r1, [pc, #20]	; (800179c <MASS_init+0x1c>)
 8001788:	2400      	movs	r4, #0
 800178a:	6808      	ldr	r0, [r1, #0]
 800178c:	7284      	strb	r4, [r0, #10]

  /* Connect the device */
  PowerOn();
 800178e:	f000 f809 	bl	80017a4 <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001792:	f00f f99f 	bl	8010ad4 <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 8001796:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <MASS_init+0x20>)
 8001798:	601c      	str	r4, [r3, #0]
}
 800179a:	bd10      	pop	{r4, pc}
 800179c:	20000ee4 	.word	0x20000ee4
 80017a0:	20000720 	.word	0x20000720

080017a4 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 80017a4:	b510      	push	{r4, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;
  
  /*** cable plugged-in ? ***/
  /*while(!CablePluggedIn());*/
  USB_Cable_Config(ENABLE);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff f8f2 	bl	8000990 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <PowerOn+0x24>)
 80017ae:	2401      	movs	r4, #1
 80017b0:	601c      	str	r4, [r3, #0]
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <PowerOn+0x28>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80017b4:	4c06      	ldr	r4, [pc, #24]	; (80017d0 <PowerOn+0x2c>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80017b6:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80017b8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80017bc:	8001      	strh	r1, [r0, #0]
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80017be:	601a      	str	r2, [r3, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
#endif /* STM32F10X_CL */
  
  return USB_SUCCESS;
}
 80017c0:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80017c2:	6022      	str	r2, [r4, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
 80017c4:	6019      	str	r1, [r3, #0]
#endif /* STM32F10X_CL */
  
  return USB_SUCCESS;
}
 80017c6:	bd10      	pop	{r4, pc}
 80017c8:	40005c40 	.word	0x40005c40
 80017cc:	20000ee8 	.word	0x20000ee8
 80017d0:	40005c44 	.word	0x40005c44

080017d4 <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 80017d4:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL  
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
  /* clear interrupt status register */
  _SetISTR(0);
 80017d6:	4906      	ldr	r1, [pc, #24]	; (80017f0 <PowerOff+0x1c>)
*******************************************************************************/
RESULT PowerOff()
{
#ifndef STM32F10X_CL  
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 80017d8:	4d06      	ldr	r5, [pc, #24]	; (80017f4 <PowerOff+0x20>)
  /* clear interrupt status register */
  _SetISTR(0);
 80017da:	2400      	movs	r4, #0
*******************************************************************************/
RESULT PowerOff()
{
#ifndef STM32F10X_CL  
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 80017dc:	2201      	movs	r2, #1
  /* clear interrupt status register */
  _SetISTR(0);
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 80017de:	4620      	mov	r0, r4
*******************************************************************************/
RESULT PowerOff()
{
#ifndef STM32F10X_CL  
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 80017e0:	602a      	str	r2, [r5, #0]
  /* clear interrupt status register */
  _SetISTR(0);
 80017e2:	600c      	str	r4, [r1, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 80017e4:	f7ff f8d4 	bl	8000990 <USB_Cable_Config>
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 80017e8:	2303      	movs	r3, #3
 80017ea:	602b      	str	r3, [r5, #0]
  /* sw variables reset */
  /* ... */
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 80017ec:	4620      	mov	r0, r4
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	40005c44 	.word	0x40005c44
 80017f4:	40005c40 	.word	0x40005c40

080017f8 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80017f8:	b510      	push	{r4, lr}

  /* suspend preparation */
  /* ... */
#ifdef CRT
  GREEN_LED_OFF;
 80017fa:	4c0e      	ldr	r4, [pc, #56]	; (8001834 <Suspend+0x3c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	4620      	mov	r0, r4
 8001800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001804:	f00c f8b9 	bl	800d97a <GPIO_WriteBit>
  CHRG_OFF;
 8001808:	4620      	mov	r0, r4
 800180a:	2104      	movs	r1, #4
 800180c:	2200      	movs	r2, #0
 800180e:	f00c f8b4 	bl	800d97a <GPIO_WriteBit>
  
#ifndef STM32F10X_CL
  uint16_t wCNTR;

  /* macrocell enters suspend mode */
  wCNTR = _GetCNTR();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <Suspend+0x40>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	fa1f fc80 	uxth.w	ip, r0
  wCNTR |= CNTR_FSUSP;
  _SetCNTR(wCNTR);
 800181a:	f04c 0208 	orr.w	r2, ip, #8
 800181e:	601a      	str	r2, [r3, #0]
  /* power reduction */
  /* ... on connected devices */

#ifndef STM32F10X_CL
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	b288      	uxth	r0, r1
  wCNTR |= CNTR_LPMODE;
  _SetCNTR(wCNTR);
 8001824:	f040 0204 	orr.w	r2, r0, #4
 8001828:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  /* switch-off the clocks */
  /* ... */
  Enter_LowPowerMode();
}
 800182a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _SetCNTR(wCNTR);
#endif /* STM32F10X_CL */

  /* switch-off the clocks */
  /* ... */
  Enter_LowPowerMode();
 800182e:	f7ff b857 	b.w	80008e0 <Enter_LowPowerMode>
 8001832:	bf00      	nop
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40005c40 	.word	0x40005c40

0800183c <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 800183c:	b570      	push	{r4, r5, r6, lr}
  /* ...  */
#ifndef STM32F10X_CL
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800183e:	4c0d      	ldr	r4, [pc, #52]	; (8001874 <Resume_Init+0x38>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 8001840:	f64f 71fb 	movw	r1, #65531	; 0xfffb
  /* ...  */
#ifndef STM32F10X_CL
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001844:	6822      	ldr	r2, [r4, #0]
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 8001846:	4d0c      	ldr	r5, [pc, #48]	; (8001878 <Resume_Init+0x3c>)
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 8001848:	ea02 0001 	and.w	r0, r2, r1
 800184c:	6020      	str	r0, [r4, #0]
#endif /* STM32F10X_CL */
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800184e:	f7ff f84d 	bl	80008ec <Leave_LowPowerMode>

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001852:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 8001856:	2104      	movs	r1, #4
 8001858:	2201      	movs	r2, #1
 800185a:	4628      	mov	r0, r5
  /* ... on connected devices */
  Leave_LowPowerMode();

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800185c:	6023      	str	r3, [r4, #0]
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 800185e:	f00c f88c 	bl	800d97a <GPIO_WriteBit>
  GREEN_LED_ON;
 8001862:	4628      	mov	r0, r5
 8001864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001868:	2201      	movs	r2, #1
#endif
}
 800186a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
  GREEN_LED_ON;
 800186e:	f00c b884 	b.w	800d97a <GPIO_WriteBit>
 8001872:	bf00      	nop
 8001874:	40005c40 	.word	0x40005c40
 8001878:	40010c00 	.word	0x40010c00

0800187c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4c37      	ldr	r4, [pc, #220]	; (800195c <Resume+0xe0>)
#ifndef STM32F10X_CL
  uint16_t wCNTR;
#endif /* STM32F10X_CL */

  if (eResumeSetVal != RESUME_ESOF)
 8001880:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8001882:	bf18      	it	ne
 8001884:	7020      	strbne	r0, [r4, #0]

  switch (ResumeS.eState)
 8001886:	7823      	ldrb	r3, [r4, #0]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d814      	bhi.n	80018b6 <Resume+0x3a>
 800188c:	e8df f003 	tbb	[pc, r3]
 8001890:	4f4a3016 	.word	0x4f4a3016
 8001894:	0359      	.short	0x0359
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:
    #ifndef STM32F10X_CL      
      ResumeS.bESOFcnt--;
 8001896:	7863      	ldrb	r3, [r4, #1]
 8001898:	1e59      	subs	r1, r3, #1
 800189a:	7061      	strb	r1, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800189c:	7860      	ldrb	r0, [r4, #1]
 800189e:	b960      	cbnz	r0, 80018ba <Resume+0x3e>
      {
     #endif /* STM32F10X_CL */    
       #ifdef STM32F10X_CL
        OTGD_FS_ResetRemoteWakeup();
       #else
        wCNTR = _GetCNTR();
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <Resume+0xe4>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 80018a2:	f64f 7cef 	movw	ip, #65519	; 0xffef
      {
     #endif /* STM32F10X_CL */    
       #ifdef STM32F10X_CL
        OTGD_FS_ResetRemoteWakeup();
       #else
        wCNTR = _GetCNTR();
 80018a6:	6813      	ldr	r3, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
       #endif /* STM32F10X_CL */
        ResumeS.eState = RESUME_OFF;
 80018a8:	482c      	ldr	r0, [pc, #176]	; (800195c <Resume+0xe0>)
       #ifdef STM32F10X_CL
        OTGD_FS_ResetRemoteWakeup();
       #else
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 80018aa:	ea03 010c 	and.w	r1, r3, ip
 80018ae:	6011      	str	r1, [r2, #0]
       #endif /* STM32F10X_CL */
        ResumeS.eState = RESUME_OFF;
 80018b0:	2206      	movs	r2, #6
 80018b2:	7002      	strb	r2, [r0, #0]
 80018b4:	bd38      	pop	{r3, r4, r5, pc}
     #endif /* STM32F10X_CL */
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80018b6:	2006      	movs	r0, #6
 80018b8:	7020      	strb	r0, [r4, #0]
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
  /* ...  */
#ifndef STM32F10X_CL
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80018bc:	4d28      	ldr	r5, [pc, #160]	; (8001960 <Resume+0xe4>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 80018be:	f64f 7cfb 	movw	ip, #65531	; 0xfffb
  /* ...  */
#ifndef STM32F10X_CL
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80018c2:	682a      	ldr	r2, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 80018c4:	ea02 010c 	and.w	r1, r2, ip
 80018c8:	6029      	str	r1, [r5, #0]
#endif /* STM32F10X_CL */
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80018ca:	f7ff f80f 	bl	80008ec <Leave_LowPowerMode>

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80018ce:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <Resume+0xe8>)
 80018d4:	2104      	movs	r1, #4
 80018d6:	2201      	movs	r2, #1
  /* ... on connected devices */
  Leave_LowPowerMode();

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80018d8:	602b      	str	r3, [r5, #0]
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 80018da:	f00c f84e 	bl	800d97a <GPIO_WriteBit>
  GREEN_LED_ON;
 80018de:	4821      	ldr	r0, [pc, #132]	; (8001964 <Resume+0xe8>)
 80018e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e4:	2201      	movs	r2, #1
 80018e6:	f00c f848 	bl	800d97a <GPIO_WriteBit>

  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_OFF;
 80018ea:	2006      	movs	r0, #6
 80018ec:	7020      	strb	r0, [r4, #0]
      break;
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
  /* ...  */
#ifndef STM32F10X_CL
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80018f0:	4d1b      	ldr	r5, [pc, #108]	; (8001960 <Resume+0xe4>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 80018f2:	f64f 7efb 	movw	lr, #65531	; 0xfffb
  /* ...  */
#ifndef STM32F10X_CL
  uint16_t wCNTR;
  
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80018f6:	682a      	ldr	r2, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 80018f8:	ea02 010e 	and.w	r1, r2, lr
 80018fc:	6029      	str	r1, [r5, #0]
#endif /* STM32F10X_CL */
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80018fe:	f7fe fff5 	bl	80008ec <Leave_LowPowerMode>

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001902:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 8001906:	4817      	ldr	r0, [pc, #92]	; (8001964 <Resume+0xe8>)
 8001908:	2104      	movs	r1, #4
 800190a:	2201      	movs	r2, #1
  /* ... on connected devices */
  Leave_LowPowerMode();

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800190c:	602b      	str	r3, [r5, #0]
#endif /* STM32F10X_CL */
  
  /* reverse suspend preparation */
  /* ... */
#ifdef CRT
  CHRG_ON;
 800190e:	f00c f834 	bl	800d97a <GPIO_WriteBit>
  GREEN_LED_ON;
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <Resume+0xe8>)
 8001914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001918:	2201      	movs	r2, #1
 800191a:	f00c f82e 	bl	800d97a <GPIO_WriteBit>
      Resume_Init();
      ResumeS.eState = RESUME_OFF;
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 800191e:	2004      	movs	r0, #4
 8001920:	7020      	strb	r0, [r4, #0]
      break;
 8001922:	bd38      	pop	{r3, r4, r5, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8001924:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 8001926:	2003      	movs	r0, #3
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8001928:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 800192a:	7020      	strb	r0, [r4, #0]
      break;
 800192c:	bd38      	pop	{r3, r4, r5, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800192e:	7860      	ldrb	r0, [r4, #1]
 8001930:	1e42      	subs	r2, r0, #1
 8001932:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001934:	7861      	ldrb	r1, [r4, #1]
 8001936:	2900      	cmp	r1, #0
 8001938:	d1bf      	bne.n	80018ba <Resume+0x3e>
        ResumeS.eState = RESUME_START;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <Resume+0xe0>)
 800193c:	2104      	movs	r1, #4
 800193e:	7019      	strb	r1, [r3, #0]
 8001940:	bd38      	pop	{r3, r4, r5, pc}
      break;
    case RESUME_START:
     #ifdef STM32F10X_CL
      OTGD_FS_SetRemoteWakeup();
     #else 
      wCNTR = _GetCNTR();
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <Resume+0xe4>)
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
     #endif /* STM32F10X_CL */
      ResumeS.eState = RESUME_ON;
 8001944:	2005      	movs	r0, #5
      break;
    case RESUME_START:
     #ifdef STM32F10X_CL
      OTGD_FS_SetRemoteWakeup();
     #else 
      wCNTR = _GetCNTR();
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	fa1f fc82 	uxth.w	ip, r2
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800194c:	f04c 0110 	orr.w	r1, ip, #16
     #endif /* STM32F10X_CL */
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8001950:	220a      	movs	r2, #10
     #ifdef STM32F10X_CL
      OTGD_FS_SetRemoteWakeup();
     #else 
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8001952:	6019      	str	r1, [r3, #0]
     #endif /* STM32F10X_CL */
      ResumeS.eState = RESUME_ON;
 8001954:	7020      	strb	r0, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8001956:	7062      	strb	r2, [r4, #1]
      break;
 8001958:	bd38      	pop	{r3, r4, r5, pc}
 800195a:	bf00      	nop
 800195c:	20000b00 	.word	0x20000b00
 8001960:	40005c40 	.word	0x40005c40
 8001964:	40010c00 	.word	0x40010c00

08001968 <SCSI_Inquiry_Cmd>:
void SCSI_Inquiry_Cmd(uint8_t lun)
{
  uint8_t* Inquiry_Data;
  uint16_t Inquiry_Data_Length;

  if (CBW.CB[1] & 0x01)/*Evpd is set*/
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <SCSI_Inquiry_Cmd+0x28>)
 800196a:	7c1a      	ldrb	r2, [r3, #16]
 800196c:	f012 0f01 	tst.w	r2, #1
 8001970:	d10b      	bne.n	800198a <SCSI_Inquiry_Cmd+0x22>
    else
    {
      Inquiry_Data = Standard_Inquiry_Data2;
    }

    if (CBW.CB[4] <= STANDARD_INQUIRY_DATA_LEN)
 8001972:	7cd9      	ldrb	r1, [r3, #19]
  else
  {

    if ( lun == 0)
    {
      Inquiry_Data = Standard_Inquiry_Data;
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <SCSI_Inquiry_Cmd+0x2c>)
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <SCSI_Inquiry_Cmd+0x30>)
    {
      Inquiry_Data = Standard_Inquiry_Data2;
    }

    if (CBW.CB[4] <= STANDARD_INQUIRY_DATA_LEN)
      Inquiry_Data_Length = CBW.CB[4];
 8001978:	2924      	cmp	r1, #36	; 0x24
 800197a:	bf28      	it	cs
 800197c:	2124      	movcs	r1, #36	; 0x24
  else
  {

    if ( lun == 0)
    {
      Inquiry_Data = Standard_Inquiry_Data;
 800197e:	2800      	cmp	r0, #0
 8001980:	bf14      	ite	ne
 8001982:	4610      	movne	r0, r2
 8001984:	4618      	moveq	r0, r3
      Inquiry_Data_Length = CBW.CB[4];
    else
      Inquiry_Data_Length = STANDARD_INQUIRY_DATA_LEN;

  }
  Transfer_Data_Request(Inquiry_Data, Inquiry_Data_Length);
 8001986:	f7ff bd05 	b.w	8001394 <Transfer_Data_Request>
  uint8_t* Inquiry_Data;
  uint16_t Inquiry_Data_Length;

  if (CBW.CB[1] & 0x01)/*Evpd is set*/
  {
    Inquiry_Data = Page00_Inquiry_Data;
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <SCSI_Inquiry_Cmd+0x34>)
    Inquiry_Data_Length = 5;
 800198c:	2105      	movs	r1, #5
 800198e:	e7fa      	b.n	8001986 <SCSI_Inquiry_Cmd+0x1e>
 8001990:	20000a80 	.word	0x20000a80
 8001994:	20000028 	.word	0x20000028
 8001998:	20000004 	.word	0x20000004
 800199c:	20000708 	.word	0x20000708

080019a0 <SCSI_ReadFormatCapacity_Cmd>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_ReadFormatCapacity_Cmd(uint8_t lun)
{
 80019a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a4:	4604      	mov	r4, r0

  if (MAL_GetStatus(lun) != 0 )
 80019a6:	f7ff f925 	bl	8000bf4 <MAL_GetStatus>
 80019aa:	b9e0      	cbnz	r0, 80019e6 <SCSI_ReadFormatCapacity_Cmd+0x46>
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }
  ReadFormatCapacity_Data[4] = (uint8_t)(Mass_Block_Count[lun] >> 24);
 80019ac:	4815      	ldr	r0, [pc, #84]	; (8001a04 <SCSI_ReadFormatCapacity_Cmd+0x64>)
  ReadFormatCapacity_Data[5] = (uint8_t)(Mass_Block_Count[lun] >> 16);
  ReadFormatCapacity_Data[6] = (uint8_t)(Mass_Block_Count[lun] >>  8);
  ReadFormatCapacity_Data[7] = (uint8_t)(Mass_Block_Count[lun]);

  ReadFormatCapacity_Data[9] = (uint8_t)(Mass_Block_Size[lun] >>  16);
 80019ae:	4916      	ldr	r1, [pc, #88]	; (8001a08 <SCSI_ReadFormatCapacity_Cmd+0x68>)
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }
  ReadFormatCapacity_Data[4] = (uint8_t)(Mass_Block_Count[lun] >> 24);
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <SCSI_ReadFormatCapacity_Cmd+0x6c>)
 80019b2:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
  ReadFormatCapacity_Data[5] = (uint8_t)(Mass_Block_Count[lun] >> 16);
  ReadFormatCapacity_Data[6] = (uint8_t)(Mass_Block_Count[lun] >>  8);
  ReadFormatCapacity_Data[7] = (uint8_t)(Mass_Block_Count[lun]);

  ReadFormatCapacity_Data[9] = (uint8_t)(Mass_Block_Size[lun] >>  16);
 80019b6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }
  ReadFormatCapacity_Data[4] = (uint8_t)(Mass_Block_Count[lun] >> 24);
 80019ba:	ea4f 6812 	mov.w	r8, r2, lsr #24
  ReadFormatCapacity_Data[5] = (uint8_t)(Mass_Block_Count[lun] >> 16);
 80019be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  ReadFormatCapacity_Data[6] = (uint8_t)(Mass_Block_Count[lun] >>  8);
 80019c2:	0a17      	lsrs	r7, r2, #8
  ReadFormatCapacity_Data[7] = (uint8_t)(Mass_Block_Count[lun]);

  ReadFormatCapacity_Data[9] = (uint8_t)(Mass_Block_Size[lun] >>  16);
 80019c4:	0c26      	lsrs	r6, r4, #16
  ReadFormatCapacity_Data[10] = (uint8_t)(Mass_Block_Size[lun] >>  8);
 80019c6:	0a25      	lsrs	r5, r4, #8
  ReadFormatCapacity_Data[11] = (uint8_t)(Mass_Block_Size[lun]);
  Transfer_Data_Request(ReadFormatCapacity_Data, READ_FORMAT_CAPACITY_DATA_LEN);
 80019c8:	4618      	mov	r0, r3
 80019ca:	210c      	movs	r1, #12
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }
  ReadFormatCapacity_Data[4] = (uint8_t)(Mass_Block_Count[lun] >> 24);
 80019cc:	f883 8004 	strb.w	r8, [r3, #4]
  ReadFormatCapacity_Data[5] = (uint8_t)(Mass_Block_Count[lun] >> 16);
 80019d0:	f883 c005 	strb.w	ip, [r3, #5]
  ReadFormatCapacity_Data[6] = (uint8_t)(Mass_Block_Count[lun] >>  8);
 80019d4:	719f      	strb	r7, [r3, #6]
  ReadFormatCapacity_Data[7] = (uint8_t)(Mass_Block_Count[lun]);
 80019d6:	71da      	strb	r2, [r3, #7]

  ReadFormatCapacity_Data[9] = (uint8_t)(Mass_Block_Size[lun] >>  16);
 80019d8:	725e      	strb	r6, [r3, #9]
  ReadFormatCapacity_Data[10] = (uint8_t)(Mass_Block_Size[lun] >>  8);
 80019da:	729d      	strb	r5, [r3, #10]
  ReadFormatCapacity_Data[11] = (uint8_t)(Mass_Block_Size[lun]);
 80019dc:	72dc      	strb	r4, [r3, #11]
  Transfer_Data_Request(ReadFormatCapacity_Data, READ_FORMAT_CAPACITY_DATA_LEN);
}
 80019de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ReadFormatCapacity_Data[7] = (uint8_t)(Mass_Block_Count[lun]);

  ReadFormatCapacity_Data[9] = (uint8_t)(Mass_Block_Size[lun] >>  16);
  ReadFormatCapacity_Data[10] = (uint8_t)(Mass_Block_Size[lun] >>  8);
  ReadFormatCapacity_Data[11] = (uint8_t)(Mass_Block_Size[lun]);
  Transfer_Data_Request(ReadFormatCapacity_Data, READ_FORMAT_CAPACITY_DATA_LEN);
 80019e2:	f7ff bcd7 	b.w	8001394 <Transfer_Data_Request>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <SCSI_ReadFormatCapacity_Cmd+0x70>)
 80019e8:	2202      	movs	r2, #2
{

  if (MAL_GetStatus(lun) != 0 )
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 80019ea:	2001      	movs	r0, #1
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 80019ec:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 80019ee:	223a      	movs	r2, #58	; 0x3a
{

  if (MAL_GetStatus(lun) != 0 )
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 80019f0:	4601      	mov	r1, r0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 80019f2:	731a      	strb	r2, [r3, #12]
{

  if (MAL_GetStatus(lun) != 0 )
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 80019f4:	f7ff fce8 	bl	80013c8 <Set_CSW>
    Bot_Abort(DIR_IN);
 80019f8:	2000      	movs	r0, #0

  ReadFormatCapacity_Data[9] = (uint8_t)(Mass_Block_Size[lun] >>  16);
  ReadFormatCapacity_Data[10] = (uint8_t)(Mass_Block_Size[lun] >>  8);
  ReadFormatCapacity_Data[11] = (uint8_t)(Mass_Block_Size[lun]);
  Transfer_Data_Request(ReadFormatCapacity_Data, READ_FORMAT_CAPACITY_DATA_LEN);
}
 80019fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  if (MAL_GetStatus(lun) != 0 )
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
 80019fe:	f7ff bd01 	b.w	8001404 <Bot_Abort>
 8001a02:	bf00      	nop
 8001a04:	20000a6c 	.word	0x20000a6c
 8001a08:	20000a64 	.word	0x20000a64
 8001a0c:	2000006c 	.word	0x2000006c
 8001a10:	20000058 	.word	0x20000058

08001a14 <SCSI_ReadCapacity10_Cmd>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_ReadCapacity10_Cmd(uint8_t lun)
{
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	4605      	mov	r5, r0

  if (MAL_GetStatus(lun))
 8001a1a:	f7ff f8eb 	bl	8000bf4 <MAL_GetStatus>
 8001a1e:	bb08      	cbnz	r0, 8001a64 <SCSI_ReadCapacity10_Cmd+0x50>
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }

  ReadCapacity10_Data[0] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 24);
 8001a20:	4917      	ldr	r1, [pc, #92]	; (8001a80 <SCSI_ReadCapacity10_Cmd+0x6c>)
  ReadCapacity10_Data[1] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 16);
  ReadCapacity10_Data[2] = (uint8_t)((Mass_Block_Count[lun] - 1) >>  8);
  ReadCapacity10_Data[3] = (uint8_t)(Mass_Block_Count[lun] - 1);

  ReadCapacity10_Data[4] = (uint8_t)(Mass_Block_Size[lun] >>  24);
 8001a22:	4818      	ldr	r0, [pc, #96]	; (8001a84 <SCSI_ReadCapacity10_Cmd+0x70>)
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }

  ReadCapacity10_Data[0] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 24);
 8001a24:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <SCSI_ReadCapacity10_Cmd+0x74>)
  ReadCapacity10_Data[1] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 16);
  ReadCapacity10_Data[2] = (uint8_t)((Mass_Block_Count[lun] - 1) >>  8);
  ReadCapacity10_Data[3] = (uint8_t)(Mass_Block_Count[lun] - 1);

  ReadCapacity10_Data[4] = (uint8_t)(Mass_Block_Size[lun] >>  24);
 8001a2a:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }

  ReadCapacity10_Data[0] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 24);
 8001a2e:	3c01      	subs	r4, #1
 8001a30:	ea4f 6814 	mov.w	r8, r4, lsr #24
  ReadCapacity10_Data[1] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 16);
 8001a34:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  ReadCapacity10_Data[2] = (uint8_t)((Mass_Block_Count[lun] - 1) >>  8);
 8001a38:	0a27      	lsrs	r7, r4, #8
  ReadCapacity10_Data[3] = (uint8_t)(Mass_Block_Count[lun] - 1);

  ReadCapacity10_Data[4] = (uint8_t)(Mass_Block_Size[lun] >>  24);
 8001a3a:	0e16      	lsrs	r6, r2, #24
  ReadCapacity10_Data[5] = (uint8_t)(Mass_Block_Size[lun] >>  16);
 8001a3c:	ea4f 4912 	mov.w	r9, r2, lsr #16
  ReadCapacity10_Data[6] = (uint8_t)(Mass_Block_Size[lun] >>  8);
 8001a40:	0a15      	lsrs	r5, r2, #8
  ReadCapacity10_Data[7] = (uint8_t)(Mass_Block_Size[lun]);
  Transfer_Data_Request(ReadCapacity10_Data, READ_CAPACITY10_DATA_LEN);
 8001a42:	4618      	mov	r0, r3
 8001a44:	2108      	movs	r1, #8
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
    return;
  }

  ReadCapacity10_Data[0] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 24);
 8001a46:	f883 8000 	strb.w	r8, [r3]
  ReadCapacity10_Data[1] = (uint8_t)((Mass_Block_Count[lun] - 1) >> 16);
 8001a4a:	f883 c001 	strb.w	ip, [r3, #1]
  ReadCapacity10_Data[2] = (uint8_t)((Mass_Block_Count[lun] - 1) >>  8);
 8001a4e:	709f      	strb	r7, [r3, #2]
  ReadCapacity10_Data[3] = (uint8_t)(Mass_Block_Count[lun] - 1);
 8001a50:	70dc      	strb	r4, [r3, #3]

  ReadCapacity10_Data[4] = (uint8_t)(Mass_Block_Size[lun] >>  24);
 8001a52:	711e      	strb	r6, [r3, #4]
  ReadCapacity10_Data[5] = (uint8_t)(Mass_Block_Size[lun] >>  16);
 8001a54:	f883 9005 	strb.w	r9, [r3, #5]
  ReadCapacity10_Data[6] = (uint8_t)(Mass_Block_Size[lun] >>  8);
 8001a58:	719d      	strb	r5, [r3, #6]
  ReadCapacity10_Data[7] = (uint8_t)(Mass_Block_Size[lun]);
 8001a5a:	71da      	strb	r2, [r3, #7]
  Transfer_Data_Request(ReadCapacity10_Data, READ_CAPACITY10_DATA_LEN);
}
 8001a5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  ReadCapacity10_Data[4] = (uint8_t)(Mass_Block_Size[lun] >>  24);
  ReadCapacity10_Data[5] = (uint8_t)(Mass_Block_Size[lun] >>  16);
  ReadCapacity10_Data[6] = (uint8_t)(Mass_Block_Size[lun] >>  8);
  ReadCapacity10_Data[7] = (uint8_t)(Mass_Block_Size[lun]);
  Transfer_Data_Request(ReadCapacity10_Data, READ_CAPACITY10_DATA_LEN);
 8001a60:	f7ff bc98 	b.w	8001394 <Transfer_Data_Request>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <SCSI_ReadCapacity10_Cmd+0x78>)
 8001a66:	2202      	movs	r2, #2
{

  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001a68:	2001      	movs	r0, #1
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001a6a:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001a6c:	223a      	movs	r2, #58	; 0x3a
{

  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001a6e:	4601      	mov	r1, r0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001a70:	731a      	strb	r2, [r3, #12]
{

  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001a72:	f7ff fca9 	bl	80013c8 <Set_CSW>
    Bot_Abort(DIR_IN);
 8001a76:	2000      	movs	r0, #0
  ReadCapacity10_Data[4] = (uint8_t)(Mass_Block_Size[lun] >>  24);
  ReadCapacity10_Data[5] = (uint8_t)(Mass_Block_Size[lun] >>  16);
  ReadCapacity10_Data[6] = (uint8_t)(Mass_Block_Size[lun] >>  8);
  ReadCapacity10_Data[7] = (uint8_t)(Mass_Block_Size[lun]);
  Transfer_Data_Request(ReadCapacity10_Data, READ_CAPACITY10_DATA_LEN);
}
 8001a78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
 8001a7c:	f7ff bcc2 	b.w	8001404 <Bot_Abort>
 8001a80:	20000a6c 	.word	0x20000a6c
 8001a84:	20000a64 	.word	0x20000a64
 8001a88:	20000710 	.word	0x20000710
 8001a8c:	20000058 	.word	0x20000058

08001a90 <SCSI_ModeSense6_Cmd>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_ModeSense6_Cmd (uint8_t lun)
{
  Transfer_Data_Request(Mode_Sense6_data, MODE_SENSE6_DATA_LEN);
 8001a90:	4801      	ldr	r0, [pc, #4]	; (8001a98 <SCSI_ModeSense6_Cmd+0x8>)
 8001a92:	2104      	movs	r1, #4
 8001a94:	f7ff bc7e 	b.w	8001394 <Transfer_Data_Request>
 8001a98:	2000004c 	.word	0x2000004c

08001a9c <SCSI_ModeSense10_Cmd>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_ModeSense10_Cmd (uint8_t lun)
{
  Transfer_Data_Request(Mode_Sense10_data, MODE_SENSE10_DATA_LEN);
 8001a9c:	4801      	ldr	r0, [pc, #4]	; (8001aa4 <SCSI_ModeSense10_Cmd+0x8>)
 8001a9e:	2108      	movs	r1, #8
 8001aa0:	f7ff bc78 	b.w	8001394 <Transfer_Data_Request>
 8001aa4:	20000050 	.word	0x20000050

08001aa8 <SCSI_RequestSense_Cmd>:
  }
  else
  {
    Request_Sense_data_Length = REQUEST_SENSE_DATA_LEN;
  }
  Transfer_Data_Request(Scsi_Sense_Data, Request_Sense_data_Length);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <SCSI_RequestSense_Cmd+0x10>)
 8001aaa:	4804      	ldr	r0, [pc, #16]	; (8001abc <SCSI_RequestSense_Cmd+0x14>)
 8001aac:	7cd9      	ldrb	r1, [r3, #19]
 8001aae:	2912      	cmp	r1, #18
 8001ab0:	bf28      	it	cs
 8001ab2:	2112      	movcs	r1, #18
 8001ab4:	f7ff bc6e 	b.w	8001394 <Transfer_Data_Request>
 8001ab8:	20000a80 	.word	0x20000a80
 8001abc:	20000058 	.word	0x20000058

08001ac0 <Set_Scsi_Sense_Data>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001ac0:	4b01      	ldr	r3, [pc, #4]	; (8001ac8 <Set_Scsi_Sense_Data+0x8>)
 8001ac2:	7099      	strb	r1, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001ac4:	731a      	strb	r2, [r3, #12]
}
 8001ac6:	4770      	bx	lr
 8001ac8:	20000058 	.word	0x20000058

08001acc <SCSI_Start_Stop_Unit_Cmd>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Start_Stop_Unit_Cmd(uint8_t lun)
{
  Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001acc:	2000      	movs	r0, #0
 8001ace:	2101      	movs	r1, #1
 8001ad0:	f7ff bc7a 	b.w	80013c8 <Set_CSW>

08001ad4 <SCSI_Read10_Cmd>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Read10_Cmd(uint8_t lun , uint32_t LBA , uint32_t BlockNbr)
{
 8001ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if (Bot_State == BOT_IDLE)
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <SCSI_Read10_Cmd+0x9c>)
 8001ada:	781c      	ldrb	r4, [r3, #0]
 8001adc:	b11c      	cbz	r4, 8001ae6 <SCSI_Read10_Cmd+0x12>
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    }
    return;
  }
  else if (Bot_State == BOT_DATA_IN)
 8001ade:	2c02      	cmp	r4, #2
 8001ae0:	d031      	beq.n	8001b46 <SCSI_Read10_Cmd+0x72>
 8001ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void SCSI_Read10_Cmd(uint8_t lun , uint32_t LBA , uint32_t BlockNbr)
{

  if (Bot_State == BOT_IDLE)
  {
    if (!(SCSI_Address_Management(CBW.bLUN, SCSI_READ10, LBA, BlockNbr)))/*address out of range*/
 8001ae6:	4e23      	ldr	r6, [pc, #140]	; (8001b74 <SCSI_Read10_Cmd+0xa0>)
* Return         : Read\Write status (bool).
*******************************************************************************/
bool SCSI_Address_Management(uint8_t lun , uint8_t Cmd , uint32_t LBA , uint32_t BlockNbr)
{

  if ((LBA + BlockNbr) > Mass_Block_Count[lun] )
 8001ae8:	f8df c090 	ldr.w	ip, [pc, #144]	; 8001b7c <SCSI_Read10_Cmd+0xa8>
 8001aec:	7b77      	ldrb	r7, [r6, #13]
 8001aee:	eb02 0801 	add.w	r8, r2, r1
 8001af2:	f85c c027 	ldr.w	ip, [ip, r7, lsl #2]
 8001af6:	45e0      	cmp	r8, ip
 8001af8:	d817      	bhi.n	8001b2a <SCSI_Read10_Cmd+0x56>
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    return (FALSE);
  }


  if (CBW.dDataLength != BlockNbr * Mass_Block_Size[lun])
 8001afa:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001b80 <SCSI_Read10_Cmd+0xac>
 8001afe:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8001b02:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8001b06:	fb07 f502 	mul.w	r5, r7, r2
 8001b0a:	45a8      	cmp	r8, r5
 8001b0c:	d01f      	beq.n	8001b4e <SCSI_Read10_Cmd+0x7a>
    {
      Bot_Abort(BOTH_DIR);
    }
    else
    {
      Bot_Abort(DIR_IN);
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fc78 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <SCSI_Read10_Cmd+0xa4>)
    else
    {
      Bot_Abort(DIR_IN);
    }
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001b16:	2001      	movs	r0, #1
 8001b18:	4621      	mov	r1, r4
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	731a      	strb	r2, [r3, #12]
  }
  else if (Bot_State == BOT_DATA_IN)
  {
    Read_Memory(lun , LBA , BlockNbr);
  }
}
 8001b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
    else
    {
      Bot_Abort(BOTH_DIR);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001b26:	f7ff bc4f 	b.w	80013c8 <Set_CSW>
  {
    if (Cmd == SCSI_WRITE10)
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff fc6a 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <SCSI_Read10_Cmd+0xa4>)
 8001b32:	2205      	movs	r2, #5
 8001b34:	709a      	strb	r2, [r3, #2]
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001b36:	2001      	movs	r0, #1
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001b38:	2221      	movs	r2, #33	; 0x21
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001b3a:	4621      	mov	r1, r4
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001b3c:	731a      	strb	r2, [r3, #12]
  }
  else if (Bot_State == BOT_DATA_IN)
  {
    Read_Memory(lun , LBA , BlockNbr);
  }
}
 8001b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001b42:	f7ff bc41 	b.w	80013c8 <Set_CSW>
  }
  else if (Bot_State == BOT_DATA_IN)
  {
    Read_Memory(lun , LBA , BlockNbr);
  }
}
 8001b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
    return;
  }
  else if (Bot_State == BOT_DATA_IN)
  {
    Read_Memory(lun , LBA , BlockNbr);
 8001b4a:	f7ff b87b 	b.w	8000c44 <Read_Memory>
    if (!(SCSI_Address_Management(CBW.bLUN, SCSI_READ10, LBA, BlockNbr)))/*address out of range*/
    {
      return;
    }

    if ((CBW.bmFlags & 0x80) != 0)
 8001b4e:	f996 400c 	ldrsb.w	r4, [r6, #12]
 8001b52:	2c00      	cmp	r4, #0
 8001b54:	db06      	blt.n	8001b64 <SCSI_Read10_Cmd+0x90>
      Bot_State = BOT_DATA_IN;
      Read_Memory(lun, LBA , BlockNbr);
    }
    else
    {
      Bot_Abort(BOTH_DIR);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7ff fc54 	bl	8001404 <Bot_Abort>
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001b5c:	2001      	movs	r0, #1
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SCSI_Read10_Cmd+0xa4>)
    }
    else
    {
      Bot_Abort(BOTH_DIR);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001b60:	4601      	mov	r1, r0
 8001b62:	e7da      	b.n	8001b1a <SCSI_Read10_Cmd+0x46>
      return;
    }

    if ((CBW.bmFlags & 0x80) != 0)
    {
      Bot_State = BOT_DATA_IN;
 8001b64:	2402      	movs	r4, #2
 8001b66:	701c      	strb	r4, [r3, #0]
  }
  else if (Bot_State == BOT_DATA_IN)
  {
    Read_Memory(lun , LBA , BlockNbr);
  }
}
 8001b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }

    if ((CBW.bmFlags & 0x80) != 0)
    {
      Bot_State = BOT_DATA_IN;
      Read_Memory(lun, LBA , BlockNbr);
 8001b6c:	f7ff b86a 	b.w	8000c44 <Read_Memory>
 8001b70:	20000aa2 	.word	0x20000aa2
 8001b74:	20000a80 	.word	0x20000a80
 8001b78:	20000058 	.word	0x20000058
 8001b7c:	20000a6c 	.word	0x20000a6c
 8001b80:	20000a64 	.word	0x20000a64

08001b84 <SCSI_Write10_Cmd>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Write10_Cmd(uint8_t lun , uint32_t LBA , uint32_t BlockNbr)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}

  if (Bot_State == BOT_IDLE)
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <SCSI_Write10_Cmd+0x98>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Write10_Cmd(uint8_t lun , uint32_t LBA , uint32_t BlockNbr)
{
 8001b88:	460e      	mov	r6, r1

  if (Bot_State == BOT_IDLE)
 8001b8a:	781c      	ldrb	r4, [r3, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Write10_Cmd(uint8_t lun , uint32_t LBA , uint32_t BlockNbr)
{
 8001b8c:	4615      	mov	r5, r2

  if (Bot_State == BOT_IDLE)
 8001b8e:	b114      	cbz	r4, 8001b96 <SCSI_Write10_Cmd+0x12>
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    }
    return;
  }
  else if (Bot_State == BOT_DATA_OUT)
 8001b90:	2c01      	cmp	r4, #1
 8001b92:	d02f      	beq.n	8001bf4 <SCSI_Write10_Cmd+0x70>
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
void SCSI_Write10_Cmd(uint8_t lun , uint32_t LBA , uint32_t BlockNbr)
{

  if (Bot_State == BOT_IDLE)
  {
    if (!(SCSI_Address_Management(CBW.bLUN, SCSI_WRITE10 , LBA, BlockNbr)))/*address out of range*/
 8001b96:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <SCSI_Write10_Cmd+0x9c>)
* Return         : Read\Write status (bool).
*******************************************************************************/
bool SCSI_Address_Management(uint8_t lun , uint8_t Cmd , uint32_t LBA , uint32_t BlockNbr)
{

  if ((LBA + BlockNbr) > Mass_Block_Count[lun] )
 8001b98:	4822      	ldr	r0, [pc, #136]	; (8001c24 <SCSI_Write10_Cmd+0xa0>)
 8001b9a:	7b51      	ldrb	r1, [r2, #13]
 8001b9c:	19ae      	adds	r6, r5, r6
 8001b9e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8001ba2:	4286      	cmp	r6, r0
 8001ba4:	d815      	bhi.n	8001bd2 <SCSI_Write10_Cmd+0x4e>
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    return (FALSE);
  }


  if (CBW.dDataLength != BlockNbr * Mass_Block_Size[lun])
 8001ba6:	4e20      	ldr	r6, [pc, #128]	; (8001c28 <SCSI_Write10_Cmd+0xa4>)
 8001ba8:	6890      	ldr	r0, [r2, #8]
 8001baa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001bae:	fb01 f505 	mul.w	r5, r1, r5
 8001bb2:	42a8      	cmp	r0, r5
 8001bb4:	d022      	beq.n	8001bfc <SCSI_Write10_Cmd+0x78>
  {
    if (Cmd == SCSI_WRITE10)
    {
      Bot_Abort(BOTH_DIR);
 8001bb6:	2002      	movs	r0, #2
      SetEPRxStatus(ENDP2, EP_RX_VALID);
    #endif /* STM32F10X_CL */
    }
    else
    {
      Bot_Abort(DIR_IN);
 8001bb8:	f7ff fc24 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <SCSI_Write10_Cmd+0xa8>)
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	709a      	strb	r2, [r3, #2]
    }
    else
    {
      Bot_Abort(DIR_IN);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001bc2:	2001      	movs	r0, #1
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001bc4:	2224      	movs	r2, #36	; 0x24
    }
    else
    {
      Bot_Abort(DIR_IN);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001bc6:	4621      	mov	r1, r4
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001bc8:	731a      	strb	r2, [r3, #12]
  }
  else if (Bot_State == BOT_DATA_OUT)
  {
    Write_Memory(lun , LBA , BlockNbr);
  }
}
 8001bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }
    else
    {
      Bot_Abort(DIR_IN);
      Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
      Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001bce:	f7ff bbfb 	b.w	80013c8 <Set_CSW>

  if ((LBA + BlockNbr) > Mass_Block_Count[lun] )
  {
    if (Cmd == SCSI_WRITE10)
    {
      Bot_Abort(BOTH_DIR);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7ff fc16 	bl	8001404 <Bot_Abort>
    }
    Bot_Abort(DIR_IN);
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7ff fc13 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <SCSI_Write10_Cmd+0xa8>)
 8001be0:	2205      	movs	r2, #5
 8001be2:	709a      	strb	r2, [r3, #2]
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001be4:	2001      	movs	r0, #1
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001be6:	2221      	movs	r2, #33	; 0x21
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001be8:	4621      	mov	r1, r4
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001bea:	731a      	strb	r2, [r3, #12]
  }
  else if (Bot_State == BOT_DATA_OUT)
  {
    Write_Memory(lun , LBA , BlockNbr);
  }
}
 8001bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001bf0:	f7ff bbea 	b.w	80013c8 <Set_CSW>
  }
  else if (Bot_State == BOT_DATA_OUT)
  {
    Write_Memory(lun , LBA , BlockNbr);
  }
}
 8001bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }
    return;
  }
  else if (Bot_State == BOT_DATA_OUT)
  {
    Write_Memory(lun , LBA , BlockNbr);
 8001bf8:	f7ff b896 	b.w	8000d28 <Write_Memory>
    if (!(SCSI_Address_Management(CBW.bLUN, SCSI_WRITE10 , LBA, BlockNbr)))/*address out of range*/
    {
      return;
    }

    if ((CBW.bmFlags & 0x80) == 0)
 8001bfc:	f992 c00c 	ldrsb.w	ip, [r2, #12]
 8001c00:	f1bc 0f00 	cmp.w	ip, #0
 8001c04:	db08      	blt.n	8001c18 <SCSI_Write10_Cmd+0x94>
    {
      Bot_State = BOT_DATA_OUT;
 8001c06:	2201      	movs	r2, #1
    #ifndef STM32F10X_CL
      SetEPRxStatus(ENDP2, EP_RX_VALID);
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
      return;
    }

    if ((CBW.bmFlags & 0x80) == 0)
    {
      Bot_State = BOT_DATA_OUT;
 8001c0e:	701a      	strb	r2, [r3, #0]
  }
  else if (Bot_State == BOT_DATA_OUT)
  {
    Write_Memory(lun , LBA , BlockNbr);
  }
}
 8001c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    if ((CBW.bmFlags & 0x80) == 0)
    {
      Bot_State = BOT_DATA_OUT;
    #ifndef STM32F10X_CL
      SetEPRxStatus(ENDP2, EP_RX_VALID);
 8001c14:	f00e bba0 	b.w	8010358 <SetEPRxStatus>
    #endif /* STM32F10X_CL */
    }
    else
    {
      Bot_Abort(DIR_IN);
 8001c18:	4620      	mov	r0, r4
 8001c1a:	e7cd      	b.n	8001bb8 <SCSI_Write10_Cmd+0x34>
 8001c1c:	20000aa2 	.word	0x20000aa2
 8001c20:	20000a80 	.word	0x20000a80
 8001c24:	20000a6c 	.word	0x20000a6c
 8001c28:	20000a64 	.word	0x20000a64
 8001c2c:	20000058 	.word	0x20000058

08001c30 <SCSI_Verify10_Cmd>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Verify10_Cmd(uint8_t lun)
{
  if ((CBW.dDataLength == 0) && !(CBW.CB[1] & BLKVFY))/* BLKVFY not set*/
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <SCSI_Verify10_Cmd+0x38>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Verify10_Cmd(uint8_t lun)
{
 8001c32:	b510      	push	{r4, lr}
  if ((CBW.dDataLength == 0) && !(CBW.CB[1] & BLKVFY))/* BLKVFY not set*/
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	b91a      	cbnz	r2, 8001c40 <SCSI_Verify10_Cmd+0x10>
 8001c38:	7c18      	ldrb	r0, [r3, #16]
 8001c3a:	f010 0004 	ands.w	r0, r0, #4
 8001c3e:	d00d      	beq.n	8001c5c <SCSI_Verify10_Cmd+0x2c>
  {
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
  }
  else
  {
    Bot_Abort(BOTH_DIR);
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7ff fbdf 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <SCSI_Verify10_Cmd+0x3c>)
 8001c48:	2205      	movs	r2, #5
 8001c4a:	709a      	strb	r2, [r3, #2]
  }
  else
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001c4c:	2001      	movs	r0, #1
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001c4e:	2224      	movs	r2, #36	; 0x24
  }
  else
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001c50:	2100      	movs	r1, #0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001c52:	731a      	strb	r2, [r3, #12]
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001c58:	f7ff bbb6 	b.w	80013c8 <Set_CSW>
*******************************************************************************/
void SCSI_Verify10_Cmd(uint8_t lun)
{
  if ((CBW.dDataLength == 0) && !(CBW.CB[1] & BLKVFY))/* BLKVFY not set*/
  {
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001c5c:	2101      	movs	r1, #1
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
}
 8001c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
*******************************************************************************/
void SCSI_Verify10_Cmd(uint8_t lun)
{
  if ((CBW.dDataLength == 0) && !(CBW.CB[1] & BLKVFY))/* BLKVFY not set*/
  {
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001c62:	f7ff bbb1 	b.w	80013c8 <Set_CSW>
 8001c66:	bf00      	nop
 8001c68:	20000a80 	.word	0x20000a80
 8001c6c:	20000058 	.word	0x20000058

08001c70 <SCSI_Valid_Cmd>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Valid_Cmd(uint8_t lun)
{
  if (CBW.dDataLength != 0)
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <SCSI_Valid_Cmd+0x30>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Valid_Cmd(uint8_t lun)
{
 8001c72:	b510      	push	{r4, lr}
  if (CBW.dDataLength != 0)
 8001c74:	6898      	ldr	r0, [r3, #8]
 8001c76:	b920      	cbnz	r0, 8001c82 <SCSI_Valid_Cmd+0x12>
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
  else
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001c78:	2101      	movs	r1, #1
}
 8001c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
  else
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001c7e:	f7ff bba3 	b.w	80013c8 <Set_CSW>
*******************************************************************************/
void SCSI_Valid_Cmd(uint8_t lun)
{
  if (CBW.dDataLength != 0)
  {
    Bot_Abort(BOTH_DIR);
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7ff fbbe 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <SCSI_Valid_Cmd+0x34>)
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	709a      	strb	r2, [r3, #2]
{
  if (CBW.dDataLength != 0)
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001c8e:	2001      	movs	r0, #1
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001c90:	2220      	movs	r2, #32
{
  if (CBW.dDataLength != 0)
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001c92:	2100      	movs	r1, #0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001c94:	731a      	strb	r2, [r3, #12]
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
  }
  else
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
}
 8001c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if (CBW.dDataLength != 0)
  {
    Bot_Abort(BOTH_DIR);
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001c9a:	f7ff bb95 	b.w	80013c8 <Set_CSW>
 8001c9e:	bf00      	nop
 8001ca0:	20000a80 	.word	0x20000a80
 8001ca4:	20000058 	.word	0x20000058

08001ca8 <SCSI_TestUnitReady_Cmd>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_TestUnitReady_Cmd(uint8_t lun)
{
 8001ca8:	b510      	push	{r4, lr}
  if (MAL_GetStatus(lun))
 8001caa:	f7fe ffa3 	bl	8000bf4 <MAL_GetStatus>
 8001cae:	b920      	cbnz	r0, 8001cba <SCSI_TestUnitReady_Cmd+0x12>
    Bot_Abort(DIR_IN);
    return;
  }
  else
  {
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001cb0:	2101      	movs	r1, #1
  }
}
 8001cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Bot_Abort(DIR_IN);
    return;
  }
  else
  {
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 8001cb6:	f7ff bb87 	b.w	80013c8 <Set_CSW>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <SCSI_TestUnitReady_Cmd+0x30>)
 8001cbc:	2202      	movs	r2, #2
void SCSI_TestUnitReady_Cmd(uint8_t lun)
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001cbe:	2001      	movs	r0, #1
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001cc0:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001cc2:	223a      	movs	r2, #58	; 0x3a
void SCSI_TestUnitReady_Cmd(uint8_t lun)
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001cc4:	4601      	mov	r1, r0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001cc6:	731a      	strb	r2, [r3, #12]
void SCSI_TestUnitReady_Cmd(uint8_t lun)
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001cc8:	f7ff fb7e 	bl	80013c8 <Set_CSW>
    Bot_Abort(DIR_IN);
 8001ccc:	2000      	movs	r0, #0
  }
  else
  {
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
  }
}
 8001cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
 8001cd2:	f7ff bb97 	b.w	8001404 <Bot_Abort>
 8001cd6:	bf00      	nop
 8001cd8:	20000058 	.word	0x20000058

08001cdc <SCSI_Format_Cmd>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Format_Cmd(uint8_t lun)
{
 8001cdc:	b510      	push	{r4, lr}
  if (MAL_GetStatus(lun))
 8001cde:	f7fe ff89 	bl	8000bf4 <MAL_GetStatus>
 8001ce2:	b900      	cbnz	r0, 8001ce6 <SCSI_Format_Cmd+0xa>
 8001ce4:	bd10      	pop	{r4, pc}
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <SCSI_Format_Cmd+0x28>)
 8001ce8:	2202      	movs	r2, #2
void SCSI_Format_Cmd(uint8_t lun)
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001cea:	2001      	movs	r0, #1
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001cec:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001cee:	223a      	movs	r2, #58	; 0x3a
void SCSI_Format_Cmd(uint8_t lun)
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001cf0:	4601      	mov	r1, r0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001cf2:	731a      	strb	r2, [r3, #12]
void SCSI_Format_Cmd(uint8_t lun)
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
 8001cf4:	f7ff fb68 	bl	80013c8 <Set_CSW>
    Bot_Abort(DIR_IN);
 8001cf8:	2000      	movs	r0, #0
  {
    NAND_Format();
    Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
  }
#endif
}
 8001cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if (MAL_GetStatus(lun))
  {
    Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    Bot_Abort(DIR_IN);
 8001cfe:	f7ff bb81 	b.w	8001404 <Bot_Abort>
 8001d02:	bf00      	nop
 8001d04:	20000058 	.word	0x20000058

08001d08 <SCSI_Invalid_Cmd>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Invalid_Cmd(uint8_t lun)
{
  if (CBW.dDataLength == 0)
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <SCSI_Invalid_Cmd+0x34>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SCSI_Invalid_Cmd(uint8_t lun)
{
 8001d0a:	b510      	push	{r4, lr}
  if (CBW.dDataLength == 0)
 8001d0c:	6898      	ldr	r0, [r3, #8]
 8001d0e:	b120      	cbz	r0, 8001d1a <SCSI_Invalid_Cmd+0x12>
  {
    Bot_Abort(DIR_IN);
  }
  else
  {
    if ((CBW.bmFlags & 0x80) != 0)
 8001d10:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0d      	blt.n	8001d34 <SCSI_Invalid_Cmd+0x2c>
    {
      Bot_Abort(DIR_IN);
    }
    else
    {
      Bot_Abort(BOTH_DIR);
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7ff fb73 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <SCSI_Invalid_Cmd+0x38>)
 8001d20:	2205      	movs	r2, #5
 8001d22:	709a      	strb	r2, [r3, #2]
    {
      Bot_Abort(BOTH_DIR);
    }
  }
  Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
  Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d24:	2001      	movs	r0, #1
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001d26:	2220      	movs	r2, #32
    {
      Bot_Abort(BOTH_DIR);
    }
  }
  Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
  Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d28:	2100      	movs	r1, #0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001d2a:	731a      	strb	r2, [r3, #12]
      Bot_Abort(BOTH_DIR);
    }
  }
  Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
  Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
}
 8001d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      Bot_Abort(BOTH_DIR);
    }
  }
  Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
  Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d30:	f7ff bb4a 	b.w	80013c8 <Set_CSW>
  }
  else
  {
    if ((CBW.bmFlags & 0x80) != 0)
    {
      Bot_Abort(DIR_IN);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fb65 	bl	8001404 <Bot_Abort>
 8001d3a:	e7f0      	b.n	8001d1e <SCSI_Invalid_Cmd+0x16>
 8001d3c:	20000a80 	.word	0x20000a80
 8001d40:	20000058 	.word	0x20000058

08001d44 <SCSI_Address_Management>:
* Input          : uint8_t Cmd : the command can be SCSI_READ10 or SCSI_WRITE10.
* Output         : None.
* Return         : Read\Write status (bool).
*******************************************************************************/
bool SCSI_Address_Management(uint8_t lun , uint8_t Cmd , uint32_t LBA , uint32_t BlockNbr)
{
 8001d44:	b510      	push	{r4, lr}

  if ((LBA + BlockNbr) > Mass_Block_Count[lun] )
 8001d46:	4c1c      	ldr	r4, [pc, #112]	; (8001db8 <SCSI_Address_Management+0x74>)
 8001d48:	189a      	adds	r2, r3, r2
 8001d4a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8001d4e:	42a2      	cmp	r2, r4
 8001d50:	d90f      	bls.n	8001d72 <SCSI_Address_Management+0x2e>
  {
    if (Cmd == SCSI_WRITE10)
 8001d52:	292a      	cmp	r1, #42	; 0x2a
 8001d54:	d028      	beq.n	8001da8 <SCSI_Address_Management+0x64>
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fb54 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <SCSI_Address_Management+0x78>)
 8001d5e:	2205      	movs	r2, #5
 8001d60:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001d62:	2221      	movs	r2, #33	; 0x21
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d64:	2001      	movs	r0, #1
 8001d66:	2100      	movs	r1, #0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001d68:	731a      	strb	r2, [r3, #12]
    {
      Bot_Abort(BOTH_DIR);
    }
    Bot_Abort(DIR_IN);
    Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d6a:	f7ff fb2d 	bl	80013c8 <Set_CSW>
    return (FALSE);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
  }


  if (CBW.dDataLength != BlockNbr * Mass_Block_Size[lun])
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <SCSI_Address_Management+0x7c>)
 8001d74:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <SCSI_Address_Management+0x80>)
 8001d7a:	fb00 f003 	mul.w	r0, r0, r3
 8001d7e:	6892      	ldr	r2, [r2, #8]
 8001d80:	4282      	cmp	r2, r0
 8001d82:	d00f      	beq.n	8001da4 <SCSI_Address_Management+0x60>
  {
    if (Cmd == SCSI_WRITE10)
 8001d84:	292a      	cmp	r1, #42	; 0x2a
 8001d86:	d013      	beq.n	8001db0 <SCSI_Address_Management+0x6c>
    {
      Bot_Abort(BOTH_DIR);
    }
    else
    {
      Bot_Abort(DIR_IN);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fb3b 	bl	8001404 <Bot_Abort>
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <SCSI_Address_Management+0x78>)
 8001d90:	2205      	movs	r2, #5
 8001d92:	709a      	strb	r2, [r3, #2]
  Scsi_Sense_Data[12] = Asc;
 8001d94:	2224      	movs	r2, #36	; 0x24
    else
    {
      Bot_Abort(DIR_IN);
    }
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d96:	2001      	movs	r0, #1
 8001d98:	2100      	movs	r1, #0
* Return         : None.
*******************************************************************************/
void Set_Scsi_Sense_Data(uint8_t lun, uint8_t Sens_Key, uint8_t Asc)
{
  Scsi_Sense_Data[2] = Sens_Key;
  Scsi_Sense_Data[12] = Asc;
 8001d9a:	731a      	strb	r2, [r3, #12]
    else
    {
      Bot_Abort(DIR_IN);
    }
    Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 8001d9c:	f7ff fb14 	bl	80013c8 <Set_CSW>
    return (FALSE);
 8001da0:	2000      	movs	r0, #0
 8001da2:	bd10      	pop	{r4, pc}
  }
  return (TRUE);
 8001da4:	2001      	movs	r0, #1
}
 8001da6:	bd10      	pop	{r4, pc}

  if ((LBA + BlockNbr) > Mass_Block_Count[lun] )
  {
    if (Cmd == SCSI_WRITE10)
    {
      Bot_Abort(BOTH_DIR);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff fb2b 	bl	8001404 <Bot_Abort>
 8001dae:	e7d2      	b.n	8001d56 <SCSI_Address_Management+0x12>

  if (CBW.dDataLength != BlockNbr * Mass_Block_Size[lun])
  {
    if (Cmd == SCSI_WRITE10)
    {
      Bot_Abort(BOTH_DIR);
 8001db0:	2002      	movs	r0, #2
 8001db2:	f7ff fb27 	bl	8001404 <Bot_Abort>
 8001db6:	e7ea      	b.n	8001d8e <SCSI_Address_Management+0x4a>
 8001db8:	20000a6c 	.word	0x20000a6c
 8001dbc:	20000058 	.word	0x20000058
 8001dc0:	20000a64 	.word	0x20000a64
 8001dc4:	20000a80 	.word	0x20000a80

08001dc8 <Add_To_Buffer>:
#include <stdlib.h>
#include "buffer.h"

void Add_To_Buffer(uint32_t data,buff_type* buffer) {
 8001dc8:	b470      	push	{r4, r5, r6}
	buffer->data[buffer->head++]=data;//Put data in and increment
 8001dca:	880c      	ldrh	r4, [r1, #0]
	buffer->head%=buffer->size;
 8001dcc:	888b      	ldrh	r3, [r1, #4]
#include <stdlib.h>
#include "buffer.h"

void Add_To_Buffer(uint32_t data,buff_type* buffer) {
	buffer->data[buffer->head++]=data;//Put data in and increment
 8001dce:	1c62      	adds	r2, r4, #1
	buffer->head%=buffer->size;
 8001dd0:	b296      	uxth	r6, r2
 8001dd2:	fbb6 f5f3 	udiv	r5, r6, r3
 8001dd6:	fb03 6c15 	mls	ip, r3, r5, r6
	if(buffer->head==buffer->tail)	//Buffer wraparound due to filling
 8001dda:	884d      	ldrh	r5, [r1, #2]
#include <stdlib.h>
#include "buffer.h"

void Add_To_Buffer(uint32_t data,buff_type* buffer) {
	buffer->data[buffer->head++]=data;//Put data in and increment
	buffer->head%=buffer->size;
 8001ddc:	fa1f f28c 	uxth.w	r2, ip
#include <stdlib.h>
#include "buffer.h"

void Add_To_Buffer(uint32_t data,buff_type* buffer) {
	buffer->data[buffer->head++]=data;//Put data in and increment
 8001de0:	688e      	ldr	r6, [r1, #8]
	buffer->head%=buffer->size;
	if(buffer->head==buffer->tail)	//Buffer wraparound due to filling
 8001de2:	4295      	cmp	r5, r2
#include <stdlib.h>
#include "buffer.h"

void Add_To_Buffer(uint32_t data,buff_type* buffer) {
	buffer->data[buffer->head++]=data;//Put data in and increment
 8001de4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	buffer->head%=buffer->size;
 8001de8:	800a      	strh	r2, [r1, #0]
	if(buffer->head==buffer->tail)	//Buffer wraparound due to filling
 8001dea:	d105      	bne.n	8001df8 <Add_To_Buffer+0x30>
		buffer->tail=(buffer->tail+1)%buffer->size;
 8001dec:	1c68      	adds	r0, r5, #1
 8001dee:	fb90 fcf3 	sdiv	ip, r0, r3
 8001df2:	fb03 051c 	mls	r5, r3, ip, r0
 8001df6:	804d      	strh	r5, [r1, #2]
}
 8001df8:	bc70      	pop	{r4, r5, r6}
 8001dfa:	4770      	bx	lr

08001dfc <Get_From_Buffer>:

uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
	if(buffer->tail==buffer->head)
 8001dfc:	884b      	ldrh	r3, [r1, #2]
 8001dfe:	880a      	ldrh	r2, [r1, #0]
	buffer->head%=buffer->size;
	if(buffer->head==buffer->tail)	//Buffer wraparound due to filling
		buffer->tail=(buffer->tail+1)%buffer->size;
}

uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
 8001e00:	b470      	push	{r4, r5, r6}
	if(buffer->tail==buffer->head)
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d010      	beq.n	8001e28 <Get_From_Buffer+0x2c>
		return 1;		//Error - no data in buffer
	else {
		*data=buffer->data[buffer->tail];//grab a data sample from the buffer
		buffer->tail++;
		buffer->tail%=buffer->size;
 8001e06:	888a      	ldrh	r2, [r1, #4]
uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
	if(buffer->tail==buffer->head)
		return 1;		//Error - no data in buffer
	else {
		*data=buffer->data[buffer->tail];//grab a data sample from the buffer
		buffer->tail++;
 8001e08:	1c5d      	adds	r5, r3, #1
		buffer->tail%=buffer->size;
 8001e0a:	b2ac      	uxth	r4, r5
 8001e0c:	fbb4 f6f2 	udiv	r6, r4, r2

uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
	if(buffer->tail==buffer->head)
		return 1;		//Error - no data in buffer
	else {
		*data=buffer->data[buffer->tail];//grab a data sample from the buffer
 8001e10:	688d      	ldr	r5, [r1, #8]
		buffer->tail++;
		buffer->tail%=buffer->size;
 8001e12:	fb02 4c16 	mls	ip, r2, r6, r4

uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
	if(buffer->tail==buffer->head)
		return 1;		//Error - no data in buffer
	else {
		*data=buffer->data[buffer->tail];//grab a data sample from the buffer
 8001e16:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
		buffer->tail++;
		buffer->tail%=buffer->size;
		return 0;		//No error
 8001e1a:	2300      	movs	r3, #0

uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
	if(buffer->tail==buffer->head)
		return 1;		//Error - no data in buffer
	else {
		*data=buffer->data[buffer->tail];//grab a data sample from the buffer
 8001e1c:	6004      	str	r4, [r0, #0]
		buffer->tail++;
		buffer->tail%=buffer->size;
 8001e1e:	f8a1 c002 	strh.w	ip, [r1, #2]
		return 0;		//No error
	}
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bc70      	pop	{r4, r5, r6}
 8001e26:	4770      	bx	lr
		buffer->tail=(buffer->tail+1)%buffer->size;
}

uint8_t Get_From_Buffer(uint32_t* data,buff_type* buffer) {
	if(buffer->tail==buffer->head)
		return 1;		//Error - no data in buffer
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e7fa      	b.n	8001e22 <Get_From_Buffer+0x26>

08001e2c <init_buffer>:
		buffer->tail%=buffer->size;
		return 0;		//No error
	}
}

void init_buffer(buff_type* buff, uint16_t size) {
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	4604      	mov	r4, r0
	buff->data=(uint32_t*)malloc(size*4);
 8001e30:	0088      	lsls	r0, r1, #2
		buffer->tail%=buffer->size;
		return 0;		//No error
	}
}

void init_buffer(buff_type* buff, uint16_t size) {
 8001e32:	460d      	mov	r5, r1
	buff->data=(uint32_t*)malloc(size*4);
 8001e34:	f011 f9a8 	bl	8013188 <malloc>
	buff->size=size;
 8001e38:	80a5      	strh	r5, [r4, #4]
		return 0;		//No error
	}
}

void init_buffer(buff_type* buff, uint16_t size) {
	buff->data=(uint32_t*)malloc(size*4);
 8001e3a:	60a0      	str	r0, [r4, #8]
	buff->size=size;
}
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	bf00      	nop

08001e40 <Delay>:
  * @param  Number of loops
  * @retval None
  * Note this is compensated for the sysclk speed
  */
void Delay(volatile uint32_t delay) {
	delay*=SystemFrequency/(1000000*9);
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <Delay+0x2c>)
  * @brief  A simple delay loop
  * @param  Number of loops
  * @retval None
  * Note this is compensated for the sysclk speed
  */
void Delay(volatile uint32_t delay) {
 8001e42:	b082      	sub	sp, #8
 8001e44:	9001      	str	r0, [sp, #4]
	delay*=SystemFrequency/(1000000*9);
 8001e46:	6811      	ldr	r1, [r2, #0]
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <Delay+0x30>)
 8001e4a:	9a01      	ldr	r2, [sp, #4]
 8001e4c:	fba0 1301 	umull	r1, r3, r0, r1
 8001e50:	0dd9      	lsrs	r1, r3, #23
 8001e52:	fb02 f001 	mul.w	r0, r2, r1
 8001e56:	9001      	str	r0, [sp, #4]
	for(; delay;){--delay;}
 8001e58:	9b01      	ldr	r3, [sp, #4]
 8001e5a:	b12b      	cbz	r3, 8001e68 <Delay+0x28>
 8001e5c:	9901      	ldr	r1, [sp, #4]
 8001e5e:	1e48      	subs	r0, r1, #1
 8001e60:	9001      	str	r0, [sp, #4]
 8001e62:	9b01      	ldr	r3, [sp, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <Delay+0x1c>
}
 8001e68:	b002      	add	sp, #8
 8001e6a:	4770      	bx	lr
 8001e6c:	0801b360 	.word	0x0801b360
 8001e70:	ee9bfab5 	.word	0xee9bfab5

08001e74 <ff_convert>:
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8001e74:	2880      	cmp	r0, #128	; 0x80

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8001e76:	b4f0      	push	{r4, r5, r6, r7}
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8001e78:	f240 80f9 	bls.w	800206e <ff_convert+0x1fa>
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	f040 80f8 	bne.w	8002072 <ff_convert+0x1fe>
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
				if (src == uni2sjis[i * 2]) break;
 8001e82:	f247 0385 	movw	r3, #28805	; 0x7085
 8001e86:	4283      	cmp	r3, r0
 8001e88:	f000 80fe 	beq.w	8002088 <ff_convert+0x214>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001e8c:	4298      	cmp	r0, r3
 8001e8e:	f640 626e 	movw	r2, #3694	; 0xe6e
 8001e92:	f641 45dd 	movw	r5, #7389	; 0x1cdd
 8001e96:	bf8c      	ite	hi
 8001e98:	4611      	movhi	r1, r2
 8001e9a:	2100      	movls	r1, #0
 8001e9c:	bf98      	it	ls
 8001e9e:	4615      	movls	r5, r2
 8001ea0:	1a6c      	subs	r4, r5, r1
 8001ea2:	eb01 0464 	add.w	r4, r1, r4, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001ea6:	4a7c      	ldr	r2, [pc, #496]	; (8002098 <ff_convert+0x224>)
 8001ea8:	0063      	lsls	r3, r4, #1
 8001eaa:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 8001eae:	4286      	cmp	r6, r0
 8001eb0:	f000 80ed 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001eb4:	42b0      	cmp	r0, r6
 8001eb6:	bf88      	it	hi
 8001eb8:	4621      	movhi	r1, r4
 8001eba:	bf88      	it	hi
 8001ebc:	462c      	movhi	r4, r5
 8001ebe:	1a65      	subs	r5, r4, r1
 8001ec0:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8001ec4:	eb01 0563 	add.w	r5, r1, r3, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001ec8:	006b      	lsls	r3, r5, #1
 8001eca:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 8001ece:	4286      	cmp	r6, r0
 8001ed0:	f000 80dd 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001ed4:	42b0      	cmp	r0, r6
 8001ed6:	bf88      	it	hi
 8001ed8:	4629      	movhi	r1, r5
 8001eda:	bf88      	it	hi
 8001edc:	4625      	movhi	r5, r4
 8001ede:	ebc1 0c05 	rsb	ip, r1, r5
 8001ee2:	eb0c 76dc 	add.w	r6, ip, ip, lsr #31
 8001ee6:	eb01 0666 	add.w	r6, r1, r6, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001eea:	0073      	lsls	r3, r6, #1
 8001eec:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8001ef0:	4284      	cmp	r4, r0
 8001ef2:	f000 80cc 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001ef6:	42a0      	cmp	r0, r4
 8001ef8:	bf88      	it	hi
 8001efa:	4631      	movhi	r1, r6
 8001efc:	bf98      	it	ls
 8001efe:	4635      	movls	r5, r6
 8001f00:	1a6c      	subs	r4, r5, r1
 8001f02:	eb04 77d4 	add.w	r7, r4, r4, lsr #31
 8001f06:	eb01 0767 	add.w	r7, r1, r7, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001f0a:	007b      	lsls	r3, r7, #1
 8001f0c:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8001f10:	4284      	cmp	r4, r0
 8001f12:	f000 80bc 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001f16:	42a0      	cmp	r0, r4
 8001f18:	bf88      	it	hi
 8001f1a:	4639      	movhi	r1, r7
 8001f1c:	bf98      	it	ls
 8001f1e:	463d      	movls	r5, r7
 8001f20:	1a6e      	subs	r6, r5, r1
 8001f22:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8001f26:	eb01 0463 	add.w	r4, r1, r3, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001f2a:	0063      	lsls	r3, r4, #1
 8001f2c:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 8001f30:	4286      	cmp	r6, r0
 8001f32:	f000 80ac 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001f36:	42b0      	cmp	r0, r6
 8001f38:	bf88      	it	hi
 8001f3a:	4621      	movhi	r1, r4
 8001f3c:	bf88      	it	hi
 8001f3e:	462c      	movhi	r4, r5
 8001f40:	ebc1 0c04 	rsb	ip, r1, r4
 8001f44:	eb0c 75dc 	add.w	r5, ip, ip, lsr #31
 8001f48:	eb01 0565 	add.w	r5, r1, r5, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001f4c:	006b      	lsls	r3, r5, #1
 8001f4e:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 8001f52:	4286      	cmp	r6, r0
 8001f54:	f000 809b 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001f58:	42b0      	cmp	r0, r6
 8001f5a:	bf88      	it	hi
 8001f5c:	4629      	movhi	r1, r5
 8001f5e:	bf88      	it	hi
 8001f60:	4625      	movhi	r5, r4
 8001f62:	1a6b      	subs	r3, r5, r1
 8001f64:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
 8001f68:	eb01 0664 	add.w	r6, r1, r4, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001f6c:	0073      	lsls	r3, r6, #1
 8001f6e:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8001f72:	4284      	cmp	r4, r0
 8001f74:	f000 808b 	beq.w	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001f78:	42a0      	cmp	r0, r4
 8001f7a:	bf88      	it	hi
 8001f7c:	4631      	movhi	r1, r6
 8001f7e:	bf98      	it	ls
 8001f80:	4635      	movls	r5, r6
 8001f82:	ebc1 0c05 	rsb	ip, r1, r5
 8001f86:	eb0c 77dc 	add.w	r7, ip, ip, lsr #31
 8001f8a:	eb01 0767 	add.w	r7, r1, r7, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001f8e:	007b      	lsls	r3, r7, #1
 8001f90:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8001f94:	4284      	cmp	r4, r0
 8001f96:	d07a      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001f98:	42a0      	cmp	r0, r4
 8001f9a:	bf88      	it	hi
 8001f9c:	4639      	movhi	r1, r7
 8001f9e:	bf98      	it	ls
 8001fa0:	463d      	movls	r5, r7
 8001fa2:	1a6c      	subs	r4, r5, r1
 8001fa4:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
 8001fa8:	eb01 0466 	add.w	r4, r1, r6, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001fac:	0063      	lsls	r3, r4, #1
 8001fae:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 8001fb2:	4286      	cmp	r6, r0
 8001fb4:	d06b      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001fb6:	42b0      	cmp	r0, r6
 8001fb8:	bf88      	it	hi
 8001fba:	4621      	movhi	r1, r4
 8001fbc:	bf88      	it	hi
 8001fbe:	462c      	movhi	r4, r5
 8001fc0:	1a63      	subs	r3, r4, r1
 8001fc2:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 8001fc6:	eb01 0565 	add.w	r5, r1, r5, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001fca:	006b      	lsls	r3, r5, #1
 8001fcc:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 8001fd0:	4286      	cmp	r6, r0
 8001fd2:	d05c      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001fd4:	42b0      	cmp	r0, r6
 8001fd6:	bf88      	it	hi
 8001fd8:	4629      	movhi	r1, r5
 8001fda:	bf98      	it	ls
 8001fdc:	462c      	movls	r4, r5
 8001fde:	1a66      	subs	r6, r4, r1
 8001fe0:	eb06 7cd6 	add.w	ip, r6, r6, lsr #31
 8001fe4:	eb01 066c 	add.w	r6, r1, ip, asr #1
				if (src == uni2sjis[i * 2]) break;
 8001fe8:	0073      	lsls	r3, r6, #1
 8001fea:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	d04d      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8001ff2:	42a8      	cmp	r0, r5
 8001ff4:	bf88      	it	hi
 8001ff6:	4631      	movhi	r1, r6
 8001ff8:	bf88      	it	hi
 8001ffa:	4626      	movhi	r6, r4
 8001ffc:	1a75      	subs	r5, r6, r1
 8001ffe:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 8002002:	eb01 0464 	add.w	r4, r1, r4, asr #1
				if (src == uni2sjis[i * 2]) break;
 8002006:	0063      	lsls	r3, r4, #1
 8002008:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800200c:	4285      	cmp	r5, r0
 800200e:	d03e      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8002010:	42a8      	cmp	r0, r5
 8002012:	bf88      	it	hi
 8002014:	4621      	movhi	r1, r4
 8002016:	bf88      	it	hi
 8002018:	4634      	movhi	r4, r6
 800201a:	ebc1 0c04 	rsb	ip, r1, r4
 800201e:	eb0c 73dc 	add.w	r3, ip, ip, lsr #31
 8002022:	eb01 0563 	add.w	r5, r1, r3, asr #1
				if (src == uni2sjis[i * 2]) break;
 8002026:	006b      	lsls	r3, r5, #1
 8002028:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
 800202c:	4286      	cmp	r6, r0
 800202e:	d02e      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 8002030:	42b0      	cmp	r0, r6
 8002032:	bf88      	it	hi
 8002034:	4629      	movhi	r1, r5
 8002036:	bf98      	it	ls
 8002038:	462c      	movls	r4, r5
 800203a:	1a65      	subs	r5, r4, r1
 800203c:	eb05 76d5 	add.w	r6, r5, r5, lsr #31
 8002040:	eb01 0666 	add.w	r6, r1, r6, asr #1
				if (src == uni2sjis[i * 2]) break;
 8002044:	0073      	lsls	r3, r6, #1
 8002046:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800204a:	4285      	cmp	r5, r0
 800204c:	d01f      	beq.n	800208e <ff_convert+0x21a>
			p -= 3;
			c = *p;
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
 800204e:	42a8      	cmp	r0, r5
 8002050:	bf88      	it	hi
 8002052:	4631      	movhi	r1, r6
 8002054:	bf98      	it	ls
 8002056:	4634      	movls	r4, r6
 8002058:	1a64      	subs	r4, r4, r1
 800205a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800205e:	eb01 0364 	add.w	r3, r1, r4, asr #1
				if (src == uni2sjis[i * 2]) break;
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002068:	4281      	cmp	r1, r0
 800206a:	d010      	beq.n	800208e <ff_convert+0x21a>
					li = i;

				else
					hi = i;
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 800206c:	2000      	movs	r0, #0
		}
#endif
	}

	return c;
}
 800206e:	bcf0      	pop	{r4, r5, r6, r7}
 8002070:	4770      	bx	lr
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <ff_convert+0x228>)
			p = &uni2sjis[1];
			do {
				c = *p;
 8002074:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8002078:	4619      	mov	r1, r3
				p += 2;
			} while (c && c != src);
 800207a:	3304      	adds	r3, #4
 800207c:	b10a      	cbz	r2, 8002082 <ff_convert+0x20e>
 800207e:	4282      	cmp	r2, r0
 8002080:	d1f8      	bne.n	8002074 <ff_convert+0x200>
			p -= 3;
			c = *p;
 8002082:	f831 0c06 	ldrh.w	r0, [r1, #-6]
 8002086:	e7f2      	b.n	800206e <ff_convert+0x1fa>
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <ff_convert+0x224>)
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
				if (src == uni2sjis[i * 2]) break;
 800208a:	f641 43dc 	movw	r3, #7388	; 0x1cdc
					li = i;

				else
					hi = i;
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 800208e:	1c58      	adds	r0, r3, #1
 8002090:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8002094:	e7eb      	b.n	800206e <ff_convert+0x1fa>
 8002096:	bf00      	nop
 8002098:	08013bc4 	.word	0x08013bc4
 800209c:	08013bca 	.word	0x08013bca

080020a0 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80020a0:	2861      	cmp	r0, #97	; 0x61
 80020a2:	d00a      	beq.n	80020ba <ff_wtoupper+0x1a>
 80020a4:	4908      	ldr	r1, [pc, #32]	; (80020c8 <ff_wtoupper+0x28>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	e001      	b.n	80020ae <ff_wtoupper+0xe>
 80020aa:	4283      	cmp	r3, r0
 80020ac:	d006      	beq.n	80020bc <ff_wtoupper+0x1c>
 80020ae:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80020b2:	3201      	adds	r2, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f8      	bne.n	80020aa <ff_wtoupper+0xa>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
 80020b8:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80020ba:	2200      	movs	r2, #0

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <ff_wtoupper+0x2c>)
 80020be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80020c2:	f8b2 0f88 	ldrh.w	r0, [r2, #3976]	; 0xf88
 80020c6:	4770      	bx	lr
 80020c8:	0801af3c 	.word	0x0801af3c
 80020cc:	0801a194 	.word	0x0801a194

080020d0 <get_fattime>:
#include "integer.h"
#include "fattime.h"
#include "rtc.h"

DWORD get_fattime (void)
{
 80020d0:	b510      	push	{r4, lr}
 80020d2:	b084      	sub	sp, #16
	DWORD res;
	RTC_t rtc;

	rtc_gettime( &rtc );
 80020d4:	a801      	add	r0, sp, #4
 80020d6:	f006 fa3d 	bl	8008554 <rtc_gettime>
	
	res =  (((DWORD)rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
 80020da:	f89d 2006 	ldrb.w	r2, [sp, #6]
			| ((DWORD)rtc.mday << 16)
 80020de:	f89d 4007 	ldrb.w	r4, [sp, #7]
	DWORD res;
	RTC_t rtc;

	rtc_gettime( &rtc );
	
	res =  (((DWORD)rtc.year - 1980) << 25)
 80020e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
			| ((DWORD)rtc.month << 21)
 80020e6:	0553      	lsls	r3, r2, #21
			| ((DWORD)rtc.mday << 16)
			| (WORD)(rtc.hour << 11)
			| (WORD)(rtc.min << 5)
			| (WORD)(rtc.sec >> 1);
 80020e8:	f89d 000b 	ldrb.w	r0, [sp, #11]
	rtc_gettime( &rtc );
	
	res =  (((DWORD)rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| (WORD)(rtc.hour << 11)
 80020ec:	f89d 2009 	ldrb.w	r2, [sp, #9]
	RTC_t rtc;

	rtc_gettime( &rtc );
	
	res =  (((DWORD)rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
 80020f0:	ea43 4c04 	orr.w	ip, r3, r4, lsl #16
	DWORD res;
	RTC_t rtc;

	rtc_gettime( &rtc );
	
	res =  (((DWORD)rtc.year - 1980) << 25)
 80020f4:	0649      	lsls	r1, r1, #25
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
 80020f6:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
	DWORD res;
	RTC_t rtc;

	rtc_gettime( &rtc );
	
	res =  (((DWORD)rtc.year - 1980) << 25)
 80020fa:	f101 4308 	add.w	r3, r1, #2281701376	; 0x88000000
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| (WORD)(rtc.hour << 11)
 80020fe:	02d0      	lsls	r0, r2, #11
 8002100:	b282      	uxth	r2, r0
 8002102:	ea4c 0103 	orr.w	r1, ip, r3
			| (WORD)(rtc.min << 5)
 8002106:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800210a:	ea41 0302 	orr.w	r3, r1, r2
			| (WORD)(rtc.sec >> 1);

	return res;
}
 800210e:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
 8002112:	b004      	add	sp, #16
 8002114:	bd10      	pop	{r4, pc}
 8002116:	bf00      	nop

08002118 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
 8002118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
 800211a:	6903      	ldr	r3, [r0, #16]
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
 800211c:	460c      	mov	r4, r1
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
 800211e:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8081 	beq.w	800222a <get_fileinfo+0x112>
		dir = dj->dir;
 8002128:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 800212a:	7b19      	ldrb	r1, [r3, #12]
 800212c:	f011 0f08 	tst.w	r1, #8
 8002130:	f040 80aa 	bne.w	8002288 <get_fileinfo+0x170>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8002134:	781d      	ldrb	r5, [r3, #0]
			if (c == ' ') break;
 8002136:	2d20      	cmp	r5, #32
 8002138:	d044      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 800213a:	2d05      	cmp	r5, #5
 800213c:	bf08      	it	eq
 800213e:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002140:	7265      	strb	r5, [r4, #9]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8002142:	785d      	ldrb	r5, [r3, #1]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002144:	f104 020a 	add.w	r2, r4, #10
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8002148:	2d20      	cmp	r5, #32
 800214a:	d03b      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 800214c:	2d05      	cmp	r5, #5
 800214e:	bf08      	it	eq
 8002150:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002152:	72a5      	strb	r5, [r4, #10]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8002154:	789d      	ldrb	r5, [r3, #2]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002156:	f104 020b 	add.w	r2, r4, #11
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 800215a:	2d20      	cmp	r5, #32
 800215c:	d032      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 800215e:	2d05      	cmp	r5, #5
 8002160:	bf08      	it	eq
 8002162:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002164:	72e5      	strb	r5, [r4, #11]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8002166:	78dd      	ldrb	r5, [r3, #3]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002168:	f104 020c 	add.w	r2, r4, #12
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 800216c:	2d20      	cmp	r5, #32
 800216e:	d029      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002170:	2d05      	cmp	r5, #5
 8002172:	bf08      	it	eq
 8002174:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002176:	7325      	strb	r5, [r4, #12]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8002178:	791d      	ldrb	r5, [r3, #4]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800217a:	f104 020d 	add.w	r2, r4, #13
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 800217e:	2d20      	cmp	r5, #32
 8002180:	d020      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002182:	2d05      	cmp	r5, #5
 8002184:	bf08      	it	eq
 8002186:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002188:	7365      	strb	r5, [r4, #13]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 800218a:	795d      	ldrb	r5, [r3, #5]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800218c:	f104 020e 	add.w	r2, r4, #14
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8002190:	2d20      	cmp	r5, #32
 8002192:	d017      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002194:	2d05      	cmp	r5, #5
 8002196:	bf08      	it	eq
 8002198:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800219a:	73a5      	strb	r5, [r4, #14]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 800219c:	799d      	ldrb	r5, [r3, #6]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800219e:	f104 020f 	add.w	r2, r4, #15
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 80021a2:	2d20      	cmp	r5, #32
 80021a4:	d00e      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 80021a6:	2d05      	cmp	r5, #5
 80021a8:	bf08      	it	eq
 80021aa:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80021ac:	73e5      	strb	r5, [r4, #15]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 80021ae:	79dd      	ldrb	r5, [r3, #7]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80021b0:	f104 0210 	add.w	r2, r4, #16
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 80021b4:	2d20      	cmp	r5, #32
 80021b6:	d005      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 80021b8:	2d05      	cmp	r5, #5
 80021ba:	bf08      	it	eq
 80021bc:	25e5      	moveq	r5, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80021be:	7425      	strb	r5, [r4, #16]
 80021c0:	f104 0211 	add.w	r2, r4, #17
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 80021c4:	7a1d      	ldrb	r5, [r3, #8]
 80021c6:	2d20      	cmp	r5, #32
 80021c8:	d015      	beq.n	80021f6 <get_fileinfo+0xde>
			*p++ = '.';
 80021ca:	262e      	movs	r6, #46	; 0x2e
 80021cc:	f011 0f10 	tst.w	r1, #16
 80021d0:	f802 6b01 	strb.w	r6, [r2], #1
 80021d4:	f040 80de 	bne.w	8002394 <get_fileinfo+0x27c>
			for (i = 8; i < 11; i++) {
				c = dir[i];
 80021d8:	7a19      	ldrb	r1, [r3, #8]
				if (c == ' ') break;
 80021da:	2920      	cmp	r1, #32
 80021dc:	d00b      	beq.n	80021f6 <get_fileinfo+0xde>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80021de:	f802 1b01 	strb.w	r1, [r2], #1
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
 80021e2:	7a59      	ldrb	r1, [r3, #9]
				if (c == ' ') break;
 80021e4:	2920      	cmp	r1, #32
 80021e6:	d006      	beq.n	80021f6 <get_fileinfo+0xde>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80021e8:	f802 1b01 	strb.w	r1, [r2], #1
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
 80021ec:	7a99      	ldrb	r1, [r3, #10]
				if (c == ' ') break;
 80021ee:	2920      	cmp	r1, #32
 80021f0:	d001      	beq.n	80021f6 <get_fileinfo+0xde>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80021f2:	f802 1b01 	strb.w	r1, [r2], #1
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80021f6:	7adf      	ldrb	r7, [r3, #11]
 80021f8:	7227      	strb	r7, [r4, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 80021fa:	7f99      	ldrb	r1, [r3, #30]
 80021fc:	7fdf      	ldrb	r7, [r3, #31]
 80021fe:	7f1d      	ldrb	r5, [r3, #28]
 8002200:	040e      	lsls	r6, r1, #16
 8002202:	f893 c01d 	ldrb.w	ip, [r3, #29]
 8002206:	ea46 6107 	orr.w	r1, r6, r7, lsl #24
 800220a:	ea41 0605 	orr.w	r6, r1, r5
 800220e:	ea46 250c 	orr.w	r5, r6, ip, lsl #8
 8002212:	6025      	str	r5, [r4, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 8002214:	7e19      	ldrb	r1, [r3, #24]
 8002216:	7e5d      	ldrb	r5, [r3, #25]
 8002218:	ea41 2c05 	orr.w	ip, r1, r5, lsl #8
 800221c:	f8a4 c004 	strh.w	ip, [r4, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 8002220:	7dde      	ldrb	r6, [r3, #23]
 8002222:	7d9b      	ldrb	r3, [r3, #22]
 8002224:	ea43 2106 	orr.w	r1, r3, r6, lsl #8
 8002228:	80e1      	strh	r1, [r4, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
 800222a:	2300      	movs	r3, #0
 800222c:	7013      	strb	r3, [r2, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
 800222e:	69a6      	ldr	r6, [r4, #24]
 8002230:	b12e      	cbz	r6, 800223e <get_fileinfo+0x126>
 8002232:	69e2      	ldr	r2, [r4, #28]
 8002234:	b11a      	cbz	r2, 800223e <get_fileinfo+0x126>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
 8002236:	6905      	ldr	r5, [r0, #16]
 8002238:	b915      	cbnz	r5, 8002240 <get_fileinfo+0x128>
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
 800223a:	2000      	movs	r0, #0
 800223c:	5570      	strb	r0, [r6, r5]
 800223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
 8002240:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 8002244:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002248:	45ac      	cmp	ip, r5
 800224a:	f000 80ca 	beq.w	80023e2 <get_fileinfo+0x2ca>
			lfn = dj->lfn;
 800224e:	69c7      	ldr	r7, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
 8002250:	8838      	ldrh	r0, [r7, #0]
 8002252:	b1b8      	cbz	r0, 8002284 <get_fileinfo+0x16c>
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
 8002254:	461d      	mov	r5, r3
 8002256:	e00f      	b.n	8002278 <get_fileinfo+0x160>
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
 8002258:	28ff      	cmp	r0, #255	; 0xff
					tp[i++] = (TCHAR)(w >> 8);
 800225a:	bf88      	it	hi
 800225c:	5573      	strbhi	r3, [r6, r5]
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
 800225e:	69e1      	ldr	r1, [r4, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
 8002260:	bf88      	it	hi
 8002262:	3501      	addhi	r5, #1
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
 8002264:	1e4b      	subs	r3, r1, #1
 8002266:	429d      	cmp	r5, r3
 8002268:	f080 80c1 	bcs.w	80023ee <get_fileinfo+0x2d6>
				tp[i++] = (TCHAR)w;
 800226c:	5570      	strb	r0, [r6, r5]
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
 800226e:	f837 0f02 	ldrh.w	r0, [r7, #2]!
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
				tp[i++] = (TCHAR)w;
 8002272:	3501      	adds	r5, #1
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
 8002274:	2800      	cmp	r0, #0
 8002276:	d0e0      	beq.n	800223a <get_fileinfo+0x122>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
 8002278:	2100      	movs	r1, #0
 800227a:	f7ff fdfb 	bl	8001e74 <ff_convert>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
 800227e:	0a03      	lsrs	r3, r0, #8
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
 8002280:	2800      	cmp	r0, #0
 8002282:	d1e9      	bne.n	8002258 <get_fileinfo+0x140>
 8002284:	4605      	mov	r5, r0
 8002286:	e7d8      	b.n	800223a <get_fileinfo+0x122>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 8002288:	781d      	ldrb	r5, [r3, #0]
			if (c == ' ') break;
 800228a:	2d20      	cmp	r5, #32
 800228c:	d09a      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 800228e:	2d05      	cmp	r5, #5
 8002290:	f000 80a9 	beq.w	80023e6 <get_fileinfo+0x2ce>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 8002294:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8002298:	b2f2      	uxtb	r2, r6
 800229a:	2a19      	cmp	r2, #25
 800229c:	d801      	bhi.n	80022a2 <get_fileinfo+0x18a>
 800229e:	3520      	adds	r5, #32
 80022a0:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80022a2:	7265      	strb	r5, [r4, #9]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 80022a4:	785d      	ldrb	r5, [r3, #1]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80022a6:	f104 020a 	add.w	r2, r4, #10
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 80022aa:	2d20      	cmp	r5, #32
 80022ac:	d08a      	beq.n	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 80022ae:	2d05      	cmp	r5, #5
 80022b0:	f000 809b 	beq.w	80023ea <get_fileinfo+0x2d2>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 80022b4:	f1a5 0c41 	sub.w	ip, r5, #65	; 0x41
 80022b8:	fa5f f78c 	uxtb.w	r7, ip
 80022bc:	2f19      	cmp	r7, #25
 80022be:	d801      	bhi.n	80022c4 <get_fileinfo+0x1ac>
 80022c0:	3520      	adds	r5, #32
 80022c2:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80022c4:	72a5      	strb	r5, [r4, #10]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 80022c6:	789d      	ldrb	r5, [r3, #2]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80022c8:	f104 020b 	add.w	r2, r4, #11
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 80022cc:	2d20      	cmp	r5, #32
 80022ce:	f43f af79 	beq.w	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 80022d2:	2d05      	cmp	r5, #5
 80022d4:	f000 808d 	beq.w	80023f2 <get_fileinfo+0x2da>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 80022d8:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 80022dc:	b2f2      	uxtb	r2, r6
 80022de:	2a19      	cmp	r2, #25
 80022e0:	d801      	bhi.n	80022e6 <get_fileinfo+0x1ce>
 80022e2:	3520      	adds	r5, #32
 80022e4:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80022e6:	72e5      	strb	r5, [r4, #11]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 80022e8:	78dd      	ldrb	r5, [r3, #3]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 80022ea:	f104 020c 	add.w	r2, r4, #12
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 80022ee:	2d20      	cmp	r5, #32
 80022f0:	f43f af68 	beq.w	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 80022f4:	2d05      	cmp	r5, #5
 80022f6:	d07e      	beq.n	80023f6 <get_fileinfo+0x2de>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 80022f8:	f1a5 0c41 	sub.w	ip, r5, #65	; 0x41
 80022fc:	fa5f f78c 	uxtb.w	r7, ip
 8002300:	2f19      	cmp	r7, #25
 8002302:	d801      	bhi.n	8002308 <get_fileinfo+0x1f0>
 8002304:	3520      	adds	r5, #32
 8002306:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002308:	7325      	strb	r5, [r4, #12]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 800230a:	791d      	ldrb	r5, [r3, #4]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800230c:	f104 020d 	add.w	r2, r4, #13
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8002310:	2d20      	cmp	r5, #32
 8002312:	f43f af57 	beq.w	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002316:	2d05      	cmp	r5, #5
 8002318:	d06f      	beq.n	80023fa <get_fileinfo+0x2e2>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 800231a:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 800231e:	b2f2      	uxtb	r2, r6
 8002320:	2a19      	cmp	r2, #25
 8002322:	d801      	bhi.n	8002328 <get_fileinfo+0x210>
 8002324:	3520      	adds	r5, #32
 8002326:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 8002328:	7365      	strb	r5, [r4, #13]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 800232a:	795d      	ldrb	r5, [r3, #5]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800232c:	f104 020e 	add.w	r2, r4, #14
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8002330:	2d20      	cmp	r5, #32
 8002332:	f43f af47 	beq.w	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002336:	2d05      	cmp	r5, #5
 8002338:	d061      	beq.n	80023fe <get_fileinfo+0x2e6>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 800233a:	f1a5 0c41 	sub.w	ip, r5, #65	; 0x41
 800233e:	fa5f f78c 	uxtb.w	r7, ip
 8002342:	2f19      	cmp	r7, #25
 8002344:	d801      	bhi.n	800234a <get_fileinfo+0x232>
 8002346:	3520      	adds	r5, #32
 8002348:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800234a:	73a5      	strb	r5, [r4, #14]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 800234c:	799d      	ldrb	r5, [r3, #6]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800234e:	f104 020f 	add.w	r2, r4, #15
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8002352:	2d20      	cmp	r5, #32
 8002354:	f43f af36 	beq.w	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002358:	2d05      	cmp	r5, #5
 800235a:	d052      	beq.n	8002402 <get_fileinfo+0x2ea>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 800235c:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8002360:	b2f2      	uxtb	r2, r6
 8002362:	2a19      	cmp	r2, #25
 8002364:	d801      	bhi.n	800236a <get_fileinfo+0x252>
 8002366:	3520      	adds	r5, #32
 8002368:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800236a:	73e5      	strb	r5, [r4, #15]
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 800236c:	79dd      	ldrb	r5, [r3, #7]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800236e:	f104 0210 	add.w	r2, r4, #16
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 8002372:	2d20      	cmp	r5, #32
 8002374:	f43f af26 	beq.w	80021c4 <get_fileinfo+0xac>
			if (c == NDDE) c = (TCHAR)DDE;
 8002378:	2d05      	cmp	r5, #5
 800237a:	d04a      	beq.n	8002412 <get_fileinfo+0x2fa>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 800237c:	f1a5 0c41 	sub.w	ip, r5, #65	; 0x41
 8002380:	fa5f f78c 	uxtb.w	r7, ip
 8002384:	2f19      	cmp	r7, #25
 8002386:	d801      	bhi.n	800238c <get_fileinfo+0x274>
 8002388:	3520      	adds	r5, #32
 800238a:	b2ed      	uxtb	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
 800238c:	7425      	strb	r5, [r4, #16]
 800238e:	f104 0211 	add.w	r2, r4, #17
 8002392:	e717      	b.n	80021c4 <get_fileinfo+0xac>
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
 8002394:	7a19      	ldrb	r1, [r3, #8]
				if (c == ' ') break;
 8002396:	2920      	cmp	r1, #32
 8002398:	f43f af2d 	beq.w	80021f6 <get_fileinfo+0xde>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 800239c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80023a0:	fa5f f78c 	uxtb.w	r7, ip
 80023a4:	2f19      	cmp	r7, #25
 80023a6:	d92e      	bls.n	8002406 <get_fileinfo+0x2ee>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80023a8:	f802 1b01 	strb.w	r1, [r2], #1
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
 80023ac:	7a59      	ldrb	r1, [r3, #9]
				if (c == ' ') break;
 80023ae:	2920      	cmp	r1, #32
 80023b0:	f43f af21 	beq.w	80021f6 <get_fileinfo+0xde>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 80023b4:	f1a1 0641 	sub.w	r6, r1, #65	; 0x41
 80023b8:	b2f5      	uxtb	r5, r6
 80023ba:	2d19      	cmp	r5, #25
 80023bc:	d926      	bls.n	800240c <get_fileinfo+0x2f4>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80023be:	f802 1b01 	strb.w	r1, [r2], #1
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
 80023c2:	7a99      	ldrb	r1, [r3, #10]
				if (c == ' ') break;
 80023c4:	2920      	cmp	r1, #32
 80023c6:	f43f af16 	beq.w	80021f6 <get_fileinfo+0xde>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 80023ca:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80023ce:	fa5f f78c 	uxtb.w	r7, ip
 80023d2:	2f19      	cmp	r7, #25
 80023d4:	f63f af0d 	bhi.w	80021f2 <get_fileinfo+0xda>
 80023d8:	3120      	adds	r1, #32
 80023da:	b2c9      	uxtb	r1, r1
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
 80023dc:	f802 1b01 	strb.w	r1, [r2], #1
 80023e0:	e709      	b.n	80021f6 <get_fileinfo+0xde>
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
 80023e2:	461d      	mov	r5, r3
 80023e4:	e729      	b.n	800223a <get_fileinfo+0x122>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
 80023e6:	25e5      	movs	r5, #229	; 0xe5
 80023e8:	e75b      	b.n	80022a2 <get_fileinfo+0x18a>
 80023ea:	25e5      	movs	r5, #229	; 0xe5
 80023ec:	e76a      	b.n	80022c4 <get_fileinfo+0x1ac>
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
 80023ee:	2500      	movs	r5, #0
 80023f0:	e723      	b.n	800223a <get_fileinfo+0x122>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
 80023f2:	25e5      	movs	r5, #229	; 0xe5
 80023f4:	e777      	b.n	80022e6 <get_fileinfo+0x1ce>
 80023f6:	25e5      	movs	r5, #229	; 0xe5
 80023f8:	e786      	b.n	8002308 <get_fileinfo+0x1f0>
 80023fa:	25e5      	movs	r5, #229	; 0xe5
 80023fc:	e794      	b.n	8002328 <get_fileinfo+0x210>
 80023fe:	25e5      	movs	r5, #229	; 0xe5
 8002400:	e7a3      	b.n	800234a <get_fileinfo+0x232>
 8002402:	25e5      	movs	r5, #229	; 0xe5
 8002404:	e7b1      	b.n	800236a <get_fileinfo+0x252>
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 8002406:	3120      	adds	r1, #32
 8002408:	b2c9      	uxtb	r1, r1
 800240a:	e7cd      	b.n	80023a8 <get_fileinfo+0x290>
 800240c:	3120      	adds	r1, #32
 800240e:	b2c9      	uxtb	r1, r1
 8002410:	e7d5      	b.n	80023be <get_fileinfo+0x2a6>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
 8002412:	25e5      	movs	r5, #229	; 0xe5
 8002414:	e7ba      	b.n	800238c <get_fileinfo+0x274>
 8002416:	bf00      	nop

08002418 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 8002418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 800241c:	6803      	ldr	r3, [r0, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 800241e:	4616      	mov	r6, r2
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8002420:	781c      	ldrb	r4, [r3, #0]
 8002422:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8002424:	2c09      	cmp	r4, #9
 8002426:	d802      	bhi.n	800242e <chk_mounted+0x16>
 8002428:	785a      	ldrb	r2, [r3, #1]
 800242a:	2a3a      	cmp	r2, #58	; 0x3a
 800242c:	d04d      	beq.n	80024ca <chk_mounted+0xb2>
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 800242e:	4dbe      	ldr	r5, [pc, #760]	; (8002728 <chk_mounted+0x310>)
 8002430:	682c      	ldr	r4, [r5, #0]
 8002432:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002434:	2c00      	cmp	r4, #0
 8002436:	d054      	beq.n	80024e2 <chk_mounted+0xca>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
 8002438:	7820      	ldrb	r0, [r4, #0]
 800243a:	2800      	cmp	r0, #0
 800243c:	d136      	bne.n	80024ac <chk_mounted+0x94>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800243e:	2000      	movs	r0, #0
 8002440:	7020      	strb	r0, [r4, #0]
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 8002442:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 8002444:	f006 fce4 	bl	8008e10 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002448:	f010 0f01 	tst.w	r0, #1
 800244c:	d12b      	bne.n	80024a6 <chk_mounted+0x8e>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800244e:	b116      	cbz	r6, 8002456 <chk_mounted+0x3e>
 8002450:	f010 0f04 	tst.w	r0, #4
 8002454:	d140      	bne.n	80024d8 <chk_mounted+0xc0>
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8002456:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800245a:	7860      	ldrb	r0, [r4, #1]
 800245c:	4631      	mov	r1, r6
 800245e:	2200      	movs	r2, #0
 8002460:	2301      	movs	r3, #1
 8002462:	f006 fdb3 	bl	8008fcc <disk_read>
 8002466:	2800      	cmp	r0, #0
 8002468:	d139      	bne.n	80024de <chk_mounted+0xc6>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 800246a:	f894 c22f 	ldrb.w	ip, [r4, #559]	; 0x22f
 800246e:	f894 e22e 	ldrb.w	lr, [r4, #558]	; 0x22e
 8002472:	49ae      	ldr	r1, [pc, #696]	; (800272c <chk_mounted+0x314>)
 8002474:	ea4e 270c 	orr.w	r7, lr, ip, lsl #8
 8002478:	b23f      	sxth	r7, r7
 800247a:	428f      	cmp	r7, r1
 800247c:	d034      	beq.n	80024e8 <chk_mounted+0xd0>
		return 2;
 800247e:	2002      	movs	r0, #2
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 8002480:	f04f 0900 	mov.w	r9, #0
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8002484:	2803      	cmp	r0, #3
 8002486:	f000 814b 	beq.w	8002720 <chk_mounted+0x308>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 800248a:	b948      	cbnz	r0, 80024a0 <chk_mounted+0x88>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800248c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002490:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
 8002494:	ea40 2e02 	orr.w	lr, r0, r2, lsl #8
 8002498:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 800249c:	f000 809c 	beq.w	80025d8 <chk_mounted+0x1c0>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 80024a0:	200d      	movs	r0, #13
 80024a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 80024a6:	2003      	movs	r0, #3
 80024a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
 80024ac:	7860      	ldrb	r0, [r4, #1]
 80024ae:	f006 fd85 	bl	8008fbc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 80024b2:	f010 0f01 	tst.w	r0, #1
 80024b6:	d1c2      	bne.n	800243e <chk_mounted+0x26>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 80024b8:	2e00      	cmp	r6, #0
 80024ba:	f000 812e 	beq.w	800271a <chk_mounted+0x302>
				return FR_WRITE_PROTECTED;
 80024be:	f010 0004 	ands.w	r0, r0, #4
 80024c2:	bf18      	it	ne
 80024c4:	200a      	movne	r0, #10
 80024c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
		p += 2; *path = p;				/* Return pointer to the path name */
 80024ca:	3302      	adds	r3, #2
 80024cc:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 80024ce:	2c00      	cmp	r4, #0
 80024d0:	d0ad      	beq.n	800242e <chk_mounted+0x16>
		return FR_INVALID_DRIVE;
 80024d2:	200b      	movs	r0, #11
 80024d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 80024d8:	200a      	movs	r0, #10
 80024da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 80024de:	2003      	movs	r0, #3
 80024e0:	e7ce      	b.n	8002480 <chk_mounted+0x68>

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80024e2:	200c      	movs	r0, #12
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80024e8:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
 80024ec:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80024f0:	040b      	lsls	r3, r1, #16
 80024f2:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 80024f6:	ea43 6e02 	orr.w	lr, r3, r2, lsl #24
 80024fa:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
 80024fe:	ea4e 0801 	orr.w	r8, lr, r1
 8002502:	ea48 230c 	orr.w	r3, r8, ip, lsl #8
 8002506:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8002730 <chk_mounted+0x318>
 800250a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800250e:	4542      	cmp	r2, r8
 8002510:	d0b6      	beq.n	8002480 <chk_mounted+0x68>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8002512:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
 8002516:	f894 e085 	ldrb.w	lr, [r4, #133]	; 0x85
 800251a:	0413      	lsls	r3, r2, #16
 800251c:	f894 1082 	ldrb.w	r1, [r4, #130]	; 0x82
 8002520:	ea43 6c0e 	orr.w	ip, r3, lr, lsl #24
 8002524:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
 8002528:	ea4c 0301 	orr.w	r3, ip, r1
 800252c:	ea43 2e02 	orr.w	lr, r3, r2, lsl #8
 8002530:	f02e 4c7f 	bic.w	ip, lr, #4278190080	; 0xff000000
 8002534:	45c4      	cmp	ip, r8
 8002536:	d0a3      	beq.n	8002480 <chk_mounted+0x68>
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
 8002538:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
 800253c:	2800      	cmp	r0, #0
 800253e:	d0af      	beq.n	80024a0 <chk_mounted+0x88>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 8002540:	f894 21f8 	ldrb.w	r2, [r4, #504]	; 0x1f8
 8002544:	f894 11f9 	ldrb.w	r1, [r4, #505]	; 0x1f9
 8002548:	0413      	lsls	r3, r2, #16
 800254a:	f894 e1f6 	ldrb.w	lr, [r4, #502]	; 0x1f6
 800254e:	ea43 6c01 	orr.w	ip, r3, r1, lsl #24
 8002552:	f894 91f7 	ldrb.w	r9, [r4, #503]	; 0x1f7
 8002556:	ea4c 000e 	orr.w	r0, ip, lr
 800255a:	ea40 2909 	orr.w	r9, r0, r9, lsl #8
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 800255e:	4631      	mov	r1, r6
 8002560:	7860      	ldrb	r0, [r4, #1]
 8002562:	464a      	mov	r2, r9
 8002564:	2301      	movs	r3, #1
 8002566:	f006 fd31 	bl	8008fcc <disk_read>
 800256a:	2800      	cmp	r0, #0
 800256c:	f040 80d8 	bne.w	8002720 <chk_mounted+0x308>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8002570:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
 8002574:	f894 e22e 	ldrb.w	lr, [r4, #558]	; 0x22e
 8002578:	ea4e 2c03 	orr.w	ip, lr, r3, lsl #8
 800257c:	fa0f f08c 	sxth.w	r0, ip
 8002580:	42b8      	cmp	r0, r7
 8002582:	d18d      	bne.n	80024a0 <chk_mounted+0x88>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002584:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
 8002588:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 800258c:	0402      	lsls	r2, r0, #16
 800258e:	f894 e066 	ldrb.w	lr, [r4, #102]	; 0x66
 8002592:	ea42 6301 	orr.w	r3, r2, r1, lsl #24
 8002596:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
 800259a:	ea43 000e 	orr.w	r0, r3, lr
 800259e:	ea40 220c 	orr.w	r2, r0, ip, lsl #8
 80025a2:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 80025a6:	4541      	cmp	r1, r8
 80025a8:	f43f af70 	beq.w	800248c <chk_mounted+0x74>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 80025ac:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
 80025b0:	f894 c085 	ldrb.w	ip, [r4, #133]	; 0x85
 80025b4:	040b      	lsls	r3, r1, #16
 80025b6:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 80025ba:	ea43 620c 	orr.w	r2, r3, ip, lsl #24
 80025be:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
 80025c2:	ea42 0300 	orr.w	r3, r2, r0
 80025c6:	ea43 2e01 	orr.w	lr, r3, r1, lsl #8
 80025ca:	f02e 4c7f 	bic.w	ip, lr, #4278190080	; 0xff000000
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 80025ce:	ebbc 0008 	subs.w	r0, ip, r8
 80025d2:	bf18      	it	ne
 80025d4:	2001      	movne	r0, #1
 80025d6:	e755      	b.n	8002484 <chk_mounted+0x6c>
	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80025d8:	f894 c047 	ldrb.w	ip, [r4, #71]	; 0x47
 80025dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80025e0:	ea53 220c 	orrs.w	r2, r3, ip, lsl #8
 80025e4:	d10e      	bne.n	8002604 <chk_mounted+0x1ec>
 80025e6:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 80025ea:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 80025ee:	040b      	lsls	r3, r1, #16
 80025f0:	f894 c054 	ldrb.w	ip, [r4, #84]	; 0x54
 80025f4:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
 80025f8:	f894 e055 	ldrb.w	lr, [r4, #85]	; 0x55
 80025fc:	ea40 010c 	orr.w	r1, r0, ip
 8002600:	ea41 220e 	orr.w	r2, r1, lr, lsl #8
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8002604:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
 8002608:	61e2      	str	r2, [r4, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	fa5f fe80 	uxtb.w	lr, r0
 8002610:	f1be 0f01 	cmp.w	lr, #1

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8002614:	70e3      	strb	r3, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8002616:	f63f af43 	bhi.w	80024a0 <chk_mounted+0x88>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 800261a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800261e:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002620:	2900      	cmp	r1, #0
 8002622:	f43f af3d 	beq.w	80024a0 <chk_mounted+0x88>
 8002626:	1e48      	subs	r0, r1, #1
 8002628:	4208      	tst	r0, r1
 800262a:	f47f af39 	bne.w	80024a0 <chk_mounted+0x88>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800262e:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
 8002632:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
 8002636:	ea4c 2007 	orr.w	r0, ip, r7, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 800263a:	f010 0f0f 	tst.w	r0, #15
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800263e:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8002640:	f47f af2e 	bne.w	80024a0 <chk_mounted+0x88>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8002644:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
 8002648:	f894 7043 	ldrb.w	r7, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 800264c:	ea57 2808 	orrs.w	r8, r7, r8, lsl #8
 8002650:	d10f      	bne.n	8002672 <chk_mounted+0x25a>
 8002652:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
 8002656:	f894 8053 	ldrb.w	r8, [r4, #83]	; 0x53
 800265a:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 800265e:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
 8002662:	ea4e 6808 	orr.w	r8, lr, r8, lsl #24
 8002666:	f894 e051 	ldrb.w	lr, [r4, #81]	; 0x51
 800266a:	ea48 0c07 	orr.w	ip, r8, r7
 800266e:	ea4c 280e 	orr.w	r8, ip, lr, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8002672:	f894 e03f 	ldrb.w	lr, [r4, #63]	; 0x3f
 8002676:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 800267a:	ea57 2c0e 	orrs.w	ip, r7, lr, lsl #8
 800267e:	f43f af0f 	beq.w	80024a0 <chk_mounted+0x88>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
 8002682:	fb03 f302 	mul.w	r3, r3, r2

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8002686:	eb0c 1a10 	add.w	sl, ip, r0, lsr #4
 800268a:	449a      	add	sl, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800268c:	45d0      	cmp	r8, sl
 800268e:	f4ff af07 	bcc.w	80024a0 <chk_mounted+0x88>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002692:	ebca 0808 	rsb	r8, sl, r8
 8002696:	fbb8 f1f1 	udiv	r1, r8, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800269a:	2900      	cmp	r1, #0
 800269c:	f43f af00 	beq.w	80024a0 <chk_mounted+0x88>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80026a0:	f640 77f5 	movw	r7, #4085	; 0xff5
 80026a4:	42b9      	cmp	r1, r7
 80026a6:	d945      	bls.n	8002734 <chk_mounted+0x31c>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80026a8:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 80026ac:	4571      	cmp	r1, lr
 80026ae:	f240 80be 	bls.w	800282e <chk_mounted+0x416>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80026b2:	1c8b      	adds	r3, r1, #2
	fs->database = bsect + sysect;						/* Data start sector */
 80026b4:	eb0a 0709 	add.w	r7, sl, r9
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80026b8:	eb09 010c 	add.w	r1, r9, ip
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80026bc:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 80026be:	62a7      	str	r7, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80026c0:	6221      	str	r1, [r4, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d14e      	bne.n	8002764 <chk_mounted+0x34c>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 80026c6:	f894 705e 	ldrb.w	r7, [r4, #94]	; 0x5e
 80026ca:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
 80026ce:	0438      	lsls	r0, r7, #16
 80026d0:	f894 e05c 	ldrb.w	lr, [r4, #92]	; 0x5c
 80026d4:	ea40 6701 	orr.w	r7, r0, r1, lsl #24
 80026d8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80026dc:	ea47 0c0e 	orr.w	ip, r7, lr
 80026e0:	ea4c 2100 	orr.w	r1, ip, r0, lsl #8
 80026e4:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 80026e6:	009b      	lsls	r3, r3, #2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80026e8:	2703      	movs	r7, #3
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 80026ea:	f503 70fe 	add.w	r0, r3, #508	; 0x1fc
 80026ee:	1cc1      	adds	r1, r0, #3
 80026f0:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 80026f4:	f4ff aed4 	bcc.w	80024a0 <chk_mounted+0x88>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->last_clust = 0;
 80026f8:	2300      	movs	r3, #0
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80026fa:	f04f 32ff 	mov.w	r2, #4294967295
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80026fe:	2f03      	cmp	r7, #3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8002700:	6122      	str	r2, [r4, #16]
	fs->last_clust = 0;
 8002702:	60e3      	str	r3, [r4, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 8002704:	d033      	beq.n	800276e <chk_mounted+0x356>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8002706:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8002708:	88ab      	ldrh	r3, [r5, #4]
	fs->winsect = 0;		/* Invalidate sector cache */
 800270a:	2000      	movs	r0, #0
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
 800270c:	1c59      	adds	r1, r3, #1
 800270e:	80a9      	strh	r1, [r5, #4]
 8002710:	80e1      	strh	r1, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 8002712:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
 8002714:	7120      	strb	r0, [r4, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8002716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
 800271a:	4630      	mov	r0, r6
 800271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8002720:	2001      	movs	r0, #1
 8002722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002726:	bf00      	nop
 8002728:	20000724 	.word	0x20000724
 800272c:	ffffaa55 	.word	0xffffaa55
 8002730:	00544146 	.word	0x00544146
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
 8002734:	2701      	movs	r7, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002736:	3102      	adds	r1, #2
	fs->database = bsect + sysect;						/* Data start sector */
 8002738:	44ca      	add	sl, r9
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800273a:	44cc      	add	ip, r9
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800273c:	61a1      	str	r1, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 800273e:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002742:	f8c4 c020 	str.w	ip, [r4, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002746:	2800      	cmp	r0, #0
 8002748:	f43f aeaa 	beq.w	80024a0 <chk_mounted+0x88>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800274c:	4463      	add	r3, ip
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800274e:	2f02      	cmp	r7, #2
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002750:	6263      	str	r3, [r4, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002752:	d00a      	beq.n	800276a <chk_mounted+0x352>
 8002754:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8002758:	f001 0e01 	and.w	lr, r1, #1
 800275c:	eb0e 035c 	add.w	r3, lr, ip, lsr #1
 8002760:	2701      	movs	r7, #1
 8002762:	e7c2      	b.n	80026ea <chk_mounted+0x2d2>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002764:	200d      	movs	r0, #13
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8002766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800276a:	004b      	lsls	r3, r1, #1
 800276c:	e7bd      	b.n	80026ea <chk_mounted+0x2d2>
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 800276e:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
 8002772:	f894 e060 	ldrb.w	lr, [r4, #96]	; 0x60
	fs->free_clust = 0xFFFFFFFF;
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
 8002776:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8002778:	ea4e 2c01 	orr.w	ip, lr, r1, lsl #8
 800277c:	eb09 020c 	add.w	r2, r9, ip
 8002780:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8002782:	7860      	ldrb	r0, [r4, #1]
 8002784:	4631      	mov	r1, r6
 8002786:	3301      	adds	r3, #1
 8002788:	f006 fc20 	bl	8008fcc <disk_read>
 800278c:	2800      	cmp	r0, #0
 800278e:	d1ba      	bne.n	8002706 <chk_mounted+0x2ee>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8002790:	f894 c22f 	ldrb.w	ip, [r4, #559]	; 0x22f
 8002794:	f894 e22e 	ldrb.w	lr, [r4, #558]	; 0x22e

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <chk_mounted+0x41c>)
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 800279a:	ea4e 220c 	orr.w	r2, lr, ip, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 800279e:	b210      	sxth	r0, r2
 80027a0:	4298      	cmp	r0, r3
 80027a2:	d1b0      	bne.n	8002706 <chk_mounted+0x2ee>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80027a4:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80027a8:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 80027ac:	0410      	lsls	r0, r2, #16
 80027ae:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
 80027b2:	ea40 6e01 	orr.w	lr, r0, r1, lsl #24
 80027b6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80027ba:	ea4e 030c 	orr.w	r3, lr, ip
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80027be:	481e      	ldr	r0, [pc, #120]	; (8002838 <chk_mounted+0x420>)
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80027c0:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80027c4:	4281      	cmp	r1, r0
 80027c6:	d19e      	bne.n	8002706 <chk_mounted+0x2ee>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 80027c8:	f894 1216 	ldrb.w	r1, [r4, #534]	; 0x216
 80027cc:	f894 c217 	ldrb.w	ip, [r4, #535]	; 0x217
 80027d0:	040b      	lsls	r3, r1, #16
 80027d2:	f894 0214 	ldrb.w	r0, [r4, #532]	; 0x214
 80027d6:	ea43 620c 	orr.w	r2, r3, ip, lsl #24
 80027da:	f894 e215 	ldrb.w	lr, [r4, #533]	; 0x215
 80027de:	ea42 0100 	orr.w	r1, r2, r0
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <chk_mounted+0x424>)
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 80027e4:	ea41 2c0e 	orr.w	ip, r1, lr, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80027e8:	459c      	cmp	ip, r3
 80027ea:	d18c      	bne.n	8002706 <chk_mounted+0x2ee>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80027ec:	f894 221e 	ldrb.w	r2, [r4, #542]	; 0x21e
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80027f0:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80027f4:	f894 c21f 	ldrb.w	ip, [r4, #543]	; 0x21f
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80027f8:	f894 621b 	ldrb.w	r6, [r4, #539]	; 0x21b
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80027fc:	0410      	lsls	r0, r2, #16
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80027fe:	0419      	lsls	r1, r3, #16
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002800:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8002804:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002808:	ea40 6e0c 	orr.w	lr, r0, ip, lsl #24
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 800280c:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002810:	f894 021d 	ldrb.w	r0, [r4, #541]	; 0x21d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8002814:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002818:	ea4e 0c02 	orr.w	ip, lr, r2
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 800281c:	ea46 0e03 	orr.w	lr, r6, r3
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002820:	ea4c 2200 	orr.w	r2, ip, r0, lsl #8
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8002824:	ea4e 2001 	orr.w	r0, lr, r1, lsl #8
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002828:	60e2      	str	r2, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 800282a:	6120      	str	r0, [r4, #16]
 800282c:	e76b      	b.n	8002706 <chk_mounted+0x2ee>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800282e:	2702      	movs	r7, #2
 8002830:	e781      	b.n	8002736 <chk_mounted+0x31e>
 8002832:	bf00      	nop
 8002834:	ffffaa55 	.word	0xffffaa55
 8002838:	41615252 	.word	0x41615252
 800283c:	61417272 	.word	0x61417272

08002840 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8002844:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8002846:	b083      	sub	sp, #12
 8002848:	4604      	mov	r4, r0
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 800284a:	b10d      	cbz	r5, 8002850 <sync+0x10>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 800284c:	7903      	ldrb	r3, [r0, #4]
 800284e:	b97b      	cbnz	r3, 8002870 <sync+0x30>


	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8002850:	f894 c000 	ldrb.w	ip, [r4]
 8002854:	f1bc 0f03 	cmp.w	ip, #3
 8002858:	d075      	beq.n	8002946 <sync+0x106>
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 800285a:	2100      	movs	r1, #0
 800285c:	7860      	ldrb	r0, [r4, #1]
 800285e:	460a      	mov	r2, r1
 8002860:	f006 fd42 	bl	80092e8 <disk_ioctl>
 8002864:	3800      	subs	r0, #0
 8002866:	bf18      	it	ne
 8002868:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 800286a:	b003      	add	sp, #12
 800286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8002870:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8002874:	4631      	mov	r1, r6
 8002876:	7840      	ldrb	r0, [r0, #1]
 8002878:	462a      	mov	r2, r5
 800287a:	2301      	movs	r3, #1
 800287c:	f006 fc64 	bl	8009148 <disk_write>
 8002880:	2800      	cmp	r0, #0
 8002882:	d15e      	bne.n	8002942 <sync+0x102>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002884:	69e3      	ldr	r3, [r4, #28]
 8002886:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8002888:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800288a:	185a      	adds	r2, r3, r1
 800288c:	4295      	cmp	r5, r2
 800288e:	d2df      	bcs.n	8002850 <sync+0x10>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002890:	78e7      	ldrb	r7, [r4, #3]
 8002892:	2f01      	cmp	r7, #1
 8002894:	d9dc      	bls.n	8002850 <sync+0x10>
 8002896:	f1a7 0802 	sub.w	r8, r7, #2
 800289a:	f018 0803 	ands.w	r8, r8, #3
 800289e:	d023      	beq.n	80028e8 <sync+0xa8>
					wsect += fs->fsize;
 80028a0:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80028a2:	7860      	ldrb	r0, [r4, #1]
 80028a4:	2301      	movs	r3, #1
 80028a6:	4631      	mov	r1, r6
 80028a8:	462a      	mov	r2, r5
 80028aa:	f006 fc4d 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80028ae:	3f01      	subs	r7, #1
 80028b0:	f1b8 0f01 	cmp.w	r8, #1
 80028b4:	b2ff      	uxtb	r7, r7
 80028b6:	69e3      	ldr	r3, [r4, #28]
 80028b8:	d016      	beq.n	80028e8 <sync+0xa8>
 80028ba:	f1b8 0f02 	cmp.w	r8, #2
 80028be:	d009      	beq.n	80028d4 <sync+0x94>
					wsect += fs->fsize;
 80028c0:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80028c2:	4631      	mov	r1, r6
 80028c4:	2301      	movs	r3, #1
 80028c6:	7860      	ldrb	r0, [r4, #1]
 80028c8:	462a      	mov	r2, r5
 80028ca:	f006 fc3d 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80028ce:	1e79      	subs	r1, r7, #1
 80028d0:	69e3      	ldr	r3, [r4, #28]
 80028d2:	b2cf      	uxtb	r7, r1
					wsect += fs->fsize;
 80028d4:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80028d6:	7860      	ldrb	r0, [r4, #1]
 80028d8:	2301      	movs	r3, #1
 80028da:	4631      	mov	r1, r6
 80028dc:	462a      	mov	r2, r5
 80028de:	f006 fc33 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80028e2:	1e7b      	subs	r3, r7, #1
 80028e4:	b2df      	uxtb	r7, r3
 80028e6:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 80028e8:	eb05 0803 	add.w	r8, r5, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80028ec:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80028ee:	2301      	movs	r3, #1
 80028f0:	4631      	mov	r1, r6
 80028f2:	4642      	mov	r2, r8
 80028f4:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80028f6:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80028f8:	f006 fc26 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80028fc:	2d01      	cmp	r5, #1
 80028fe:	d0a7      	beq.n	8002850 <sync+0x10>
 8002900:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002902:	4631      	mov	r1, r6
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002904:	4490      	add	r8, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8002906:	4642      	mov	r2, r8
 8002908:	2301      	movs	r3, #1
 800290a:	7860      	ldrb	r0, [r4, #1]
 800290c:	f006 fc1c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002910:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002912:	4631      	mov	r1, r6
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002914:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002916:	4642      	mov	r2, r8
 8002918:	2301      	movs	r3, #1
 800291a:	7860      	ldrb	r0, [r4, #1]
 800291c:	f006 fc14 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002920:	1e6f      	subs	r7, r5, #1
 8002922:	69e0      	ldr	r0, [r4, #28]
 8002924:	b2fd      	uxtb	r5, r7
 8002926:	1e6f      	subs	r7, r5, #1
					wsect += fs->fsize;
 8002928:	eb08 0500 	add.w	r5, r8, r0
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800292c:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800292e:	2301      	movs	r3, #1
 8002930:	7860      	ldrb	r0, [r4, #1]
 8002932:	4631      	mov	r1, r6
 8002934:	462a      	mov	r2, r5
 8002936:	f006 fc07 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800293a:	1e7b      	subs	r3, r7, #1
 800293c:	b2df      	uxtb	r7, r3
 800293e:	69e3      	ldr	r3, [r4, #28]
 8002940:	e7d2      	b.n	80028e8 <sync+0xa8>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8002942:	2001      	movs	r0, #1
 8002944:	e791      	b.n	800286a <sync+0x2a>


	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8002946:	7961      	ldrb	r1, [r4, #5]
 8002948:	2900      	cmp	r1, #0
 800294a:	d086      	beq.n	800285a <sync+0x1a>
			fs->winsect = 0;
 800294c:	2500      	movs	r5, #0
 800294e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002952:	62e5      	str	r5, [r4, #44]	; 0x2c
 8002954:	460b      	mov	r3, r1
/*-----------------------------------------------------------------------*/
/* Clean-up cached data                                                  */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 8002956:	f504 700c 	add.w	r0, r4, #560	; 0x230
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 800295a:	461e      	mov	r6, r3
 800295c:	f846 5b04 	str.w	r5, [r6], #4
 8002960:	605d      	str	r5, [r3, #4]
 8002962:	6075      	str	r5, [r6, #4]
 8002964:	60dd      	str	r5, [r3, #12]
 8002966:	3310      	adds	r3, #16
 8002968:	4283      	cmp	r3, r0
 800296a:	d1f6      	bne.n	800295a <sync+0x11a>
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 800296c:	68e3      	ldr	r3, [r4, #12]
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 800296e:	6922      	ldr	r2, [r4, #16]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8002970:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8002974:	f8cd b000 	str.w	fp, [sp]
 8002978:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 800297c:	f8cd b004 	str.w	fp, [sp, #4]
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8002980:	f04f 0b55 	mov.w	fp, #85	; 0x55
 8002984:	f884 b22e 	strb.w	fp, [r4, #558]	; 0x22e
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8002988:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800298c:	2061      	movs	r0, #97	; 0x61
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 800298e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8002992:	2641      	movs	r6, #65	; 0x41
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8002994:	2772      	movs	r7, #114	; 0x72
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8002996:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 800299a:	ea4f 4912 	mov.w	r9, r2, lsr #16
 800299e:	ea4f 6812 	mov.w	r8, r2, lsr #24
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80029a2:	f04f 0baa 	mov.w	fp, #170	; 0xaa
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80029a6:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80029aa:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80029ae:	f884 b22f 	strb.w	fp, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80029b2:	f884 e030 	strb.w	lr, [r4, #48]	; 0x30
 80029b6:	f884 e031 	strb.w	lr, [r4, #49]	; 0x31
 80029ba:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
 80029be:	f884 6033 	strb.w	r6, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80029c2:	f884 7214 	strb.w	r7, [r4, #532]	; 0x214
 80029c6:	f884 7215 	strb.w	r7, [r4, #533]	; 0x215
 80029ca:	f884 6216 	strb.w	r6, [r4, #534]	; 0x216
 80029ce:	f884 0217 	strb.w	r0, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80029d2:	f884 a219 	strb.w	sl, [r4, #537]	; 0x219
 80029d6:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
 80029da:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80029de:	f884 c21d 	strb.w	ip, [r4, #541]	; 0x21d
 80029e2:	9800      	ldr	r0, [sp, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 80029e4:	6962      	ldr	r2, [r4, #20]
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80029e6:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
 80029ea:	f8dd b004 	ldr.w	fp, [sp, #4]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 80029ee:	7860      	ldrb	r0, [r4, #1]
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80029f0:	f884 b21f 	strb.w	fp, [r4, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 80029f4:	2301      	movs	r3, #1
 80029f6:	f006 fba7 	bl	8009148 <disk_write>
			fs->fsi_flag = 0;
 80029fa:	7165      	strb	r5, [r4, #5]
 80029fc:	e72d      	b.n	800285a <sync+0x1a>
 80029fe:	bf00      	nop

08002a00 <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8002a00:	6982      	ldr	r2, [r0, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8002a02:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8002a04:	1e93      	subs	r3, r2, #2
 8002a06:	4299      	cmp	r1, r3
 8002a08:	d205      	bcs.n	8002a16 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
 8002a0a:	f890 c002 	ldrb.w	ip, [r0, #2]
 8002a0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a10:	fb0c 0001 	mla	r0, ip, r1, r0
 8002a14:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8002a16:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop

08002a1c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8002a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 8002a20:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8002a22:	b083      	sub	sp, #12
 8002a24:	460d      	mov	r5, r1
 8002a26:	4604      	mov	r4, r0
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 8002a28:	d90e      	bls.n	8002a48 <get_fat+0x2c>
 8002a2a:	6983      	ldr	r3, [r0, #24]
 8002a2c:	4299      	cmp	r1, r3
 8002a2e:	d20b      	bcs.n	8002a48 <get_fat+0x2c>
		return 1;

	switch (fs->fs_type) {
 8002a30:	7803      	ldrb	r3, [r0, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d00a      	beq.n	8002a4c <get_fat+0x30>
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d059      	beq.n	8002aee <get_fat+0xd2>
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d01f      	beq.n	8002a7e <get_fat+0x62>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002a42:	b003      	add	sp, #12
 8002a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
 8002a48:	2001      	movs	r0, #1
 8002a4a:	e7fa      	b.n	8002a42 <get_fat+0x26>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8002a4c:	6a02      	ldr	r2, [r0, #32]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8002a4e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8002a50:	eb02 2811 	add.w	r8, r2, r1, lsr #8
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002a54:	45b0      	cmp	r8, r6
 8002a56:	d007      	beq.n	8002a68 <get_fat+0x4c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8002a58:	7901      	ldrb	r1, [r0, #4]
 8002a5a:	2900      	cmp	r1, #0
 8002a5c:	f040 80d4 	bne.w	8002c08 <get_fat+0x1ec>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8002a60:	f1b8 0f00 	cmp.w	r8, #0
 8002a64:	f040 8225 	bne.w	8002eb2 <get_fat+0x496>
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
		p = &fs->win[clst * 2 % SS(fs)];
 8002a68:	062d      	lsls	r5, r5, #24
 8002a6a:	0ded      	lsrs	r5, r5, #23
		return LD_WORD(p);
 8002a6c:	1963      	adds	r3, r4, r5
 8002a6e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002a72:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
 8002a76:	461c      	mov	r4, r3
 8002a78:	ea41 200c 	orr.w	r0, r1, ip, lsl #8
 8002a7c:	e7e1      	b.n	8002a42 <get_fat+0x26>
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8002a7e:	6a02      	ldr	r2, [r0, #32]
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8002a80:	eb01 0951 	add.w	r9, r1, r1, lsr #1
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8002a84:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8002a88:	eb02 2659 	add.w	r6, r2, r9, lsr #9
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002a8c:	4546      	cmp	r6, r8
 8002a8e:	d008      	beq.n	8002aa2 <get_fat+0x86>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8002a90:	7902      	ldrb	r2, [r0, #4]
 8002a92:	2a00      	cmp	r2, #0
 8002a94:	f040 8128 	bne.w	8002ce8 <get_fat+0x2cc>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8002a98:	2e00      	cmp	r6, #0
 8002a9a:	f040 81fd 	bne.w	8002e98 <get_fat+0x47c>
 8002a9e:	6a22      	ldr	r2, [r4, #32]
 8002aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 8002aa2:	ea4f 50c9 	mov.w	r0, r9, lsl #23
 8002aa6:	0dc3      	lsrs	r3, r0, #23
 8002aa8:	f109 0a01 	add.w	sl, r9, #1
 8002aac:	eb04 0c03 	add.w	ip, r4, r3
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8002ab0:	eb02 285a 	add.w	r8, r2, sl, lsr #9

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 8002ab4:	f89c 1030 	ldrb.w	r1, [ip, #48]	; 0x30
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002ab8:	45b0      	cmp	r8, r6

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
 8002aba:	9101      	str	r1, [sp, #4]
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002abc:	d007      	beq.n	8002ace <get_fat+0xb2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8002abe:	7922      	ldrb	r2, [r4, #4]
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	f040 817b 	bne.w	8002dbc <get_fat+0x3a0>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8002ac6:	f1b8 0f00 	cmp.w	r8, #0
 8002aca:	f040 820f 	bne.w	8002eec <get_fat+0x4d0>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
 8002ace:	ea4f 5aca 	mov.w	sl, sl, lsl #23
 8002ad2:	ea4f 5ada 	mov.w	sl, sl, lsr #23
 8002ad6:	4454      	add	r4, sl
 8002ad8:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
 8002adc:	9901      	ldr	r1, [sp, #4]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002ade:	f015 0f01 	tst.w	r5, #1
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
 8002ae2:	ea41 200c 	orr.w	r0, r1, ip, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002ae6:	f000 81fe 	beq.w	8002ee6 <get_fat+0x4ca>
 8002aea:	0900      	lsrs	r0, r0, #4
 8002aec:	e7a9      	b.n	8002a42 <get_fat+0x26>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8002aee:	6a02      	ldr	r2, [r0, #32]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8002af0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8002af2:	eb02 18d1 	add.w	r8, r2, r1, lsr #7
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002af6:	45b0      	cmp	r8, r6
 8002af8:	d005      	beq.n	8002b06 <get_fat+0xea>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8002afa:	7901      	ldrb	r1, [r0, #4]
 8002afc:	b9c9      	cbnz	r1, 8002b32 <get_fat+0x116>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8002afe:	f1b8 0f00 	cmp.w	r8, #0
 8002b02:	f040 81e3 	bne.w	8002ecc <get_fat+0x4b0>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
 8002b06:	066d      	lsls	r5, r5, #25
 8002b08:	0ded      	lsrs	r5, r5, #23
 8002b0a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8002b0e:	1821      	adds	r1, r4, r0
		return LD_DWORD(p) & 0x0FFFFFFF;
 8002b10:	78cb      	ldrb	r3, [r1, #3]
 8002b12:	f891 c002 	ldrb.w	ip, [r1, #2]
 8002b16:	061a      	lsls	r2, r3, #24
 8002b18:	7848      	ldrb	r0, [r1, #1]
 8002b1a:	1964      	adds	r4, r4, r5
 8002b1c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8002b20:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002b24:	ea42 2100 	orr.w	r1, r2, r0, lsl #8
 8002b28:	ea41 0c03 	orr.w	ip, r1, r3
 8002b2c:	f02c 4070 	bic.w	r0, ip, #4026531840	; 0xf0000000
 8002b30:	e787      	b.n	8002a42 <get_fat+0x26>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8002b32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002b36:	4649      	mov	r1, r9
 8002b38:	7840      	ldrb	r0, [r0, #1]
 8002b3a:	4632      	mov	r2, r6
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f006 fb03 	bl	8009148 <disk_write>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	f47f af7b 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002b48:	69e3      	ldr	r3, [r4, #28]
 8002b4a:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8002b4c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002b4e:	eb03 0e02 	add.w	lr, r3, r2
 8002b52:	4576      	cmp	r6, lr
 8002b54:	d2d3      	bcs.n	8002afe <get_fat+0xe2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002b56:	78e7      	ldrb	r7, [r4, #3]
 8002b58:	2f01      	cmp	r7, #1
 8002b5a:	d9d0      	bls.n	8002afe <get_fat+0xe2>
 8002b5c:	f1a7 0a02 	sub.w	sl, r7, #2
 8002b60:	f01a 0a03 	ands.w	sl, sl, #3
 8002b64:	d025      	beq.n	8002bb2 <get_fat+0x196>
					wsect += fs->fsize;
 8002b66:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002b68:	7860      	ldrb	r0, [r4, #1]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	4632      	mov	r2, r6
 8002b70:	fa4f fa8a 	sxtb.w	sl, sl
 8002b74:	f006 fae8 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002b78:	1e7b      	subs	r3, r7, #1
 8002b7a:	f1ba 0f01 	cmp.w	sl, #1
 8002b7e:	b2df      	uxtb	r7, r3
 8002b80:	69e3      	ldr	r3, [r4, #28]
 8002b82:	d016      	beq.n	8002bb2 <get_fat+0x196>
 8002b84:	f1ba 0f02 	cmp.w	sl, #2
 8002b88:	d009      	beq.n	8002b9e <get_fat+0x182>
					wsect += fs->fsize;
 8002b8a:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002b8c:	7860      	ldrb	r0, [r4, #1]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	4649      	mov	r1, r9
 8002b92:	4632      	mov	r2, r6
 8002b94:	f006 fad8 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002b98:	1e78      	subs	r0, r7, #1
 8002b9a:	69e3      	ldr	r3, [r4, #28]
 8002b9c:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
 8002b9e:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ba0:	7860      	ldrb	r0, [r4, #1]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	f006 face 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bac:	3f01      	subs	r7, #1
 8002bae:	69e3      	ldr	r3, [r4, #28]
 8002bb0:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 8002bb2:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bb4:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4649      	mov	r1, r9
 8002bba:	4632      	mov	r2, r6
 8002bbc:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bbe:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bc0:	f006 fac2 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bc4:	2f01      	cmp	r7, #1
 8002bc6:	d09a      	beq.n	8002afe <get_fat+0xe2>
 8002bc8:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bca:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002bcc:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bce:	4632      	mov	r2, r6
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	7860      	ldrb	r0, [r4, #1]
 8002bd4:	f006 fab8 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bd8:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bda:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002bdc:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bde:	4632      	mov	r2, r6
 8002be0:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002be2:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002be4:	7860      	ldrb	r0, [r4, #1]
 8002be6:	f006 faaf 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bea:	b2ff      	uxtb	r7, r7
 8002bec:	69e3      	ldr	r3, [r4, #28]
 8002bee:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 8002bf0:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bf2:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	7860      	ldrb	r0, [r4, #1]
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	4632      	mov	r2, r6
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002bfc:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002bfe:	f006 faa3 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c02:	b2ff      	uxtb	r7, r7
 8002c04:	69e3      	ldr	r3, [r4, #28]
 8002c06:	e7d4      	b.n	8002bb2 <get_fat+0x196>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8002c08:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	7840      	ldrb	r0, [r0, #1]
 8002c10:	4632      	mov	r2, r6
 8002c12:	2301      	movs	r3, #1
 8002c14:	f006 fa98 	bl	8009148 <disk_write>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	f47f af10 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002c1e:	69e3      	ldr	r3, [r4, #28]
 8002c20:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8002c22:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002c24:	eb03 0e02 	add.w	lr, r3, r2
 8002c28:	4576      	cmp	r6, lr
 8002c2a:	f4bf af19 	bcs.w	8002a60 <get_fat+0x44>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c2e:	78e7      	ldrb	r7, [r4, #3]
 8002c30:	2f01      	cmp	r7, #1
 8002c32:	f67f af15 	bls.w	8002a60 <get_fat+0x44>
 8002c36:	f1a7 0b02 	sub.w	fp, r7, #2
 8002c3a:	f00b 0b03 	and.w	fp, fp, #3
 8002c3e:	fa4f fa8b 	sxtb.w	sl, fp
 8002c42:	f1ba 0f00 	cmp.w	sl, #0
 8002c46:	d023      	beq.n	8002c90 <get_fat+0x274>
					wsect += fs->fsize;
 8002c48:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c4a:	7860      	ldrb	r0, [r4, #1]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	4632      	mov	r2, r6
 8002c52:	f006 fa79 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c56:	3f01      	subs	r7, #1
 8002c58:	f1ba 0f01 	cmp.w	sl, #1
 8002c5c:	b2ff      	uxtb	r7, r7
 8002c5e:	69e3      	ldr	r3, [r4, #28]
 8002c60:	d016      	beq.n	8002c90 <get_fat+0x274>
 8002c62:	f1bb 0f02 	cmp.w	fp, #2
 8002c66:	d009      	beq.n	8002c7c <get_fat+0x260>
					wsect += fs->fsize;
 8002c68:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c6a:	4632      	mov	r2, r6
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	7860      	ldrb	r0, [r4, #1]
 8002c70:	4649      	mov	r1, r9
 8002c72:	f006 fa69 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c76:	1e7a      	subs	r2, r7, #1
 8002c78:	69e3      	ldr	r3, [r4, #28]
 8002c7a:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 8002c7c:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c7e:	4649      	mov	r1, r9
 8002c80:	2301      	movs	r3, #1
 8002c82:	7860      	ldrb	r0, [r4, #1]
 8002c84:	4632      	mov	r2, r6
 8002c86:	f006 fa5f 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c8a:	1e79      	subs	r1, r7, #1
 8002c8c:	69e3      	ldr	r3, [r4, #28]
 8002c8e:	b2cf      	uxtb	r7, r1
					wsect += fs->fsize;
 8002c90:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c92:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c94:	2301      	movs	r3, #1
 8002c96:	4649      	mov	r1, r9
 8002c98:	4632      	mov	r2, r6
 8002c9a:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002c9c:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c9e:	f006 fa53 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002ca2:	2f01      	cmp	r7, #1
 8002ca4:	f43f aedc 	beq.w	8002a60 <get_fat+0x44>
 8002ca8:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002caa:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002cac:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8002cae:	4632      	mov	r2, r6
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	7860      	ldrb	r0, [r4, #1]
 8002cb4:	f006 fa48 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002cb8:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002cba:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002cbc:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8002cbe:	4632      	mov	r2, r6
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	7860      	ldrb	r0, [r4, #1]
 8002cc4:	f006 fa40 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002cc8:	3f01      	subs	r7, #1
 8002cca:	69e3      	ldr	r3, [r4, #28]
 8002ccc:	b2ff      	uxtb	r7, r7
 8002cce:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 8002cd0:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002cd2:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	7860      	ldrb	r0, [r4, #1]
 8002cda:	4632      	mov	r2, r6
 8002cdc:	f006 fa34 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002ce0:	1e79      	subs	r1, r7, #1
 8002ce2:	b2cf      	uxtb	r7, r1
 8002ce4:	69e3      	ldr	r3, [r4, #28]
 8002ce6:	e7d3      	b.n	8002c90 <get_fat+0x274>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8002ce8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8002cec:	4651      	mov	r1, sl
 8002cee:	7840      	ldrb	r0, [r0, #1]
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	f006 fa29 	bl	8009148 <disk_write>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	f47f aea1 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002cfc:	69e3      	ldr	r3, [r4, #28]
 8002cfe:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8002d00:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002d02:	1858      	adds	r0, r3, r1
 8002d04:	4580      	cmp	r8, r0
 8002d06:	f4bf aec7 	bcs.w	8002a98 <get_fat+0x7c>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d0a:	78e7      	ldrb	r7, [r4, #3]
 8002d0c:	2f01      	cmp	r7, #1
 8002d0e:	f67f aec3 	bls.w	8002a98 <get_fat+0x7c>
 8002d12:	f1a7 0b02 	sub.w	fp, r7, #2
 8002d16:	f01b 0b03 	ands.w	fp, fp, #3
 8002d1a:	d023      	beq.n	8002d64 <get_fat+0x348>
					wsect += fs->fsize;
 8002d1c:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d1e:	7860      	ldrb	r0, [r4, #1]
 8002d20:	2301      	movs	r3, #1
 8002d22:	4651      	mov	r1, sl
 8002d24:	4642      	mov	r2, r8
 8002d26:	f006 fa0f 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d2a:	1e78      	subs	r0, r7, #1
 8002d2c:	f1bb 0f01 	cmp.w	fp, #1
 8002d30:	b2c7      	uxtb	r7, r0
 8002d32:	69e3      	ldr	r3, [r4, #28]
 8002d34:	d016      	beq.n	8002d64 <get_fat+0x348>
 8002d36:	f1bb 0f02 	cmp.w	fp, #2
 8002d3a:	d009      	beq.n	8002d50 <get_fat+0x334>
					wsect += fs->fsize;
 8002d3c:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d3e:	7860      	ldrb	r0, [r4, #1]
 8002d40:	2301      	movs	r3, #1
 8002d42:	4651      	mov	r1, sl
 8002d44:	4642      	mov	r2, r8
 8002d46:	f006 f9ff 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d4a:	3f01      	subs	r7, #1
 8002d4c:	69e3      	ldr	r3, [r4, #28]
 8002d4e:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 8002d50:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d52:	4642      	mov	r2, r8
 8002d54:	2301      	movs	r3, #1
 8002d56:	7860      	ldrb	r0, [r4, #1]
 8002d58:	4651      	mov	r1, sl
 8002d5a:	f006 f9f5 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d5e:	1e7a      	subs	r2, r7, #1
 8002d60:	69e3      	ldr	r3, [r4, #28]
 8002d62:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 8002d64:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d66:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d68:	2301      	movs	r3, #1
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d70:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d72:	f006 f9e9 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d76:	2f01      	cmp	r7, #1
 8002d78:	f43f ae8e 	beq.w	8002a98 <get_fat+0x7c>
 8002d7c:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d7e:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002d80:	4490      	add	r8, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d82:	4642      	mov	r2, r8
 8002d84:	2301      	movs	r3, #1
 8002d86:	7860      	ldrb	r0, [r4, #1]
 8002d88:	f006 f9de 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d8c:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d8e:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002d90:	4480      	add	r8, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d92:	4642      	mov	r2, r8
 8002d94:	2301      	movs	r3, #1
 8002d96:	7860      	ldrb	r0, [r4, #1]
 8002d98:	f006 f9d6 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002d9c:	3f01      	subs	r7, #1
 8002d9e:	69e3      	ldr	r3, [r4, #28]
 8002da0:	b2ff      	uxtb	r7, r7
 8002da2:	1e7a      	subs	r2, r7, #1
					wsect += fs->fsize;
 8002da4:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002da6:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002da8:	2301      	movs	r3, #1
 8002daa:	4642      	mov	r2, r8
 8002dac:	7860      	ldrb	r0, [r4, #1]
 8002dae:	4651      	mov	r1, sl
 8002db0:	f006 f9ca 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002db4:	1e7a      	subs	r2, r7, #1
 8002db6:	b2d7      	uxtb	r7, r2
 8002db8:	69e3      	ldr	r3, [r4, #28]
 8002dba:	e7d3      	b.n	8002d64 <get_fat+0x348>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8002dbc:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8002dc0:	7860      	ldrb	r0, [r4, #1]
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	4632      	mov	r2, r6
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f006 f9be 	bl	8009148 <disk_write>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	f47f ae36 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002dd2:	69e3      	ldr	r3, [r4, #28]
 8002dd4:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8002dd6:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8002dd8:	eb03 0e01 	add.w	lr, r3, r1
 8002ddc:	4576      	cmp	r6, lr
 8002dde:	f4bf ae72 	bcs.w	8002ac6 <get_fat+0xaa>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002de2:	78e7      	ldrb	r7, [r4, #3]
 8002de4:	2f01      	cmp	r7, #1
 8002de6:	f67f ae6e 	bls.w	8002ac6 <get_fat+0xaa>
 8002dea:	f1a7 0b02 	sub.w	fp, r7, #2
 8002dee:	f01b 0b03 	ands.w	fp, fp, #3
 8002df2:	d023      	beq.n	8002e3c <get_fat+0x420>
					wsect += fs->fsize;
 8002df4:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002df6:	4632      	mov	r2, r6
 8002df8:	2301      	movs	r3, #1
 8002dfa:	7860      	ldrb	r0, [r4, #1]
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f006 f9a3 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e02:	1e7a      	subs	r2, r7, #1
 8002e04:	f1bb 0f01 	cmp.w	fp, #1
 8002e08:	b2d7      	uxtb	r7, r2
 8002e0a:	69e3      	ldr	r3, [r4, #28]
 8002e0c:	d016      	beq.n	8002e3c <get_fat+0x420>
 8002e0e:	f1bb 0f02 	cmp.w	fp, #2
 8002e12:	d009      	beq.n	8002e28 <get_fat+0x40c>
					wsect += fs->fsize;
 8002e14:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e16:	4649      	mov	r1, r9
 8002e18:	2301      	movs	r3, #1
 8002e1a:	7860      	ldrb	r0, [r4, #1]
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	f006 f993 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e22:	1e79      	subs	r1, r7, #1
 8002e24:	69e3      	ldr	r3, [r4, #28]
 8002e26:	b2cf      	uxtb	r7, r1
					wsect += fs->fsize;
 8002e28:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e2a:	7860      	ldrb	r0, [r4, #1]
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	4632      	mov	r2, r6
 8002e32:	f006 f989 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e36:	1e7b      	subs	r3, r7, #1
 8002e38:	b2df      	uxtb	r7, r3
 8002e3a:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8002e3c:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e3e:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e40:	2301      	movs	r3, #1
 8002e42:	4649      	mov	r1, r9
 8002e44:	4632      	mov	r2, r6
 8002e46:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e48:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e4a:	f006 f97d 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e4e:	2f01      	cmp	r7, #1
 8002e50:	f43f ae39 	beq.w	8002ac6 <get_fat+0xaa>
 8002e54:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e56:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002e58:	eb06 0b00 	add.w	fp, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e5c:	465a      	mov	r2, fp
 8002e5e:	2301      	movs	r3, #1
 8002e60:	7860      	ldrb	r0, [r4, #1]
 8002e62:	f006 f971 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e66:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e68:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8002e6a:	4493      	add	fp, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e6c:	465a      	mov	r2, fp
 8002e6e:	2301      	movs	r3, #1
 8002e70:	7860      	ldrb	r0, [r4, #1]
 8002e72:	f006 f969 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e76:	3f01      	subs	r7, #1
 8002e78:	69e3      	ldr	r3, [r4, #28]
 8002e7a:	b2fe      	uxtb	r6, r7
 8002e7c:	1e70      	subs	r0, r6, #1
					wsect += fs->fsize;
 8002e7e:	eb0b 0603 	add.w	r6, fp, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e82:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e84:	2301      	movs	r3, #1
 8002e86:	7860      	ldrb	r0, [r4, #1]
 8002e88:	4649      	mov	r1, r9
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	f006 f95c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8002e90:	1e7b      	subs	r3, r7, #1
 8002e92:	b2df      	uxtb	r7, r3
 8002e94:	69e3      	ldr	r3, [r4, #28]
 8002e96:	e7d1      	b.n	8002e3c <get_fat+0x420>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8002e98:	7860      	ldrb	r0, [r4, #1]
 8002e9a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002e9e:	4632      	mov	r2, r6
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f006 f893 	bl	8008fcc <disk_read>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	f47f adc9 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8002eac:	6a22      	ldr	r2, [r4, #32]
 8002eae:	62e6      	str	r6, [r4, #44]	; 0x2c
 8002eb0:	e5f7      	b.n	8002aa2 <get_fat+0x86>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8002eb2:	7860      	ldrb	r0, [r4, #1]
 8002eb4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002eb8:	4642      	mov	r2, r8
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f006 f886 	bl	8008fcc <disk_read>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	f47f adbc 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8002ec6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8002eca:	e5cd      	b.n	8002a68 <get_fat+0x4c>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8002ecc:	7860      	ldrb	r0, [r4, #1]
 8002ece:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f006 f879 	bl	8008fcc <disk_read>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	f47f adaf 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8002ee0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8002ee4:	e60f      	b.n	8002b06 <get_fat+0xea>
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002ee6:	0503      	lsls	r3, r0, #20
 8002ee8:	0d18      	lsrs	r0, r3, #20
 8002eea:	e5aa      	b.n	8002a42 <get_fat+0x26>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8002eec:	7860      	ldrb	r0, [r4, #1]
 8002eee:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002ef2:	4642      	mov	r2, r8
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f006 f869 	bl	8008fcc <disk_read>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	f47f ad9f 	bne.w	8002a3e <get_fat+0x22>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8002f00:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8002f04:	e5e3      	b.n	8002ace <get_fat+0xb2>
 8002f06:	bf00      	nop

08002f08 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD clst;
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
 8002f0a:	6883      	ldr	r3, [r0, #8]
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8002f0c:	4605      	mov	r5, r0
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8002f0e:	2b01      	cmp	r3, #1
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8002f10:	460c      	mov	r4, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8002f12:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8002f14:	d024      	beq.n	8002f60 <dir_sdi+0x58>
 8002f16:	6800      	ldr	r0, [r0, #0]
 8002f18:	6982      	ldr	r2, [r0, #24]
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d220      	bcs.n	8002f60 <dir_sdi+0x58>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002f1e:	b30b      	cbz	r3, 8002f64 <dir_sdi+0x5c>
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8002f20:	7886      	ldrb	r6, [r0, #2]
 8002f22:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8002f24:	42b4      	cmp	r4, r6
 8002f26:	d337      	bcc.n	8002f98 <dir_sdi+0x90>
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (
 8002f28:	4277      	negs	r7, r6
 8002f2a:	1ba4      	subs	r4, r4, r6
 8002f2c:	b2bf      	uxth	r7, r7
 8002f2e:	b2a4      	uxth	r4, r4
 8002f30:	e009      	b.n	8002f46 <dir_sdi+0x3e>
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8002f32:	2801      	cmp	r0, #1
 8002f34:	d914      	bls.n	8002f60 <dir_sdi+0x58>
 8002f36:	6828      	ldr	r0, [r5, #0]
 8002f38:	f8d0 e018 	ldr.w	lr, [r0, #24]
 8002f3c:	4573      	cmp	r3, lr
 8002f3e:	d23d      	bcs.n	8002fbc <dir_sdi+0xb4>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8002f40:	428e      	cmp	r6, r1
 8002f42:	d829      	bhi.n	8002f98 <dir_sdi+0x90>
 8002f44:	4614      	mov	r4, r2
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7ff fd68 	bl	8002a1c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8002f4c:	19e2      	adds	r2, r4, r7
 8002f4e:	b292      	uxth	r2, r2
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8002f50:	1991      	adds	r1, r2, r6
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002f52:	f1b0 3fff 	cmp.w	r0, #4294967295
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8002f56:	4603      	mov	r3, r0
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8002f58:	b289      	uxth	r1, r1
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002f5a:	d1ea      	bne.n	8002f32 <dir_sdi+0x2a>
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
 8002f60:	2002      	movs	r0, #2
 8002f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002f64:	7803      	ldrb	r3, [r0, #0]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d012      	beq.n	8002f90 <dir_sdi+0x88>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8002f6a:	8901      	ldrh	r1, [r0, #8]
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
 8002f6c:	2200      	movs	r2, #0
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8002f6e:	42a1      	cmp	r1, r4
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
 8002f70:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8002f72:	d9f5      	bls.n	8002f60 <dir_sdi+0x58>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8002f74:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002f76:	f3c4 1c0f 	ubfx	ip, r4, #4, #16
 8002f7a:	eb0c 0301 	add.w	r3, ip, r1
 8002f7e:	612b      	str	r3, [r5, #16]
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8002f80:	f004 040f 	and.w	r4, r4, #15
 8002f84:	3030      	adds	r0, #48	; 0x30
 8002f86:	0164      	lsls	r4, r4, #5
 8002f88:	1900      	adds	r0, r0, r4
 8002f8a:	6168      	str	r0, [r5, #20]

	return FR_OK;	/* Seek succeeded */
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;
 8002f90:	6a43      	ldr	r3, [r0, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0e9      	beq.n	8002f6a <dir_sdi+0x62>
 8002f96:	e7c3      	b.n	8002f20 <dir_sdi+0x18>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8002f98:	6981      	ldr	r1, [r0, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8002f9a:	1e9a      	subs	r2, r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8002f9c:	3902      	subs	r1, #2
 8002f9e:	428a      	cmp	r2, r1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8002fa0:	60eb      	str	r3, [r5, #12]
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
 8002fa2:	bf3c      	itt	cc
 8002fa4:	7881      	ldrbcc	r1, [r0, #2]
 8002fa6:	6a83      	ldrcc	r3, [r0, #40]	; 0x28
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8002fa8:	f3c4 1c0f 	ubfx	ip, r4, #4, #16
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
 8002fac:	bf34      	ite	cc
 8002fae:	fb01 3202 	mlacc	r2, r1, r2, r3
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8002fb2:	2200      	movcs	r2, #0
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8002fb4:	eb02 030c 	add.w	r3, r2, ip
 8002fb8:	612b      	str	r3, [r5, #16]
 8002fba:	e7e1      	b.n	8002f80 <dir_sdi+0x78>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
 8002fbc:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
 8002fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002fc0 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002fc4:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	460d      	mov	r5, r1
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002fce:	d90e      	bls.n	8002fee <put_fat+0x2e>
 8002fd0:	6983      	ldr	r3, [r0, #24]
 8002fd2:	4299      	cmp	r1, r3
 8002fd4:	d20b      	bcs.n	8002fee <put_fat+0x2e>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
 8002fd6:	7803      	ldrb	r3, [r0, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d00c      	beq.n	8002ff6 <put_fat+0x36>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	f000 80e3 	beq.w	80031a8 <put_fat+0x1e8>
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d022      	beq.n	800302c <put_fat+0x6c>
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
			break;

		default :
			res = FR_INT_ERR;
 8002fe6:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	7123      	strb	r3, [r4, #4]
 8002fec:	e000      	b.n	8002ff0 <put_fat+0x30>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8002fee:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 8002ff0:	b005      	add	sp, #20
 8002ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002ff6:	6a02      	ldr	r2, [r0, #32]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8002ff8:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002ffc:	eb02 2911 	add.w	r9, r2, r1, lsr #8
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8003000:	45c1      	cmp	r9, r8
 8003002:	d007      	beq.n	8003014 <put_fat+0x54>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8003004:	7901      	ldrb	r1, [r0, #4]
 8003006:	2900      	cmp	r1, #0
 8003008:	f040 816f 	bne.w	80032ea <put_fat+0x32a>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 800300c:	f1b9 0f00 	cmp.w	r9, #0
 8003010:	f040 8280 	bne.w	8003514 <put_fat+0x554>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 2 % SS(fs)];
 8003014:	062b      	lsls	r3, r5, #24
 8003016:	0ddd      	lsrs	r5, r3, #23
			ST_WORD(p, (WORD)val);
 8003018:	eb04 0c05 	add.w	ip, r4, r5
 800301c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8003020:	f88c 6030 	strb.w	r6, [ip, #48]	; 0x30
			break;
 8003024:	2000      	movs	r0, #0

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
 8003026:	f88c 1031 	strb.w	r1, [ip, #49]	; 0x31
			break;
 800302a:	e7dd      	b.n	8002fe8 <put_fat+0x28>

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800302c:	6a07      	ldr	r7, [r0, #32]
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 800302e:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8003032:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003036:	eb07 285a 	add.w	r8, r7, sl, lsr #9
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 800303a:	45c8      	cmp	r8, r9
 800303c:	d00a      	beq.n	8003054 <put_fat+0x94>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 800303e:	7902      	ldrb	r2, [r0, #4]
 8003040:	2a00      	cmp	r2, #0
 8003042:	f040 81d2 	bne.w	80033ea <put_fat+0x42a>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8003046:	f1b8 0f00 	cmp.w	r8, #0
 800304a:	f040 8256 	bne.w	80034fa <put_fat+0x53a>
 800304e:	6a27      	ldr	r7, [r4, #32]
 8003050:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
 8003054:	ea4f 53ca 	mov.w	r3, sl, lsl #23
 8003058:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800305a:	f015 0101 	ands.w	r1, r5, #1
 800305e:	9102      	str	r1, [sp, #8]
 8003060:	f040 8240 	bne.w	80034e4 <put_fat+0x524>
 8003064:	4632      	mov	r2, r6
 8003066:	18e3      	adds	r3, r4, r3
			bc++;
 8003068:	f10a 0a01 	add.w	sl, sl, #1
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800306c:	eb07 275a 	add.w	r7, r7, sl, lsr #9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
 8003070:	2501      	movs	r5, #1
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8003072:	4547      	cmp	r7, r8
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
			fs->wflag = 1;
 8003078:	7125      	strb	r5, [r4, #4]
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 800307a:	f000 8086 	beq.w	800318a <put_fat+0x1ca>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800307e:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8003082:	7860      	ldrb	r0, [r4, #1]
 8003084:	4649      	mov	r1, r9
 8003086:	4642      	mov	r2, r8
 8003088:	462b      	mov	r3, r5
 800308a:	f006 f85d 	bl	8009148 <disk_write>
 800308e:	2800      	cmp	r0, #0
 8003090:	f040 8231 	bne.w	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003094:	69e3      	ldr	r3, [r4, #28]
 8003096:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8003098:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800309a:	eb03 0e02 	add.w	lr, r3, r2
 800309e:	45c6      	cmp	lr, r8
 80030a0:	d970      	bls.n	8003184 <put_fat+0x1c4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80030a2:	f894 b003 	ldrb.w	fp, [r4, #3]
 80030a6:	45ab      	cmp	fp, r5
 80030a8:	d96c      	bls.n	8003184 <put_fat+0x1c4>
 80030aa:	f1ab 0102 	sub.w	r1, fp, #2
 80030ae:	f011 0c03 	ands.w	ip, r1, #3
 80030b2:	f000 826c 	beq.w	800358e <put_fat+0x5ce>
					wsect += fs->fsize;
 80030b6:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80030b8:	7860      	ldrb	r0, [r4, #1]
 80030ba:	462b      	mov	r3, r5
 80030bc:	4649      	mov	r1, r9
 80030be:	4642      	mov	r2, r8
 80030c0:	f8cd c004 	str.w	ip, [sp, #4]
 80030c4:	f006 f840 	bl	8009148 <disk_write>
 80030c8:	f8dd c004 	ldr.w	ip, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80030cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80030d0:	f1bc 0f01 	cmp.w	ip, #1
 80030d4:	fa5f fb8b 	uxtb.w	fp, fp
 80030d8:	69e3      	ldr	r3, [r4, #28]
 80030da:	f000 8258 	beq.w	800358e <put_fat+0x5ce>
 80030de:	f1bc 0f02 	cmp.w	ip, #2
 80030e2:	d00b      	beq.n	80030fc <put_fat+0x13c>
					wsect += fs->fsize;
 80030e4:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80030e6:	7860      	ldrb	r0, [r4, #1]
 80030e8:	462b      	mov	r3, r5
 80030ea:	4649      	mov	r1, r9
 80030ec:	4642      	mov	r2, r8
 80030ee:	f006 f82b 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80030f2:	f10b 3cff 	add.w	ip, fp, #4294967295
 80030f6:	69e3      	ldr	r3, [r4, #28]
 80030f8:	fa5f fb8c 	uxtb.w	fp, ip
					wsect += fs->fsize;
 80030fc:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80030fe:	7860      	ldrb	r0, [r4, #1]
 8003100:	2301      	movs	r3, #1
 8003102:	4649      	mov	r1, r9
 8003104:	4642      	mov	r2, r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003106:	f10b 35ff 	add.w	r5, fp, #4294967295
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800310a:	f006 f81d 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800310e:	fa5f fb85 	uxtb.w	fp, r5
 8003112:	f8cd a00c 	str.w	sl, [sp, #12]
 8003116:	69e3      	ldr	r3, [r4, #28]
 8003118:	46ba      	mov	sl, r7
 800311a:	4637      	mov	r7, r6
 800311c:	e021      	b.n	8003162 <put_fat+0x1a2>
 800311e:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003120:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003122:	eb06 0b00 	add.w	fp, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8003126:	465a      	mov	r2, fp
 8003128:	2301      	movs	r3, #1
 800312a:	7860      	ldrb	r0, [r4, #1]
 800312c:	f006 f80c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003130:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003132:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003134:	eb0b 0803 	add.w	r8, fp, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003138:	4642      	mov	r2, r8
 800313a:	2301      	movs	r3, #1
 800313c:	7860      	ldrb	r0, [r4, #1]
 800313e:	f006 f803 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003142:	3d01      	subs	r5, #1
 8003144:	69e2      	ldr	r2, [r4, #28]
 8003146:	b2ee      	uxtb	r6, r5
 8003148:	1e70      	subs	r0, r6, #1
					wsect += fs->fsize;
 800314a:	4490      	add	r8, r2
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800314c:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800314e:	2301      	movs	r3, #1
 8003150:	7860      	ldrb	r0, [r4, #1]
 8003152:	4649      	mov	r1, r9
 8003154:	4642      	mov	r2, r8
 8003156:	f005 fff7 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800315a:	1e6e      	subs	r6, r5, #1
 800315c:	69e3      	ldr	r3, [r4, #28]
 800315e:	fa5f fb86 	uxtb.w	fp, r6
					wsect += fs->fsize;
 8003162:	eb08 0603 	add.w	r6, r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003166:	4649      	mov	r1, r9
 8003168:	2301      	movs	r3, #1
 800316a:	4632      	mov	r2, r6
 800316c:	7860      	ldrb	r0, [r4, #1]
 800316e:	f005 ffeb 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003172:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003176:	b2dd      	uxtb	r5, r3
 8003178:	2d01      	cmp	r5, #1
 800317a:	d1d0      	bne.n	800311e <put_fat+0x15e>
 800317c:	463e      	mov	r6, r7
 800317e:	4657      	mov	r7, sl
 8003180:	f8dd a00c 	ldr.w	sl, [sp, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8003184:	2f00      	cmp	r7, #0
 8003186:	f040 81dd 	bne.w	8003544 <put_fat+0x584>
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800318a:	9902      	ldr	r1, [sp, #8]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
 800318c:	ea4f 5aca 	mov.w	sl, sl, lsl #23
 8003190:	ea4f 5ada 	mov.w	sl, sl, lsr #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003194:	2900      	cmp	r1, #0
 8003196:	f000 81df 	beq.w	8003558 <put_fat+0x598>
 800319a:	f3c6 1607 	ubfx	r6, r6, #4, #8
 800319e:	44a2      	add	sl, r4
 80031a0:	f88a 6030 	strb.w	r6, [sl, #48]	; 0x30
			break;
 80031a4:	2000      	movs	r0, #0
 80031a6:	e71f      	b.n	8002fe8 <put_fat+0x28>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80031a8:	6a02      	ldr	r2, [r0, #32]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 80031aa:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80031ae:	eb02 19d1 	add.w	r9, r2, r1, lsr #7
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 80031b2:	45c1      	cmp	r9, r8
 80031b4:	d005      	beq.n	80031c2 <put_fat+0x202>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80031b6:	7901      	ldrb	r1, [r0, #4]
 80031b8:	b9f9      	cbnz	r1, 80031fa <put_fat+0x23a>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 80031ba:	f1b9 0f00 	cmp.w	r9, #0
 80031be:	f040 81b5 	bne.w	800352c <put_fat+0x56c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 4 % SS(fs)];
 80031c2:	0669      	lsls	r1, r5, #25
 80031c4:	0dcd      	lsrs	r5, r1, #23
 80031c6:	f105 0230 	add.w	r2, r5, #48	; 0x30
 80031ca:	eb04 0c02 	add.w	ip, r4, r2
			val |= LD_DWORD(p) & 0xF0000000;
 80031ce:	f89c 0003 	ldrb.w	r0, [ip, #3]
 80031d2:	1965      	adds	r5, r4, r5
 80031d4:	0607      	lsls	r7, r0, #24
 80031d6:	f007 4370 	and.w	r3, r7, #4026531840	; 0xf0000000
 80031da:	ea43 0606 	orr.w	r6, r3, r6
			ST_DWORD(p, val);
 80031de:	f3c6 2707 	ubfx	r7, r6, #8, #8
 80031e2:	0c31      	lsrs	r1, r6, #16
 80031e4:	0e32      	lsrs	r2, r6, #24
 80031e6:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
			break;
 80031ea:	2000      	movs	r0, #0
		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
 80031ec:	f88c 7001 	strb.w	r7, [ip, #1]
 80031f0:	f88c 1002 	strb.w	r1, [ip, #2]
 80031f4:	f88c 2003 	strb.w	r2, [ip, #3]
			break;
 80031f8:	e6f6      	b.n	8002fe8 <put_fat+0x28>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80031fa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80031fe:	4651      	mov	r1, sl
 8003200:	7840      	ldrb	r0, [r0, #1]
 8003202:	4642      	mov	r2, r8
 8003204:	2301      	movs	r3, #1
 8003206:	f005 ff9f 	bl	8009148 <disk_write>
 800320a:	2800      	cmp	r0, #0
 800320c:	f040 8173 	bne.w	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003210:	69e3      	ldr	r3, [r4, #28]
 8003212:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8003214:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003216:	eb03 0e02 	add.w	lr, r3, r2
 800321a:	45f0      	cmp	r8, lr
 800321c:	d2cd      	bcs.n	80031ba <put_fat+0x1fa>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800321e:	78e7      	ldrb	r7, [r4, #3]
 8003220:	2f01      	cmp	r7, #1
 8003222:	d9ca      	bls.n	80031ba <put_fat+0x1fa>
 8003224:	f1a7 0b02 	sub.w	fp, r7, #2
 8003228:	f01b 0b03 	ands.w	fp, fp, #3
 800322c:	f000 81a3 	beq.w	8003576 <put_fat+0x5b6>
					wsect += fs->fsize;
 8003230:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003232:	4651      	mov	r1, sl
 8003234:	2301      	movs	r3, #1
 8003236:	7860      	ldrb	r0, [r4, #1]
 8003238:	4642      	mov	r2, r8
 800323a:	fa4f fb8b 	sxtb.w	fp, fp
 800323e:	f005 ff83 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003242:	1e79      	subs	r1, r7, #1
 8003244:	f1bb 0f01 	cmp.w	fp, #1
 8003248:	b2cf      	uxtb	r7, r1
 800324a:	69e3      	ldr	r3, [r4, #28]
 800324c:	f000 8193 	beq.w	8003576 <put_fat+0x5b6>
 8003250:	f1bb 0f02 	cmp.w	fp, #2
 8003254:	d009      	beq.n	800326a <put_fat+0x2aa>
					wsect += fs->fsize;
 8003256:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003258:	7860      	ldrb	r0, [r4, #1]
 800325a:	2301      	movs	r3, #1
 800325c:	4651      	mov	r1, sl
 800325e:	4642      	mov	r2, r8
 8003260:	f005 ff72 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003264:	3f01      	subs	r7, #1
 8003266:	69e3      	ldr	r3, [r4, #28]
 8003268:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 800326a:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800326c:	7860      	ldrb	r0, [r4, #1]
 800326e:	2301      	movs	r3, #1
 8003270:	4651      	mov	r1, sl
 8003272:	4642      	mov	r2, r8
 8003274:	f005 ff68 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003278:	1e7b      	subs	r3, r7, #1
 800327a:	b2df      	uxtb	r7, r3
 800327c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003280:	69e3      	ldr	r3, [r4, #28]
 8003282:	46ab      	mov	fp, r5
 8003284:	46b1      	mov	r9, r6
 8003286:	e01f      	b.n	80032c8 <put_fat+0x308>
 8003288:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800328a:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800328c:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 800328e:	4632      	mov	r2, r6
 8003290:	2301      	movs	r3, #1
 8003292:	7860      	ldrb	r0, [r4, #1]
 8003294:	f005 ff58 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003298:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800329a:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800329c:	eb06 0802 	add.w	r8, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80032a0:	4642      	mov	r2, r8
 80032a2:	2301      	movs	r3, #1
 80032a4:	7860      	ldrb	r0, [r4, #1]
 80032a6:	f005 ff4f 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80032aa:	1e6f      	subs	r7, r5, #1
 80032ac:	69e3      	ldr	r3, [r4, #28]
 80032ae:	b2fd      	uxtb	r5, r7
 80032b0:	1e68      	subs	r0, r5, #1
					wsect += fs->fsize;
 80032b2:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80032b4:	b2c6      	uxtb	r6, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80032b6:	2301      	movs	r3, #1
 80032b8:	7860      	ldrb	r0, [r4, #1]
 80032ba:	4651      	mov	r1, sl
 80032bc:	4642      	mov	r2, r8
 80032be:	f005 ff43 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80032c2:	1e77      	subs	r7, r6, #1
 80032c4:	69e3      	ldr	r3, [r4, #28]
 80032c6:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 80032c8:	eb08 0603 	add.w	r6, r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80032cc:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80032ce:	2301      	movs	r3, #1
 80032d0:	4651      	mov	r1, sl
 80032d2:	4632      	mov	r2, r6
 80032d4:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80032d6:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80032d8:	f005 ff36 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80032dc:	2d01      	cmp	r5, #1
 80032de:	d1d3      	bne.n	8003288 <put_fat+0x2c8>
 80032e0:	464e      	mov	r6, r9
 80032e2:	465d      	mov	r5, fp
 80032e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80032e8:	e767      	b.n	80031ba <put_fat+0x1fa>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80032ea:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80032ee:	4651      	mov	r1, sl
 80032f0:	7840      	ldrb	r0, [r0, #1]
 80032f2:	4642      	mov	r2, r8
 80032f4:	2301      	movs	r3, #1
 80032f6:	f005 ff27 	bl	8009148 <disk_write>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	f040 80fb 	bne.w	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003300:	69e3      	ldr	r3, [r4, #28]
 8003302:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8003304:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003306:	eb03 0e02 	add.w	lr, r3, r2
 800330a:	45f0      	cmp	r8, lr
 800330c:	f4bf ae7e 	bcs.w	800300c <put_fat+0x4c>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003310:	78e7      	ldrb	r7, [r4, #3]
 8003312:	2f01      	cmp	r7, #1
 8003314:	f67f ae7a 	bls.w	800300c <put_fat+0x4c>
 8003318:	f1a7 0b02 	sub.w	fp, r7, #2
 800331c:	f00b 0c03 	and.w	ip, fp, #3
 8003320:	fa4f fb8c 	sxtb.w	fp, ip
 8003324:	f1bb 0f00 	cmp.w	fp, #0
 8003328:	f000 8120 	beq.w	800356c <put_fat+0x5ac>
					wsect += fs->fsize;
 800332c:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800332e:	7860      	ldrb	r0, [r4, #1]
 8003330:	2301      	movs	r3, #1
 8003332:	4651      	mov	r1, sl
 8003334:	4642      	mov	r2, r8
 8003336:	f8cd c004 	str.w	ip, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800333a:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800333c:	f005 ff04 	bl	8009148 <disk_write>
 8003340:	f1bb 0f01 	cmp.w	fp, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003344:	b2ff      	uxtb	r7, r7
 8003346:	69e3      	ldr	r3, [r4, #28]
 8003348:	f8dd c004 	ldr.w	ip, [sp, #4]
 800334c:	f000 810e 	beq.w	800356c <put_fat+0x5ac>
 8003350:	f1bc 0f02 	cmp.w	ip, #2
 8003354:	d009      	beq.n	800336a <put_fat+0x3aa>
					wsect += fs->fsize;
 8003356:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003358:	7860      	ldrb	r0, [r4, #1]
 800335a:	2301      	movs	r3, #1
 800335c:	4651      	mov	r1, sl
 800335e:	4642      	mov	r2, r8
 8003360:	f005 fef2 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003364:	1e78      	subs	r0, r7, #1
 8003366:	69e3      	ldr	r3, [r4, #28]
 8003368:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
 800336a:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800336c:	4642      	mov	r2, r8
 800336e:	2301      	movs	r3, #1
 8003370:	7860      	ldrb	r0, [r4, #1]
 8003372:	4651      	mov	r1, sl
 8003374:	f005 fee8 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003378:	1e7a      	subs	r2, r7, #1
 800337a:	f8cd 9008 	str.w	r9, [sp, #8]
 800337e:	b2d7      	uxtb	r7, r2
 8003380:	69e3      	ldr	r3, [r4, #28]
 8003382:	46ab      	mov	fp, r5
 8003384:	46b1      	mov	r9, r6
 8003386:	e01f      	b.n	80033c8 <put_fat+0x408>
 8003388:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800338a:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800338c:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 800338e:	4632      	mov	r2, r6
 8003390:	2301      	movs	r3, #1
 8003392:	7860      	ldrb	r0, [r4, #1]
 8003394:	f005 fed8 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003398:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800339a:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800339c:	eb06 0802 	add.w	r8, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80033a0:	4642      	mov	r2, r8
 80033a2:	2301      	movs	r3, #1
 80033a4:	7860      	ldrb	r0, [r4, #1]
 80033a6:	f005 fecf 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80033aa:	1e6f      	subs	r7, r5, #1
 80033ac:	69e3      	ldr	r3, [r4, #28]
 80033ae:	b2fd      	uxtb	r5, r7
 80033b0:	1e68      	subs	r0, r5, #1
					wsect += fs->fsize;
 80033b2:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80033b4:	b2c6      	uxtb	r6, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80033b6:	2301      	movs	r3, #1
 80033b8:	7860      	ldrb	r0, [r4, #1]
 80033ba:	4651      	mov	r1, sl
 80033bc:	4642      	mov	r2, r8
 80033be:	f005 fec3 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80033c2:	1e77      	subs	r7, r6, #1
 80033c4:	69e3      	ldr	r3, [r4, #28]
 80033c6:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 80033c8:	eb08 0603 	add.w	r6, r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80033cc:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80033ce:	2301      	movs	r3, #1
 80033d0:	4651      	mov	r1, sl
 80033d2:	4632      	mov	r2, r6
 80033d4:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80033d6:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80033d8:	f005 feb6 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80033dc:	2d01      	cmp	r5, #1
 80033de:	d1d3      	bne.n	8003388 <put_fat+0x3c8>
 80033e0:	464e      	mov	r6, r9
 80033e2:	465d      	mov	r5, fp
 80033e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80033e8:	e610      	b.n	800300c <put_fat+0x4c>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80033ea:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 80033ee:	4659      	mov	r1, fp
 80033f0:	7840      	ldrb	r0, [r0, #1]
 80033f2:	464a      	mov	r2, r9
 80033f4:	f005 fea8 	bl	8009148 <disk_write>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d17c      	bne.n	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80033fc:	69e3      	ldr	r3, [r4, #28]
 80033fe:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8003400:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003402:	1858      	adds	r0, r3, r1
 8003404:	4581      	cmp	r9, r0
 8003406:	f4bf ae1e 	bcs.w	8003046 <put_fat+0x86>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800340a:	78e7      	ldrb	r7, [r4, #3]
 800340c:	2f01      	cmp	r7, #1
 800340e:	f67f ae1a 	bls.w	8003046 <put_fat+0x86>
 8003412:	f1a7 0c02 	sub.w	ip, r7, #2
 8003416:	f01c 0c03 	ands.w	ip, ip, #3
 800341a:	f000 80b1 	beq.w	8003580 <put_fat+0x5c0>
					wsect += fs->fsize;
 800341e:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003420:	7860      	ldrb	r0, [r4, #1]
 8003422:	2301      	movs	r3, #1
 8003424:	4659      	mov	r1, fp
 8003426:	464a      	mov	r2, r9
 8003428:	f8cd c004 	str.w	ip, [sp, #4]
 800342c:	f005 fe8c 	bl	8009148 <disk_write>
 8003430:	f8dd c004 	ldr.w	ip, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003434:	1e78      	subs	r0, r7, #1
 8003436:	f1bc 0f01 	cmp.w	ip, #1
 800343a:	b2c7      	uxtb	r7, r0
 800343c:	69e3      	ldr	r3, [r4, #28]
 800343e:	f000 809f 	beq.w	8003580 <put_fat+0x5c0>
 8003442:	f1bc 0f02 	cmp.w	ip, #2
 8003446:	d009      	beq.n	800345c <put_fat+0x49c>
					wsect += fs->fsize;
 8003448:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800344a:	464a      	mov	r2, r9
 800344c:	2301      	movs	r3, #1
 800344e:	7860      	ldrb	r0, [r4, #1]
 8003450:	4659      	mov	r1, fp
 8003452:	f005 fe79 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003456:	1e7a      	subs	r2, r7, #1
 8003458:	69e3      	ldr	r3, [r4, #28]
 800345a:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 800345c:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800345e:	4659      	mov	r1, fp
 8003460:	2301      	movs	r3, #1
 8003462:	7860      	ldrb	r0, [r4, #1]
 8003464:	464a      	mov	r2, r9
 8003466:	f005 fe6f 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800346a:	1e79      	subs	r1, r7, #1
 800346c:	f8cd a008 	str.w	sl, [sp, #8]
 8003470:	f8cd 800c 	str.w	r8, [sp, #12]
 8003474:	b2cf      	uxtb	r7, r1
 8003476:	69e3      	ldr	r3, [r4, #28]
 8003478:	46aa      	mov	sl, r5
 800347a:	46b0      	mov	r8, r6
 800347c:	e01f      	b.n	80034be <put_fat+0x4fe>
 800347e:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003480:	4659      	mov	r1, fp
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003482:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8003484:	4632      	mov	r2, r6
 8003486:	2301      	movs	r3, #1
 8003488:	7860      	ldrb	r0, [r4, #1]
 800348a:	f005 fe5d 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800348e:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003490:	4659      	mov	r1, fp
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003492:	eb06 0900 	add.w	r9, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8003496:	464a      	mov	r2, r9
 8003498:	2301      	movs	r3, #1
 800349a:	7860      	ldrb	r0, [r4, #1]
 800349c:	f005 fe54 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80034a0:	1e6f      	subs	r7, r5, #1
 80034a2:	69e3      	ldr	r3, [r4, #28]
 80034a4:	b2fd      	uxtb	r5, r7
 80034a6:	1e6a      	subs	r2, r5, #1
					wsect += fs->fsize;
 80034a8:	4499      	add	r9, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80034aa:	b2d6      	uxtb	r6, r2
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80034ac:	2301      	movs	r3, #1
 80034ae:	7860      	ldrb	r0, [r4, #1]
 80034b0:	4659      	mov	r1, fp
 80034b2:	464a      	mov	r2, r9
 80034b4:	f005 fe48 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80034b8:	1e77      	subs	r7, r6, #1
 80034ba:	69e3      	ldr	r3, [r4, #28]
 80034bc:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 80034be:	eb09 0603 	add.w	r6, r9, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80034c2:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80034c4:	2301      	movs	r3, #1
 80034c6:	4659      	mov	r1, fp
 80034c8:	4632      	mov	r2, r6
 80034ca:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80034cc:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80034ce:	f005 fe3b 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80034d2:	2d01      	cmp	r5, #1
 80034d4:	d1d3      	bne.n	800347e <put_fat+0x4be>
 80034d6:	4655      	mov	r5, sl
 80034d8:	4646      	mov	r6, r8
 80034da:	f8dd a008 	ldr.w	sl, [sp, #8]
 80034de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80034e2:	e5b0      	b.n	8003046 <put_fat+0x86>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80034e4:	18e3      	adds	r3, r4, r3
 80034e6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80034ea:	b2f5      	uxtb	r5, r6
 80034ec:	f000 0c0f 	and.w	ip, r0, #15
 80034f0:	ea4c 1205 	orr.w	r2, ip, r5, lsl #4
 80034f4:	e5b8      	b.n	8003068 <put_fat+0xa8>
		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
			break;
 80034f6:	2001      	movs	r0, #1
 80034f8:	e576      	b.n	8002fe8 <put_fat+0x28>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80034fa:	7860      	ldrb	r0, [r4, #1]
 80034fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003500:	4642      	mov	r2, r8
 8003502:	2301      	movs	r3, #1
 8003504:	f005 fd62 	bl	8008fcc <disk_read>
 8003508:	2800      	cmp	r0, #0
 800350a:	d1f4      	bne.n	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->winsect = sector;
 800350c:	6a27      	ldr	r7, [r4, #32]
 800350e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8003512:	e59f      	b.n	8003054 <put_fat+0x94>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003514:	7860      	ldrb	r0, [r4, #1]
 8003516:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800351a:	464a      	mov	r2, r9
 800351c:	2301      	movs	r3, #1
 800351e:	f005 fd55 	bl	8008fcc <disk_read>
 8003522:	2800      	cmp	r0, #0
 8003524:	d1e7      	bne.n	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8003526:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800352a:	e573      	b.n	8003014 <put_fat+0x54>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800352c:	7860      	ldrb	r0, [r4, #1]
 800352e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003532:	464a      	mov	r2, r9
 8003534:	2301      	movs	r3, #1
 8003536:	f005 fd49 	bl	8008fcc <disk_read>
 800353a:	2800      	cmp	r0, #0
 800353c:	d1db      	bne.n	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->winsect = sector;
 800353e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8003542:	e63e      	b.n	80031c2 <put_fat+0x202>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003544:	7860      	ldrb	r0, [r4, #1]
 8003546:	4649      	mov	r1, r9
 8003548:	463a      	mov	r2, r7
 800354a:	2301      	movs	r3, #1
 800354c:	f005 fd3e 	bl	8008fcc <disk_read>
 8003550:	2800      	cmp	r0, #0
 8003552:	d1d0      	bne.n	80034f6 <put_fat+0x536>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8003554:	62e7      	str	r7, [r4, #44]	; 0x2c
 8003556:	e618      	b.n	800318a <put_fat+0x1ca>
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003558:	44a2      	add	sl, r4
 800355a:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 800355e:	f3c6 2c03 	ubfx	ip, r6, #8, #4
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	ea42 060c 	orr.w	r6, r2, ip
 800356a:	e619      	b.n	80031a0 <put_fat+0x1e0>
 800356c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003570:	46ab      	mov	fp, r5
 8003572:	46b1      	mov	r9, r6
 8003574:	e728      	b.n	80033c8 <put_fat+0x408>
 8003576:	f8cd 9008 	str.w	r9, [sp, #8]
 800357a:	46ab      	mov	fp, r5
 800357c:	46b1      	mov	r9, r6
 800357e:	e6a3      	b.n	80032c8 <put_fat+0x308>
 8003580:	f8cd a008 	str.w	sl, [sp, #8]
 8003584:	f8cd 800c 	str.w	r8, [sp, #12]
 8003588:	46aa      	mov	sl, r5
 800358a:	46b0      	mov	r8, r6
 800358c:	e797      	b.n	80034be <put_fat+0x4fe>
 800358e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003592:	46ba      	mov	sl, r7
 8003594:	4637      	mov	r7, r6
 8003596:	e5e4      	b.n	8003162 <put_fat+0x1a2>

08003598 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800359e:	460e      	mov	r6, r1
 80035a0:	2900      	cmp	r1, #0
 80035a2:	f040 80a5 	bne.w	80036f0 <create_chain+0x158>
		scl = fs->last_clust;			/* Get suggested start point */
 80035a6:	68c7      	ldr	r7, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80035a8:	2f00      	cmp	r7, #0
 80035aa:	d168      	bne.n	800367e <create_chain+0xe6>
 80035ac:	6983      	ldr	r3, [r0, #24]
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80035ae:	2701      	movs	r7, #1

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
 80035b0:	f04f 38ff 	mov.w	r8, #4294967295
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 80035b4:	ebc8 0407 	rsb	r4, r8, r7
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d25d      	bcs.n	8003678 <create_chain+0xe0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80035bc:	4628      	mov	r0, r5
 80035be:	4621      	mov	r1, r4
 80035c0:	f7ff fa2c 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d07b      	beq.n	80036c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80035c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035cc:	f000 808e 	beq.w	80036ec <create_chain+0x154>
 80035d0:	2801      	cmp	r0, #1
 80035d2:	f000 808b 	beq.w	80036ec <create_chain+0x154>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 80035d6:	f108 39ff 	add.w	r9, r8, #4294967295
 80035da:	f1b8 0f00 	cmp.w	r8, #0
 80035de:	d04b      	beq.n	8003678 <create_chain+0xe0>
 80035e0:	69ab      	ldr	r3, [r5, #24]
 80035e2:	ebc9 0407 	rsb	r4, r9, r7
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 80035e6:	429c      	cmp	r4, r3
 80035e8:	d246      	bcs.n	8003678 <create_chain+0xe0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80035ea:	4628      	mov	r0, r5
 80035ec:	4621      	mov	r1, r4
 80035ee:	f7ff fa15 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d064      	beq.n	80036c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80035f6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035fa:	d077      	beq.n	80036ec <create_chain+0x154>
 80035fc:	2801      	cmp	r0, #1
 80035fe:	d075      	beq.n	80036ec <create_chain+0x154>
 8003600:	f109 34ff 	add.w	r4, r9, #4294967295
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8003604:	69aa      	ldr	r2, [r5, #24]
 8003606:	1b3c      	subs	r4, r7, r4
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8003608:	4294      	cmp	r4, r2
 800360a:	d235      	bcs.n	8003678 <create_chain+0xe0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800360c:	4628      	mov	r0, r5
 800360e:	4621      	mov	r1, r4
 8003610:	f7ff fa04 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8003614:	2800      	cmp	r0, #0
 8003616:	d053      	beq.n	80036c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003618:	f1b0 3fff 	cmp.w	r0, #4294967295
 800361c:	d066      	beq.n	80036ec <create_chain+0x154>
 800361e:	2801      	cmp	r0, #1
 8003620:	d064      	beq.n	80036ec <create_chain+0x154>
 8003622:	f1a9 0c02 	sub.w	ip, r9, #2
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8003626:	69ab      	ldr	r3, [r5, #24]
 8003628:	ebcc 0407 	rsb	r4, ip, r7
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 800362c:	429c      	cmp	r4, r3
 800362e:	d223      	bcs.n	8003678 <create_chain+0xe0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003630:	4628      	mov	r0, r5
 8003632:	4621      	mov	r1, r4
 8003634:	f7ff f9f2 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8003638:	2800      	cmp	r0, #0
 800363a:	d041      	beq.n	80036c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800363c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003640:	d054      	beq.n	80036ec <create_chain+0x154>
 8003642:	2801      	cmp	r0, #1
 8003644:	d052      	beq.n	80036ec <create_chain+0x154>
 8003646:	f1a9 0e03 	sub.w	lr, r9, #3
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 800364a:	69a8      	ldr	r0, [r5, #24]
 800364c:	ebce 0407 	rsb	r4, lr, r7
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8003650:	4284      	cmp	r4, r0
 8003652:	d211      	bcs.n	8003678 <create_chain+0xe0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003654:	4628      	mov	r0, r5
 8003656:	4621      	mov	r1, r4
 8003658:	f7ff f9e0 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800365c:	2800      	cmp	r0, #0
 800365e:	d02f      	beq.n	80036c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003660:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003664:	d042      	beq.n	80036ec <create_chain+0x154>
 8003666:	2801      	cmp	r0, #1
 8003668:	d040      	beq.n	80036ec <create_chain+0x154>
 800366a:	f1a9 0804 	sub.w	r8, r9, #4
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 800366e:	69ab      	ldr	r3, [r5, #24]
 8003670:	ebc8 0407 	rsb	r4, r8, r7
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8003674:	429c      	cmp	r4, r3
 8003676:	d3a1      	bcc.n	80035bc <create_chain+0x24>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8003678:	2000      	movs	r0, #0
 800367a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800367e:	6983      	ldr	r3, [r0, #24]
 8003680:	429f      	cmp	r7, r3
 8003682:	d294      	bcs.n	80035ae <create_chain+0x16>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003684:	2f01      	cmp	r7, #1
 8003686:	d993      	bls.n	80035b0 <create_chain+0x18>
 8003688:	463c      	mov	r4, r7
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 800368a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
 800368c:	429c      	cmp	r4, r3
 800368e:	bf28      	it	cs
 8003690:	2402      	movcs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003692:	4628      	mov	r0, r5
 8003694:	4621      	mov	r1, r4
 8003696:	f7ff f9c1 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800369a:	b188      	cbz	r0, 80036c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800369c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036a0:	d024      	beq.n	80036ec <create_chain+0x154>
 80036a2:	2801      	cmp	r0, #1
 80036a4:	d022      	beq.n	80036ec <create_chain+0x154>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 80036a6:	42bc      	cmp	r4, r7
 80036a8:	d0e6      	beq.n	8003678 <create_chain+0xe0>
 80036aa:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 80036ac:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
 80036ae:	429c      	cmp	r4, r3
 80036b0:	bf28      	it	cs
 80036b2:	2402      	movcs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80036b4:	4628      	mov	r0, r5
 80036b6:	4621      	mov	r1, r4
 80036b8:	f7ff f9b0 	bl	8002a1c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80036bc:	2800      	cmp	r0, #0
 80036be:	d1ed      	bne.n	800369c <create_chain+0x104>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80036c0:	4628      	mov	r0, r5
 80036c2:	4621      	mov	r1, r4
 80036c4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80036c8:	f7ff fc7a 	bl	8002fc0 <put_fat>
	if (res == FR_OK && clst != 0) {
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d122      	bne.n	8003716 <create_chain+0x17e>
 80036d0:	b9d6      	cbnz	r6, 8003708 <create_chain+0x170>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 80036d2:	692b      	ldr	r3, [r5, #16]
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
 80036d4:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d006      	beq.n	80036ea <create_chain+0x152>
			fs->free_clust--;
			fs->fsi_flag = 1;
 80036dc:	2001      	movs	r0, #1
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
 80036de:	1e59      	subs	r1, r3, #1
			fs->fsi_flag = 1;
 80036e0:	7168      	strb	r0, [r5, #5]
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
 80036e2:	6129      	str	r1, [r5, #16]
			fs->fsi_flag = 1;
 80036e4:	4620      	mov	r0, r4
 80036e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 80036ea:	4620      	mov	r0, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
 80036ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80036f0:	f7ff f994 	bl	8002a1c <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 80036f4:	2801      	cmp	r0, #1
 80036f6:	d904      	bls.n	8003702 <create_chain+0x16a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80036f8:	69ab      	ldr	r3, [r5, #24]
 80036fa:	4298      	cmp	r0, r3
 80036fc:	d3f6      	bcc.n	80036ec <create_chain+0x154>
 80036fe:	4637      	mov	r7, r6
 8003700:	e7c0      	b.n	8003684 <create_chain+0xec>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8003702:	2001      	movs	r0, #1
 8003704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003708:	4628      	mov	r0, r5
 800370a:	4631      	mov	r1, r6
 800370c:	4622      	mov	r2, r4
 800370e:	f7ff fc57 	bl	8002fc0 <put_fat>
	}
	if (res == FR_OK) {
 8003712:	2800      	cmp	r0, #0
 8003714:	d0dd      	beq.n	80036d2 <create_chain+0x13a>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003716:	2801      	cmp	r0, #1
 8003718:	bf14      	ite	ne
 800371a:	2001      	movne	r0, #1
 800371c:	f04f 30ff 	moveq.w	r0, #4294967295
 8003720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003724 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8003728:	88c2      	ldrh	r2, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800372a:	b087      	sub	sp, #28
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 800372c:	1c55      	adds	r5, r2, #1
 800372e:	b2ad      	uxth	r5, r5
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003730:	4604      	mov	r4, r0
 8003732:	460f      	mov	r7, r1
	DWORD clst;
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8003734:	b1a5      	cbz	r5, 8003760 <dir_next+0x3c>
 8003736:	6903      	ldr	r3, [r0, #16]
 8003738:	b193      	cbz	r3, 8003760 <dir_next+0x3c>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 800373a:	f015 060f 	ands.w	r6, r5, #15
 800373e:	d007      	beq.n	8003750 <dir_next+0x2c>
 8003740:	6800      	ldr	r0, [r0, #0]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8003742:	3030      	adds	r0, #48	; 0x30
 8003744:	0176      	lsls	r6, r6, #5
 8003746:	1980      	adds	r0, r0, r6
 8003748:	6160      	str	r0, [r4, #20]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
 800374a:	80e5      	strh	r5, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
 800374c:	2000      	movs	r0, #0
 800374e:	e008      	b.n	8003762 <dir_next+0x3e>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
 8003750:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
 8003752:	3301      	adds	r3, #1
 8003754:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
 8003756:	b939      	cbnz	r1, 8003768 <dir_next+0x44>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8003758:	6800      	ldr	r0, [r0, #0]
 800375a:	8901      	ldrh	r1, [r0, #8]
 800375c:	42a9      	cmp	r1, r5
 800375e:	d8f0      	bhi.n	8003742 <dir_next+0x1e>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8003760:	2004      	movs	r0, #4

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
 8003762:	b007      	add	sp, #28
 8003764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003768:	6800      	ldr	r0, [r0, #0]
 800376a:	7883      	ldrb	r3, [r0, #2]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	ea12 1315 	ands.w	r3, r2, r5, lsr #4
 8003772:	d1e6      	bne.n	8003742 <dir_next+0x1e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8003774:	f7ff f952 	bl	8002a1c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8003778:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 800377a:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
 800377c:	d97d      	bls.n	800387a <dir_next+0x156>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800377e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003782:	d078      	beq.n	8003876 <dir_next+0x152>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	6981      	ldr	r1, [r0, #24]
 8003788:	4588      	cmp	r8, r1
 800378a:	d378      	bcc.n	800387e <dir_next+0x15a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 800378c:	2f00      	cmp	r7, #0
 800378e:	d0e7      	beq.n	8003760 <dir_next+0x3c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8003790:	68e1      	ldr	r1, [r4, #12]
 8003792:	f7ff ff01 	bl	8003598 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003796:	4680      	mov	r8, r0
 8003798:	2800      	cmp	r0, #0
 800379a:	f000 80ec 	beq.w	8003976 <dir_next+0x252>
					if (clst == 1) return FR_INT_ERR;
 800379e:	2801      	cmp	r0, #1
 80037a0:	d06b      	beq.n	800387a <dir_next+0x156>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80037a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037a6:	d066      	beq.n	8003876 <dir_next+0x152>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 80037a8:	f8d4 9000 	ldr.w	r9, [r4]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 80037ac:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 80037b0:	f1ba 0f00 	cmp.w	sl, #0
 80037b4:	d004      	beq.n	80037c0 <dir_next+0x9c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80037b6:	f899 0004 	ldrb.w	r0, [r9, #4]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	f040 80e3 	bne.w	8003986 <dir_next+0x262>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80037c0:	f109 0330 	add.w	r3, r9, #48	; 0x30
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80037c4:	2200      	movs	r2, #0
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory index next                        */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
 80037c6:	f509 790c 	add.w	r9, r9, #560	; 0x230
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80037ca:	469c      	mov	ip, r3
 80037cc:	f84c 2b04 	str.w	r2, [ip], #4
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	f8cc 2004 	str.w	r2, [ip, #4]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	3310      	adds	r3, #16
 80037da:	454b      	cmp	r3, r9
 80037dc:	d1f5      	bne.n	80037ca <dir_next+0xa6>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 80037de:	f8d4 9000 	ldr.w	r9, [r4]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80037e2:	f1a8 0102 	sub.w	r1, r8, #2
 80037e6:	9102      	str	r1, [sp, #8]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 80037e8:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80037ec:	9902      	ldr	r1, [sp, #8]
 80037ee:	1e83      	subs	r3, r0, #2
 80037f0:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80037f2:	bf38      	it	cc
 80037f4:	f8d9 2028 	ldrcc.w	r2, [r9, #40]	; 0x28
 80037f8:	f899 3002 	ldrb.w	r3, [r9, #2]
 80037fc:	bf38      	it	cc
 80037fe:	fb03 2201 	mlacc	r2, r3, r1, r2
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8003802:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 814c 	beq.w	8003aa4 <dir_next+0x380>
 800380c:	2700      	movs	r7, #0
 800380e:	9703      	str	r7, [sp, #12]
						dj->fs->wflag = 1;
 8003810:	46c2      	mov	sl, r8
 8003812:	4627      	mov	r7, r4
 8003814:	f04f 0b01 	mov.w	fp, #1
 8003818:	464c      	mov	r4, r9
 800381a:	46b0      	mov	r8, r6
 800381c:	46a9      	mov	r9, r5
 800381e:	f884 b004 	strb.w	fp, [r4, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8003822:	683c      	ldr	r4, [r7, #0]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8003824:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8003826:	b115      	cbz	r5, 800382e <dir_next+0x10a>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8003828:	7922      	ldrb	r2, [r4, #4]
 800382a:	2a00      	cmp	r2, #0
 800382c:	d12b      	bne.n	8003886 <dir_next+0x162>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800382e:	9a03      	ldr	r2, [sp, #12]
 8003830:	f894 e002 	ldrb.w	lr, [r4, #2]
 8003834:	1c50      	adds	r0, r2, #1
 8003836:	b2c1      	uxtb	r1, r0
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 8003838:	1c6b      	adds	r3, r5, #1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800383a:	458e      	cmp	lr, r1
 800383c:	9103      	str	r1, [sp, #12]
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 800383e:	62e3      	str	r3, [r4, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003840:	d8ed      	bhi.n	800381e <dir_next+0xfa>
 8003842:	464d      	mov	r5, r9
 8003844:	4646      	mov	r6, r8
 8003846:	46a1      	mov	r9, r4
 8003848:	46d0      	mov	r8, sl
 800384a:	463c      	mov	r4, r7
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 800384c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8003850:	9a03      	ldr	r2, [sp, #12]
 8003852:	4648      	mov	r0, r9
 8003854:	1a99      	subs	r1, r3, r2
 8003856:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 800385a:	9902      	ldr	r1, [sp, #8]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800385c:	6983      	ldr	r3, [r0, #24]
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 800385e:	f8c4 800c 	str.w	r8, [r4, #12]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8003862:	3b02      	subs	r3, #2
 8003864:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8003866:	bf3d      	ittte	cc
 8003868:	7882      	ldrbcc	r2, [r0, #2]
 800386a:	6a83      	ldrcc	r3, [r0, #40]	; 0x28
 800386c:	fb02 3301 	mlacc	r3, r2, r1, r3
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8003870:	2300      	movcs	r3, #0
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	e765      	b.n	8003742 <dir_next+0x1e>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8003876:	2001      	movs	r0, #1
 8003878:	e773      	b.n	8003762 <dir_next+0x3e>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;
 800387a:	2002      	movs	r0, #2
 800387c:	e771      	b.n	8003762 <dir_next+0x3e>
 800387e:	f1a8 0102 	sub.w	r1, r8, #2
 8003882:	9102      	str	r1, [sp, #8]
 8003884:	e7ea      	b.n	800385c <dir_next+0x138>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003886:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800388a:	9304      	str	r3, [sp, #16]
 800388c:	4619      	mov	r1, r3
 800388e:	7860      	ldrb	r0, [r4, #1]
 8003890:	462a      	mov	r2, r5
 8003892:	2301      	movs	r3, #1
 8003894:	f005 fc58 	bl	8009148 <disk_write>
 8003898:	2800      	cmp	r0, #0
 800389a:	d1ec      	bne.n	8003876 <dir_next+0x152>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800389c:	69e3      	ldr	r3, [r4, #28]
 800389e:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 80038a0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80038a2:	eb03 0e01 	add.w	lr, r3, r1
 80038a6:	4575      	cmp	r5, lr
 80038a8:	d262      	bcs.n	8003970 <dir_next+0x24c>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80038aa:	78e6      	ldrb	r6, [r4, #3]
 80038ac:	2e01      	cmp	r6, #1
 80038ae:	d95f      	bls.n	8003970 <dir_next+0x24c>
 80038b0:	f1a6 0c02 	sub.w	ip, r6, #2
 80038b4:	f01c 0c03 	ands.w	ip, ip, #3
 80038b8:	d05f      	beq.n	800397a <dir_next+0x256>
					wsect += fs->fsize;
 80038ba:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80038bc:	7860      	ldrb	r0, [r4, #1]
 80038be:	2301      	movs	r3, #1
 80038c0:	9904      	ldr	r1, [sp, #16]
 80038c2:	462a      	mov	r2, r5
 80038c4:	f8cd c004 	str.w	ip, [sp, #4]
 80038c8:	f005 fc3e 	bl	8009148 <disk_write>
 80038cc:	f8dd c004 	ldr.w	ip, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80038d0:	3e01      	subs	r6, #1
 80038d2:	f1bc 0f01 	cmp.w	ip, #1
 80038d6:	b2f6      	uxtb	r6, r6
 80038d8:	69e3      	ldr	r3, [r4, #28]
 80038da:	d04e      	beq.n	800397a <dir_next+0x256>
 80038dc:	f1bc 0f02 	cmp.w	ip, #2
 80038e0:	d009      	beq.n	80038f6 <dir_next+0x1d2>
					wsect += fs->fsize;
 80038e2:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80038e4:	462a      	mov	r2, r5
 80038e6:	2301      	movs	r3, #1
 80038e8:	7860      	ldrb	r0, [r4, #1]
 80038ea:	9904      	ldr	r1, [sp, #16]
 80038ec:	f005 fc2c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80038f0:	1e72      	subs	r2, r6, #1
 80038f2:	69e3      	ldr	r3, [r4, #28]
 80038f4:	b2d6      	uxtb	r6, r2
					wsect += fs->fsize;
 80038f6:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80038f8:	9904      	ldr	r1, [sp, #16]
 80038fa:	2301      	movs	r3, #1
 80038fc:	7860      	ldrb	r0, [r4, #1]
 80038fe:	462a      	mov	r2, r5
 8003900:	f005 fc22 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003904:	1e71      	subs	r1, r6, #1
 8003906:	f8cd a014 	str.w	sl, [sp, #20]
 800390a:	b2ce      	uxtb	r6, r1
 800390c:	46ca      	mov	sl, r9
 800390e:	69e3      	ldr	r3, [r4, #28]
 8003910:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003914:	e01e      	b.n	8003954 <dir_next+0x230>
 8003916:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003918:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800391a:	18ad      	adds	r5, r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 800391c:	462a      	mov	r2, r5
 800391e:	2301      	movs	r3, #1
 8003920:	7860      	ldrb	r0, [r4, #1]
 8003922:	f005 fc11 	bl	8009148 <disk_write>
 8003926:	69e0      	ldr	r0, [r4, #28]
 8003928:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800392a:	182d      	adds	r5, r5, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 800392c:	462a      	mov	r2, r5
 800392e:	2301      	movs	r3, #1
 8003930:	7860      	ldrb	r0, [r4, #1]
 8003932:	f005 fc09 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003936:	3e01      	subs	r6, #1
 8003938:	69e3      	ldr	r3, [r4, #28]
 800393a:	b2f6      	uxtb	r6, r6
 800393c:	1e72      	subs	r2, r6, #1
					wsect += fs->fsize;
 800393e:	18ed      	adds	r5, r5, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003940:	b2d6      	uxtb	r6, r2
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003942:	2301      	movs	r3, #1
 8003944:	7860      	ldrb	r0, [r4, #1]
 8003946:	4649      	mov	r1, r9
 8003948:	462a      	mov	r2, r5
 800394a:	f005 fbfd 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800394e:	1e70      	subs	r0, r6, #1
 8003950:	69e3      	ldr	r3, [r4, #28]
 8003952:	b2c6      	uxtb	r6, r0
					wsect += fs->fsize;
 8003954:	18ed      	adds	r5, r5, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003956:	3e01      	subs	r6, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003958:	2301      	movs	r3, #1
 800395a:	4649      	mov	r1, r9
 800395c:	462a      	mov	r2, r5
 800395e:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003960:	b2f6      	uxtb	r6, r6
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003962:	f005 fbf1 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003966:	2e01      	cmp	r6, #1
 8003968:	d1d5      	bne.n	8003916 <dir_next+0x1f2>
 800396a:	46d1      	mov	r9, sl
 800396c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003970:	683c      	ldr	r4, [r7, #0]
 8003972:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003974:	e75b      	b.n	800382e <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003976:	2007      	movs	r0, #7
 8003978:	e6f3      	b.n	8003762 <dir_next+0x3e>
 800397a:	f8cd a014 	str.w	sl, [sp, #20]
 800397e:	46ca      	mov	sl, r9
 8003980:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003984:	e7e6      	b.n	8003954 <dir_next+0x230>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003986:	f109 0b30 	add.w	fp, r9, #48	; 0x30
 800398a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800398e:	4659      	mov	r1, fp
 8003990:	4652      	mov	r2, sl
 8003992:	2301      	movs	r3, #1
 8003994:	f005 fbd8 	bl	8009148 <disk_write>
 8003998:	2800      	cmp	r0, #0
 800399a:	f47f af6c 	bne.w	8003876 <dir_next+0x152>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800399e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80039a2:	f8d9 2020 	ldr.w	r2, [r9, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 80039a6:	f889 0004 	strb.w	r0, [r9, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80039aa:	eb03 0c02 	add.w	ip, r3, r2
 80039ae:	45e2      	cmp	sl, ip
 80039b0:	d275      	bcs.n	8003a9e <dir_next+0x37a>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80039b2:	f899 7003 	ldrb.w	r7, [r9, #3]
 80039b6:	2f01      	cmp	r7, #1
 80039b8:	d971      	bls.n	8003a9e <dir_next+0x37a>
 80039ba:	f1a7 0e02 	sub.w	lr, r7, #2
 80039be:	f01e 0c03 	ands.w	ip, lr, #3
 80039c2:	d071      	beq.n	8003aa8 <dir_next+0x384>
					wsect += fs->fsize;
 80039c4:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80039c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80039ca:	2301      	movs	r3, #1
 80039cc:	4659      	mov	r1, fp
 80039ce:	4652      	mov	r2, sl
 80039d0:	f8cd c004 	str.w	ip, [sp, #4]
 80039d4:	f005 fbb8 	bl	8009148 <disk_write>
 80039d8:	f8dd c004 	ldr.w	ip, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80039dc:	3f01      	subs	r7, #1
 80039de:	f1bc 0f01 	cmp.w	ip, #1
 80039e2:	b2ff      	uxtb	r7, r7
 80039e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80039e8:	d05e      	beq.n	8003aa8 <dir_next+0x384>
 80039ea:	f1bc 0f02 	cmp.w	ip, #2
 80039ee:	d00b      	beq.n	8003a08 <dir_next+0x2e4>
					wsect += fs->fsize;
 80039f0:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80039f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80039f6:	2301      	movs	r3, #1
 80039f8:	4659      	mov	r1, fp
 80039fa:	4652      	mov	r2, sl
 80039fc:	f005 fba4 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a00:	1e78      	subs	r0, r7, #1
 8003a02:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a06:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
 8003a08:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4659      	mov	r1, fp
 8003a12:	4652      	mov	r2, sl
 8003a14:	f005 fb98 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a18:	1e7b      	subs	r3, r7, #1
 8003a1a:	b2df      	uxtb	r7, r3
 8003a1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a20:	46c4      	mov	ip, r8
 8003a22:	46a8      	mov	r8, r5
 8003a24:	4625      	mov	r5, r4
					wsect += fs->fsize;
 8003a26:	449a      	add	sl, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a28:	1e7c      	subs	r4, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4659      	mov	r1, fp
 8003a32:	4652      	mov	r2, sl
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a34:	b2e4      	uxtb	r4, r4
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a36:	f8cd c004 	str.w	ip, [sp, #4]
 8003a3a:	f005 fb85 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a3e:	2c01      	cmp	r4, #1
 8003a40:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003a44:	d028      	beq.n	8003a98 <dir_next+0x374>
 8003a46:	f8d9 201c 	ldr.w	r2, [r9, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a4a:	4659      	mov	r1, fp
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003a4c:	4492      	add	sl, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a4e:	4652      	mov	r2, sl
 8003a50:	2301      	movs	r3, #1
 8003a52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003a56:	f005 fb77 	bl	8009148 <disk_write>
 8003a5a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003a5e:	4659      	mov	r1, fp
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003a60:	4482      	add	sl, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a62:	4652      	mov	r2, sl
 8003a64:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a66:	3c01      	subs	r4, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a68:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003a6c:	f005 fb6c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a70:	b2e7      	uxtb	r7, r4
 8003a72:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a76:	1e79      	subs	r1, r7, #1
					wsect += fs->fsize;
 8003a78:	449a      	add	sl, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a7a:	b2cc      	uxtb	r4, r1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003a82:	4659      	mov	r1, fp
 8003a84:	4652      	mov	r2, sl
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a86:	1e67      	subs	r7, r4, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a88:	f005 fb5e 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003a8c:	b2ff      	uxtb	r7, r7
 8003a8e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a92:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003a96:	e7c6      	b.n	8003a26 <dir_next+0x302>
 8003a98:	462c      	mov	r4, r5
 8003a9a:	4645      	mov	r5, r8
 8003a9c:	46e0      	mov	r8, ip
 8003a9e:	f8d4 9000 	ldr.w	r9, [r4]
 8003aa2:	e68d      	b.n	80037c0 <dir_next+0x9c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003aa4:	9303      	str	r3, [sp, #12]
 8003aa6:	e6d1      	b.n	800384c <dir_next+0x128>
 8003aa8:	46c4      	mov	ip, r8
 8003aaa:	46a8      	mov	r8, r5
 8003aac:	4625      	mov	r5, r4
 8003aae:	e7ba      	b.n	8003a26 <dir_next+0x302>

08003ab0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 8003ab4:	2100      	movs	r1, #0

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	4605      	mov	r5, r0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 8003aba:	f7ff fa25 	bl	8002f08 <dir_sdi>
	if (res != FR_OK) return res;
 8003abe:	bb38      	cbnz	r0, 8003b10 <dir_find+0x60>
 8003ac0:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8003ac4:	46d9      	mov	r9, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 8003ac6:	682c      	ldr	r4, [r5, #0]
 8003ac8:	f8d5 8010 	ldr.w	r8, [r5, #16]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8003acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8003ace:	45b0      	cmp	r8, r6
 8003ad0:	d005      	beq.n	8003ade <dir_find+0x2e>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8003ad2:	7923      	ldrb	r3, [r4, #4]
 8003ad4:	b9fb      	cbnz	r3, 8003b16 <dir_find+0x66>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8003ad6:	f1b8 0f00 	cmp.w	r8, #0
 8003ada:	f040 8096 	bne.w	8003c0a <dir_find+0x15a>
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8003ade:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
 8003ae0:	7822      	ldrb	r2, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	f000 8227 	beq.w	8003f36 <dir_find+0x486>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003ae8:	2ae5      	cmp	r2, #229	; 0xe5
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8003aea:	7ae3      	ldrb	r3, [r4, #11]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003aec:	d008      	beq.n	8003b00 <dir_find+0x50>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8003aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003af2:	f013 0f08 	tst.w	r3, #8
 8003af6:	f000 8155 	beq.w	8003da4 <dir_find+0x2f4>
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	f000 8092 	beq.w	8003c24 <dir_find+0x174>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003b00:	f04f 09ff 	mov.w	r9, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8003b04:	4628      	mov	r0, r5
 8003b06:	2100      	movs	r1, #0
 8003b08:	f7ff fe0c 	bl	8003724 <dir_next>
	} while (res == FR_OK);
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d0da      	beq.n	8003ac6 <dir_find+0x16>

	return res;
}
 8003b10:	b003      	add	sp, #12
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003b16:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 8003b1a:	7860      	ldrb	r0, [r4, #1]
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	4632      	mov	r2, r6
 8003b20:	2301      	movs	r3, #1
 8003b22:	f005 fb11 	bl	8009148 <disk_write>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f040 813a 	bne.w	8003da0 <dir_find+0x2f0>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003b2c:	69e3      	ldr	r3, [r4, #28]
 8003b2e:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8003b30:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8003b32:	185a      	adds	r2, r3, r1
 8003b34:	4296      	cmp	r6, r2
 8003b36:	d2ce      	bcs.n	8003ad6 <dir_find+0x26>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003b38:	78e7      	ldrb	r7, [r4, #3]
 8003b3a:	2f01      	cmp	r7, #1
 8003b3c:	d9cb      	bls.n	8003ad6 <dir_find+0x26>
 8003b3e:	f1a7 0c02 	sub.w	ip, r7, #2
 8003b42:	f01c 0c03 	ands.w	ip, ip, #3
 8003b46:	f000 81f1 	beq.w	8003f2c <dir_find+0x47c>
					wsect += fs->fsize;
 8003b4a:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b4c:	7860      	ldrb	r0, [r4, #1]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4651      	mov	r1, sl
 8003b52:	4632      	mov	r2, r6
 8003b54:	f8cd c000 	str.w	ip, [sp]
 8003b58:	f005 faf6 	bl	8009148 <disk_write>
 8003b5c:	f8dd c000 	ldr.w	ip, [sp]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003b60:	3f01      	subs	r7, #1
 8003b62:	f1bc 0f01 	cmp.w	ip, #1
 8003b66:	b2ff      	uxtb	r7, r7
 8003b68:	69e3      	ldr	r3, [r4, #28]
 8003b6a:	f000 81df 	beq.w	8003f2c <dir_find+0x47c>
 8003b6e:	f1bc 0f02 	cmp.w	ip, #2
 8003b72:	d009      	beq.n	8003b88 <dir_find+0xd8>
					wsect += fs->fsize;
 8003b74:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b76:	4651      	mov	r1, sl
 8003b78:	2301      	movs	r3, #1
 8003b7a:	7860      	ldrb	r0, [r4, #1]
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	f005 fae3 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003b82:	1e79      	subs	r1, r7, #1
 8003b84:	69e3      	ldr	r3, [r4, #28]
 8003b86:	b2cf      	uxtb	r7, r1
					wsect += fs->fsize;
 8003b88:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b8a:	7860      	ldrb	r0, [r4, #1]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4651      	mov	r1, sl
 8003b90:	4632      	mov	r2, r6
 8003b92:	f005 fad9 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003b96:	1e7b      	subs	r3, r7, #1
 8003b98:	b2df      	uxtb	r7, r3
 8003b9a:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b9e:	69e3      	ldr	r3, [r4, #28]
 8003ba0:	46c1      	mov	r9, r8
 8003ba2:	46a8      	mov	r8, r5
 8003ba4:	e01e      	b.n	8003be4 <dir_find+0x134>
 8003ba6:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ba8:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003baa:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8003bac:	4632      	mov	r2, r6
 8003bae:	2301      	movs	r3, #1
 8003bb0:	7860      	ldrb	r0, [r4, #1]
 8003bb2:	f005 fac9 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003bb6:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003bb8:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8003bba:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8003bbc:	4632      	mov	r2, r6
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	7860      	ldrb	r0, [r4, #1]
 8003bc2:	f005 fac1 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003bc6:	3d01      	subs	r5, #1
 8003bc8:	69e3      	ldr	r3, [r4, #28]
 8003bca:	b2ef      	uxtb	r7, r5
 8003bcc:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 8003bce:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003bd0:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	7860      	ldrb	r0, [r4, #1]
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	4632      	mov	r2, r6
 8003bda:	f005 fab5 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003bde:	1e6f      	subs	r7, r5, #1
 8003be0:	69e3      	ldr	r3, [r4, #28]
 8003be2:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 8003be4:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003be6:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003be8:	2301      	movs	r3, #1
 8003bea:	4651      	mov	r1, sl
 8003bec:	4632      	mov	r2, r6
 8003bee:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003bf0:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8003bf2:	f005 faa9 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8003bf6:	2d01      	cmp	r5, #1
 8003bf8:	d1d5      	bne.n	8003ba6 <dir_find+0xf6>
 8003bfa:	4645      	mov	r5, r8
 8003bfc:	46c8      	mov	r8, r9
 8003bfe:	f8dd 9004 	ldr.w	r9, [sp, #4]
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8003c02:	f1b8 0f00 	cmp.w	r8, #0
 8003c06:	f43f af6a 	beq.w	8003ade <dir_find+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003c0a:	7860      	ldrb	r0, [r4, #1]
 8003c0c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003c10:	4642      	mov	r2, r8
 8003c12:	2301      	movs	r3, #1
 8003c14:	f005 f9da 	bl	8008fcc <disk_read>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	f040 80c1 	bne.w	8003da0 <dir_find+0x2f0>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8003c1e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8003c22:	e75c      	b.n	8003ade <dir_find+0x2e>
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
 8003c24:	69ee      	ldr	r6, [r5, #28]
 8003c26:	2e00      	cmp	r6, #0
 8003c28:	f43f af6c 	beq.w	8003b04 <dir_find+0x54>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 8003c2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c30:	f000 8176 	beq.w	8003f20 <dir_find+0x470>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
 8003c34:	f8b5 9006 	ldrh.w	r9, [r5, #6]
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & LLE) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
 8003c38:	f894 b00d 	ldrb.w	fp, [r4, #13]
 8003c3c:	f104 030d 	add.w	r3, r4, #13
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
 8003c40:	f8a5 9020 	strh.w	r9, [r5, #32]
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (dj->lfn) {
					if (c & LLE) {		/* Is it start of LFN sequence? */
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
 8003c44:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8003c48:	f893 e000 	ldrb.w	lr, [r3]
 8003c4c:	45de      	cmp	lr, fp
 8003c4e:	f47f af57 	bne.w	8003b00 <dir_find+0x50>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 8003c52:	7822      	ldrb	r2, [r4, #0]
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003c54:	f894 8002 	ldrb.w	r8, [r4, #2]
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 8003c58:	f022 0740 	bic.w	r7, r2, #64	; 0x40
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003c5c:	7861      	ldrb	r1, [r4, #1]
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 8003c5e:	1e7b      	subs	r3, r7, #1
 8003c60:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003c64:	ea41 2008 	orr.w	r0, r1, r8, lsl #8
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 8003c68:	eb03 078c 	add.w	r7, r3, ip, lsl #2
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003c6c:	f7fe fa18 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003c70:	2ffe      	cmp	r7, #254	; 0xfe
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003c72:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003c74:	f63f af44 	bhi.w	8003b00 <dir_find+0x50>
 8003c78:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8003c7c:	f7fe fa10 	bl	80020a0 <ff_wtoupper>
 8003c80:	4580      	cmp	r8, r0
 8003c82:	f47f af3d 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003c86:	7920      	ldrb	r0, [r4, #4]
 8003c88:	f894 e003 	ldrb.w	lr, [r4, #3]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003c8c:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003c8e:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	f040 8152 	bne.w	8003f3e <dir_find+0x48e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c9e:	4288      	cmp	r0, r1
 8003ca0:	f47f af2e 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003ca4:	79a0      	ldrb	r0, [r4, #6]
 8003ca6:	7962      	ldrb	r2, [r4, #5]
 8003ca8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb0:	4290      	cmp	r0, r2
 8003cb2:	f47f af25 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003cb6:	f894 c008 	ldrb.w	ip, [r4, #8]
 8003cba:	f894 e007 	ldrb.w	lr, [r4, #7]
 8003cbe:	ea4e 200c 	orr.w	r0, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003cc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cc6:	4288      	cmp	r0, r1
 8003cc8:	f47f af1a 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003ccc:	7aa1      	ldrb	r1, [r4, #10]
 8003cce:	7a63      	ldrb	r3, [r4, #9]
 8003cd0:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd8:	4290      	cmp	r0, r2
 8003cda:	f47f af11 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003cde:	7be0      	ldrb	r0, [r4, #15]
 8003ce0:	7ba2      	ldrb	r2, [r4, #14]
 8003ce2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cea:	4288      	cmp	r0, r1
 8003cec:	f47f af08 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003cf0:	f894 c011 	ldrb.w	ip, [r4, #17]
 8003cf4:	f894 e010 	ldrb.w	lr, [r4, #16]
 8003cf8:	ea4e 200c 	orr.w	r0, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d00:	4290      	cmp	r0, r2
 8003d02:	f47f aefd 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003d06:	7ce1      	ldrb	r1, [r4, #19]
 8003d08:	7ca3      	ldrb	r3, [r4, #18]
 8003d0a:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003d0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d12:	4288      	cmp	r0, r1
 8003d14:	f47f aef4 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003d18:	7d60      	ldrb	r0, [r4, #21]
 8003d1a:	7d22      	ldrb	r2, [r4, #20]
 8003d1c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d24:	4290      	cmp	r0, r2
 8003d26:	f47f aeeb 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003d2a:	f894 c017 	ldrb.w	ip, [r4, #23]
 8003d2e:	f894 e016 	ldrb.w	lr, [r4, #22]
 8003d32:	ea4e 200c 	orr.w	r0, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d3a:	4288      	cmp	r0, r1
 8003d3c:	f47f aee0 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003d40:	7e61      	ldrb	r1, [r4, #25]
 8003d42:	7e23      	ldrb	r3, [r4, #24]
 8003d44:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d4c:	4290      	cmp	r0, r2
 8003d4e:	f47f aed7 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003d52:	7f60      	ldrb	r0, [r4, #29]
 8003d54:	7f22      	ldrb	r2, [r4, #28]
 8003d56:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003d5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d5e:	4288      	cmp	r0, r1
 8003d60:	f47f aece 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003d64:	f894 c01f 	ldrb.w	ip, [r4, #31]
 8003d68:	f894 e01e 	ldrb.w	lr, [r4, #30]
 8003d6c:	ea4e 200c 	orr.w	r0, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d74:	4290      	cmp	r0, r2
 8003d76:	f47f aec3 	bne.w	8003b00 <dir_find+0x50>
 8003d7a:	f04f 0800 	mov.w	r8, #0
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003d7e:	7820      	ldrb	r0, [r4, #0]
 8003d80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d84:	d007      	beq.n	8003d96 <dir_find+0x2e6>
 8003d86:	f1b8 0f00 	cmp.w	r8, #0
 8003d8a:	d004      	beq.n	8003d96 <dir_find+0x2e6>
 8003d8c:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
 8003d90:	2900      	cmp	r1, #0
 8003d92:	f47f aeb5 	bne.w	8003b00 <dir_find+0x50>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8003d96:	f109 39ff 	add.w	r9, r9, #4294967295
 8003d9a:	fa5f f989 	uxtb.w	r9, r9
 8003d9e:	e6b1      	b.n	8003b04 <dir_find+0x54>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003da0:	2001      	movs	r0, #1
 8003da2:	e6b5      	b.n	8003b10 <dir_find+0x60>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003da4:	2b0f      	cmp	r3, #15
 8003da6:	f43f af3d 	beq.w	8003c24 <dir_find+0x174>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003daa:	f1b9 0f00 	cmp.w	r9, #0
 8003dae:	d159      	bne.n	8003e64 <dir_find+0x3b4>
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003db0:	01d0      	lsls	r0, r2, #7
 8003db2:	f894 e001 	ldrb.w	lr, [r4, #1]
 8003db6:	ea40 0152 	orr.w	r1, r0, r2, lsr #1
 8003dba:	eb0e 0301 	add.w	r3, lr, r1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	01d0      	lsls	r0, r2, #7
 8003dc2:	f894 c002 	ldrb.w	ip, [r4, #2]
 8003dc6:	ea40 0152 	orr.w	r1, r0, r2, lsr #1
 8003dca:	eb01 0e0c 	add.w	lr, r1, ip
 8003dce:	f00e 03ff 	and.w	r3, lr, #255	; 0xff
 8003dd2:	01da      	lsls	r2, r3, #7
 8003dd4:	78e0      	ldrb	r0, [r4, #3]
 8003dd6:	ea42 0c53 	orr.w	ip, r2, r3, lsr #1
 8003dda:	eb0c 0100 	add.w	r1, ip, r0
 8003dde:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8003de2:	01da      	lsls	r2, r3, #7
 8003de4:	f894 e004 	ldrb.w	lr, [r4, #4]
 8003de8:	ea42 0c53 	orr.w	ip, r2, r3, lsr #1
 8003dec:	eb0c 000e 	add.w	r0, ip, lr
 8003df0:	f000 01ff 	and.w	r1, r0, #255	; 0xff
 8003df4:	01ca      	lsls	r2, r1, #7
 8003df6:	f894 e005 	ldrb.w	lr, [r4, #5]
 8003dfa:	ea42 0351 	orr.w	r3, r2, r1, lsr #1
 8003dfe:	eb03 0c0e 	add.w	ip, r3, lr
 8003e02:	f00c 00ff 	and.w	r0, ip, #255	; 0xff
 8003e06:	01c2      	lsls	r2, r0, #7
 8003e08:	f894 e006 	ldrb.w	lr, [r4, #6]
 8003e0c:	ea42 0150 	orr.w	r1, r2, r0, lsr #1
 8003e10:	eb01 030e 	add.w	r3, r1, lr
 8003e14:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003e18:	01c2      	lsls	r2, r0, #7
 8003e1a:	f894 c007 	ldrb.w	ip, [r4, #7]
 8003e1e:	ea42 0e50 	orr.w	lr, r2, r0, lsr #1
 8003e22:	eb0e 010c 	add.w	r1, lr, ip
 8003e26:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8003e2a:	01d8      	lsls	r0, r3, #7
 8003e2c:	7a22      	ldrb	r2, [r4, #8]
 8003e2e:	ea40 0c53 	orr.w	ip, r0, r3, lsr #1
 8003e32:	eb0c 0e02 	add.w	lr, ip, r2
 8003e36:	f00e 01ff 	and.w	r1, lr, #255	; 0xff
 8003e3a:	01c8      	lsls	r0, r1, #7
 8003e3c:	7a62      	ldrb	r2, [r4, #9]
 8003e3e:	ea40 0351 	orr.w	r3, r0, r1, lsr #1
 8003e42:	eb03 0c02 	add.w	ip, r3, r2
 8003e46:	f00c 00ff 	and.w	r0, ip, #255	; 0xff
 8003e4a:	f104 0e08 	add.w	lr, r4, #8
 8003e4e:	01c1      	lsls	r1, r0, #7
 8003e50:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8003e54:	ea41 0350 	orr.w	r3, r1, r0, lsr #1
 8003e58:	eb03 0c02 	add.w	ip, r3, r2
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003e5c:	f00c 0eff 	and.w	lr, ip, #255	; 0xff
 8003e60:	45f3      	cmp	fp, lr
 8003e62:	d06a      	beq.n	8003f3a <dir_find+0x48a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 8003e64:	69ab      	ldr	r3, [r5, #24]
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	842a      	strh	r2, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 8003e6c:	f893 c00b 	ldrb.w	ip, [r3, #11]
 8003e70:	f01c 0f01 	tst.w	ip, #1
 8003e74:	f47f ae44 	bne.w	8003b00 <dir_find+0x50>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003e78:	f894 e000 	ldrb.w	lr, [r4]
 8003e7c:	7819      	ldrb	r1, [r3, #0]
 8003e7e:	458e      	cmp	lr, r1
 8003e80:	f47f ae3e 	bne.w	8003b00 <dir_find+0x50>
 8003e84:	7860      	ldrb	r0, [r4, #1]
 8003e86:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003e8a:	3401      	adds	r4, #1
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4560      	cmp	r0, ip
 8003e90:	f47f ae36 	bne.w	8003b00 <dir_find+0x50>
 8003e94:	f894 e001 	ldrb.w	lr, [r4, #1]
 8003e98:	785a      	ldrb	r2, [r3, #1]
 8003e9a:	3401      	adds	r4, #1
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	4596      	cmp	lr, r2
 8003ea0:	f47f ae2e 	bne.w	8003b00 <dir_find+0x50>
 8003ea4:	7861      	ldrb	r1, [r4, #1]
 8003ea6:	7858      	ldrb	r0, [r3, #1]
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4281      	cmp	r1, r0
 8003eae:	f47f ae27 	bne.w	8003b00 <dir_find+0x50>
 8003eb2:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003eb6:	f893 e001 	ldrb.w	lr, [r3, #1]
 8003eba:	3401      	adds	r4, #1
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	45f4      	cmp	ip, lr
 8003ec0:	f47f ae1e 	bne.w	8003b00 <dir_find+0x50>
 8003ec4:	7861      	ldrb	r1, [r4, #1]
 8003ec6:	785a      	ldrb	r2, [r3, #1]
 8003ec8:	3401      	adds	r4, #1
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4291      	cmp	r1, r2
 8003ece:	f47f ae17 	bne.w	8003b00 <dir_find+0x50>
 8003ed2:	7860      	ldrb	r0, [r4, #1]
 8003ed4:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003ed8:	3401      	adds	r4, #1
 8003eda:	3301      	adds	r3, #1
 8003edc:	4560      	cmp	r0, ip
 8003ede:	f47f ae0f 	bne.w	8003b00 <dir_find+0x50>
 8003ee2:	f894 e001 	ldrb.w	lr, [r4, #1]
 8003ee6:	7859      	ldrb	r1, [r3, #1]
 8003ee8:	3401      	adds	r4, #1
 8003eea:	3301      	adds	r3, #1
 8003eec:	458e      	cmp	lr, r1
 8003eee:	f47f ae07 	bne.w	8003b00 <dir_find+0x50>
 8003ef2:	7860      	ldrb	r0, [r4, #1]
 8003ef4:	785a      	ldrb	r2, [r3, #1]
 8003ef6:	3401      	adds	r4, #1
 8003ef8:	3301      	adds	r3, #1
 8003efa:	4290      	cmp	r0, r2
 8003efc:	f47f ae00 	bne.w	8003b00 <dir_find+0x50>
 8003f00:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003f04:	f893 e001 	ldrb.w	lr, [r3, #1]
 8003f08:	3401      	adds	r4, #1
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	45f4      	cmp	ip, lr
 8003f0e:	f47f adf7 	bne.w	8003b00 <dir_find+0x50>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 8003f12:	7861      	ldrb	r1, [r4, #1]
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	4299      	cmp	r1, r3
 8003f18:	f47f adf2 	bne.w	8003b00 <dir_find+0x50>
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e5f7      	b.n	8003b10 <dir_find+0x60>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8003f20:	4591      	cmp	r9, r2
 8003f22:	f47f aded 	bne.w	8003b00 <dir_find+0x50>
 8003f26:	f104 030d 	add.w	r3, r4, #13
 8003f2a:	e68d      	b.n	8003c48 <dir_find+0x198>
 8003f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f30:	46c1      	mov	r9, r8
 8003f32:	46a8      	mov	r8, r5
 8003f34:	e656      	b.n	8003be4 <dir_find+0x134>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f36:	2004      	movs	r0, #4
 8003f38:	e5ea      	b.n	8003b10 <dir_find+0x60>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003f3a:	4648      	mov	r0, r9
 8003f3c:	e5e8      	b.n	8003b10 <dir_find+0x60>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003f3e:	f7fe f8af 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f42:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003f44:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f46:	f43f addb 	beq.w	8003b00 <dir_find+0x50>
 8003f4a:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8003f4e:	f7fe f8a7 	bl	80020a0 <ff_wtoupper>
 8003f52:	4580      	cmp	r8, r0
 8003f54:	f47f add4 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003f58:	f894 c006 	ldrb.w	ip, [r4, #6]
 8003f5c:	7963      	ldrb	r3, [r4, #5]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f5e:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003f60:	ea43 200c 	orr.w	r0, r3, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
 8003f64:	f1b8 0f00 	cmp.w	r8, #0
 8003f68:	f43f aea0 	beq.w	8003cac <dir_find+0x1fc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003f6c:	f7fe f898 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f70:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003f72:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f74:	f43f adc4 	beq.w	8003b00 <dir_find+0x50>
 8003f78:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8003f7c:	f7fe f890 	bl	80020a0 <ff_wtoupper>
 8003f80:	4580      	cmp	r8, r0
 8003f82:	f47f adbd 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003f86:	7a20      	ldrb	r0, [r4, #8]
 8003f88:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f8c:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003f8e:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 8003f92:	f1b8 0f00 	cmp.w	r8, #0
 8003f96:	f43f ae94 	beq.w	8003cc2 <dir_find+0x212>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003f9a:	f7fe f881 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003f9e:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003fa0:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003fa2:	f43f adad 	beq.w	8003b00 <dir_find+0x50>
 8003fa6:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8003faa:	f7fe f879 	bl	80020a0 <ff_wtoupper>
 8003fae:	4580      	cmp	r8, r0
 8003fb0:	f47f ada6 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003fb4:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8003fb8:	7a63      	ldrb	r3, [r4, #9]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003fba:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003fbc:	ea43 200c 	orr.w	r0, r3, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
 8003fc0:	f1b8 0f00 	cmp.w	r8, #0
 8003fc4:	f43f ae86 	beq.w	8003cd4 <dir_find+0x224>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003fc8:	f7fe f86a 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003fcc:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003fce:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003fd0:	f43f ad96 	beq.w	8003b00 <dir_find+0x50>
 8003fd4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8003fd8:	f7fe f862 	bl	80020a0 <ff_wtoupper>
 8003fdc:	4580      	cmp	r8, r0
 8003fde:	f47f ad8f 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003fe2:	7be0      	ldrb	r0, [r4, #15]
 8003fe4:	f894 e00e 	ldrb.w	lr, [r4, #14]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003fe8:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003fea:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 8003fee:	f1b8 0f00 	cmp.w	r8, #0
 8003ff2:	f43f ae78 	beq.w	8003ce6 <dir_find+0x236>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003ff6:	f7fe f853 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003ffa:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003ffc:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003ffe:	f43f ad7f 	beq.w	8003b00 <dir_find+0x50>
 8004002:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8004006:	f7fe f84b 	bl	80020a0 <ff_wtoupper>
 800400a:	4580      	cmp	r8, r0
 800400c:	f47f ad78 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004010:	f894 c011 	ldrb.w	ip, [r4, #17]
 8004014:	7c23      	ldrb	r3, [r4, #16]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004016:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004018:	ea43 200c 	orr.w	r0, r3, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
 800401c:	f1b8 0f00 	cmp.w	r8, #0
 8004020:	f43f ae6c 	beq.w	8003cfc <dir_find+0x24c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004024:	f7fe f83c 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004028:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800402a:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800402c:	f43f ad68 	beq.w	8003b00 <dir_find+0x50>
 8004030:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8004034:	f7fe f834 	bl	80020a0 <ff_wtoupper>
 8004038:	4580      	cmp	r8, r0
 800403a:	f47f ad61 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 800403e:	7ce0      	ldrb	r0, [r4, #19]
 8004040:	f894 e012 	ldrb.w	lr, [r4, #18]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004044:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004046:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 800404a:	f1b8 0f00 	cmp.w	r8, #0
 800404e:	f43f ae5e 	beq.w	8003d0e <dir_find+0x25e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004052:	f7fe f825 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004056:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004058:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800405a:	f43f ad51 	beq.w	8003b00 <dir_find+0x50>
 800405e:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8004062:	f7fe f81d 	bl	80020a0 <ff_wtoupper>
 8004066:	4580      	cmp	r8, r0
 8004068:	f47f ad4a 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 800406c:	f894 c015 	ldrb.w	ip, [r4, #21]
 8004070:	7d23      	ldrb	r3, [r4, #20]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004072:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004074:	ea43 200c 	orr.w	r0, r3, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
 8004078:	f1b8 0f00 	cmp.w	r8, #0
 800407c:	f43f ae50 	beq.w	8003d20 <dir_find+0x270>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004080:	f7fe f80e 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004084:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004086:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004088:	f43f ad3a 	beq.w	8003b00 <dir_find+0x50>
 800408c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8004090:	f7fe f806 	bl	80020a0 <ff_wtoupper>
 8004094:	4580      	cmp	r8, r0
 8004096:	f47f ad33 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 800409a:	7de0      	ldrb	r0, [r4, #23]
 800409c:	f894 e016 	ldrb.w	lr, [r4, #22]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040a0:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 80040a2:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 80040a6:	f1b8 0f00 	cmp.w	r8, #0
 80040aa:	f43f ae44 	beq.w	8003d36 <dir_find+0x286>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80040ae:	f7fd fff7 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040b2:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80040b4:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040b6:	f43f ad23 	beq.w	8003b00 <dir_find+0x50>
 80040ba:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 80040be:	f7fd ffef 	bl	80020a0 <ff_wtoupper>
 80040c2:	4580      	cmp	r8, r0
 80040c4:	f47f ad1c 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 80040c8:	f894 c019 	ldrb.w	ip, [r4, #25]
 80040cc:	7e23      	ldrb	r3, [r4, #24]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040ce:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 80040d0:	ea43 200c 	orr.w	r0, r3, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
 80040d4:	f1b8 0f00 	cmp.w	r8, #0
 80040d8:	f43f ae36 	beq.w	8003d48 <dir_find+0x298>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80040dc:	f7fd ffe0 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040e0:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80040e2:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040e4:	f43f ad0c 	beq.w	8003b00 <dir_find+0x50>
 80040e8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 80040ec:	f7fd ffd8 	bl	80020a0 <ff_wtoupper>
 80040f0:	4580      	cmp	r8, r0
 80040f2:	f47f ad05 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 80040f6:	7f60      	ldrb	r0, [r4, #29]
 80040f8:	f894 e01c 	ldrb.w	lr, [r4, #28]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80040fc:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 80040fe:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
 8004102:	f1b8 0f00 	cmp.w	r8, #0
 8004106:	f43f ae28 	beq.w	8003d5a <dir_find+0x2aa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800410a:	f7fd ffc9 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800410e:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004110:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004112:	f43f acf5 	beq.w	8003b00 <dir_find+0x50>
 8004116:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 800411a:	f7fd ffc1 	bl	80020a0 <ff_wtoupper>
 800411e:	4580      	cmp	r8, r0
 8004120:	f47f acee 	bne.w	8003b00 <dir_find+0x50>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004124:	f894 c01f 	ldrb.w	ip, [r4, #31]
 8004128:	7fa3      	ldrb	r3, [r4, #30]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800412a:	3701      	adds	r7, #1


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 800412c:	ea43 200c 	orr.w	r0, r3, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
 8004130:	f1b8 0f00 	cmp.w	r8, #0
 8004134:	f43f ae1c 	beq.w	8003d70 <dir_find+0x2c0>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004138:	f7fd ffb2 	bl	80020a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800413c:	2fff      	cmp	r7, #255	; 0xff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800413e:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004140:	f43f acde 	beq.w	8003b00 <dir_find+0x50>
 8004144:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 8004148:	f7fd ffaa 	bl	80020a0 <ff_wtoupper>
 800414c:	4580      	cmp	r8, r0
 800414e:	f47f acd7 	bne.w	8003b00 <dir_find+0x50>
 8004152:	3701      	adds	r7, #1
 8004154:	e613      	b.n	8003d7e <dir_find+0x2ce>
 8004156:	bf00      	nop

08004158 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 800415c:	780a      	ldrb	r2, [r1, #0]
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 800415e:	b087      	sub	sp, #28
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8004160:	2a2f      	cmp	r2, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8004162:	460b      	mov	r3, r1
 8004164:	4607      	mov	r7, r0
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8004166:	f000 81e9 	beq.w	800453c <follow_path+0x3e4>
 800416a:	2a5c      	cmp	r2, #92	; 0x5c
 800416c:	f000 81e6 	beq.w	800453c <follow_path+0x3e4>
		path++;
	dj->sclust = 0;						/* Start from the root dir */
 8004170:	2400      	movs	r4, #0
 8004172:	60bc      	str	r4, [r7, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	2a1f      	cmp	r2, #31
 8004178:	f240 81eb 	bls.w	8004552 <follow_path+0x3fa>
 800417c:	f107 0018 	add.w	r0, r7, #24
 8004180:	9005      	str	r0, [sp, #20]
 8004182:	46b8      	mov	r8, r7
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004184:	7818      	ldrb	r0, [r3, #0]
		if (cc != EOF) cc = res;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
}
 8004186:	461d      	mov	r5, r3
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004188:	3301      	adds	r3, #1
 800418a:	282f      	cmp	r0, #47	; 0x2f
 800418c:	d0fa      	beq.n	8004184 <follow_path+0x2c>
 800418e:	285c      	cmp	r0, #92	; 0x5c
 8004190:	d0f8      	beq.n	8004184 <follow_path+0x2c>
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004192:	281f      	cmp	r0, #31
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
 8004194:	f8d8 701c 	ldr.w	r7, [r8, #28]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004198:	f240 8196 	bls.w	80044c8 <follow_path+0x370>
 800419c:	282f      	cmp	r0, #47	; 0x2f
 800419e:	d041      	beq.n	8004224 <follow_path+0xcc>
 80041a0:	46b9      	mov	r9, r7
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
 80041a2:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
 80041a4:	2601      	movs	r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
		if (di >= _MAX_LFN)				/* Reject too long name */
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 80041a6:	b2c3      	uxtb	r3, r0
 80041a8:	f103 0c7f 	add.w	ip, r3, #127	; 0x7f
 80041ac:	fa5f f18c 	uxtb.w	r1, ip
 80041b0:	291e      	cmp	r1, #30
 80041b2:	d925      	bls.n	8004200 <follow_path+0xa8>
 80041b4:	3320      	adds	r3, #32
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b1c      	cmp	r3, #28
 80041ba:	d921      	bls.n	8004200 <follow_path+0xa8>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80041bc:	2101      	movs	r1, #1
 80041be:	f7fd fe59 	bl	8001e74 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80041c2:	b1c8      	cbz	r0, 80041f8 <follow_path+0xa0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 80041c4:	287f      	cmp	r0, #127	; 0x7f
 80041c6:	d809      	bhi.n	80041dc <follow_path+0x84>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80041c8:	2822      	cmp	r0, #34	; 0x22
 80041ca:	d015      	beq.n	80041f8 <follow_path+0xa0>
 80041cc:	4a8e      	ldr	r2, [pc, #568]	; (8004408 <follow_path+0x2b0>)
 80041ce:	e001      	b.n	80041d4 <follow_path+0x7c>
 80041d0:	4298      	cmp	r0, r3
 80041d2:	d011      	beq.n	80041f8 <follow_path+0xa0>
 80041d4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f9      	bne.n	80041d0 <follow_path+0x78>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
 80041dc:	f829 0b02 	strh.w	r0, [r9], #2
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
 80041e0:	5da8      	ldrb	r0, [r5, r6]
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
 80041e2:	3401      	adds	r4, #1
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
 80041e4:	3601      	adds	r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80041e6:	281f      	cmp	r0, #31
 80041e8:	f240 8170 	bls.w	80044cc <follow_path+0x374>
 80041ec:	282f      	cmp	r0, #47	; 0x2f
 80041ee:	d01b      	beq.n	8004228 <follow_path+0xd0>
 80041f0:	285c      	cmp	r0, #92	; 0x5c
 80041f2:	d019      	beq.n	8004228 <follow_path+0xd0>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80041f4:	2cff      	cmp	r4, #255	; 0xff
 80041f6:	d1d6      	bne.n	80041a6 <follow_path+0x4e>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80041f8:	2006      	movs	r0, #6
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
 80041fa:	b007      	add	sp, #28
 80041fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (di >= _MAX_LFN)				/* Reject too long name */
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8004200:	5dab      	ldrb	r3, [r5, r6]
			if (!IsDBCS2(b))
 8004202:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8004206:	b2ca      	uxtb	r2, r1
 8004208:	2a3e      	cmp	r2, #62	; 0x3e
 800420a:	d904      	bls.n	8004216 <follow_path+0xbe>
 800420c:	f083 0c80 	eor.w	ip, r3, #128	; 0x80
 8004210:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
 8004214:	d8f0      	bhi.n	80041f8 <follow_path+0xa0>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
 8004216:	0200      	lsls	r0, r0, #8
 8004218:	eb00 0e03 	add.w	lr, r0, r3
		if (di >= _MAX_LFN)				/* Reject too long name */
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800421c:	3601      	adds	r6, #1
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
 800421e:	fa1f f08e 	uxth.w	r0, lr
 8004222:	e7cb      	b.n	80041bc <follow_path+0x64>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
 8004224:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
 8004226:	2601      	movs	r6, #1
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004228:	19ab      	adds	r3, r5, r6
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800422a:	2600      	movs	r6, #0
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800422c:	2c00      	cmp	r4, #0
 800422e:	d0e3      	beq.n	80041f8 <follow_path+0xa0>
		w = lfn[di-1];
 8004230:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8004234:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 8004238:	1e61      	subs	r1, r4, #1
		if (w != ' ' && w != '.') break;
 800423a:	2820      	cmp	r0, #32
 800423c:	f001 0103 	and.w	r1, r1, #3
 8004240:	d001      	beq.n	8004246 <follow_path+0xee>
 8004242:	282e      	cmp	r0, #46	; 0x2e
 8004244:	d13f      	bne.n	80042c6 <follow_path+0x16e>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004246:	3c01      	subs	r4, #1
 8004248:	d0d6      	beq.n	80041f8 <follow_path+0xa0>
 800424a:	b1c9      	cbz	r1, 8004280 <follow_path+0x128>
 800424c:	2901      	cmp	r1, #1
 800424e:	d00f      	beq.n	8004270 <follow_path+0x118>
 8004250:	2902      	cmp	r1, #2
 8004252:	d006      	beq.n	8004262 <follow_path+0x10a>
		w = lfn[di-1];
 8004254:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8004258:	2920      	cmp	r1, #32
 800425a:	d001      	beq.n	8004260 <follow_path+0x108>
 800425c:	292e      	cmp	r1, #46	; 0x2e
 800425e:	d132      	bne.n	80042c6 <follow_path+0x16e>
		di--;
 8004260:	3c01      	subs	r4, #1
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8004262:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8004266:	2920      	cmp	r1, #32
 8004268:	d001      	beq.n	800426e <follow_path+0x116>
 800426a:	292e      	cmp	r1, #46	; 0x2e
 800426c:	d12b      	bne.n	80042c6 <follow_path+0x16e>
		di--;
 800426e:	3c01      	subs	r4, #1
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8004270:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8004274:	2920      	cmp	r1, #32
 8004276:	d001      	beq.n	800427c <follow_path+0x124>
 8004278:	292e      	cmp	r1, #46	; 0x2e
 800427a:	d124      	bne.n	80042c6 <follow_path+0x16e>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800427c:	3c01      	subs	r4, #1
 800427e:	d0bb      	beq.n	80041f8 <follow_path+0xa0>
		w = lfn[di-1];
 8004280:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8004284:	2920      	cmp	r1, #32
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8004286:	4610      	mov	r0, r2
		if (w != ' ' && w != '.') break;
 8004288:	d001      	beq.n	800428e <follow_path+0x136>
 800428a:	292e      	cmp	r1, #46	; 0x2e
 800428c:	d11b      	bne.n	80042c6 <follow_path+0x16e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 800428e:	f830 5d02 	ldrh.w	r5, [r0, #-2]!
		if (w != ' ' && w != '.') break;
		di--;
 8004292:	3c01      	subs	r4, #1
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
 8004294:	2d20      	cmp	r5, #32
		di--;
 8004296:	4621      	mov	r1, r4
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
 8004298:	d001      	beq.n	800429e <follow_path+0x146>
 800429a:	2d2e      	cmp	r5, #46	; 0x2e
 800429c:	d113      	bne.n	80042c6 <follow_path+0x16e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 800429e:	f830 0c02 	ldrh.w	r0, [r0, #-2]
 80042a2:	1f15      	subs	r5, r2, #4
		if (w != ' ' && w != '.') break;
		di--;
 80042a4:	1e4c      	subs	r4, r1, #1
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
 80042a6:	2820      	cmp	r0, #32
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 80042a8:	f1a2 0206 	sub.w	r2, r2, #6
		if (w != ' ' && w != '.') break;
 80042ac:	d001      	beq.n	80042b2 <follow_path+0x15a>
 80042ae:	282e      	cmp	r0, #46	; 0x2e
 80042b0:	d109      	bne.n	80042c6 <follow_path+0x16e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 80042b2:	f835 0c02 	ldrh.w	r0, [r5, #-2]
		if (w != ' ' && w != '.') break;
		di--;
 80042b6:	1e8c      	subs	r4, r1, #2
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
 80042b8:	2820      	cmp	r0, #32
 80042ba:	d001      	beq.n	80042c0 <follow_path+0x168>
 80042bc:	282e      	cmp	r0, #46	; 0x2e
 80042be:	d102      	bne.n	80042c6 <follow_path+0x16e>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80042c0:	1ecc      	subs	r4, r1, #3
 80042c2:	d1dd      	bne.n	8004280 <follow_path+0x128>
 80042c4:	e798      	b.n	80041f8 <follow_path+0xa0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 80042c6:	f8d8 b018 	ldr.w	fp, [r8, #24]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80042ca:	2120      	movs	r1, #32
 80042cc:	465a      	mov	r2, fp
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
 80042ce:	2500      	movs	r5, #0
 80042d0:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80042d4:	f802 1b01 	strb.w	r1, [r2], #1
 80042d8:	1d90      	adds	r0, r2, #6
 80042da:	9001      	str	r0, [sp, #4]
 80042dc:	f102 0a02 	add.w	sl, r2, #2
 80042e0:	1c55      	adds	r5, r2, #1
 80042e2:	1dd0      	adds	r0, r2, #7
 80042e4:	9004      	str	r0, [sp, #16]
 80042e6:	f88b 1001 	strb.w	r1, [fp, #1]
 80042ea:	7051      	strb	r1, [r2, #1]
 80042ec:	7069      	strb	r1, [r5, #1]
 80042ee:	f88a 1001 	strb.w	r1, [sl, #1]
 80042f2:	f88a 1002 	strb.w	r1, [sl, #2]
 80042f6:	f88a 1003 	strb.w	r1, [sl, #3]
 80042fa:	f88a 1004 	strb.w	r1, [sl, #4]
 80042fe:	9801      	ldr	r0, [sp, #4]
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
 8004300:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8004304:	7041      	strb	r1, [r0, #1]
 8004306:	9804      	ldr	r0, [sp, #16]
 8004308:	463a      	mov	r2, r7
 800430a:	2500      	movs	r5, #0
 800430c:	7041      	strb	r1, [r0, #1]
 800430e:	7081      	strb	r1, [r0, #2]

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004310:	f832 0b02 	ldrh.w	r0, [r2], #2
 8004314:	2820      	cmp	r0, #32
 8004316:	d001      	beq.n	800431c <follow_path+0x1c4>
 8004318:	282e      	cmp	r0, #46	; 0x2e
 800431a:	d101      	bne.n	8004320 <follow_path+0x1c8>
 800431c:	3501      	adds	r5, #1
 800431e:	e7f7      	b.n	8004310 <follow_path+0x1b8>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004320:	b10d      	cbz	r5, 8004326 <follow_path+0x1ce>
 8004322:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004326:	f83b 9d02 	ldrh.w	r9, [fp, #-2]!
 800432a:	1e62      	subs	r2, r4, #1
 800432c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004330:	f002 0103 	and.w	r1, r2, #3
 8004334:	d037      	beq.n	80043a6 <follow_path+0x24e>
 8004336:	4614      	mov	r4, r2
 8004338:	2a00      	cmp	r2, #0
 800433a:	d034      	beq.n	80043a6 <follow_path+0x24e>
 800433c:	b1a9      	cbz	r1, 800436a <follow_path+0x212>
 800433e:	2901      	cmp	r1, #1
 8004340:	d00d      	beq.n	800435e <follow_path+0x206>
 8004342:	2902      	cmp	r1, #2
 8004344:	d005      	beq.n	8004352 <follow_path+0x1fa>
 8004346:	f83b ad02 	ldrh.w	sl, [fp, #-2]!
 800434a:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
 800434e:	d02a      	beq.n	80043a6 <follow_path+0x24e>
 8004350:	1e54      	subs	r4, r2, #1
 8004352:	f83b 9d02 	ldrh.w	r9, [fp, #-2]!
 8004356:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800435a:	d024      	beq.n	80043a6 <follow_path+0x24e>
 800435c:	3c01      	subs	r4, #1
 800435e:	f83b 2d02 	ldrh.w	r2, [fp, #-2]!
 8004362:	2a2e      	cmp	r2, #46	; 0x2e
 8004364:	d01f      	beq.n	80043a6 <follow_path+0x24e>
 8004366:	3c01      	subs	r4, #1
 8004368:	d01d      	beq.n	80043a6 <follow_path+0x24e>
 800436a:	465a      	mov	r2, fp
 800436c:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8004370:	f1ab 0e06 	sub.w	lr, fp, #6
 8004374:	292e      	cmp	r1, #46	; 0x2e
 8004376:	f1ab 0b08 	sub.w	fp, fp, #8
 800437a:	d014      	beq.n	80043a6 <follow_path+0x24e>
 800437c:	f832 cd02 	ldrh.w	ip, [r2, #-2]!
 8004380:	3c01      	subs	r4, #1
 8004382:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8004386:	4621      	mov	r1, r4
 8004388:	d00d      	beq.n	80043a6 <follow_path+0x24e>
 800438a:	f832 cc02 	ldrh.w	ip, [r2, #-2]
 800438e:	3c01      	subs	r4, #1
 8004390:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8004394:	d007      	beq.n	80043a6 <follow_path+0x24e>
 8004396:	f83e ec02 	ldrh.w	lr, [lr, #-2]
 800439a:	1e8c      	subs	r4, r1, #2
 800439c:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
 80043a0:	d001      	beq.n	80043a6 <follow_path+0x24e>
 80043a2:	1ecc      	subs	r4, r1, #3
 80043a4:	d1e1      	bne.n	800436a <follow_path+0x212>
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80043a6:	f04f 0900 	mov.w	r9, #0
 80043aa:	f04f 0a08 	mov.w	sl, #8
 80043ae:	46cb      	mov	fp, r9
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on end of the LFN */
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d036      	beq.n	8004422 <follow_path+0x2ca>
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 80043b4:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80043b6:	2820      	cmp	r0, #32
 80043b8:	d021      	beq.n	80043fe <follow_path+0x2a6>
 80043ba:	282e      	cmp	r0, #46	; 0x2e
 80043bc:	d01d      	beq.n	80043fa <follow_path+0x2a2>
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80043be:	45d1      	cmp	r9, sl
 80043c0:	d226      	bcs.n	8004410 <follow_path+0x2b8>
 80043c2:	42ac      	cmp	r4, r5
 80043c4:	d024      	beq.n	8004410 <follow_path+0x2b8>
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
 80043c6:	287f      	cmp	r0, #127	; 0x7f
 80043c8:	f200 809a 	bhi.w	8004500 <follow_path+0x3a8>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80043cc:	282b      	cmp	r0, #43	; 0x2b
 80043ce:	f000 8086 	beq.w	80044de <follow_path+0x386>
 80043d2:	490e      	ldr	r1, [pc, #56]	; (800440c <follow_path+0x2b4>)
 80043d4:	e002      	b.n	80043dc <follow_path+0x284>
 80043d6:	4290      	cmp	r0, r2
 80043d8:	f000 8081 	beq.w	80044de <follow_path+0x386>
 80043dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80043e0:	2a00      	cmp	r2, #0
 80043e2:	d1f8      	bne.n	80043d6 <follow_path+0x27e>
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80043e4:	f1a0 0e41 	sub.w	lr, r0, #65	; 0x41
 80043e8:	fa1f fc8e 	uxth.w	ip, lr
 80043ec:	f1bc 0f19 	cmp.w	ip, #25
 80043f0:	f200 80a6 	bhi.w	8004540 <follow_path+0x3e8>
					b |= 2;
 80043f4:	f04b 0b02 	orr.w	fp, fp, #2
 80043f8:	e074      	b.n	80044e4 <follow_path+0x38c>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80043fa:	42ac      	cmp	r4, r5
 80043fc:	d0df      	beq.n	80043be <follow_path+0x266>
			cf |= NS_LOSS | NS_LFN; continue;
 80043fe:	f046 0603 	orr.w	r6, r6, #3

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004402:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 8004406:	e7d3      	b.n	80043b0 <follow_path+0x258>
 8004408:	0801b2fc 	.word	0x0801b2fc
 800440c:	0801b308 	.word	0x0801b308
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
 8004410:	f1ba 0f0b 	cmp.w	sl, #11
 8004414:	f000 80a5 	beq.w	8004562 <follow_path+0x40a>
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004418:	42ac      	cmp	r4, r5
 800441a:	d049      	beq.n	80044b0 <follow_path+0x358>
 800441c:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
 8004420:	d246      	bcs.n	80044b0 <follow_path+0x358>
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8004422:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004426:	7810      	ldrb	r0, [r2, #0]
 8004428:	28e5      	cmp	r0, #229	; 0xe5
 800442a:	d064      	beq.n	80044f6 <follow_path+0x39e>

	if (ni == 8) b <<= 2;
 800442c:	f1ba 0f08 	cmp.w	sl, #8
 8004430:	bf04      	itt	eq
 8004432:	ea4f 0b8b 	moveq.w	fp, fp, lsl #2
 8004436:	fa5f fb8b 	uxtbeq.w	fp, fp
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800443a:	f00b 010c 	and.w	r1, fp, #12
 800443e:	290c      	cmp	r1, #12
 8004440:	d047      	beq.n	80044d2 <follow_path+0x37a>
 8004442:	f00b 0c03 	and.w	ip, fp, #3
 8004446:	f1bc 0f03 	cmp.w	ip, #3
 800444a:	d042      	beq.n	80044d2 <follow_path+0x37a>
		cf |= NS_LFN;
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 800444c:	f016 0f02 	tst.w	r6, #2
 8004450:	d10a      	bne.n	8004468 <follow_path+0x310>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004452:	f00b 0b03 	and.w	fp, fp, #3
 8004456:	f1bb 0f01 	cmp.w	fp, #1
 800445a:	bf08      	it	eq
 800445c:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004460:	2904      	cmp	r1, #4
 8004462:	bf08      	it	eq
 8004464:	f046 0608 	orreq.w	r6, r6, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8004468:	72d6      	strb	r6, [r2, #11]

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
 800446a:	4640      	mov	r0, r8
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	f7ff fb1f 	bl	8003ab0 <dir_find>
			ns = *(dj->fn+NS);
 8004472:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004476:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004478:	9b03      	ldr	r3, [sp, #12]
 800447a:	2800      	cmp	r0, #0
 800447c:	d174      	bne.n	8004568 <follow_path+0x410>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 800447e:	f012 0f04 	tst.w	r2, #4
 8004482:	f47f aeba 	bne.w	80041fa <follow_path+0xa2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8004486:	f8d8 2014 	ldr.w	r2, [r8, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 800448a:	7ad0      	ldrb	r0, [r2, #11]
 800448c:	f010 0f10 	tst.w	r0, #16
 8004490:	d065      	beq.n	800455e <follow_path+0x406>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
 8004492:	f892 e015 	ldrb.w	lr, [r2, #21]
 8004496:	7d11      	ldrb	r1, [r2, #20]
 8004498:	f892 c01b 	ldrb.w	ip, [r2, #27]
 800449c:	7e96      	ldrb	r6, [r2, #26]
 800449e:	ea41 250e 	orr.w	r5, r1, lr, lsl #8
 80044a2:	ea46 270c 	orr.w	r7, r6, ip, lsl #8
 80044a6:	ea47 4405 	orr.w	r4, r7, r5, lsl #16
 80044aa:	f8c8 4008 	str.w	r4, [r8, #8]
		}
 80044ae:	e669      	b.n	8004184 <follow_path+0x2c>
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
 80044b0:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 80044b4:	4625      	mov	r5, r4
 80044b6:	fa5f fb8e 	uxtb.w	fp, lr
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80044ba:	f04f 0a0b 	mov.w	sl, #11
 80044be:	f04f 0908 	mov.w	r9, #8

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80044c2:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 80044c6:	e773      	b.n	80043b0 <follow_path+0x258>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
 80044c8:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
 80044ca:	2601      	movs	r6, #1
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80044cc:	19ab      	adds	r3, r5, r6
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80044ce:	2604      	movs	r6, #4
 80044d0:	e6ac      	b.n	800422c <follow_path+0xd4>

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
		cf |= NS_LFN;
 80044d2:	f046 0602 	orr.w	r6, r6, #2
 80044d6:	e7b9      	b.n	800444c <follow_path+0x2f4>
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 80044d8:	2800      	cmp	r0, #0
 80044da:	f47f af77 	bne.w	80043cc <follow_path+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80044de:	f046 0603 	orr.w	r6, r6, #3
 80044e2:	205f      	movs	r0, #95	; 0x5f
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 80044e4:	9905      	ldr	r1, [sp, #20]
 80044e6:	680a      	ldr	r2, [r1, #0]
 80044e8:	f802 0009 	strb.w	r0, [r2, r9]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80044ec:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 80044f0:	f109 0901 	add.w	r9, r9, #1
 80044f4:	e75c      	b.n	80043b0 <follow_path+0x258>
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 80044f6:	2105      	movs	r1, #5
 80044f8:	7011      	strb	r1, [r2, #0]
 80044fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80044fe:	e795      	b.n	800442c <follow_path+0x2d4>
		if (w >= 0x80) {				/* Non ASCII char */
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8004500:	9303      	str	r3, [sp, #12]
 8004502:	f7fd fdcd 	bl	80020a0 <ff_wtoupper>
 8004506:	2100      	movs	r1, #0
 8004508:	f7fd fcb4 	bl	8001e74 <ff_convert>
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
		}

		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
 800450c:	28ff      	cmp	r0, #255	; 0xff
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800450e:	f046 0602 	orr.w	r6, r6, #2
		}

		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	d9e0      	bls.n	80044d8 <follow_path+0x380>
			if (i >= ni - 1) {
 8004516:	f10a 32ff 	add.w	r2, sl, #4294967295
 800451a:	4591      	cmp	r9, r2
 800451c:	d306      	bcc.n	800452c <follow_path+0x3d4>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800451e:	f046 0603 	orr.w	r6, r6, #3
 8004522:	b2f6      	uxtb	r6, r6
 8004524:	46d1      	mov	r9, sl

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004526:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 800452a:	e741      	b.n	80043b0 <follow_path+0x258>

		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
 800452c:	9905      	ldr	r1, [sp, #20]
 800452e:	680a      	ldr	r2, [r1, #0]
 8004530:	0a01      	lsrs	r1, r0, #8
 8004532:	f802 1009 	strb.w	r1, [r2, r9]
 8004536:	f109 0901 	add.w	r9, r9, #1
 800453a:	e7d3      	b.n	80044e4 <follow_path+0x38c>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
 800453c:	3301      	adds	r3, #1
 800453e:	e617      	b.n	8004170 <follow_path+0x18>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004540:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8004544:	b28a      	uxth	r2, r1
 8004546:	2a19      	cmp	r2, #25
 8004548:	d8cc      	bhi.n	80044e4 <follow_path+0x38c>
						b |= 1; w -= 0x20;
 800454a:	3820      	subs	r0, #32
 800454c:	f04b 0b01 	orr.w	fp, fp, #1
 8004550:	e7c8      	b.n	80044e4 <follow_path+0x38c>
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
 8004552:	4638      	mov	r0, r7
 8004554:	4621      	mov	r1, r4
 8004556:	f7fe fcd7 	bl	8002f08 <dir_sdi>
		dj->dir = 0;
 800455a:	617c      	str	r4, [r7, #20]
 800455c:	e64d      	b.n	80041fa <follow_path+0xa2>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
 800455e:	2005      	movs	r0, #5
 8004560:	e64b      	b.n	80041fa <follow_path+0xa2>
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
 8004562:	f046 0603 	orr.w	r6, r6, #3
 8004566:	e75c      	b.n	8004422 <follow_path+0x2ca>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 8004568:	2804      	cmp	r0, #4
 800456a:	f47f ae46 	bne.w	80041fa <follow_path+0xa2>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 800456e:	f002 0e04 	and.w	lr, r2, #4
 8004572:	f1be 0f00 	cmp.w	lr, #0
 8004576:	bf08      	it	eq
 8004578:	2005      	moveq	r0, #5
 800457a:	e63e      	b.n	80041fa <follow_path+0xa2>

0800457c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 8004580:	8c01      	ldrh	r1, [r0, #32]
{
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
 8004582:	f8b0 b006 	ldrh.w	fp, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 8004586:	f64f 73ff 	movw	r3, #65535	; 0xffff
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 800458a:	b083      	sub	sp, #12
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 800458c:	4299      	cmp	r1, r3
 800458e:	bf08      	it	eq
 8004590:	4659      	moveq	r1, fp
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 8004592:	4605      	mov	r5, r0
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
 8004594:	f7fe fcb8 	bl	8002f08 <dir_sdi>
	if (res == FR_OK) {
 8004598:	4682      	mov	sl, r0
 800459a:	2800      	cmp	r0, #0
 800459c:	f040 80a9 	bne.w	80046f2 <dir_remove+0x176>
		do {
			res = move_window(dj->fs, dj->sect);
 80045a0:	682c      	ldr	r4, [r5, #0]
 80045a2:	f8d5 8010 	ldr.w	r8, [r5, #16]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 80045a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 80045a8:	45b0      	cmp	r8, r6
 80045aa:	d005      	beq.n	80045b8 <dir_remove+0x3c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80045ac:	7920      	ldrb	r0, [r4, #4]
 80045ae:	b9e0      	cbnz	r0, 80045ea <dir_remove+0x6e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 80045b0:	f1b8 0f00 	cmp.w	r8, #0
 80045b4:	f040 8090 	bne.w	80046d8 <dir_remove+0x15c>
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
	if (res == FR_OK) {
		do {
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
			*dj->dir = DDE;			/* Mark the entry "deleted" */
 80045b8:	696a      	ldr	r2, [r5, #20]
 80045ba:	f06f 0c1a 	mvn.w	ip, #26
 80045be:	f882 c000 	strb.w	ip, [r2]
			dj->fs->wflag = 1;
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	7119      	strb	r1, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 80045c8:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 80045cc:	45de      	cmp	lr, fp
 80045ce:	f080 8090 	bcs.w	80046f2 <dir_remove+0x176>
			res = dir_next(dj, 0);		/* Next entry */
 80045d2:	4628      	mov	r0, r5
 80045d4:	2100      	movs	r1, #0
 80045d6:	f7ff f8a5 	bl	8003724 <dir_next>
		} while (res == FR_OK);
 80045da:	2800      	cmp	r0, #0
 80045dc:	d0e0      	beq.n	80045a0 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80045de:	2804      	cmp	r0, #4
 80045e0:	bf14      	ite	ne
 80045e2:	4682      	movne	sl, r0
 80045e4:	f04f 0a02 	moveq.w	sl, #2
 80045e8:	e083      	b.n	80046f2 <dir_remove+0x176>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80045ea:	f104 0930 	add.w	r9, r4, #48	; 0x30
 80045ee:	7860      	ldrb	r0, [r4, #1]
 80045f0:	4649      	mov	r1, r9
 80045f2:	4632      	mov	r2, r6
 80045f4:	2301      	movs	r3, #1
 80045f6:	f004 fda7 	bl	8009148 <disk_write>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d177      	bne.n	80046ee <dir_remove+0x172>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80045fe:	69e3      	ldr	r3, [r4, #28]
 8004600:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8004602:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8004604:	185a      	adds	r2, r3, r1
 8004606:	4296      	cmp	r6, r2
 8004608:	d2d2      	bcs.n	80045b0 <dir_remove+0x34>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800460a:	78e7      	ldrb	r7, [r4, #3]
 800460c:	2f01      	cmp	r7, #1
 800460e:	d9cf      	bls.n	80045b0 <dir_remove+0x34>
 8004610:	f1a7 0c02 	sub.w	ip, r7, #2
 8004614:	f01c 0c03 	ands.w	ip, ip, #3
 8004618:	d06f      	beq.n	80046fa <dir_remove+0x17e>
					wsect += fs->fsize;
 800461a:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800461c:	7860      	ldrb	r0, [r4, #1]
 800461e:	2301      	movs	r3, #1
 8004620:	4649      	mov	r1, r9
 8004622:	4632      	mov	r2, r6
 8004624:	f8cd c000 	str.w	ip, [sp]
 8004628:	f004 fd8e 	bl	8009148 <disk_write>
 800462c:	f8dd c000 	ldr.w	ip, [sp]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004630:	3f01      	subs	r7, #1
 8004632:	f1bc 0f01 	cmp.w	ip, #1
 8004636:	b2ff      	uxtb	r7, r7
 8004638:	69e3      	ldr	r3, [r4, #28]
 800463a:	d05e      	beq.n	80046fa <dir_remove+0x17e>
 800463c:	f1bc 0f02 	cmp.w	ip, #2
 8004640:	d009      	beq.n	8004656 <dir_remove+0xda>
					wsect += fs->fsize;
 8004642:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004644:	7860      	ldrb	r0, [r4, #1]
 8004646:	2301      	movs	r3, #1
 8004648:	4649      	mov	r1, r9
 800464a:	4632      	mov	r2, r6
 800464c:	f004 fd7c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004650:	1e78      	subs	r0, r7, #1
 8004652:	69e3      	ldr	r3, [r4, #28]
 8004654:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
 8004656:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004658:	4649      	mov	r1, r9
 800465a:	2301      	movs	r3, #1
 800465c:	7860      	ldrb	r0, [r4, #1]
 800465e:	4632      	mov	r2, r6
 8004660:	f004 fd72 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004664:	1e79      	subs	r1, r7, #1
 8004666:	f8cd a004 	str.w	sl, [sp, #4]
 800466a:	b2cf      	uxtb	r7, r1
 800466c:	46c2      	mov	sl, r8
 800466e:	69e3      	ldr	r3, [r4, #28]
 8004670:	46a8      	mov	r8, r5
 8004672:	e01e      	b.n	80046b2 <dir_remove+0x136>
 8004674:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8004676:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8004678:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 800467a:	4632      	mov	r2, r6
 800467c:	2301      	movs	r3, #1
 800467e:	7860      	ldrb	r0, [r4, #1]
 8004680:	f004 fd62 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004684:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8004686:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8004688:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 800468a:	4632      	mov	r2, r6
 800468c:	2301      	movs	r3, #1
 800468e:	7860      	ldrb	r0, [r4, #1]
 8004690:	f004 fd5a 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004694:	3d01      	subs	r5, #1
 8004696:	69e3      	ldr	r3, [r4, #28]
 8004698:	b2ef      	uxtb	r7, r5
 800469a:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 800469c:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800469e:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80046a0:	2301      	movs	r3, #1
 80046a2:	7860      	ldrb	r0, [r4, #1]
 80046a4:	4649      	mov	r1, r9
 80046a6:	4632      	mov	r2, r6
 80046a8:	f004 fd4e 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80046ac:	1e6f      	subs	r7, r5, #1
 80046ae:	69e3      	ldr	r3, [r4, #28]
 80046b0:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 80046b2:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80046b4:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80046b6:	2301      	movs	r3, #1
 80046b8:	4649      	mov	r1, r9
 80046ba:	4632      	mov	r2, r6
 80046bc:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80046be:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80046c0:	f004 fd42 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80046c4:	2d01      	cmp	r5, #1
 80046c6:	d1d5      	bne.n	8004674 <dir_remove+0xf8>
 80046c8:	4645      	mov	r5, r8
 80046ca:	46d0      	mov	r8, sl
 80046cc:	f8dd a004 	ldr.w	sl, [sp, #4]
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 80046d0:	f1b8 0f00 	cmp.w	r8, #0
 80046d4:	f43f af70 	beq.w	80045b8 <dir_remove+0x3c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80046d8:	7860      	ldrb	r0, [r4, #1]
 80046da:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80046de:	4642      	mov	r2, r8
 80046e0:	2301      	movs	r3, #1
 80046e2:	f004 fc73 	bl	8008fcc <disk_read>
 80046e6:	b910      	cbnz	r0, 80046ee <dir_remove+0x172>
				return FR_DISK_ERR;
			fs->winsect = sector;
 80046e8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80046ec:	e764      	b.n	80045b8 <dir_remove+0x3c>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80046ee:	f04f 0a01 	mov.w	sl, #1
		}
	}
#endif

	return res;
}
 80046f2:	4650      	mov	r0, sl
 80046f4:	b003      	add	sp, #12
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	f8cd a004 	str.w	sl, [sp, #4]
 80046fe:	46c2      	mov	sl, r8
 8004700:	46a8      	mov	r8, r5
 8004702:	e7d6      	b.n	80046b2 <dir_remove+0x136>

08004704 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 8004704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
 8004708:	f04f 0bff 	mov.w	fp, #255	; 0xff
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 800470c:	4606      	mov	r6, r0
 800470e:	b083      	sub	sp, #12
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
 8004710:	46da      	mov	sl, fp
#endif

	res = FR_NO_FILE;
 8004712:	2004      	movs	r0, #4
	while (dj->sect) {
 8004714:	6935      	ldr	r5, [r6, #16]
 8004716:	2d00      	cmp	r5, #0
 8004718:	f000 81fb 	beq.w	8004b12 <dir_read+0x40e>
		res = move_window(dj->fs, dj->sect);
 800471c:	6834      	ldr	r4, [r6, #0]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 800471e:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8004722:	4545      	cmp	r5, r8
 8004724:	d00f      	beq.n	8004746 <dir_read+0x42>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8004726:	7923      	ldrb	r3, [r4, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 80fc 	bne.w	8004926 <dir_read+0x222>
 800472e:	f104 0930 	add.w	r9, r4, #48	; 0x30
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004732:	7860      	ldrb	r0, [r4, #1]
 8004734:	4649      	mov	r1, r9
 8004736:	462a      	mov	r2, r5
 8004738:	2301      	movs	r3, #1
 800473a:	f004 fc47 	bl	8008fcc <disk_read>
 800473e:	2800      	cmp	r0, #0
 8004740:	f040 8167 	bne.w	8004a12 <dir_read+0x30e>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8004744:	62e5      	str	r5, [r4, #44]	; 0x2c

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8004746:	6972      	ldr	r2, [r6, #20]
		c = dir[DIR_Name];
 8004748:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8240 	beq.w	8004bd0 <dir_read+0x4cc>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004750:	2be5      	cmp	r3, #229	; 0xe5
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004752:	7ad1      	ldrb	r1, [r2, #11]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004754:	d008      	beq.n	8004768 <dir_read+0x64>
 8004756:	2b2e      	cmp	r3, #46	; 0x2e
 8004758:	d006      	beq.n	8004768 <dir_read+0x64>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800475a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800475e:	f011 0f08 	tst.w	r1, #8
 8004762:	d00e      	beq.n	8004782 <dir_read+0x7e>
 8004764:	290f      	cmp	r1, #15
 8004766:	d00f      	beq.n	8004788 <dir_read+0x84>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8004768:	f04f 0aff 	mov.w	sl, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
 800476c:	4630      	mov	r0, r6
 800476e:	2100      	movs	r1, #0
 8004770:	f7fe ffd8 	bl	8003724 <dir_next>
		if (res != FR_OK) break;
 8004774:	2800      	cmp	r0, #0
 8004776:	d0cd      	beq.n	8004714 <dir_read+0x10>
	}

	if (res != FR_OK) dj->sect = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	6133      	str	r3, [r6, #16]

	return res;
}
 800477c:	b003      	add	sp, #12
 800477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004782:	290f      	cmp	r1, #15
 8004784:	f040 81c9 	bne.w	8004b1a <dir_read+0x416>
				if (c & LLE) {			/* Is it start of LFN sequence? */
 8004788:	f013 0f40 	tst.w	r3, #64	; 0x40
 800478c:	f000 8143 	beq.w	8004a16 <dir_read+0x312>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
 8004790:	f8b6 a006 	ldrh.w	sl, [r6, #6]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (c & LLE) {			/* Is it start of LFN sequence? */
					sum = dir[LDIR_Chksum];
 8004794:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8004798:	f102 010d 	add.w	r1, r2, #13
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
 800479c:	f8a6 a020 	strh.w	sl, [r6, #32]
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
				if (c & LLE) {			/* Is it start of LFN sequence? */
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
 80047a0:	f003 0abf 	and.w	sl, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 80047a4:	f891 e000 	ldrb.w	lr, [r1]
 80047a8:	45de      	cmp	lr, fp
 80047aa:	d1dd      	bne.n	8004768 <dir_read+0x64>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80047ac:	7810      	ldrb	r0, [r2, #0]
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 80047ae:	69f1      	ldr	r1, [r6, #28]
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80047b0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 80047b4:	1e5c      	subs	r4, r3, #1
 80047b6:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 80047ba:	eb04 038c 	add.w	r3, r4, ip, lsl #2

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80047be:	2bfe      	cmp	r3, #254	; 0xfe

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80047c0:	7894      	ldrb	r4, [r2, #2]
 80047c2:	7850      	ldrb	r0, [r2, #1]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80047c4:	d8d0      	bhi.n	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80047c6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 80047ca:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80047ce:	7915      	ldrb	r5, [r2, #4]
 80047d0:	f892 e003 	ldrb.w	lr, [r2, #3]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 80047d4:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80047d6:	ea4e 2405 	orr.w	r4, lr, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 80047da:	2800      	cmp	r0, #0
 80047dc:	f000 8121 	beq.w	8004a22 <dir_read+0x31e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80047e0:	2bff      	cmp	r3, #255	; 0xff
 80047e2:	d0c1      	beq.n	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80047e4:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80047e8:	7995      	ldrb	r5, [r2, #6]
 80047ea:	7950      	ldrb	r0, [r2, #5]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 80047ec:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80047ee:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	f000 811f 	beq.w	8004a36 <dir_read+0x332>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80047f8:	2bff      	cmp	r3, #255	; 0xff
 80047fa:	d0b5      	beq.n	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80047fc:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004800:	7a15      	ldrb	r5, [r2, #8]
 8004802:	79d4      	ldrb	r4, [r2, #7]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004804:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004806:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 800480a:	2800      	cmp	r0, #0
 800480c:	f000 811d 	beq.w	8004a4a <dir_read+0x346>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004810:	2bff      	cmp	r3, #255	; 0xff
 8004812:	d0a9      	beq.n	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004814:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004818:	7a95      	ldrb	r5, [r2, #10]
 800481a:	f892 c009 	ldrb.w	ip, [r2, #9]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 800481e:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004820:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 8004824:	2c00      	cmp	r4, #0
 8004826:	f000 811a 	beq.w	8004a5e <dir_read+0x35a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	d09c      	beq.n	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800482e:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004832:	7bd4      	ldrb	r4, [r2, #15]
 8004834:	7b90      	ldrb	r0, [r2, #14]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004836:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004838:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
 800483c:	2d00      	cmp	r5, #0
 800483e:	f000 8118 	beq.w	8004a72 <dir_read+0x36e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004842:	2bff      	cmp	r3, #255	; 0xff
 8004844:	d090      	beq.n	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004846:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 800484a:	7c55      	ldrb	r5, [r2, #17]
 800484c:	7c14      	ldrb	r4, [r2, #16]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 800484e:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004850:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 8004854:	2800      	cmp	r0, #0
 8004856:	f000 8116 	beq.w	8004a86 <dir_read+0x382>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800485a:	2bff      	cmp	r3, #255	; 0xff
 800485c:	d084      	beq.n	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800485e:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004862:	7cd5      	ldrb	r5, [r2, #19]
 8004864:	f892 c012 	ldrb.w	ip, [r2, #18]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004868:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 800486a:	ea4c 2005 	orr.w	r0, ip, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 800486e:	2c00      	cmp	r4, #0
 8004870:	f000 8113 	beq.w	8004a9a <dir_read+0x396>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004874:	2bff      	cmp	r3, #255	; 0xff
 8004876:	f43f af77 	beq.w	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800487a:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 800487e:	7d55      	ldrb	r5, [r2, #21]
 8004880:	7d14      	ldrb	r4, [r2, #20]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004882:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004884:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 8004888:	2800      	cmp	r0, #0
 800488a:	f000 8110 	beq.w	8004aae <dir_read+0x3aa>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800488e:	2bff      	cmp	r3, #255	; 0xff
 8004890:	f43f af6a 	beq.w	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004894:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004898:	7dd5      	ldrb	r5, [r2, #23]
 800489a:	f892 e016 	ldrb.w	lr, [r2, #22]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 800489e:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048a0:	ea4e 2005 	orr.w	r0, lr, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 80048a4:	2c00      	cmp	r4, #0
 80048a6:	f000 810c 	beq.w	8004ac2 <dir_read+0x3be>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048aa:	2bff      	cmp	r3, #255	; 0xff
 80048ac:	f43f af5c 	beq.w	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048b0:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048b4:	7e55      	ldrb	r5, [r2, #25]
 80048b6:	f892 c018 	ldrb.w	ip, [r2, #24]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048ba:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048bc:	ea4c 2405 	orr.w	r4, ip, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 80048c0:	2800      	cmp	r0, #0
 80048c2:	f000 8108 	beq.w	8004ad6 <dir_read+0x3d2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048c6:	2bff      	cmp	r3, #255	; 0xff
 80048c8:	f43f af4e 	beq.w	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048cc:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048d0:	7f55      	ldrb	r5, [r2, #29]
 80048d2:	f892 e01c 	ldrb.w	lr, [r2, #28]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048d6:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048d8:	ea4e 2005 	orr.w	r0, lr, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 80048dc:	2c00      	cmp	r4, #0
 80048de:	f000 8104 	beq.w	8004aea <dir_read+0x3e6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048e2:	2bff      	cmp	r3, #255	; 0xff
 80048e4:	f43f af40 	beq.w	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048e8:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048ec:	7fd5      	ldrb	r5, [r2, #31]
 80048ee:	7f94      	ldrb	r4, [r2, #30]
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048f0:	3301      	adds	r3, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 80048f2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f000 8101 	beq.w	8004afe <dir_read+0x3fa>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048fc:	2bff      	cmp	r3, #255	; 0xff
 80048fe:	f43f af33 	beq.w	8004768 <dir_read+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004902:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
 8004906:	3301      	adds	r3, #1
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
		}
	} while (++s < 13);						/* Read all character in the entry */

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800490e:	d005      	beq.n	800491c <dir_read+0x218>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8004910:	2bff      	cmp	r3, #255	; 0xff
 8004912:	f43f af29 	beq.w	8004768 <dir_read+0x64>
		lfnbuf[i] = 0;
 8004916:	2000      	movs	r0, #0
 8004918:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 800491c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004920:	fa5f fa8a 	uxtb.w	sl, sl
 8004924:	e722      	b.n	800476c <dir_read+0x68>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004926:	f104 0930 	add.w	r9, r4, #48	; 0x30
 800492a:	7860      	ldrb	r0, [r4, #1]
 800492c:	4649      	mov	r1, r9
 800492e:	4642      	mov	r2, r8
 8004930:	2301      	movs	r3, #1
 8004932:	f004 fc09 	bl	8009148 <disk_write>
 8004936:	2800      	cmp	r0, #0
 8004938:	d16b      	bne.n	8004a12 <dir_read+0x30e>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800493a:	69e3      	ldr	r3, [r4, #28]
 800493c:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 800493e:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8004940:	185a      	adds	r2, r3, r1
 8004942:	4590      	cmp	r8, r2
 8004944:	f4bf aef5 	bcs.w	8004732 <dir_read+0x2e>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004948:	78e7      	ldrb	r7, [r4, #3]
 800494a:	2f01      	cmp	r7, #1
 800494c:	f67f aef1 	bls.w	8004732 <dir_read+0x2e>
 8004950:	f1a7 0c02 	sub.w	ip, r7, #2
 8004954:	f01c 0c03 	ands.w	ip, ip, #3
 8004958:	f000 80d7 	beq.w	8004b0a <dir_read+0x406>
					wsect += fs->fsize;
 800495c:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800495e:	7860      	ldrb	r0, [r4, #1]
 8004960:	2301      	movs	r3, #1
 8004962:	4649      	mov	r1, r9
 8004964:	4642      	mov	r2, r8
 8004966:	f8cd c000 	str.w	ip, [sp]
 800496a:	f004 fbed 	bl	8009148 <disk_write>
 800496e:	f8dd c000 	ldr.w	ip, [sp]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004972:	3f01      	subs	r7, #1
 8004974:	f1bc 0f01 	cmp.w	ip, #1
 8004978:	b2ff      	uxtb	r7, r7
 800497a:	69e3      	ldr	r3, [r4, #28]
 800497c:	f000 80c5 	beq.w	8004b0a <dir_read+0x406>
 8004980:	f1bc 0f02 	cmp.w	ip, #2
 8004984:	d009      	beq.n	800499a <dir_read+0x296>
					wsect += fs->fsize;
 8004986:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004988:	4649      	mov	r1, r9
 800498a:	2301      	movs	r3, #1
 800498c:	7860      	ldrb	r0, [r4, #1]
 800498e:	4642      	mov	r2, r8
 8004990:	f004 fbda 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004994:	1e79      	subs	r1, r7, #1
 8004996:	69e3      	ldr	r3, [r4, #28]
 8004998:	b2cf      	uxtb	r7, r1
					wsect += fs->fsize;
 800499a:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800499c:	4642      	mov	r2, r8
 800499e:	2301      	movs	r3, #1
 80049a0:	7860      	ldrb	r0, [r4, #1]
 80049a2:	4649      	mov	r1, r9
 80049a4:	f004 fbd0 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80049a8:	1e7a      	subs	r2, r7, #1
 80049aa:	f8cd a004 	str.w	sl, [sp, #4]
 80049ae:	b2d7      	uxtb	r7, r2
 80049b0:	69e3      	ldr	r3, [r4, #28]
 80049b2:	46aa      	mov	sl, r5
 80049b4:	e01e      	b.n	80049f4 <dir_read+0x2f0>
 80049b6:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80049b8:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 80049ba:	4480      	add	r8, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 80049bc:	4642      	mov	r2, r8
 80049be:	2301      	movs	r3, #1
 80049c0:	7860      	ldrb	r0, [r4, #1]
 80049c2:	f004 fbc1 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80049c6:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80049c8:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 80049ca:	4490      	add	r8, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80049cc:	4642      	mov	r2, r8
 80049ce:	2301      	movs	r3, #1
 80049d0:	7860      	ldrb	r0, [r4, #1]
 80049d2:	f004 fbb9 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80049d6:	3d01      	subs	r5, #1
 80049d8:	69e3      	ldr	r3, [r4, #28]
 80049da:	b2ef      	uxtb	r7, r5
 80049dc:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 80049de:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80049e0:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80049e2:	2301      	movs	r3, #1
 80049e4:	7860      	ldrb	r0, [r4, #1]
 80049e6:	4649      	mov	r1, r9
 80049e8:	4642      	mov	r2, r8
 80049ea:	f004 fbad 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80049ee:	1e6f      	subs	r7, r5, #1
 80049f0:	69e3      	ldr	r3, [r4, #28]
 80049f2:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 80049f4:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80049f6:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80049f8:	2301      	movs	r3, #1
 80049fa:	4649      	mov	r1, r9
 80049fc:	4642      	mov	r2, r8
 80049fe:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004a00:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a02:	f004 fba1 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8004a06:	2d01      	cmp	r5, #1
 8004a08:	d1d5      	bne.n	80049b6 <dir_read+0x2b2>
 8004a0a:	4655      	mov	r5, sl
 8004a0c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8004a10:	e68f      	b.n	8004732 <dir_read+0x2e>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a12:	2001      	movs	r0, #1
 8004a14:	e6b0      	b.n	8004778 <dir_read+0x74>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8004a16:	459a      	cmp	sl, r3
 8004a18:	f47f aea6 	bne.w	8004768 <dir_read+0x64>
 8004a1c:	f102 010d 	add.w	r1, r2, #13
 8004a20:	e6c0      	b.n	80047a4 <dir_read+0xa0>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a22:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004a26:	4564      	cmp	r4, ip
 8004a28:	f47f ae9e 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004a2c:	7994      	ldrb	r4, [r2, #6]
 8004a2e:	f892 e005 	ldrb.w	lr, [r2, #5]
 8004a32:	ea4e 2004 	orr.w	r0, lr, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a36:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004a3a:	42a0      	cmp	r0, r4
 8004a3c:	f47f ae94 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004a40:	f892 c008 	ldrb.w	ip, [r2, #8]
 8004a44:	79d0      	ldrb	r0, [r2, #7]
 8004a46:	ea40 240c 	orr.w	r4, r0, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a4a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8004a4e:	4574      	cmp	r4, lr
 8004a50:	f47f ae8a 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004a54:	7a95      	ldrb	r5, [r2, #10]
 8004a56:	f892 e009 	ldrb.w	lr, [r2, #9]
 8004a5a:	ea4e 2505 	orr.w	r5, lr, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a5e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004a62:	42a5      	cmp	r5, r4
 8004a64:	f47f ae80 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004a68:	7bd4      	ldrb	r4, [r2, #15]
 8004a6a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8004a6e:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a72:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004a76:	42a0      	cmp	r0, r4
 8004a78:	f47f ae76 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004a7c:	f892 e011 	ldrb.w	lr, [r2, #17]
 8004a80:	7c10      	ldrb	r0, [r2, #16]
 8004a82:	ea40 240e 	orr.w	r4, r0, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a86:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8004a8a:	4574      	cmp	r4, lr
 8004a8c:	f47f ae6c 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004a90:	7cd4      	ldrb	r4, [r2, #19]
 8004a92:	f892 c012 	ldrb.w	ip, [r2, #18]
 8004a96:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004a9e:	42a0      	cmp	r0, r4
 8004aa0:	f47f ae62 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004aa4:	f892 e015 	ldrb.w	lr, [r2, #21]
 8004aa8:	7d10      	ldrb	r0, [r2, #20]
 8004aaa:	ea40 240e 	orr.w	r4, r0, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004aae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004ab2:	4284      	cmp	r4, r0
 8004ab4:	f47f ae58 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004ab8:	7dd4      	ldrb	r4, [r2, #23]
 8004aba:	f892 c016 	ldrb.w	ip, [r2, #22]
 8004abe:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004ac2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004ac6:	42a0      	cmp	r0, r4
 8004ac8:	f47f ae4e 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004acc:	f892 e019 	ldrb.w	lr, [r2, #25]
 8004ad0:	7e10      	ldrb	r0, [r2, #24]
 8004ad2:	ea40 240e 	orr.w	r4, r0, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004ad6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004ada:	4284      	cmp	r4, r0
 8004adc:	f47f ae44 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004ae0:	7f54      	ldrb	r4, [r2, #29]
 8004ae2:	f892 c01c 	ldrb.w	ip, [r2, #28]
 8004ae6:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004aea:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004aee:	42a0      	cmp	r0, r4
 8004af0:	f47f ae3a 	bne.w	8004768 <dir_read+0x64>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004af4:	f892 e01f 	ldrb.w	lr, [r2, #31]
 8004af8:	7f90      	ldrb	r0, [r2, #30]
 8004afa:	ea40 240e 	orr.w	r4, r0, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004afe:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004b02:	4564      	cmp	r4, ip
 8004b04:	f43f af00 	beq.w	8004908 <dir_read+0x204>
 8004b08:	e62e      	b.n	8004768 <dir_read+0x64>
 8004b0a:	f8cd a004 	str.w	sl, [sp, #4]
 8004b0e:	46aa      	mov	sl, r5
 8004b10:	e770      	b.n	80049f4 <dir_read+0x2f0>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f43f ae32 	beq.w	800477c <dir_read+0x78>
 8004b18:	e62e      	b.n	8004778 <dir_read+0x74>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8004b1a:	f1ba 0f00 	cmp.w	sl, #0
 8004b1e:	d152      	bne.n	8004bc6 <dir_read+0x4c2>
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004b20:	01d8      	lsls	r0, r3, #7
 8004b22:	7851      	ldrb	r1, [r2, #1]
 8004b24:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b28:	eb03 0c01 	add.w	ip, r3, r1
 8004b2c:	fa5f f38c 	uxtb.w	r3, ip
 8004b30:	01d8      	lsls	r0, r3, #7
 8004b32:	7891      	ldrb	r1, [r2, #2]
 8004b34:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b38:	eb03 0c01 	add.w	ip, r3, r1
 8004b3c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004b40:	01d8      	lsls	r0, r3, #7
 8004b42:	78d1      	ldrb	r1, [r2, #3]
 8004b44:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b48:	eb03 0c01 	add.w	ip, r3, r1
 8004b4c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004b50:	01d8      	lsls	r0, r3, #7
 8004b52:	7911      	ldrb	r1, [r2, #4]
 8004b54:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b58:	eb03 0c01 	add.w	ip, r3, r1
 8004b5c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004b60:	01d8      	lsls	r0, r3, #7
 8004b62:	7951      	ldrb	r1, [r2, #5]
 8004b64:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b68:	eb03 0c01 	add.w	ip, r3, r1
 8004b6c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004b70:	01d8      	lsls	r0, r3, #7
 8004b72:	7991      	ldrb	r1, [r2, #6]
 8004b74:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b78:	eb03 0c01 	add.w	ip, r3, r1
 8004b7c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004b80:	01d8      	lsls	r0, r3, #7
 8004b82:	79d1      	ldrb	r1, [r2, #7]
 8004b84:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b88:	eb03 0c01 	add.w	ip, r3, r1
 8004b8c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004b90:	01d8      	lsls	r0, r3, #7
 8004b92:	7a11      	ldrb	r1, [r2, #8]
 8004b94:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
 8004b98:	eb03 0c01 	add.w	ip, r3, r1
 8004b9c:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
 8004ba0:	01d8      	lsls	r0, r3, #7
 8004ba2:	7a51      	ldrb	r1, [r2, #9]
 8004ba4:	ea40 0c53 	orr.w	ip, r0, r3, lsr #1
 8004ba8:	eb0c 0301 	add.w	r3, ip, r1
 8004bac:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004bb0:	3208      	adds	r2, #8
 8004bb2:	01c1      	lsls	r1, r0, #7
 8004bb4:	7892      	ldrb	r2, [r2, #2]
 8004bb6:	ea41 0c50 	orr.w	ip, r1, r0, lsr #1
 8004bba:	eb0c 0302 	add.w	r3, ip, r2
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8004bbe:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004bc2:	4559      	cmp	r1, fp
 8004bc4:	d006      	beq.n	8004bd4 <dir_read+0x4d0>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8004bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bca:	8432      	strh	r2, [r6, #32]
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e5d5      	b.n	800477c <dir_read+0x78>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004bd0:	2004      	movs	r0, #4
 8004bd2:	e5d1      	b.n	8004778 <dir_read+0x74>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	e5d1      	b.n	800477c <dir_read+0x78>

08004bd8 <f_write.clone.2>:
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
 8004bda:	6803      	ldr	r3, [r0, #0]
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8004bdc:	4615      	mov	r5, r2
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
 8004bde:	2200      	movs	r2, #0
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8004be0:	460f      	mov	r7, r1
 8004be2:	4604      	mov	r4, r0
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
 8004be4:	602a      	str	r2, [r5, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
 8004be6:	8881      	ldrh	r1, [r0, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 8004be8:	b12b      	cbz	r3, 8004bf6 <f_write.clone.2+0x1e>
 8004bea:	7818      	ldrb	r0, [r3, #0]
 8004bec:	b118      	cbz	r0, 8004bf6 <f_write.clone.2+0x1e>
 8004bee:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8004bf2:	458c      	cmp	ip, r1
 8004bf4:	d001      	beq.n	8004bfa <f_write.clone.2+0x22>
		return FR_INVALID_OBJECT;
 8004bf6:	2009      	movs	r0, #9
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 8004bfa:	7858      	ldrb	r0, [r3, #1]
 8004bfc:	f004 f9de 	bl	8008fbc <disk_status>
 8004c00:	f010 0f01 	tst.w	r0, #1
 8004c04:	f040 8092 	bne.w	8004d2c <f_write.clone.2+0x154>

	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 8004c08:	f894 c006 	ldrb.w	ip, [r4, #6]
 8004c0c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8004c10:	4661      	mov	r1, ip
 8004c12:	f040 8094 	bne.w	8004d3e <f_write.clone.2+0x166>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004c16:	f01c 0f02 	tst.w	ip, #2
 8004c1a:	d078      	beq.n	8004d0e <f_write.clone.2+0x136>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 8004c1c:	68e2      	ldr	r2, [r4, #12]
 8004c1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004c22:	d308      	bcc.n	8004c36 <f_write.clone.2+0x5e>
 8004c24:	68a3      	ldr	r3, [r4, #8]
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004c26:	4293      	cmp	r3, r2
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004c28:	f04c 0220 	orr.w	r2, ip, #32
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004c2c:	bf88      	it	hi
 8004c2e:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004c30:	71a2      	strb	r2, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8004c32:	2000      	movs	r0, #0
 8004c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004c36:	68a2      	ldr	r2, [r4, #8]
 8004c38:	05d3      	lsls	r3, r2, #23
 8004c3a:	0ddb      	lsrs	r3, r3, #23
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d133      	bne.n	8004ca8 <f_write.clone.2+0xd0>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	7886      	ldrb	r6, [r0, #2]
 8004c44:	1e73      	subs	r3, r6, #1
 8004c46:	ea03 2652 	and.w	r6, r3, r2, lsr #9
 8004c4a:	b2f6      	uxtb	r6, r6
			if (!csect) {					/* On the cluster boundary? */
 8004c4c:	b966      	cbnz	r6, 8004c68 <f_write.clone.2+0x90>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	d15f      	bne.n	8004d12 <f_write.clone.2+0x13a>
					clst = fp->sclust;		/* Follow from the origin */
 8004c52:	6921      	ldr	r1, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 8004c54:	2900      	cmp	r1, #0
 8004c56:	d064      	beq.n	8004d22 <f_write.clone.2+0x14a>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004c58:	2901      	cmp	r1, #1
 8004c5a:	d07d      	beq.n	8004d58 <f_write.clone.2+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004c5c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004c60:	d074      	beq.n	8004d4c <f_write.clone.2+0x174>
				fp->clust = clst;			/* Update current cluster */
 8004c62:	6820      	ldr	r0, [r4, #0]
 8004c64:	6161      	str	r1, [r4, #20]
 8004c66:	4661      	mov	r1, ip
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8004c68:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8004c6c:	d141      	bne.n	8004cf2 <f_write.clone.2+0x11a>
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8004c6e:	6963      	ldr	r3, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8004c70:	6982      	ldr	r2, [r0, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8004c72:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8004c74:	3a02      	subs	r2, #2
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d304      	bcc.n	8004c84 <f_write.clone.2+0xac>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004c7a:	f061 007f 	orn	r0, r1, #127	; 0x7f
 8004c7e:	71a0      	strb	r0, [r4, #6]
 8004c80:	2002      	movs	r0, #2
 8004c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
 8004c84:	f890 c002 	ldrb.w	ip, [r0, #2]
 8004c88:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c8a:	fb03 230c 	mla	r3, r3, ip, r2
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f3      	beq.n	8004c7a <f_write.clone.2+0xa2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8004c92:	69a1      	ldr	r1, [r4, #24]
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 8004c94:	18f6      	adds	r6, r6, r3
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8004c96:	428e      	cmp	r6, r1
 8004c98:	d029      	beq.n	8004cee <f_write.clone.2+0x116>
				if (fp->fptr < fp->fsize &&
 8004c9a:	68a3      	ldr	r3, [r4, #8]
 8004c9c:	68e2      	ldr	r2, [r4, #12]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d31d      	bcc.n	8004cde <f_write.clone.2+0x106>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8004ca2:	05d8      	lsls	r0, r3, #23
 8004ca4:	61a6      	str	r6, [r4, #24]
 8004ca6:	0dc3      	lsrs	r3, r0, #23
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8004ca8:	7838      	ldrb	r0, [r7, #0]
 8004caa:	18e1      	adds	r1, r4, r3
 8004cac:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
 8004cb0:	f894 e006 	ldrb.w	lr, [r4, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004cb4:	68a3      	ldr	r3, [r4, #8]
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
 8004cb6:	f04e 0c40 	orr.w	ip, lr, #64	; 0x40
 8004cba:	f884 c006 	strb.w	ip, [r4, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004cbe:	682a      	ldr	r2, [r5, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	1c51      	adds	r1, r2, #1
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6029      	str	r1, [r5, #0]
 8004cc8:	68e2      	ldr	r2, [r4, #12]
 8004cca:	f894 c006 	ldrb.w	ip, [r4, #6]
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004cce:	4293      	cmp	r3, r2
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004cd0:	f04c 0220 	orr.w	r2, ip, #32
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004cd4:	bf88      	it	hi
 8004cd6:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004cd8:	71a2      	strb	r2, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8004cde:	7840      	ldrb	r0, [r0, #1]
 8004ce0:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f004 f970 	bl	8008fcc <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 8004cec:	bb00      	cbnz	r0, 8004d30 <f_write.clone.2+0x158>
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	e7d7      	b.n	8004ca2 <f_write.clone.2+0xca>
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8004cf2:	7840      	ldrb	r0, [r0, #1]
 8004cf4:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8004cf8:	69a2      	ldr	r2, [r4, #24]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f004 fa24 	bl	8009148 <disk_write>
 8004d00:	b9b0      	cbnz	r0, 8004d30 <f_write.clone.2+0x158>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8004d02:	79a2      	ldrb	r2, [r4, #6]
 8004d04:	6820      	ldr	r0, [r4, #0]
 8004d06:	f002 01bf 	and.w	r1, r2, #191	; 0xbf
 8004d0a:	71a1      	strb	r1, [r4, #6]
 8004d0c:	e7af      	b.n	8004c6e <f_write.clone.2+0x96>
	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8004d0e:	2007      	movs	r0, #7
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d12:	6961      	ldr	r1, [r4, #20]
 8004d14:	f7fe fc40 	bl	8003598 <create_chain>
 8004d18:	4601      	mov	r1, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d1a:	b191      	cbz	r1, 8004d42 <f_write.clone.2+0x16a>
 8004d1c:	f894 c006 	ldrb.w	ip, [r4, #6]
 8004d20:	e79a      	b.n	8004c58 <f_write.clone.2+0x80>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8004d22:	f7fe fc39 	bl	8003598 <create_chain>
 8004d26:	4601      	mov	r1, r0
 8004d28:	6120      	str	r0, [r4, #16]
 8004d2a:	e7f6      	b.n	8004d1a <f_write.clone.2+0x142>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 8004d2c:	2003      	movs	r0, #3
 8004d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 8004d30:	79a3      	ldrb	r3, [r4, #6]
 8004d32:	2001      	movs	r0, #1
 8004d34:	f063 0e7f 	orn	lr, r3, #127	; 0x7f
 8004d38:	f884 e006 	strb.w	lr, [r4, #6]
 8004d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8004d3e:	2002      	movs	r0, #2

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 8004d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	68e2      	ldr	r2, [r4, #12]
 8004d46:	f894 c006 	ldrb.w	ip, [r4, #6]
 8004d4a:	e76c      	b.n	8004c26 <f_write.clone.2+0x4e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004d4c:	f06c 0e7f 	orn	lr, ip, #127	; 0x7f
 8004d50:	f884 e006 	strb.w	lr, [r4, #6]
 8004d54:	2001      	movs	r0, #1
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004d58:	f06c 017f 	orn	r1, ip, #127	; 0x7f
 8004d5c:	71a1      	strb	r1, [r4, #6]
 8004d5e:	2002      	movs	r0, #2
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d62:	bf00      	nop

08004d64 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8004d64:	b4f0      	push	{r4, r5, r6, r7}

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
 8004d66:	ea41 0700 	orr.w	r7, r1, r0
 8004d6a:	1d04      	adds	r4, r0, #4
 8004d6c:	f017 0f03 	tst.w	r7, #3
 8004d70:	bf14      	ite	ne
 8004d72:	2500      	movne	r5, #0
 8004d74:	2501      	moveq	r5, #1
 8004d76:	1d0e      	adds	r6, r1, #4
 8004d78:	42a1      	cmp	r1, r4
 8004d7a:	bf94      	ite	ls
 8004d7c:	2400      	movls	r4, #0
 8004d7e:	2401      	movhi	r4, #1
 8004d80:	4286      	cmp	r6, r0
 8004d82:	bf38      	it	cc
 8004d84:	f044 0401 	orrcc.w	r4, r4, #1
 8004d88:	4225      	tst	r5, r4
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8004d8a:	b082      	sub	sp, #8

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
 8004d8c:	f000 80f0 	beq.w	8004f70 <gen_numname+0x20c>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8004d90:	680e      	ldr	r6, [r1, #0]
 8004d92:	f100 0508 	add.w	r5, r0, #8
 8004d96:	6006      	str	r6, [r0, #0]
 8004d98:	684c      	ldr	r4, [r1, #4]
 8004d9a:	2703      	movs	r7, #3
 8004d9c:	6044      	str	r4, [r0, #4]
 8004d9e:	3108      	adds	r1, #8
 8004da0:	460c      	mov	r4, r1
 8004da2:	f814 6b01 	ldrb.w	r6, [r4], #1

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
 8004da6:	19cf      	adds	r7, r1, r7
 8004da8:	43c9      	mvns	r1, r1
 8004daa:	19c9      	adds	r1, r1, r7
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8004dac:	42bc      	cmp	r4, r7
		*d++ = *s++;
 8004dae:	f805 6b01 	strb.w	r6, [r5], #1
 8004db2:	f001 0103 	and.w	r1, r1, #3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8004db6:	d026      	beq.n	8004e06 <gen_numname+0xa2>
 8004db8:	b189      	cbz	r1, 8004dde <gen_numname+0x7a>
 8004dba:	2901      	cmp	r1, #1
 8004dbc:	d009      	beq.n	8004dd2 <gen_numname+0x6e>
 8004dbe:	2902      	cmp	r1, #2
		*d++ = *s++;
 8004dc0:	bf1c      	itt	ne
 8004dc2:	f814 1b01 	ldrbne.w	r1, [r4], #1
 8004dc6:	f805 1b01 	strbne.w	r1, [r5], #1
 8004dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dce:	f805 1b01 	strb.w	r1, [r5], #1
 8004dd2:	f814 cb01 	ldrb.w	ip, [r4], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8004dd6:	42bc      	cmp	r4, r7
		*d++ = *s++;
 8004dd8:	f805 cb01 	strb.w	ip, [r5], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8004ddc:	d013      	beq.n	8004e06 <gen_numname+0xa2>
		*d++ = *s++;
 8004dde:	4626      	mov	r6, r4
 8004de0:	f816 cb01 	ldrb.w	ip, [r6], #1
 8004de4:	4629      	mov	r1, r5
 8004de6:	f801 cb01 	strb.w	ip, [r1], #1
 8004dea:	f894 c001 	ldrb.w	ip, [r4, #1]
 8004dee:	f885 c001 	strb.w	ip, [r5, #1]
 8004df2:	7876      	ldrb	r6, [r6, #1]
 8004df4:	704e      	strb	r6, [r1, #1]
 8004df6:	f894 c003 	ldrb.w	ip, [r4, #3]
 8004dfa:	3404      	adds	r4, #4
 8004dfc:	f885 c003 	strb.w	ip, [r5, #3]
 8004e00:	3504      	adds	r5, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8004e02:	42bc      	cmp	r4, r7
 8004e04:	d1eb      	bne.n	8004dde <gen_numname+0x7a>
	UINT i, j;


	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d909      	bls.n	8004e1e <gen_numname+0xba>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 8004e0a:	8811      	ldrh	r1, [r2, #0]
 8004e0c:	085c      	lsrs	r4, r3, #1
 8004e0e:	ea44 35c3 	orr.w	r5, r4, r3, lsl #15
 8004e12:	186b      	adds	r3, r5, r1
 8004e14:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	d1f6      	bne.n	8004e0c <gen_numname+0xa8>

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
 8004e1e:	2207      	movs	r2, #7
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
 8004e20:	f003 010f 	and.w	r1, r3, #15
		if (c > '9') c += 7;
 8004e24:	f101 0c37 	add.w	ip, r1, #55	; 0x37
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
 8004e28:	3130      	adds	r1, #48	; 0x30
		if (c > '9') c += 7;
		ns[i--] = c;
 8004e2a:	2939      	cmp	r1, #57	; 0x39
 8004e2c:	bf88      	it	hi
 8004e2e:	4661      	movhi	r1, ip
 8004e30:	f80d 1002 	strb.w	r1, [sp, r2]
 8004e34:	3a01      	subs	r2, #1
		seq /= 16;
	} while (seq);
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	d1f2      	bne.n	8004e20 <gen_numname+0xbc>
	ns[i] = '~';
 8004e3a:	a902      	add	r1, sp, #8
 8004e3c:	188d      	adds	r5, r1, r2
 8004e3e:	247e      	movs	r4, #126	; 0x7e
 8004e40:	f805 4c08 	strb.w	r4, [r5, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004e44:	2a00      	cmp	r2, #0
 8004e46:	f000 8091 	beq.w	8004f6c <gen_numname+0x208>
 8004e4a:	7801      	ldrb	r1, [r0, #0]
 8004e4c:	2920      	cmp	r1, #32
 8004e4e:	d015      	beq.n	8004e7c <gen_numname+0x118>
		if (IsDBCS1(dst[j])) {
			if (j == i - 1) break;
 8004e50:	1e55      	subs	r5, r2, #1
 8004e52:	e002      	b.n	8004e5a <gen_numname+0xf6>
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004e54:	5cc1      	ldrb	r1, [r0, r3]
 8004e56:	2920      	cmp	r1, #32
 8004e58:	d010      	beq.n	8004e7c <gen_numname+0x118>
		if (IsDBCS1(dst[j])) {
 8004e5a:	f101 047f 	add.w	r4, r1, #127	; 0x7f
 8004e5e:	fa5f fc84 	uxtb.w	ip, r4
 8004e62:	3120      	adds	r1, #32
 8004e64:	f1bc 0f1e 	cmp.w	ip, #30
 8004e68:	b2c9      	uxtb	r1, r1
 8004e6a:	d901      	bls.n	8004e70 <gen_numname+0x10c>
 8004e6c:	291c      	cmp	r1, #28
 8004e6e:	d802      	bhi.n	8004e76 <gen_numname+0x112>
			if (j == i - 1) break;
 8004e70:	429d      	cmp	r5, r3
 8004e72:	d003      	beq.n	8004e7c <gen_numname+0x118>
			j++;
 8004e74:	3301      	adds	r3, #1
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004e76:	3301      	adds	r3, #1
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d3eb      	bcc.n	8004e54 <gen_numname+0xf0>
 8004e7c:	f1c3 0507 	rsb	r5, r3, #7
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004e80:	2a07      	cmp	r2, #7
 8004e82:	f005 0403 	and.w	r4, r5, #3
 8004e86:	d85c      	bhi.n	8004f42 <gen_numname+0x1de>
 8004e88:	f10d 0c08 	add.w	ip, sp, #8
 8004e8c:	eb0c 0102 	add.w	r1, ip, r2
 8004e90:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8004e94:	3201      	adds	r2, #1
 8004e96:	1c59      	adds	r1, r3, #1
	} while (j < 8);
 8004e98:	2907      	cmp	r1, #7
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004e9a:	54c5      	strb	r5, [r0, r3]
	} while (j < 8);
 8004e9c:	d816      	bhi.n	8004ecc <gen_numname+0x168>
 8004e9e:	2c00      	cmp	r4, #0
 8004ea0:	d03c      	beq.n	8004f1c <gen_numname+0x1b8>
 8004ea2:	2c01      	cmp	r4, #1
 8004ea4:	d00b      	beq.n	8004ebe <gen_numname+0x15a>
 8004ea6:	2c02      	cmp	r4, #2
 8004ea8:	d004      	beq.n	8004eb4 <gen_numname+0x150>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004eaa:	2a07      	cmp	r2, #7
 8004eac:	d958      	bls.n	8004f60 <gen_numname+0x1fc>
 8004eae:	2320      	movs	r3, #32
 8004eb0:	5443      	strb	r3, [r0, r1]
 8004eb2:	3101      	adds	r1, #1
 8004eb4:	2a07      	cmp	r2, #7
 8004eb6:	d946      	bls.n	8004f46 <gen_numname+0x1e2>
 8004eb8:	2320      	movs	r3, #32
 8004eba:	5443      	strb	r3, [r0, r1]
 8004ebc:	3101      	adds	r1, #1
 8004ebe:	2a07      	cmp	r2, #7
 8004ec0:	d948      	bls.n	8004f54 <gen_numname+0x1f0>
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	5443      	strb	r3, [r0, r1]
 8004ec6:	3101      	adds	r1, #1
	} while (j < 8);
 8004ec8:	2907      	cmp	r1, #7
 8004eca:	d927      	bls.n	8004f1c <gen_numname+0x1b8>
}
 8004ecc:	b002      	add	sp, #8
 8004ece:	bcf0      	pop	{r4, r5, r6, r7}
 8004ed0:	4770      	bx	lr
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004ed2:	ad02      	add	r5, sp, #8
 8004ed4:	18ab      	adds	r3, r5, r2
 8004ed6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004eda:	3201      	adds	r2, #1
 8004edc:	5443      	strb	r3, [r0, r1]
 8004ede:	3101      	adds	r1, #1
 8004ee0:	2a07      	cmp	r2, #7
 8004ee2:	d822      	bhi.n	8004f2a <gen_numname+0x1c6>
 8004ee4:	ad02      	add	r5, sp, #8
 8004ee6:	18ac      	adds	r4, r5, r2
 8004ee8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8004eec:	3201      	adds	r2, #1
 8004eee:	5443      	strb	r3, [r0, r1]
 8004ef0:	1c4b      	adds	r3, r1, #1
 8004ef2:	2a07      	cmp	r2, #7
 8004ef4:	d81e      	bhi.n	8004f34 <gen_numname+0x1d0>
 8004ef6:	ad02      	add	r5, sp, #8
 8004ef8:	eb05 0c02 	add.w	ip, r5, r2
 8004efc:	f81c 4c08 	ldrb.w	r4, [ip, #-8]
 8004f00:	3201      	adds	r2, #1
 8004f02:	54c4      	strb	r4, [r0, r3]
 8004f04:	1c8b      	adds	r3, r1, #2
 8004f06:	2a07      	cmp	r2, #7
 8004f08:	d819      	bhi.n	8004f3e <gen_numname+0x1da>
 8004f0a:	ad02      	add	r5, sp, #8
 8004f0c:	18ac      	adds	r4, r5, r2
 8004f0e:	f814 4c08 	ldrb.w	r4, [r4, #-8]
 8004f12:	3201      	adds	r2, #1
 8004f14:	3103      	adds	r1, #3
	} while (j < 8);
 8004f16:	2907      	cmp	r1, #7
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f18:	54c4      	strb	r4, [r0, r3]
	} while (j < 8);
 8004f1a:	d8d7      	bhi.n	8004ecc <gen_numname+0x168>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f1c:	2a07      	cmp	r2, #7
 8004f1e:	d9d8      	bls.n	8004ed2 <gen_numname+0x16e>
 8004f20:	2320      	movs	r3, #32
 8004f22:	5443      	strb	r3, [r0, r1]
 8004f24:	3101      	adds	r1, #1
 8004f26:	2a07      	cmp	r2, #7
 8004f28:	d9dc      	bls.n	8004ee4 <gen_numname+0x180>
 8004f2a:	2320      	movs	r3, #32
 8004f2c:	5443      	strb	r3, [r0, r1]
 8004f2e:	1c4b      	adds	r3, r1, #1
 8004f30:	2a07      	cmp	r2, #7
 8004f32:	d9e0      	bls.n	8004ef6 <gen_numname+0x192>
 8004f34:	2420      	movs	r4, #32
 8004f36:	54c4      	strb	r4, [r0, r3]
 8004f38:	1c8b      	adds	r3, r1, #2
 8004f3a:	2a07      	cmp	r2, #7
 8004f3c:	d9e5      	bls.n	8004f0a <gen_numname+0x1a6>
 8004f3e:	2420      	movs	r4, #32
 8004f40:	e7e8      	b.n	8004f14 <gen_numname+0x1b0>
 8004f42:	2520      	movs	r5, #32
 8004f44:	e7a7      	b.n	8004e96 <gen_numname+0x132>
 8004f46:	ad02      	add	r5, sp, #8
 8004f48:	eb05 0c02 	add.w	ip, r5, r2
 8004f4c:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
 8004f50:	3201      	adds	r2, #1
 8004f52:	e7b2      	b.n	8004eba <gen_numname+0x156>
 8004f54:	ac02      	add	r4, sp, #8
 8004f56:	18a3      	adds	r3, r4, r2
 8004f58:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004f5c:	3201      	adds	r2, #1
 8004f5e:	e7b1      	b.n	8004ec4 <gen_numname+0x160>
 8004f60:	ac02      	add	r4, sp, #8
 8004f62:	18a3      	adds	r3, r4, r2
 8004f64:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004f68:	3201      	adds	r2, #1
 8004f6a:	e7a1      	b.n	8004eb0 <gen_numname+0x14c>
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	e785      	b.n	8004e7c <gen_numname+0x118>

/*-----------------------------------------------------------------------*/
/* Create numbered name                                                  */
/*-----------------------------------------------------------------------*/
#if _USE_LFN
void gen_numname (
 8004f70:	4605      	mov	r5, r0
 8004f72:	270b      	movs	r7, #11
 8004f74:	e714      	b.n	8004da0 <gen_numname+0x3c>
 8004f76:	bf00      	nop

08004f78 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 8004f7c:	6986      	ldr	r6, [r0, #24]
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8004f7e:	b089      	sub	sp, #36	; 0x24

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
 8004f80:	af05      	add	r7, sp, #20
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 8004f82:	1d32      	adds	r2, r6, #4
 8004f84:	1d3b      	adds	r3, r7, #4
 8004f86:	f016 0f03 	tst.w	r6, #3
	DIR *dj				/* Target directory with object name to be created */
)
{
 8004f8a:	4605      	mov	r5, r0
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 8004f8c:	f8d0 801c 	ldr.w	r8, [r0, #28]
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 8004f90:	f040 8332 	bne.w	80055f8 <dir_register+0x680>
 8004f94:	429e      	cmp	r6, r3
 8004f96:	bf94      	ite	ls
 8004f98:	2100      	movls	r1, #0
 8004f9a:	2101      	movhi	r1, #1
 8004f9c:	42ba      	cmp	r2, r7
 8004f9e:	bf38      	it	cc
 8004fa0:	f041 0101 	orrcc.w	r1, r1, #1
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	f000 8327 	beq.w	80055f8 <dir_register+0x680>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8004faa:	6830      	ldr	r0, [r6, #0]
 8004fac:	6038      	str	r0, [r7, #0]
 8004fae:	6871      	ldr	r1, [r6, #4]
 8004fb0:	6079      	str	r1, [r7, #4]
 8004fb2:	68b2      	ldr	r2, [r6, #8]
 8004fb4:	60ba      	str	r2, [r7, #8]
	mem_cpy(sn, fn, 12);

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004fb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004fba:	f013 0f01 	tst.w	r3, #1
 8004fbe:	d078      	beq.n	80050b2 <dir_register+0x13a>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 8004fc0:	2400      	movs	r4, #0
 8004fc2:	72f4      	strb	r4, [r6, #11]
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	2301      	movs	r3, #1

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 8004fca:	61ec      	str	r4, [r5, #28]
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff fec9 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7fe fd6c 	bl	8003ab0 <dir_find>
			if (res != FR_OK) break;
 8004fd8:	4604      	mov	r4, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d15c      	bne.n	8005098 <dir_register+0x120>
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004fde:	4639      	mov	r1, r7
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff febd 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7fe fd60 	bl	8003ab0 <dir_find>
			if (res != FR_OK) break;
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d150      	bne.n	8005098 <dir_register+0x120>
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7ff feb1 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005002:	4628      	mov	r0, r5
 8005004:	f7fe fd54 	bl	8003ab0 <dir_find>
			if (res != FR_OK) break;
 8005008:	4604      	mov	r4, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d144      	bne.n	8005098 <dir_register+0x120>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 800500e:	f04f 0904 	mov.w	r9, #4
 8005012:	e02d      	b.n	8005070 <dir_register+0xf8>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005014:	f7ff fea6 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005018:	4628      	mov	r0, r5
 800501a:	f7fe fd49 	bl	8003ab0 <dir_find>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 800501e:	f109 0101 	add.w	r1, r9, #1
 8005022:	fa1f f981 	uxth.w	r9, r1
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005026:	4604      	mov	r4, r0
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005028:	4639      	mov	r1, r7
 800502a:	4642      	mov	r2, r8
 800502c:	464b      	mov	r3, r9
 800502e:	4630      	mov	r0, r6
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005030:	2c00      	cmp	r4, #0
 8005032:	d131      	bne.n	8005098 <dir_register+0x120>
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005034:	f7ff fe96 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005038:	4628      	mov	r0, r5
 800503a:	f7fe fd39 	bl	8003ab0 <dir_find>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 800503e:	f109 0901 	add.w	r9, r9, #1
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005042:	4604      	mov	r4, r0
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 8005044:	fa1f f989 	uxth.w	r9, r9
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005048:	4639      	mov	r1, r7
 800504a:	4642      	mov	r2, r8
 800504c:	464b      	mov	r3, r9
 800504e:	4630      	mov	r0, r6
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005050:	bb14      	cbnz	r4, 8005098 <dir_register+0x120>
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005052:	f7ff fe87 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005056:	4628      	mov	r0, r5
 8005058:	f7fe fd2a 	bl	8003ab0 <dir_find>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 800505c:	f109 0c01 	add.w	ip, r9, #1
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005060:	4604      	mov	r4, r0
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 8005062:	fa1f f98c 	uxth.w	r9, ip
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005066:	b9b8      	cbnz	r0, 8005098 <dir_register+0x120>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 8005068:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800506c:	f000 82f9 	beq.w	8005662 <dir_register+0x6ea>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005070:	464b      	mov	r3, r9
 8005072:	4639      	mov	r1, r7
 8005074:	4642      	mov	r2, r8
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff fe74 	bl	8004d64 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 800507c:	4628      	mov	r0, r5
 800507e:	f7fe fd17 	bl	8003ab0 <dir_find>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 8005082:	f109 0901 	add.w	r9, r9, #1
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005086:	4604      	mov	r4, r0
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
 8005088:	fa1f f989 	uxth.w	r9, r9
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800508c:	4639      	mov	r1, r7
 800508e:	4642      	mov	r2, r8
 8005090:	464b      	mov	r3, r9
 8005092:	4630      	mov	r0, r6
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
 8005094:	2c00      	cmp	r4, #0
 8005096:	d0bd      	beq.n	8005014 <dir_register+0x9c>
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005098:	2c04      	cmp	r4, #4
 800509a:	d003      	beq.n	80050a4 <dir_register+0x12c>
			dj->fs->wflag = 1;
		}
	}

	return res;
}
 800509c:	4620      	mov	r0, r4
 800509e:	b009      	add	sp, #36	; 0x24
 80050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
		fn[NS] = sn[NS]; dj->lfn = lfn;
 80050a4:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80050a8:	72f0      	strb	r0, [r6, #11]
 80050aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80050ae:	f8c5 801c 	str.w	r8, [r5, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
 80050b2:	f013 0f02 	tst.w	r3, #2
 80050b6:	f040 8285 	bne.w	80055c4 <dir_register+0x64c>
		for (ne = 0; lfn[ne]; ne++) ;
		ne = (ne + 25) / 13;
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
 80050ba:	2601      	movs	r6, #1
 80050bc:	9601      	str	r6, [sp, #4]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
 80050be:	4628      	mov	r0, r5
 80050c0:	2100      	movs	r1, #0
 80050c2:	f7fd ff21 	bl	8002f08 <dir_sdi>
	if (res != FR_OK) return res;
 80050c6:	4604      	mov	r4, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d1e7      	bne.n	800509c <dir_register+0x124>
 80050cc:	9002      	str	r0, [sp, #8]
 80050ce:	4682      	mov	sl, r0
 80050d0:	9003      	str	r0, [sp, #12]
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
 80050d2:	682c      	ldr	r4, [r5, #0]
 80050d4:	f8d5 8010 	ldr.w	r8, [r5, #16]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 80050d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 80050da:	45b0      	cmp	r8, r6
 80050dc:	d005      	beq.n	80050ea <dir_register+0x172>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80050de:	7921      	ldrb	r1, [r4, #4]
 80050e0:	b9a9      	cbnz	r1, 800510e <dir_register+0x196>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 80050e2:	f1b8 0f00 	cmp.w	r8, #0
 80050e6:	f040 8087 	bne.w	80051f8 <dir_register+0x280>
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		c = *dj->dir;				/* Check the entry status */
 80050ea:	696c      	ldr	r4, [r5, #20]
 80050ec:	7823      	ldrb	r3, [r4, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
 80050ee:	2be5      	cmp	r3, #229	; 0xe5
 80050f0:	f000 8093 	beq.w	800521a <dir_register+0x2a2>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8090 	beq.w	800521a <dir_register+0x2a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
 80050fa:	f04f 0a00 	mov.w	sl, #0
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
 80050fe:	4628      	mov	r0, r5
 8005100:	2101      	movs	r1, #1
 8005102:	f7fe fb0f 	bl	8003724 <dir_next>
	} while (res == FR_OK);
 8005106:	2800      	cmp	r0, #0
 8005108:	d0e3      	beq.n	80050d2 <dir_register+0x15a>
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
				res = dir_next(dj, 0);	/* Next entry */
 800510a:	4604      	mov	r4, r0
 800510c:	e7c6      	b.n	800509c <dir_register+0x124>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800510e:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8005112:	7860      	ldrb	r0, [r4, #1]
 8005114:	4649      	mov	r1, r9
 8005116:	4632      	mov	r2, r6
 8005118:	2301      	movs	r3, #1
 800511a:	f004 f815 	bl	8009148 <disk_write>
 800511e:	2800      	cmp	r0, #0
 8005120:	f040 8267 	bne.w	80055f2 <dir_register+0x67a>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005124:	69e3      	ldr	r3, [r4, #28]
 8005126:	6a22      	ldr	r2, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8005128:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800512a:	eb03 0c02 	add.w	ip, r3, r2
 800512e:	4566      	cmp	r6, ip
 8005130:	d2d7      	bcs.n	80050e2 <dir_register+0x16a>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005132:	78e7      	ldrb	r7, [r4, #3]
 8005134:	2f01      	cmp	r7, #1
 8005136:	d9d4      	bls.n	80050e2 <dir_register+0x16a>
 8005138:	f1a7 0b02 	sub.w	fp, r7, #2
 800513c:	f01b 0b03 	ands.w	fp, fp, #3
 8005140:	f000 8291 	beq.w	8005666 <dir_register+0x6ee>
					wsect += fs->fsize;
 8005144:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005146:	7860      	ldrb	r0, [r4, #1]
 8005148:	2301      	movs	r3, #1
 800514a:	4649      	mov	r1, r9
 800514c:	4632      	mov	r2, r6
 800514e:	f003 fffb 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005152:	3f01      	subs	r7, #1
 8005154:	f1bb 0f01 	cmp.w	fp, #1
 8005158:	b2ff      	uxtb	r7, r7
 800515a:	69e3      	ldr	r3, [r4, #28]
 800515c:	f000 8283 	beq.w	8005666 <dir_register+0x6ee>
 8005160:	f1bb 0f02 	cmp.w	fp, #2
 8005164:	d009      	beq.n	800517a <dir_register+0x202>
					wsect += fs->fsize;
 8005166:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005168:	4632      	mov	r2, r6
 800516a:	2301      	movs	r3, #1
 800516c:	7860      	ldrb	r0, [r4, #1]
 800516e:	4649      	mov	r1, r9
 8005170:	f003 ffea 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005174:	1e7a      	subs	r2, r7, #1
 8005176:	69e3      	ldr	r3, [r4, #28]
 8005178:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 800517a:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800517c:	7860      	ldrb	r0, [r4, #1]
 800517e:	2301      	movs	r3, #1
 8005180:	4649      	mov	r1, r9
 8005182:	4632      	mov	r2, r6
 8005184:	f003 ffe0 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005188:	1e7b      	subs	r3, r7, #1
 800518a:	b2df      	uxtb	r7, r3
 800518c:	46d3      	mov	fp, sl
 800518e:	69e3      	ldr	r3, [r4, #28]
 8005190:	46c2      	mov	sl, r8
 8005192:	46a8      	mov	r8, r5
 8005194:	e01e      	b.n	80051d4 <dir_register+0x25c>
 8005196:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005198:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800519a:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 800519c:	4632      	mov	r2, r6
 800519e:	2301      	movs	r3, #1
 80051a0:	7860      	ldrb	r0, [r4, #1]
 80051a2:	f003 ffd1 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051a6:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80051a8:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 80051aa:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80051ac:	4632      	mov	r2, r6
 80051ae:	2301      	movs	r3, #1
 80051b0:	7860      	ldrb	r0, [r4, #1]
 80051b2:	f003 ffc9 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051b6:	3d01      	subs	r5, #1
 80051b8:	69e3      	ldr	r3, [r4, #28]
 80051ba:	b2ef      	uxtb	r7, r5
 80051bc:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 80051be:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051c0:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80051c2:	2301      	movs	r3, #1
 80051c4:	7860      	ldrb	r0, [r4, #1]
 80051c6:	4649      	mov	r1, r9
 80051c8:	4632      	mov	r2, r6
 80051ca:	f003 ffbd 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051ce:	1e6f      	subs	r7, r5, #1
 80051d0:	69e3      	ldr	r3, [r4, #28]
 80051d2:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 80051d4:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051d6:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80051d8:	2301      	movs	r3, #1
 80051da:	4649      	mov	r1, r9
 80051dc:	4632      	mov	r2, r6
 80051de:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051e0:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80051e2:	f003 ffb1 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80051e6:	2d01      	cmp	r5, #1
 80051e8:	d1d5      	bne.n	8005196 <dir_register+0x21e>
 80051ea:	4645      	mov	r5, r8
 80051ec:	46d0      	mov	r8, sl
 80051ee:	46da      	mov	sl, fp
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 80051f0:	f1b8 0f00 	cmp.w	r8, #0
 80051f4:	f43f af79 	beq.w	80050ea <dir_register+0x172>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80051f8:	7860      	ldrb	r0, [r4, #1]
 80051fa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80051fe:	4642      	mov	r2, r8
 8005200:	2301      	movs	r3, #1
 8005202:	f003 fee3 	bl	8008fcc <disk_read>
 8005206:	2800      	cmp	r0, #0
 8005208:	f040 81f3 	bne.w	80055f2 <dir_register+0x67a>
				return FR_DISK_ERR;
			fs->winsect = sector;
 800520c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		c = *dj->dir;				/* Check the entry status */
 8005210:	696c      	ldr	r4, [r5, #20]
 8005212:	7823      	ldrb	r3, [r4, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
 8005214:	2be5      	cmp	r3, #229	; 0xe5
 8005216:	f47f af6d 	bne.w	80050f4 <dir_register+0x17c>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
 800521a:	f1ba 0f00 	cmp.w	sl, #0
 800521e:	d101      	bne.n	8005224 <dir_register+0x2ac>
 8005220:	88e9      	ldrh	r1, [r5, #6]
 8005222:	9102      	str	r1, [sp, #8]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
 8005224:	f10a 0a01 	add.w	sl, sl, #1
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	fa1f fa8a 	uxth.w	sl, sl
 800522e:	459a      	cmp	sl, r3
 8005230:	f47f af65 	bne.w	80050fe <dir_register+0x186>
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
 8005234:	f1ba 0f01 	cmp.w	sl, #1
 8005238:	9c03      	ldr	r4, [sp, #12]
 800523a:	f000 80d0 	beq.w	80053de <dir_register+0x466>
		res = dir_sdi(dj, is);
 800523e:	4628      	mov	r0, r5
 8005240:	9902      	ldr	r1, [sp, #8]
 8005242:	f7fd fe61 	bl	8002f08 <dir_sdi>
		if (res == FR_OK) {
 8005246:	2800      	cmp	r0, #0
 8005248:	f47f af5f 	bne.w	800510a <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
 800524c:	69a8      	ldr	r0, [r5, #24]
			ne--;
 800524e:	f10a 38ff 	add.w	r8, sl, #4294967295
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005252:	7807      	ldrb	r7, [r0, #0]
 8005254:	f890 9001 	ldrb.w	r9, [r0, #1]
 8005258:	01fe      	lsls	r6, r7, #7
 800525a:	ea46 0257 	orr.w	r2, r6, r7, lsr #1
 800525e:	eb02 0a09 	add.w	sl, r2, r9
 8005262:	3001      	adds	r0, #1
 8005264:	fa5f f38a 	uxtb.w	r3, sl
 8005268:	7847      	ldrb	r7, [r0, #1]
 800526a:	01d9      	lsls	r1, r3, #7
 800526c:	ea41 0c53 	orr.w	ip, r1, r3, lsr #1
 8005270:	eb0c 0e07 	add.w	lr, ip, r7
 8005274:	f00e 02ff 	and.w	r2, lr, #255	; 0xff
 8005278:	7881      	ldrb	r1, [r0, #2]
 800527a:	01d6      	lsls	r6, r2, #7
 800527c:	ea46 0952 	orr.w	r9, r6, r2, lsr #1
 8005280:	eb09 0a01 	add.w	sl, r9, r1
 8005284:	f00a 03ff 	and.w	r3, sl, #255	; 0xff
 8005288:	78c2      	ldrb	r2, [r0, #3]
 800528a:	01df      	lsls	r7, r3, #7
 800528c:	ea47 0c53 	orr.w	ip, r7, r3, lsr #1
 8005290:	eb0c 0e02 	add.w	lr, ip, r2
 8005294:	f00e 01ff 	and.w	r1, lr, #255	; 0xff
 8005298:	7907      	ldrb	r7, [r0, #4]
 800529a:	01ce      	lsls	r6, r1, #7
 800529c:	ea46 0951 	orr.w	r9, r6, r1, lsr #1
 80052a0:	eb09 0a07 	add.w	sl, r9, r7
 80052a4:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
 80052a8:	7941      	ldrb	r1, [r0, #5]
 80052aa:	01d3      	lsls	r3, r2, #7
 80052ac:	ea43 0c52 	orr.w	ip, r3, r2, lsr #1
 80052b0:	eb0c 0e01 	add.w	lr, ip, r1
 80052b4:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
 80052b8:	f890 9006 	ldrb.w	r9, [r0, #6]
 80052bc:	01fe      	lsls	r6, r7, #7
 80052be:	ea46 0a57 	orr.w	sl, r6, r7, lsr #1
 80052c2:	eb0a 0309 	add.w	r3, sl, r9
 80052c6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80052ca:	f890 c007 	ldrb.w	ip, [r0, #7]
 80052ce:	01ca      	lsls	r2, r1, #7
 80052d0:	ea42 0e51 	orr.w	lr, r2, r1, lsr #1
 80052d4:	eb0e 060c 	add.w	r6, lr, ip
 80052d8:	f006 07ff 	and.w	r7, r6, #255	; 0xff
 80052dc:	f890 9008 	ldrb.w	r9, [r0, #8]
 80052e0:	01fe      	lsls	r6, r7, #7
 80052e2:	ea46 0a57 	orr.w	sl, r6, r7, lsr #1
 80052e6:	eb0a 0309 	add.w	r3, sl, r9
 80052ea:	1dc2      	adds	r2, r0, #7
 80052ec:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80052f0:	f892 c002 	ldrb.w	ip, [r2, #2]
 80052f4:	01c1      	lsls	r1, r0, #7
 80052f6:	ea41 0e50 	orr.w	lr, r1, r0, lsr #1
 80052fa:	eb0e 070c 	add.w	r7, lr, ip

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
 80052fe:	fa1f f988 	uxth.w	r9, r8
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005302:	9701      	str	r7, [sp, #4]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005304:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8005308:	464f      	mov	r7, r9
 800530a:	9402      	str	r4, [sp, #8]
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 800530c:	682c      	ldr	r4, [r5, #0]
 800530e:	f8d5 a010 	ldr.w	sl, [r5, #16]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8005312:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8005316:	45ca      	cmp	sl, r9
 8005318:	d007      	beq.n	800532a <dir_register+0x3b2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 800531a:	7923      	ldrb	r3, [r4, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 81a6 	bne.w	800566e <dir_register+0x6f6>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8005322:	f1ba 0f00 	cmp.w	sl, #0
 8005326:	f040 8342 	bne.w	80059ae <dir_register+0xa36>
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800532a:	9e01      	ldr	r6, [sp, #4]
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 800532c:	696b      	ldr	r3, [r5, #20]
 800532e:	b2f8      	uxtb	r0, r7
 8005330:	69ea      	ldr	r2, [r5, #28]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005332:	1e41      	subs	r1, r0, #1
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005334:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005336:	260f      	movs	r6, #15
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005338:	eb01 0441 	add.w	r4, r1, r1, lsl #1
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800533c:	72de      	strb	r6, [r3, #11]
	dir[LDIR_Type] = 0;
 800533e:	2600      	movs	r6, #0
 8005340:	731e      	strb	r6, [r3, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 8005342:	769e      	strb	r6, [r3, #26]
 8005344:	76de      	strb	r6, [r3, #27]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005346:	eb01 0484 	add.w	r4, r1, r4, lsl #2
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 800534a:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800534e:	0a0e      	lsrs	r6, r1, #8
 8005350:	7059      	strb	r1, [r3, #1]
 8005352:	709e      	strb	r6, [r3, #2]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005354:	2900      	cmp	r1, #0
 8005356:	f040 8273 	bne.w	8005840 <dir_register+0x8c8>

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800535a:	f883 8003 	strb.w	r8, [r3, #3]
 800535e:	f883 8004 	strb.w	r8, [r3, #4]
 8005362:	f883 8005 	strb.w	r8, [r3, #5]
 8005366:	f883 8006 	strb.w	r8, [r3, #6]
 800536a:	f883 8007 	strb.w	r8, [r3, #7]
 800536e:	f883 8008 	strb.w	r8, [r3, #8]
 8005372:	f883 8009 	strb.w	r8, [r3, #9]
 8005376:	f883 800a 	strb.w	r8, [r3, #10]
 800537a:	f883 800e 	strb.w	r8, [r3, #14]
 800537e:	f883 800f 	strb.w	r8, [r3, #15]
 8005382:	f883 8010 	strb.w	r8, [r3, #16]
 8005386:	f883 8011 	strb.w	r8, [r3, #17]
 800538a:	f883 8012 	strb.w	r8, [r3, #18]
 800538e:	f883 8013 	strb.w	r8, [r3, #19]
 8005392:	f883 8014 	strb.w	r8, [r3, #20]
 8005396:	f883 8015 	strb.w	r8, [r3, #21]
 800539a:	f883 8016 	strb.w	r8, [r3, #22]
 800539e:	f883 8017 	strb.w	r8, [r3, #23]
 80053a2:	f883 8018 	strb.w	r8, [r3, #24]
 80053a6:	f883 8019 	strb.w	r8, [r3, #25]
 80053aa:	f883 801c 	strb.w	r8, [r3, #28]
 80053ae:	f883 801d 	strb.w	r8, [r3, #29]
 80053b2:	f883 801e 	strb.w	r8, [r3, #30]
 80053b6:	f883 801f 	strb.w	r8, [r3, #31]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 80053ba:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80053be:	7018      	strb	r0, [r3, #0]
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	2001      	movs	r0, #1
 80053c4:	7118      	strb	r0, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 80053c6:	2100      	movs	r1, #0
 80053c8:	4628      	mov	r0, r5
 80053ca:	f7fe f9ab 	bl	8003724 <dir_next>
			} while (res == FR_OK && --ne);
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f47f ae9b 	bne.w	800510a <dir_register+0x192>
 80053d4:	3f01      	subs	r7, #1
 80053d6:	b2bf      	uxth	r7, r7
 80053d8:	2f00      	cmp	r7, #0
 80053da:	d197      	bne.n	800530c <dir_register+0x394>
 80053dc:	9c02      	ldr	r4, [sp, #8]
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
 80053de:	682e      	ldr	r6, [r5, #0]
 80053e0:	f8d5 9010 	ldr.w	r9, [r5, #16]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 80053e4:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 80053e8:	45c1      	cmp	r9, r8
 80053ea:	d007      	beq.n	80053fc <dir_register+0x484>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80053ec:	7931      	ldrb	r1, [r6, #4]
 80053ee:	2900      	cmp	r1, #0
 80053f0:	f040 81b3 	bne.w	800575a <dir_register+0x7e2>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 80053f4:	f1b9 0f00 	cmp.w	r9, #0
 80053f8:	f040 82e5 	bne.w	80059c6 <dir_register+0xa4e>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
 80053fc:	696f      	ldr	r7, [r5, #20]
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 80053fe:	427e      	negs	r6, r7
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
 8005400:	f016 0203 	ands.w	r2, r6, #3
 8005404:	f000 82f4 	beq.w	80059f0 <dir_register+0xa78>
 8005408:	1e50      	subs	r0, r2, #1
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 800540a:	463b      	mov	r3, r7
 800540c:	2100      	movs	r1, #0
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	f000 0603 	and.w	r6, r0, #3
 8005416:	201f      	movs	r0, #31
 8005418:	2a01      	cmp	r2, #1
 800541a:	469c      	mov	ip, r3
 800541c:	d920      	bls.n	8005460 <dir_register+0x4e8>
 800541e:	b18e      	cbz	r6, 8005444 <dir_register+0x4cc>
 8005420:	2e01      	cmp	r6, #1
 8005422:	d007      	beq.n	8005434 <dir_register+0x4bc>
 8005424:	2e02      	cmp	r6, #2
 8005426:	bf1c      	itt	ne
 8005428:	f803 1b01 	strbne.w	r1, [r3], #1
 800542c:	201e      	movne	r0, #30
 800542e:	f803 1b01 	strb.w	r1, [r3], #1
 8005432:	3801      	subs	r0, #1
 8005434:	3801      	subs	r0, #1
 8005436:	f1c0 0820 	rsb	r8, r0, #32
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	4542      	cmp	r2, r8
 8005440:	469c      	mov	ip, r3
 8005442:	d90d      	bls.n	8005460 <dir_register+0x4e8>
 8005444:	469c      	mov	ip, r3
 8005446:	3804      	subs	r0, #4
 8005448:	f80c 1b01 	strb.w	r1, [ip], #1
 800544c:	f1c0 0920 	rsb	r9, r0, #32
 8005450:	7059      	strb	r1, [r3, #1]
 8005452:	f88c 1001 	strb.w	r1, [ip, #1]
 8005456:	70d9      	strb	r1, [r3, #3]
 8005458:	3304      	adds	r3, #4
 800545a:	454a      	cmp	r2, r9
 800545c:	469c      	mov	ip, r3
 800545e:	d8f1      	bhi.n	8005444 <dir_register+0x4cc>
 8005460:	f1c2 0920 	rsb	r9, r2, #32
 8005464:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8005468:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800546c:	b373      	cbz	r3, 80054cc <dir_register+0x554>
 800546e:	f04f 0a01 	mov.w	sl, #1
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 8005472:	2100      	movs	r1, #0
 8005474:	1e5e      	subs	r6, r3, #1
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8005476:	18ba      	adds	r2, r7, r2
 8005478:	4553      	cmp	r3, sl
 800547a:	f842 1b04 	str.w	r1, [r2], #4
 800547e:	f006 0603 	and.w	r6, r6, #3
 8005482:	d91e      	bls.n	80054c2 <dir_register+0x54a>
 8005484:	b18e      	cbz	r6, 80054aa <dir_register+0x532>
 8005486:	2e01      	cmp	r6, #1
 8005488:	d009      	beq.n	800549e <dir_register+0x526>
 800548a:	2e02      	cmp	r6, #2
 800548c:	bf1c      	itt	ne
 800548e:	f842 1b04 	strne.w	r1, [r2], #4
 8005492:	f04f 0a02 	movne.w	sl, #2
 8005496:	f842 1b04 	str.w	r1, [r2], #4
 800549a:	f10a 0a01 	add.w	sl, sl, #1
 800549e:	f10a 0a01 	add.w	sl, sl, #1
 80054a2:	4553      	cmp	r3, sl
 80054a4:	f842 1b04 	str.w	r1, [r2], #4
 80054a8:	d90b      	bls.n	80054c2 <dir_register+0x54a>
 80054aa:	4696      	mov	lr, r2
 80054ac:	f84e 1b04 	str.w	r1, [lr], #4
 80054b0:	f10a 0a04 	add.w	sl, sl, #4
 80054b4:	6051      	str	r1, [r2, #4]
 80054b6:	f8ce 1004 	str.w	r1, [lr, #4]
 80054ba:	60d1      	str	r1, [r2, #12]
 80054bc:	3210      	adds	r2, #16
 80054be:	4553      	cmp	r3, sl
 80054c0:	d8f3      	bhi.n	80054aa <dir_register+0x532>
 80054c2:	45c1      	cmp	r9, r8
 80054c4:	44c4      	add	ip, r8
 80054c6:	ebc8 0000 	rsb	r0, r8, r0
 80054ca:	d022      	beq.n	8005512 <dir_register+0x59a>
 80054cc:	2200      	movs	r2, #0
 80054ce:	4663      	mov	r3, ip
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 80054d0:	4460      	add	r0, ip
 80054d2:	ea6f 060c 	mvn.w	r6, ip
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80054d6:	f803 2b01 	strb.w	r2, [r3], #1
 80054da:	1981      	adds	r1, r0, r6
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80054dc:	4283      	cmp	r3, r0
 80054de:	f001 0103 	and.w	r1, r1, #3
 80054e2:	d016      	beq.n	8005512 <dir_register+0x59a>
 80054e4:	b159      	cbz	r1, 80054fe <dir_register+0x586>
 80054e6:	2901      	cmp	r1, #1
 80054e8:	d005      	beq.n	80054f6 <dir_register+0x57e>
 80054ea:	2902      	cmp	r1, #2
		*d++ = (BYTE)val;
 80054ec:	bf18      	it	ne
 80054ee:	f803 2b01 	strbne.w	r2, [r3], #1
 80054f2:	f803 2b01 	strb.w	r2, [r3], #1
 80054f6:	f803 2b01 	strb.w	r2, [r3], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80054fa:	4283      	cmp	r3, r0
 80054fc:	d009      	beq.n	8005512 <dir_register+0x59a>
		*d++ = (BYTE)val;
 80054fe:	469c      	mov	ip, r3
 8005500:	f80c 2b01 	strb.w	r2, [ip], #1
 8005504:	705a      	strb	r2, [r3, #1]
 8005506:	f88c 2001 	strb.w	r2, [ip, #1]
 800550a:	70da      	strb	r2, [r3, #3]
 800550c:	3304      	adds	r3, #4
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800550e:	4283      	cmp	r3, r0
 8005510:	d1f5      	bne.n	80054fe <dir_register+0x586>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 8005512:	69aa      	ldr	r2, [r5, #24]
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 8005514:	1d3e      	adds	r6, r7, #4
 8005516:	42b2      	cmp	r2, r6
 8005518:	bf94      	ite	ls
 800551a:	2600      	movls	r6, #0
 800551c:	2601      	movhi	r6, #1
 800551e:	ea42 0e07 	orr.w	lr, r2, r7
 8005522:	1d10      	adds	r0, r2, #4
 8005524:	4287      	cmp	r7, r0
 8005526:	bf88      	it	hi
 8005528:	f046 0601 	orrhi.w	r6, r6, #1
 800552c:	f01e 0f03 	tst.w	lr, #3
 8005530:	bf14      	ite	ne
 8005532:	2300      	movne	r3, #0
 8005534:	f006 0301 	andeq.w	r3, r6, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 825c 	beq.w	80059f6 <dir_register+0xa7e>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 800553e:	6816      	ldr	r6, [r2, #0]
 8005540:	f107 0308 	add.w	r3, r7, #8
 8005544:	603e      	str	r6, [r7, #0]
 8005546:	6851      	ldr	r1, [r2, #4]
 8005548:	2603      	movs	r6, #3
 800554a:	6079      	str	r1, [r7, #4]
 800554c:	3208      	adds	r2, #8
 800554e:	f812 eb01 	ldrb.w	lr, [r2], #1
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 8005552:	199e      	adds	r6, r3, r6
 8005554:	43d8      	mvns	r0, r3
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8005556:	f803 eb01 	strb.w	lr, [r3], #1
 800555a:	eb06 0c00 	add.w	ip, r6, r0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800555e:	42b3      	cmp	r3, r6
 8005560:	f00c 0103 	and.w	r1, ip, #3
 8005564:	d024      	beq.n	80055b0 <dir_register+0x638>
 8005566:	b189      	cbz	r1, 800558c <dir_register+0x614>
 8005568:	2901      	cmp	r1, #1
 800556a:	d009      	beq.n	8005580 <dir_register+0x608>
 800556c:	2902      	cmp	r1, #2
		*d++ = *s++;
 800556e:	bf1c      	itt	ne
 8005570:	f812 1b01 	ldrbne.w	r1, [r2], #1
 8005574:	f803 1b01 	strbne.w	r1, [r3], #1
 8005578:	f812 cb01 	ldrb.w	ip, [r2], #1
 800557c:	f803 cb01 	strb.w	ip, [r3], #1
 8005580:	f812 eb01 	ldrb.w	lr, [r2], #1
 8005584:	f803 eb01 	strb.w	lr, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8005588:	42b3      	cmp	r3, r6
 800558a:	d011      	beq.n	80055b0 <dir_register+0x638>
		*d++ = *s++;
 800558c:	4610      	mov	r0, r2
 800558e:	f810 cb01 	ldrb.w	ip, [r0], #1
 8005592:	469e      	mov	lr, r3
 8005594:	f80e cb01 	strb.w	ip, [lr], #1
 8005598:	7851      	ldrb	r1, [r2, #1]
 800559a:	7059      	strb	r1, [r3, #1]
 800559c:	f890 c001 	ldrb.w	ip, [r0, #1]
 80055a0:	f88e c001 	strb.w	ip, [lr, #1]
 80055a4:	78d1      	ldrb	r1, [r2, #3]
 80055a6:	3204      	adds	r2, #4
 80055a8:	70d9      	strb	r1, [r3, #3]
 80055aa:	3304      	adds	r3, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80055ac:	42b3      	cmp	r3, r6
 80055ae:	d1ed      	bne.n	800558c <dir_register+0x614>
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 80055b0:	69a9      	ldr	r1, [r5, #24]
#endif
			dj->fs->wflag = 1;
 80055b2:	2201      	movs	r2, #1
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 80055b4:	7ac8      	ldrb	r0, [r1, #11]
 80055b6:	f000 0e18 	and.w	lr, r0, #24
 80055ba:	f887 e00c 	strb.w	lr, [r7, #12]
#endif
			dj->fs->wflag = 1;
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	711a      	strb	r2, [r3, #4]
 80055c2:	e56b      	b.n	800509c <dir_register+0x124>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
		fn[NS] = sn[NS]; dj->lfn = lfn;
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
		for (ne = 0; lfn[ne]; ne++) ;
 80055c4:	f8b8 3000 	ldrh.w	r3, [r8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8208 	beq.w	80059de <dir_register+0xa66>
 80055ce:	2300      	movs	r3, #0
 80055d0:	1c5c      	adds	r4, r3, #1
 80055d2:	b2a3      	uxth	r3, r4
 80055d4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80055d8:	2a00      	cmp	r2, #0
 80055da:	d1f9      	bne.n	80055d0 <dir_register+0x658>
 80055dc:	4a97      	ldr	r2, [pc, #604]	; (800583c <dir_register+0x8c4>)
 80055de:	3319      	adds	r3, #25
 80055e0:	fb82 1e03 	smull	r1, lr, r2, r3
 80055e4:	17d8      	asrs	r0, r3, #31
 80055e6:	ebc0 0cae 	rsb	ip, r0, lr, asr #2
 80055ea:	fa1f f18c 	uxth.w	r1, ip
 80055ee:	9101      	str	r1, [sp, #4]
 80055f0:	e565      	b.n	80050be <dir_register+0x146>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80055f2:	2001      	movs	r0, #1
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
				res = dir_next(dj, 0);	/* Next entry */
 80055f4:	4604      	mov	r4, r0
 80055f6:	e551      	b.n	800509c <dir_register+0x124>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80055f8:	4633      	mov	r3, r6
 80055fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055fe:	f88d 2014 	strb.w	r2, [sp, #20]
 8005602:	f896 e001 	ldrb.w	lr, [r6, #1]
 8005606:	1c58      	adds	r0, r3, #1
 8005608:	f88d e015 	strb.w	lr, [sp, #21]
 800560c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8005610:	3302      	adds	r3, #2
 8005612:	f88d c016 	strb.w	ip, [sp, #22]
 8005616:	7844      	ldrb	r4, [r0, #1]
 8005618:	1c82      	adds	r2, r0, #2
 800561a:	f88d 4017 	strb.w	r4, [sp, #23]
 800561e:	7859      	ldrb	r1, [r3, #1]
 8005620:	1c98      	adds	r0, r3, #2
 8005622:	f88d 1018 	strb.w	r1, [sp, #24]
 8005626:	f892 e001 	ldrb.w	lr, [r2, #1]
 800562a:	1c94      	adds	r4, r2, #2
 800562c:	f88d e019 	strb.w	lr, [sp, #25]
 8005630:	f890 c001 	ldrb.w	ip, [r0, #1]
 8005634:	3002      	adds	r0, #2
 8005636:	f88d c01a 	strb.w	ip, [sp, #26]
 800563a:	7863      	ldrb	r3, [r4, #1]
 800563c:	1ca2      	adds	r2, r4, #2
 800563e:	f88d 301b 	strb.w	r3, [sp, #27]
 8005642:	7841      	ldrb	r1, [r0, #1]
 8005644:	1c84      	adds	r4, r0, #2
 8005646:	f88d 101c 	strb.w	r1, [sp, #28]
 800564a:	f892 e001 	ldrb.w	lr, [r2, #1]
 800564e:	f88d e01d 	strb.w	lr, [sp, #29]
 8005652:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005656:	f88d c01e 	strb.w	ip, [sp, #30]
 800565a:	78a3      	ldrb	r3, [r4, #2]
 800565c:	f88d 301f 	strb.w	r3, [sp, #31]
 8005660:	e4a9      	b.n	8004fb6 <dir_register+0x3e>
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005662:	2407      	movs	r4, #7
 8005664:	e51a      	b.n	800509c <dir_register+0x124>
 8005666:	46d3      	mov	fp, sl
 8005668:	46c2      	mov	sl, r8
 800566a:	46a8      	mov	r8, r5
 800566c:	e5b2      	b.n	80051d4 <dir_register+0x25c>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800566e:	f104 0b30 	add.w	fp, r4, #48	; 0x30
 8005672:	7860      	ldrb	r0, [r4, #1]
 8005674:	4659      	mov	r1, fp
 8005676:	464a      	mov	r2, r9
 8005678:	2301      	movs	r3, #1
 800567a:	f003 fd65 	bl	8009148 <disk_write>
 800567e:	2800      	cmp	r0, #0
 8005680:	f040 8192 	bne.w	80059a8 <dir_register+0xa30>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005684:	69e3      	ldr	r3, [r4, #28]
 8005686:	6a21      	ldr	r1, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8005688:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800568a:	eb03 0e01 	add.w	lr, r3, r1
 800568e:	45f1      	cmp	r9, lr
 8005690:	f4bf ae47 	bcs.w	8005322 <dir_register+0x3aa>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005694:	78e6      	ldrb	r6, [r4, #3]
 8005696:	2e01      	cmp	r6, #1
 8005698:	f67f ae43 	bls.w	8005322 <dir_register+0x3aa>
 800569c:	f1a6 0c02 	sub.w	ip, r6, #2
 80056a0:	f01c 0c03 	ands.w	ip, ip, #3
 80056a4:	f000 819f 	beq.w	80059e6 <dir_register+0xa6e>
					wsect += fs->fsize;
 80056a8:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80056aa:	7860      	ldrb	r0, [r4, #1]
 80056ac:	2301      	movs	r3, #1
 80056ae:	4659      	mov	r1, fp
 80056b0:	464a      	mov	r2, r9
 80056b2:	f8cd c000 	str.w	ip, [sp]
 80056b6:	f003 fd47 	bl	8009148 <disk_write>
 80056ba:	f8dd c000 	ldr.w	ip, [sp]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80056be:	3e01      	subs	r6, #1
 80056c0:	f1bc 0f01 	cmp.w	ip, #1
 80056c4:	b2f6      	uxtb	r6, r6
 80056c6:	69e3      	ldr	r3, [r4, #28]
 80056c8:	f000 818d 	beq.w	80059e6 <dir_register+0xa6e>
 80056cc:	f1bc 0f02 	cmp.w	ip, #2
 80056d0:	d009      	beq.n	80056e6 <dir_register+0x76e>
					wsect += fs->fsize;
 80056d2:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80056d4:	7860      	ldrb	r0, [r4, #1]
 80056d6:	2301      	movs	r3, #1
 80056d8:	4659      	mov	r1, fp
 80056da:	464a      	mov	r2, r9
 80056dc:	f003 fd34 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80056e0:	1e70      	subs	r0, r6, #1
 80056e2:	69e3      	ldr	r3, [r4, #28]
 80056e4:	b2c6      	uxtb	r6, r0
					wsect += fs->fsize;
 80056e6:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80056e8:	4659      	mov	r1, fp
 80056ea:	2301      	movs	r3, #1
 80056ec:	7860      	ldrb	r0, [r4, #1]
 80056ee:	464a      	mov	r2, r9
 80056f0:	f003 fd2a 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80056f4:	1e71      	subs	r1, r6, #1
 80056f6:	9703      	str	r7, [sp, #12]
 80056f8:	b2ce      	uxtb	r6, r1
 80056fa:	69e3      	ldr	r3, [r4, #28]
 80056fc:	462f      	mov	r7, r5
 80056fe:	e01e      	b.n	800573e <dir_register+0x7c6>
 8005700:	69e2      	ldr	r2, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005702:	4659      	mov	r1, fp
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8005704:	4491      	add	r9, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8005706:	464a      	mov	r2, r9
 8005708:	2301      	movs	r3, #1
 800570a:	7860      	ldrb	r0, [r4, #1]
 800570c:	f003 fd1c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005710:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005712:	4659      	mov	r1, fp
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8005714:	4481      	add	r9, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8005716:	464a      	mov	r2, r9
 8005718:	2301      	movs	r3, #1
 800571a:	7860      	ldrb	r0, [r4, #1]
 800571c:	f003 fd14 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005720:	1e6e      	subs	r6, r5, #1
 8005722:	69e3      	ldr	r3, [r4, #28]
 8005724:	b2f5      	uxtb	r5, r6
 8005726:	1e6a      	subs	r2, r5, #1
					wsect += fs->fsize;
 8005728:	4499      	add	r9, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800572a:	b2d6      	uxtb	r6, r2
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800572c:	2301      	movs	r3, #1
 800572e:	7860      	ldrb	r0, [r4, #1]
 8005730:	4659      	mov	r1, fp
 8005732:	464a      	mov	r2, r9
 8005734:	f003 fd08 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005738:	1e70      	subs	r0, r6, #1
 800573a:	69e3      	ldr	r3, [r4, #28]
 800573c:	b2c6      	uxtb	r6, r0
					wsect += fs->fsize;
 800573e:	4499      	add	r9, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005740:	1e75      	subs	r5, r6, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005742:	2301      	movs	r3, #1
 8005744:	4659      	mov	r1, fp
 8005746:	464a      	mov	r2, r9
 8005748:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800574a:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800574c:	f003 fcfc 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005750:	2d01      	cmp	r5, #1
 8005752:	d1d5      	bne.n	8005700 <dir_register+0x788>
 8005754:	463d      	mov	r5, r7
 8005756:	9f03      	ldr	r7, [sp, #12]
 8005758:	e5e3      	b.n	8005322 <dir_register+0x3aa>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800575a:	f106 0a30 	add.w	sl, r6, #48	; 0x30
 800575e:	7870      	ldrb	r0, [r6, #1]
 8005760:	4651      	mov	r1, sl
 8005762:	4642      	mov	r2, r8
 8005764:	2301      	movs	r3, #1
 8005766:	f003 fcef 	bl	8009148 <disk_write>
 800576a:	2800      	cmp	r0, #0
 800576c:	f040 811c 	bne.w	80059a8 <dir_register+0xa30>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005770:	69f3      	ldr	r3, [r6, #28]
 8005772:	6a32      	ldr	r2, [r6, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8005774:	7130      	strb	r0, [r6, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005776:	eb03 0e02 	add.w	lr, r3, r2
 800577a:	45f0      	cmp	r8, lr
 800577c:	f4bf ae3a 	bcs.w	80053f4 <dir_register+0x47c>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005780:	78f7      	ldrb	r7, [r6, #3]
 8005782:	2f01      	cmp	r7, #1
 8005784:	f67f ae36 	bls.w	80053f4 <dir_register+0x47c>
 8005788:	f1a7 0b02 	sub.w	fp, r7, #2
 800578c:	f01b 0b03 	ands.w	fp, fp, #3
 8005790:	f000 812c 	beq.w	80059ec <dir_register+0xa74>
					wsect += fs->fsize;
 8005794:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005796:	7870      	ldrb	r0, [r6, #1]
 8005798:	2301      	movs	r3, #1
 800579a:	4651      	mov	r1, sl
 800579c:	4642      	mov	r2, r8
 800579e:	f003 fcd3 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80057a2:	3f01      	subs	r7, #1
 80057a4:	f1bb 0f01 	cmp.w	fp, #1
 80057a8:	b2ff      	uxtb	r7, r7
 80057aa:	69f3      	ldr	r3, [r6, #28]
 80057ac:	f000 811e 	beq.w	80059ec <dir_register+0xa74>
 80057b0:	f1bb 0f02 	cmp.w	fp, #2
 80057b4:	d009      	beq.n	80057ca <dir_register+0x852>
					wsect += fs->fsize;
 80057b6:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80057b8:	4642      	mov	r2, r8
 80057ba:	2301      	movs	r3, #1
 80057bc:	7870      	ldrb	r0, [r6, #1]
 80057be:	4651      	mov	r1, sl
 80057c0:	f003 fcc2 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80057c4:	1e7a      	subs	r2, r7, #1
 80057c6:	69f3      	ldr	r3, [r6, #28]
 80057c8:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 80057ca:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80057cc:	7870      	ldrb	r0, [r6, #1]
 80057ce:	2301      	movs	r3, #1
 80057d0:	4651      	mov	r1, sl
 80057d2:	4642      	mov	r2, r8
 80057d4:	f003 fcb8 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80057d8:	1e7b      	subs	r3, r7, #1
 80057da:	b2df      	uxtb	r7, r3
 80057dc:	46a3      	mov	fp, r4
 80057de:	69f3      	ldr	r3, [r6, #28]
 80057e0:	e01e      	b.n	8005820 <dir_register+0x8a8>
 80057e2:	69f0      	ldr	r0, [r6, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80057e4:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 80057e6:	4480      	add	r8, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 80057e8:	4642      	mov	r2, r8
 80057ea:	2301      	movs	r3, #1
 80057ec:	7870      	ldrb	r0, [r6, #1]
 80057ee:	f003 fcab 	bl	8009148 <disk_write>
 80057f2:	69f2      	ldr	r2, [r6, #28]
 80057f4:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 80057f6:	4490      	add	r8, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80057f8:	4642      	mov	r2, r8
 80057fa:	2301      	movs	r3, #1
 80057fc:	7870      	ldrb	r0, [r6, #1]
 80057fe:	f003 fca3 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005802:	1e67      	subs	r7, r4, #1
 8005804:	69f3      	ldr	r3, [r6, #28]
 8005806:	b2fc      	uxtb	r4, r7
 8005808:	1e61      	subs	r1, r4, #1
					wsect += fs->fsize;
 800580a:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800580c:	b2cf      	uxtb	r7, r1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800580e:	2301      	movs	r3, #1
 8005810:	7870      	ldrb	r0, [r6, #1]
 8005812:	4651      	mov	r1, sl
 8005814:	4642      	mov	r2, r8
 8005816:	f003 fc97 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800581a:	1e78      	subs	r0, r7, #1
 800581c:	69f3      	ldr	r3, [r6, #28]
 800581e:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
 8005820:	4498      	add	r8, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005822:	1e7c      	subs	r4, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005824:	2301      	movs	r3, #1
 8005826:	4651      	mov	r1, sl
 8005828:	4642      	mov	r2, r8
 800582a:	7870      	ldrb	r0, [r6, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800582c:	b2e4      	uxtb	r4, r4
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800582e:	f003 fc8b 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005832:	2c01      	cmp	r4, #1
 8005834:	d1d5      	bne.n	80057e2 <dir_register+0x86a>
 8005836:	465c      	mov	r4, fp
 8005838:	e5dc      	b.n	80053f4 <dir_register+0x47c>
 800583a:	bf00      	nop
 800583c:	4ec4ec4f 	.word	0x4ec4ec4f
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005840:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005844:	42b1      	cmp	r1, r6
 8005846:	f43f ad88 	beq.w	800535a <dir_register+0x3e2>
 800584a:	3401      	adds	r4, #1
 800584c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005850:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8005854:	70d9      	strb	r1, [r3, #3]
 8005856:	f883 e004 	strb.w	lr, [r3, #4]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 800585a:	2900      	cmp	r1, #0
 800585c:	f43f ad81 	beq.w	8005362 <dir_register+0x3ea>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005860:	42b1      	cmp	r1, r6
 8005862:	f43f ad7e 	beq.w	8005362 <dir_register+0x3ea>
 8005866:	3401      	adds	r4, #1
 8005868:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800586c:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8005870:	7159      	strb	r1, [r3, #5]
 8005872:	f883 c006 	strb.w	ip, [r3, #6]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005876:	2900      	cmp	r1, #0
 8005878:	f43f ad77 	beq.w	800536a <dir_register+0x3f2>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 800587c:	42b1      	cmp	r1, r6
 800587e:	f43f ad74 	beq.w	800536a <dir_register+0x3f2>
 8005882:	3401      	adds	r4, #1
 8005884:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005888:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 800588c:	71d9      	strb	r1, [r3, #7]
 800588e:	f883 e008 	strb.w	lr, [r3, #8]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005892:	2900      	cmp	r1, #0
 8005894:	f43f ad6d 	beq.w	8005372 <dir_register+0x3fa>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005898:	42b1      	cmp	r1, r6
 800589a:	f43f ad6a 	beq.w	8005372 <dir_register+0x3fa>
 800589e:	3401      	adds	r4, #1
 80058a0:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80058a4:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 80058a8:	7259      	strb	r1, [r3, #9]
 80058aa:	f883 c00a 	strb.w	ip, [r3, #10]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 80058ae:	2900      	cmp	r1, #0
 80058b0:	f43f ad63 	beq.w	800537a <dir_register+0x402>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80058b4:	42b1      	cmp	r1, r6
 80058b6:	f43f ad60 	beq.w	800537a <dir_register+0x402>
 80058ba:	3401      	adds	r4, #1
 80058bc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80058c0:	0a0e      	lsrs	r6, r1, #8
 80058c2:	7399      	strb	r1, [r3, #14]
 80058c4:	73de      	strb	r6, [r3, #15]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 80058c6:	2900      	cmp	r1, #0
 80058c8:	f43f ad5b 	beq.w	8005382 <dir_register+0x40a>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80058cc:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80058d0:	42b1      	cmp	r1, r6
 80058d2:	f43f ad56 	beq.w	8005382 <dir_register+0x40a>
 80058d6:	3401      	adds	r4, #1
 80058d8:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80058dc:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80058e0:	7419      	strb	r1, [r3, #16]
 80058e2:	f883 e011 	strb.w	lr, [r3, #17]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 80058e6:	2900      	cmp	r1, #0
 80058e8:	f43f ad4f 	beq.w	800538a <dir_register+0x412>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80058ec:	42b1      	cmp	r1, r6
 80058ee:	f43f ad4c 	beq.w	800538a <dir_register+0x412>
 80058f2:	3401      	adds	r4, #1
 80058f4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80058f8:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 80058fc:	7499      	strb	r1, [r3, #18]
 80058fe:	f883 c013 	strb.w	ip, [r3, #19]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005902:	2900      	cmp	r1, #0
 8005904:	f43f ad45 	beq.w	8005392 <dir_register+0x41a>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005908:	42b1      	cmp	r1, r6
 800590a:	f43f ad42 	beq.w	8005392 <dir_register+0x41a>
 800590e:	3401      	adds	r4, #1
 8005910:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005914:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8005918:	7519      	strb	r1, [r3, #20]
 800591a:	f883 e015 	strb.w	lr, [r3, #21]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 800591e:	2900      	cmp	r1, #0
 8005920:	f43f ad3b 	beq.w	800539a <dir_register+0x422>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005924:	42b1      	cmp	r1, r6
 8005926:	f43f ad38 	beq.w	800539a <dir_register+0x422>
 800592a:	3401      	adds	r4, #1
 800592c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005930:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8005934:	7599      	strb	r1, [r3, #22]
 8005936:	f883 c017 	strb.w	ip, [r3, #23]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 800593a:	2900      	cmp	r1, #0
 800593c:	f43f ad31 	beq.w	80053a2 <dir_register+0x42a>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005940:	42b1      	cmp	r1, r6
 8005942:	f43f ad2e 	beq.w	80053a2 <dir_register+0x42a>
 8005946:	3401      	adds	r4, #1
 8005948:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800594c:	0a0e      	lsrs	r6, r1, #8
 800594e:	7619      	strb	r1, [r3, #24]
 8005950:	765e      	strb	r6, [r3, #25]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005952:	2900      	cmp	r1, #0
 8005954:	f43f ad29 	beq.w	80053aa <dir_register+0x432>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005958:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800595c:	42b1      	cmp	r1, r6
 800595e:	f43f ad24 	beq.w	80053aa <dir_register+0x432>
 8005962:	3401      	adds	r4, #1
 8005964:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005968:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 800596c:	7719      	strb	r1, [r3, #28]
 800596e:	f883 e01d 	strb.w	lr, [r3, #29]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005972:	2900      	cmp	r1, #0
 8005974:	f43f ad1d 	beq.w	80053b2 <dir_register+0x43a>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 8005978:	42b1      	cmp	r1, r6
 800597a:	f43f ad1a 	beq.w	80053b2 <dir_register+0x43a>
 800597e:	3401      	adds	r4, #1
 8005980:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005984:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8005988:	7799      	strb	r1, [r3, #30]
 800598a:	f883 c01f 	strb.w	ip, [r3, #31]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 800598e:	2900      	cmp	r1, #0
 8005990:	f43f ad13 	beq.w	80053ba <dir_register+0x442>
	} while (++s < 13);
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 8005994:	42b1      	cmp	r1, r6
 8005996:	f43f ad10 	beq.w	80053ba <dir_register+0x442>
 800599a:	3401      	adds	r4, #1
 800599c:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	f47f ad0c 	bne.w	80053be <dir_register+0x446>
 80059a6:	e508      	b.n	80053ba <dir_register+0x442>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80059a8:	2401      	movs	r4, #1
 80059aa:	f7ff bb77 	b.w	800509c <dir_register+0x124>
 80059ae:	7860      	ldrb	r0, [r4, #1]
 80059b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80059b4:	4652      	mov	r2, sl
 80059b6:	2301      	movs	r3, #1
 80059b8:	f003 fb08 	bl	8008fcc <disk_read>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d1f3      	bne.n	80059a8 <dir_register+0xa30>
				return FR_DISK_ERR;
			fs->winsect = sector;
 80059c0:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
 80059c4:	e4b1      	b.n	800532a <dir_register+0x3b2>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80059c6:	7870      	ldrb	r0, [r6, #1]
 80059c8:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80059cc:	464a      	mov	r2, r9
 80059ce:	2301      	movs	r3, #1
 80059d0:	f003 fafc 	bl	8008fcc <disk_read>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d1e7      	bne.n	80059a8 <dir_register+0xa30>
				return FR_DISK_ERR;
			fs->winsect = sector;
 80059d8:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
 80059dc:	e50e      	b.n	80053fc <dir_register+0x484>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
		fn[NS] = sn[NS]; dj->lfn = lfn;
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
		for (ne = 0; lfn[ne]; ne++) ;
 80059de:	2301      	movs	r3, #1
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	f7ff bb6c 	b.w	80050be <dir_register+0x146>
 80059e6:	9703      	str	r7, [sp, #12]
 80059e8:	462f      	mov	r7, r5
 80059ea:	e6a8      	b.n	800573e <dir_register+0x7c6>
 80059ec:	46a3      	mov	fp, r4
 80059ee:	e717      	b.n	8005820 <dir_register+0x8a8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80059f0:	46bc      	mov	ip, r7
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 80059f2:	2020      	movs	r0, #32
 80059f4:	e534      	b.n	8005460 <dir_register+0x4e8>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80059f6:	463b      	mov	r3, r7
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
 80059f8:	260b      	movs	r6, #11
 80059fa:	e5a8      	b.n	800554e <dir_register+0x5d6>

080059fc <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 80059fc:	b948      	cbnz	r0, 8005a12 <f_mount+0x16>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <f_mount+0x1c>)
 8005a00:	681a      	ldr	r2, [r3, #0]

	if (rfs) {
 8005a02:	b102      	cbz	r2, 8005a06 <f_mount+0xa>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 8005a04:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 8005a06:	b109      	cbz	r1, 8005a0c <f_mount+0x10>
		fs->fs_type = 0;			/* Clear new fs object */
 8005a08:	2200      	movs	r2, #0
 8005a0a:	700a      	strb	r2, [r1, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 8005a0c:	6019      	str	r1, [r3, #0]

	return FR_OK;
 8005a0e:	2000      	movs	r0, #0
 8005a10:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
 8005a12:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20000724 	.word	0x20000724

08005a1c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005a20:	f002 061f 	and.w	r6, r2, #31
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005a24:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 8005a28:	2200      	movs	r2, #0
 8005a2a:	6002      	str	r2, [r0, #0]
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005a2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a2e:	4605      	mov	r5, r0

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8005a30:	a98c      	add	r1, sp, #560	; 0x230
 8005a32:	a80b      	add	r0, sp, #44	; 0x2c
 8005a34:	f006 021e 	and.w	r2, r6, #30
 8005a38:	f7fc fcee 	bl	8002418 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
 8005a3c:	a995      	add	r1, sp, #596	; 0x254
 8005a3e:	ab0c      	add	r3, sp, #48	; 0x30
 8005a40:	9192      	str	r1, [sp, #584]	; 0x248
 8005a42:	9393      	str	r3, [sp, #588]	; 0x24c
	if (res == FR_OK)
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f000 8087 	beq.w	8005b58 <f_open+0x13c>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
 8005a4a:	9c91      	ldr	r4, [sp, #580]	; 0x244
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005a4c:	f016 0f1c 	tst.w	r6, #28
 8005a50:	d008      	beq.n	8005a64 <f_open+0x48>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d077      	beq.n	8005b46 <f_open+0x12a>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005a56:	2804      	cmp	r0, #4
 8005a58:	f000 8091 	beq.w	8005b7e <f_open+0x162>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
 8005a5c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1f9      	bne.n	8005a5c <f_open+0x40>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8005a68:	7ae3      	ldrb	r3, [r4, #11]
 8005a6a:	f013 0f10 	tst.w	r3, #16
 8005a6e:	d17f      	bne.n	8005b70 <f_open+0x154>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005a70:	f016 0f02 	tst.w	r6, #2
 8005a74:	d17e      	bne.n	8005b74 <f_open+0x158>
 8005a76:	9f8c      	ldr	r7, [sp, #560]	; 0x230
 8005a78:	f104 0014 	add.w	r0, r4, #20
 8005a7c:	f104 0315 	add.w	r3, r4, #21
 8005a80:	9003      	str	r0, [sp, #12]
 8005a82:	f104 011a 	add.w	r1, r4, #26
 8005a86:	9702      	str	r7, [sp, #8]
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	f104 021b 	add.w	r2, r4, #27
 8005a8e:	9105      	str	r1, [sp, #20]
 8005a90:	f104 071e 	add.w	r7, r4, #30
 8005a94:	f104 031d 	add.w	r3, r4, #29
 8005a98:	9903      	ldr	r1, [sp, #12]
 8005a9a:	f104 001c 	add.w	r0, r4, #28
 8005a9e:	9206      	str	r2, [sp, #24]
 8005aa0:	9709      	str	r7, [sp, #36]	; 0x24
 8005aa2:	9308      	str	r3, [sp, #32]
 8005aa4:	9007      	str	r0, [sp, #28]
 8005aa6:	f006 0208 	and.w	r2, r6, #8
 8005aaa:	f104 0b1f 	add.w	fp, r4, #31
 8005aae:	9101      	str	r1, [sp, #4]
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005ab6:	9f06      	ldr	r7, [sp, #24]
 8005ab8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8005abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005abe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8005ac8:	465a      	mov	r2, fp
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 8005aca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005acc:	b178      	cbz	r0, 8005aee <f_open+0xd2>
			mode |= FA__WRITTEN;
 8005ace:	9803      	ldr	r0, [sp, #12]
 8005ad0:	9b02      	ldr	r3, [sp, #8]
 8005ad2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005ad6:	9f06      	ldr	r7, [sp, #24]
 8005ad8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8005adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ade:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005ae6:	f046 0620 	orr.w	r6, r6, #32
 8005aea:	9001      	str	r0, [sp, #4]
 8005aec:	465a      	mov	r2, fp
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8005aee:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
 8005af2:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 8005af4:	9e01      	ldr	r6, [sp, #4]
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8005af6:	f8c5 b01c 	str.w	fp, [r5, #28]
		fp->dir_ptr = dir;
 8005afa:	622c      	str	r4, [r5, #32]
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 8005afc:	f89a 4000 	ldrb.w	r4, [sl]
 8005b00:	7838      	ldrb	r0, [r7, #0]
 8005b02:	f896 a000 	ldrb.w	sl, [r6]
 8005b06:	f89c 6000 	ldrb.w	r6, [ip]
 8005b0a:	ea4a 2c04 	orr.w	ip, sl, r4, lsl #8
 8005b0e:	ea46 2e00 	orr.w	lr, r6, r0, lsl #8
 8005b12:	ea4e 440c 	orr.w	r4, lr, ip, lsl #16
 8005b16:	612c      	str	r4, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8005b18:	7809      	ldrb	r1, [r1, #0]
 8005b1a:	7814      	ldrb	r4, [r2, #0]
 8005b1c:	f899 0000 	ldrb.w	r0, [r9]
 8005b20:	0409      	lsls	r1, r1, #16
 8005b22:	f898 c000 	ldrb.w	ip, [r8]
 8005b26:	ea41 6204 	orr.w	r2, r1, r4, lsl #24
 8005b2a:	ea42 0e00 	orr.w	lr, r2, r0
 8005b2e:	ea4e 210c 	orr.w	r1, lr, ip, lsl #8
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8005b32:	f8b3 c006 	ldrh.w	ip, [r3, #6]

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
		fp->fptr = 0;						/* File pointer */
 8005b36:	2000      	movs	r0, #0
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8005b38:	60e9      	str	r1, [r5, #12]
		fp->fptr = 0;						/* File pointer */
 8005b3a:	60a8      	str	r0, [r5, #8]
		fp->dsect = 0;
 8005b3c:	61a8      	str	r0, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f8a5 c004 	strh.w	ip, [r5, #4]
 8005b44:	e78a      	b.n	8005a5c <f_open+0x40>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005b46:	7ae0      	ldrb	r0, [r4, #11]
 8005b48:	f010 0f11 	tst.w	r0, #17
 8005b4c:	d115      	bne.n	8005b7a <f_open+0x15e>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005b4e:	f016 0f04 	tst.w	r6, #4
 8005b52:	d01d      	beq.n	8005b90 <f_open+0x174>
					res = FR_EXIST;
 8005b54:	2008      	movs	r0, #8
 8005b56:	e781      	b.n	8005a5c <f_open+0x40>
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b58:	a88c      	add	r0, sp, #560	; 0x230
 8005b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b5c:	f7fe fafc 	bl	8004158 <follow_path>
	dir = dj.dir;
 8005b60:	9c91      	ldr	r4, [sp, #580]	; 0x244

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f47f af72 	bne.w	8005a4c <f_open+0x30>
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	bf08      	it	eq
 8005b6c:	2006      	moveq	r0, #6
 8005b6e:	e76d      	b.n	8005a4c <f_open+0x30>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
 8005b70:	2004      	movs	r0, #4
 8005b72:	e773      	b.n	8005a5c <f_open+0x40>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005b74:	f013 0f01 	tst.w	r3, #1
 8005b78:	d05f      	beq.n	8005c3a <f_open+0x21e>
					res = FR_DENIED;
 8005b7a:	2007      	movs	r0, #7
 8005b7c:	e76e      	b.n	8005a5c <f_open+0x40>
		if (res != FR_OK) {					/* No file, create new */
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
 8005b7e:	a88c      	add	r0, sp, #560	; 0x230
 8005b80:	f7ff f9fa 	bl	8004f78 <dir_register>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
 8005b84:	9c91      	ldr	r4, [sp, #580]	; 0x244
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f47f af68 	bne.w	8005a5c <f_open+0x40>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005b8c:	f046 0608 	orr.w	r6, r6, #8
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005b90:	f016 0f08 	tst.w	r6, #8
 8005b94:	d112      	bne.n	8005bbc <f_open+0x1a0>
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8005b96:	f104 0014 	add.w	r0, r4, #20
 8005b9a:	9b8c      	ldr	r3, [sp, #560]	; 0x230
 8005b9c:	f104 0a15 	add.w	sl, r4, #21
 8005ba0:	9001      	str	r0, [sp, #4]
 8005ba2:	f104 071b 	add.w	r7, r4, #27
 8005ba6:	f104 0c1a 	add.w	ip, r4, #26
 8005baa:	f104 021f 	add.w	r2, r4, #31
 8005bae:	f104 011e 	add.w	r1, r4, #30
 8005bb2:	f104 081d 	add.w	r8, r4, #29
 8005bb6:	f104 091c 	add.w	r9, r4, #28
 8005bba:	e798      	b.n	8005aee <f_open+0xd2>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
 8005bbc:	f7fc fa88 	bl	80020d0 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
 8005bc0:	0c01      	lsrs	r1, r0, #16
 8005bc2:	0e02      	lsrs	r2, r0, #24
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8005bc4:	2300      	movs	r3, #0
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
 8005bc6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8005bca:	73a0      	strb	r0, [r4, #14]
 8005bcc:	7421      	strb	r1, [r4, #16]
 8005bce:	7462      	strb	r2, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
 8005bd0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8005bd4:	7d20      	ldrb	r0, [r4, #20]
 8005bd6:	7ee1      	ldrb	r1, [r4, #27]
 8005bd8:	7ea2      	ldrb	r2, [r4, #26]
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
 8005bda:	73e7      	strb	r7, [r4, #15]
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8005bdc:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 8005bde:	7723      	strb	r3, [r4, #28]
 8005be0:	7763      	strb	r3, [r4, #29]
 8005be2:	77a3      	strb	r3, [r4, #30]
 8005be4:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
 8005be6:	76e3      	strb	r3, [r4, #27]
 8005be8:	76a3      	strb	r3, [r4, #26]
 8005bea:	7523      	strb	r3, [r4, #20]
 8005bec:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
 8005bee:	9f8c      	ldr	r7, [sp, #560]	; 0x230
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
 8005bf0:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
 8005bf4:	ea42 2c01 	orr.w	ip, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
 8005bf8:	f04f 0a01 	mov.w	sl, #1
			if (cl) {							/* Remove the cluster chain if exist */
 8005bfc:	ea5c 4808 	orrs.w	r8, ip, r8, lsl #16
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
 8005c00:	f887 a004 	strb.w	sl, [r7, #4]
			if (cl) {							/* Remove the cluster chain if exist */
 8005c04:	d143      	bne.n	8005c8e <f_open+0x272>
 8005c06:	9a8c      	ldr	r2, [sp, #560]	; 0x230
 8005c08:	f104 0315 	add.w	r3, r4, #21
 8005c0c:	f104 0014 	add.w	r0, r4, #20
 8005c10:	9202      	str	r2, [sp, #8]
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	9003      	str	r0, [sp, #12]
 8005c16:	f104 071b 	add.w	r7, r4, #27
 8005c1a:	f104 011a 	add.w	r1, r4, #26
 8005c1e:	f104 021e 	add.w	r2, r4, #30
 8005c22:	f104 031d 	add.w	r3, r4, #29
 8005c26:	f104 001c 	add.w	r0, r4, #28
 8005c2a:	9706      	str	r7, [sp, #24]
 8005c2c:	9105      	str	r1, [sp, #20]
 8005c2e:	f104 0b1f 	add.w	fp, r4, #31
 8005c32:	9209      	str	r2, [sp, #36]	; 0x24
 8005c34:	9308      	str	r3, [sp, #32]
 8005c36:	9007      	str	r0, [sp, #28]
 8005c38:	e749      	b.n	8005ace <f_open+0xb2>
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005c3a:	9f8c      	ldr	r7, [sp, #560]	; 0x230
 8005c3c:	f104 0214 	add.w	r2, r4, #20
 8005c40:	f104 0315 	add.w	r3, r4, #21
 8005c44:	9203      	str	r2, [sp, #12]
 8005c46:	f104 011b 	add.w	r1, r4, #27
 8005c4a:	9702      	str	r7, [sp, #8]
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	9106      	str	r1, [sp, #24]
 8005c50:	f104 001a 	add.w	r0, r4, #26
 8005c54:	f104 071e 	add.w	r7, r4, #30
 8005c58:	f104 031d 	add.w	r3, r4, #29
 8005c5c:	9903      	ldr	r1, [sp, #12]
 8005c5e:	9005      	str	r0, [sp, #20]
 8005c60:	9709      	str	r7, [sp, #36]	; 0x24
 8005c62:	9308      	str	r3, [sp, #32]
 8005c64:	f104 001c 	add.w	r0, r4, #28
 8005c68:	f006 0208 	and.w	r2, r6, #8
 8005c6c:	f104 0b1f 	add.w	fp, r4, #31
 8005c70:	920a      	str	r2, [sp, #40]	; 0x28
 8005c72:	9101      	str	r1, [sp, #4]
 8005c74:	9007      	str	r0, [sp, #28]
 8005c76:	9b02      	ldr	r3, [sp, #8]
 8005c78:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005c7c:	9f06      	ldr	r7, [sp, #24]
 8005c7e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8005c82:	465a      	mov	r2, fp
 8005c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8a:	4681      	mov	r9, r0
 8005c8c:	e71d      	b.n	8005aca <f_open+0xae>
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
 8005c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c90:	f1b8 0f01 	cmp.w	r8, #1
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
 8005c94:	9103      	str	r1, [sp, #12]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c96:	d04e      	beq.n	8005d36 <f_open+0x31a>
 8005c98:	69b8      	ldr	r0, [r7, #24]
 8005c9a:	4580      	cmp	r8, r0
 8005c9c:	d24b      	bcs.n	8005d36 <f_open+0x31a>
 8005c9e:	46c3      	mov	fp, r8
 8005ca0:	46b1      	mov	r9, r6
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f7fc feb9 	bl	8002a1c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8005caa:	4606      	mov	r6, r0
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005cac:	4659      	mov	r1, fp
 8005cae:	4638      	mov	r0, r7
 8005cb0:	2200      	movs	r2, #0

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8005cb2:	b1ae      	cbz	r6, 8005ce0 <f_open+0x2c4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005cb4:	2e01      	cmp	r6, #1
 8005cb6:	d03e      	beq.n	8005d36 <f_open+0x31a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005cb8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005cbc:	d03d      	beq.n	8005d3a <f_open+0x31e>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005cbe:	f7fd f97f 	bl	8002fc0 <put_fat>
			if (res != FR_OK) break;
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f47f aeca 	bne.w	8005a5c <f_open+0x40>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8005cc8:	693b      	ldr	r3, [r7, #16]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005cca:	46b3      	mov	fp, r6
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d003      	beq.n	8005cda <f_open+0x2be>
				fs->free_clust++;
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
				fs->fsi_flag = 1;
 8005cd6:	f887 a005 	strb.w	sl, [r7, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4296      	cmp	r6, r2
 8005cde:	d3e0      	bcc.n	8005ca2 <f_open+0x286>
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005ce0:	998c      	ldr	r1, [sp, #560]	; 0x230
 8005ce2:	464e      	mov	r6, r9
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8005ce4:	9b03      	ldr	r3, [sp, #12]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8005ce6:	f8d1 902c 	ldr.w	r9, [r1, #44]	; 0x2c
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005cea:	f108 32ff 	add.w	r2, r8, #4294967295
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8005cee:	454b      	cmp	r3, r9
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005cf0:	9102      	str	r1, [sp, #8]
 8005cf2:	60ca      	str	r2, [r1, #12]
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8005cf4:	f000 80bf 	beq.w	8005e76 <f_open+0x45a>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8005cf8:	7908      	ldrb	r0, [r1, #4]
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d144      	bne.n	8005d88 <f_open+0x36c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8005cfe:	9a03      	ldr	r2, [sp, #12]
 8005d00:	b9ea      	cbnz	r2, 8005d3e <f_open+0x322>
 8005d02:	9f8c      	ldr	r7, [sp, #560]	; 0x230
 8005d04:	f104 0315 	add.w	r3, r4, #21
 8005d08:	f104 0114 	add.w	r1, r4, #20
 8005d0c:	9702      	str	r7, [sp, #8]
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	9103      	str	r1, [sp, #12]
 8005d12:	f104 001b 	add.w	r0, r4, #27
 8005d16:	f104 021a 	add.w	r2, r4, #26
 8005d1a:	f104 071e 	add.w	r7, r4, #30
 8005d1e:	f104 031d 	add.w	r3, r4, #29
 8005d22:	f104 011c 	add.w	r1, r4, #28
 8005d26:	9006      	str	r0, [sp, #24]
 8005d28:	9205      	str	r2, [sp, #20]
 8005d2a:	f104 0b1f 	add.w	fp, r4, #31
 8005d2e:	9709      	str	r7, [sp, #36]	; 0x24
 8005d30:	9308      	str	r3, [sp, #32]
 8005d32:	9107      	str	r1, [sp, #28]
 8005d34:	e6cb      	b.n	8005ace <f_open+0xb2>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005d36:	2002      	movs	r0, #2
 8005d38:	e690      	b.n	8005a5c <f_open+0x40>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e68e      	b.n	8005a5c <f_open+0x40>
 8005d3e:	9902      	ldr	r1, [sp, #8]
 8005d40:	2301      	movs	r3, #1
 8005d42:	7848      	ldrb	r0, [r1, #1]
 8005d44:	3130      	adds	r1, #48	; 0x30
 8005d46:	f003 f941 	bl	8008fcc <disk_read>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d1f5      	bne.n	8005d3a <f_open+0x31e>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8005d4e:	9f02      	ldr	r7, [sp, #8]
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	9a8c      	ldr	r2, [sp, #560]	; 0x230
 8005d54:	f104 0015 	add.w	r0, r4, #21
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5a:	9004      	str	r0, [sp, #16]
 8005d5c:	9202      	str	r2, [sp, #8]
 8005d5e:	f104 0114 	add.w	r1, r4, #20
 8005d62:	9103      	str	r1, [sp, #12]
 8005d64:	f104 071b 	add.w	r7, r4, #27
 8005d68:	f104 021a 	add.w	r2, r4, #26
 8005d6c:	f104 031e 	add.w	r3, r4, #30
 8005d70:	f104 001d 	add.w	r0, r4, #29
 8005d74:	f104 011c 	add.w	r1, r4, #28
 8005d78:	9706      	str	r7, [sp, #24]
 8005d7a:	9205      	str	r2, [sp, #20]
 8005d7c:	f104 0b1f 	add.w	fp, r4, #31
 8005d80:	9309      	str	r3, [sp, #36]	; 0x24
 8005d82:	9008      	str	r0, [sp, #32]
 8005d84:	9107      	str	r1, [sp, #28]
 8005d86:	e6a2      	b.n	8005ace <f_open+0xb2>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8005d88:	f101 0830 	add.w	r8, r1, #48	; 0x30
 8005d8c:	7848      	ldrb	r0, [r1, #1]
 8005d8e:	464a      	mov	r2, r9
 8005d90:	4641      	mov	r1, r8
 8005d92:	2301      	movs	r3, #1
 8005d94:	f003 f9d8 	bl	8009148 <disk_write>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d1ce      	bne.n	8005d3a <f_open+0x31e>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005d9c:	9902      	ldr	r1, [sp, #8]
 8005d9e:	69cb      	ldr	r3, [r1, #28]
 8005da0:	6a0a      	ldr	r2, [r1, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8005da2:	9902      	ldr	r1, [sp, #8]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005da4:	eb03 0e02 	add.w	lr, r3, r2
 8005da8:	45f1      	cmp	r9, lr
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8005daa:	7108      	strb	r0, [r1, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8005dac:	d2a7      	bcs.n	8005cfe <f_open+0x2e2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005dae:	78cf      	ldrb	r7, [r1, #3]
 8005db0:	2f01      	cmp	r7, #1
 8005db2:	d9a4      	bls.n	8005cfe <f_open+0x2e2>
 8005db4:	f1a7 0a02 	sub.w	sl, r7, #2
 8005db8:	f01a 0a03 	ands.w	sl, sl, #3
 8005dbc:	d05f      	beq.n	8005e7e <f_open+0x462>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005dbe:	9a02      	ldr	r2, [sp, #8]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8005dc0:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005dc2:	7850      	ldrb	r0, [r2, #1]
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	464a      	mov	r2, r9
 8005dc8:	4641      	mov	r1, r8
 8005dca:	f003 f9bd 	bl	8009148 <disk_write>
 8005dce:	9a02      	ldr	r2, [sp, #8]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005dd0:	1e7b      	subs	r3, r7, #1
 8005dd2:	f1ba 0f01 	cmp.w	sl, #1
 8005dd6:	b2df      	uxtb	r7, r3
 8005dd8:	69d3      	ldr	r3, [r2, #28]
 8005dda:	d050      	beq.n	8005e7e <f_open+0x462>
 8005ddc:	f1ba 0f02 	cmp.w	sl, #2
 8005de0:	d00a      	beq.n	8005df8 <f_open+0x3dc>
					wsect += fs->fsize;
 8005de2:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005de4:	7850      	ldrb	r0, [r2, #1]
 8005de6:	4641      	mov	r1, r8
 8005de8:	2301      	movs	r3, #1
 8005dea:	464a      	mov	r2, r9
 8005dec:	f003 f9ac 	bl	8009148 <disk_write>
 8005df0:	9902      	ldr	r1, [sp, #8]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005df2:	3f01      	subs	r7, #1
 8005df4:	69cb      	ldr	r3, [r1, #28]
 8005df6:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005df8:	9a02      	ldr	r2, [sp, #8]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8005dfa:	4499      	add	r9, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005dfc:	7850      	ldrb	r0, [r2, #1]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4641      	mov	r1, r8
 8005e02:	464a      	mov	r2, r9
 8005e04:	f003 f9a0 	bl	8009148 <disk_write>
 8005e08:	9802      	ldr	r0, [sp, #8]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e0a:	1e7b      	subs	r3, r7, #1
 8005e0c:	b2df      	uxtb	r7, r3
 8005e0e:	46b3      	mov	fp, r6
 8005e10:	46a2      	mov	sl, r4
 8005e12:	69c3      	ldr	r3, [r0, #28]
 8005e14:	462e      	mov	r6, r5
 8005e16:	4604      	mov	r4, r0
 8005e18:	e01e      	b.n	8005e58 <f_open+0x43c>
 8005e1a:	69e0      	ldr	r0, [r4, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e1c:	4641      	mov	r1, r8
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8005e1e:	4481      	add	r9, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e20:	464a      	mov	r2, r9
 8005e22:	2301      	movs	r3, #1
 8005e24:	7860      	ldrb	r0, [r4, #1]
 8005e26:	f003 f98f 	bl	8009148 <disk_write>
 8005e2a:	69e2      	ldr	r2, [r4, #28]
 8005e2c:	4641      	mov	r1, r8
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8005e2e:	4491      	add	r9, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e30:	464a      	mov	r2, r9
 8005e32:	2301      	movs	r3, #1
 8005e34:	7860      	ldrb	r0, [r4, #1]
 8005e36:	f003 f987 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e3a:	3d01      	subs	r5, #1
 8005e3c:	69e3      	ldr	r3, [r4, #28]
 8005e3e:	b2ef      	uxtb	r7, r5
 8005e40:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 8005e42:	4499      	add	r9, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e44:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e46:	2301      	movs	r3, #1
 8005e48:	7860      	ldrb	r0, [r4, #1]
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	464a      	mov	r2, r9
 8005e4e:	f003 f97b 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e52:	1e6f      	subs	r7, r5, #1
 8005e54:	69e3      	ldr	r3, [r4, #28]
 8005e56:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 8005e58:	4499      	add	r9, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e5a:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4641      	mov	r1, r8
 8005e60:	464a      	mov	r2, r9
 8005e62:	7860      	ldrb	r0, [r4, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e64:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e66:	f003 f96f 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8005e6a:	2d01      	cmp	r5, #1
 8005e6c:	d1d5      	bne.n	8005e1a <f_open+0x3fe>
 8005e6e:	4635      	mov	r5, r6
 8005e70:	4654      	mov	r4, sl
 8005e72:	465e      	mov	r6, fp
 8005e74:	e743      	b.n	8005cfe <f_open+0x2e2>
 8005e76:	f104 0715 	add.w	r7, r4, #21
 8005e7a:	9704      	str	r7, [sp, #16]
 8005e7c:	e76f      	b.n	8005d5e <f_open+0x342>
 8005e7e:	46b3      	mov	fp, r6
 8005e80:	46a2      	mov	sl, r4
 8005e82:	462e      	mov	r6, r5
 8005e84:	9c02      	ldr	r4, [sp, #8]
 8005e86:	e7e7      	b.n	8005e58 <f_open+0x43c>

08005e88 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	4604      	mov	r4, r0
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
 8005e8e:	6800      	ldr	r0, [r0, #0]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8005e90:	461e      	mov	r6, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
 8005e92:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8005e94:	4615      	mov	r5, r2
 8005e96:	b089      	sub	sp, #36	; 0x24
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
 8005e98:	6033      	str	r3, [r6, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
 8005e9a:	88a2      	ldrh	r2, [r4, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 8005e9c:	b128      	cbz	r0, 8005eaa <f_read+0x22>
 8005e9e:	7803      	ldrb	r3, [r0, #0]
 8005ea0:	b11b      	cbz	r3, 8005eaa <f_read+0x22>
 8005ea2:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8005ea6:	4594      	cmp	ip, r2
 8005ea8:	d003      	beq.n	8005eb2 <f_read+0x2a>
		return FR_INVALID_OBJECT;
 8005eaa:	2009      	movs	r0, #9
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8005eac:	b009      	add	sp, #36	; 0x24
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 8005eb2:	7840      	ldrb	r0, [r0, #1]
 8005eb4:	9103      	str	r1, [sp, #12]
 8005eb6:	f003 f881 	bl	8008fbc <disk_status>
 8005eba:	f010 0f01 	tst.w	r0, #1
 8005ebe:	9903      	ldr	r1, [sp, #12]
 8005ec0:	f040 8191 	bne.w	80061e6 <f_read+0x35e>

	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8005ec4:	79a3      	ldrb	r3, [r4, #6]
 8005ec6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eca:	f040 81c4 	bne.w	8006256 <f_read+0x3ce>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005ece:	f013 0f01 	tst.w	r3, #1
 8005ed2:	f000 8181 	beq.w	80061d8 <f_read+0x350>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8005ed6:	68a2      	ldr	r2, [r4, #8]
 8005ed8:	68e3      	ldr	r3, [r4, #12]
 8005eda:	1a98      	subs	r0, r3, r2
 8005edc:	4285      	cmp	r5, r0
 8005ede:	bf28      	it	cs
 8005ee0:	4605      	movcs	r5, r0
 8005ee2:	9504      	str	r5, [sp, #16]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	f000 81bf 	beq.w	8006268 <f_read+0x3e0>
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
 8005eea:	460d      	mov	r5, r1
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005eec:	f104 0024 	add.w	r0, r4, #36	; 0x24

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8005ef0:	f104 0128 	add.w	r1, r4, #40	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005ef4:	9006      	str	r0, [sp, #24]

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8005ef6:	9107      	str	r1, [sp, #28]
 8005ef8:	46b3      	mov	fp, r6
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005efa:	05d6      	lsls	r6, r2, #23
 8005efc:	0df3      	lsrs	r3, r6, #23
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d13a      	bne.n	8005f78 <f_read+0xf0>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	7898      	ldrb	r0, [r3, #2]
 8005f06:	1e41      	subs	r1, r0, #1
 8005f08:	ea01 2e52 	and.w	lr, r1, r2, lsr #9
 8005f0c:	fa5f f68e 	uxtb.w	r6, lr
			if (!csect) {						/* On the cluster boundary? */
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	f000 80ea 	beq.w	80060ea <f_read+0x262>
 8005f16:	6960      	ldr	r0, [r4, #20]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8005f18:	699a      	ldr	r2, [r3, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8005f1a:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8005f1c:	1e91      	subs	r1, r2, #2
 8005f1e:	4288      	cmp	r0, r1
 8005f20:	f0c0 80f5 	bcc.w	800610e <f_read+0x286>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005f24:	f894 e006 	ldrb.w	lr, [r4, #6]
 8005f28:	2002      	movs	r0, #2
 8005f2a:	f06e 037f 	orn	r3, lr, #127	; 0x7f
 8005f2e:	71a3      	strb	r3, [r4, #6]
 8005f30:	e7bc      	b.n	8005eac <f_read+0x24>
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005f32:	69a2      	ldr	r2, [r4, #24]
 8005f34:	42ba      	cmp	r2, r7
 8005f36:	d01b      	beq.n	8005f70 <f_read+0xe8>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005f38:	f894 e006 	ldrb.w	lr, [r4, #6]
 8005f3c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8005f40:	d00d      	beq.n	8005f5e <f_read+0xd6>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005f42:	7858      	ldrb	r0, [r3, #1]
 8005f44:	9906      	ldr	r1, [sp, #24]
 8005f46:	2301      	movs	r3, #1
 8005f48:	f003 f8fe 	bl	8009148 <disk_write>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f040 813d 	bne.w	80061cc <f_read+0x344>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
 8005f52:	f894 c006 	ldrb.w	ip, [r4, #6]
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f02c 0240 	bic.w	r2, ip, #64	; 0x40
 8005f5c:	71a2      	strb	r2, [r4, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8005f5e:	7858      	ldrb	r0, [r3, #1]
 8005f60:	9906      	ldr	r1, [sp, #24]
 8005f62:	463a      	mov	r2, r7
 8005f64:	2301      	movs	r3, #1
 8005f66:	f003 f831 	bl	8008fcc <disk_read>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f040 812e 	bne.w	80061cc <f_read+0x344>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8005f70:	68a2      	ldr	r2, [r4, #8]
 8005f72:	61a7      	str	r7, [r4, #24]
 8005f74:	05d0      	lsls	r0, r2, #23
 8005f76:	0dc3      	lsrs	r3, r0, #23
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005f78:	9e04      	ldr	r6, [sp, #16]
 8005f7a:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
 8005f7e:	42b0      	cmp	r0, r6
 8005f80:	bf28      	it	cs
 8005f82:	4630      	movcs	r0, r6
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f000 80a2 	beq.w	80060ce <f_read+0x246>
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005f8a:	9a06      	ldr	r2, [sp, #24]

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8005f8c:	18e7      	adds	r7, r4, r3
 8005f8e:	0886      	lsrs	r6, r0, #2
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005f90:	eb02 0803 	add.w	r8, r2, r3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8005f94:	f100 39ff 	add.w	r9, r0, #4294967295

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8005f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f9c:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	f000 8163 	beq.w	800626c <f_read+0x3e4>
 8005fa6:	ea43 0a05 	orr.w	sl, r3, r5
 8005faa:	f01a 0f03 	tst.w	sl, #3
 8005fae:	f105 0a04 	add.w	sl, r5, #4
 8005fb2:	bf14      	ite	ne
 8005fb4:	f04f 0e00 	movne.w	lr, #0
 8005fb8:	f04f 0e01 	moveq.w	lr, #1
 8005fbc:	4553      	cmp	r3, sl
 8005fbe:	bf94      	ite	ls
 8005fc0:	2300      	movls	r3, #0
 8005fc2:	2301      	movhi	r3, #1
 8005fc4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005fc8:	2803      	cmp	r0, #3
 8005fca:	bf94      	ite	ls
 8005fcc:	f04f 0e00 	movls.w	lr, #0
 8005fd0:	f00e 0e01 	andhi.w	lr, lr, #1
 8005fd4:	428d      	cmp	r5, r1
 8005fd6:	bf88      	it	hi
 8005fd8:	f043 0301 	orrhi.w	r3, r3, #1
 8005fdc:	ea1e 0f03 	tst.w	lr, r3
 8005fe0:	f000 8144 	beq.w	800626c <f_read+0x3e4>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	1e73      	subs	r3, r6, #1
 8005fe8:	2101      	movs	r1, #1
 8005fea:	602a      	str	r2, [r5, #0]
 8005fec:	428e      	cmp	r6, r1
 8005fee:	f003 0203 	and.w	r2, r3, #3

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8005ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	9205      	str	r2, [sp, #20]
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8005ffa:	4653      	mov	r3, sl
 8005ffc:	d930      	bls.n	8006060 <f_read+0x1d8>
 8005ffe:	9a05      	ldr	r2, [sp, #20]
 8006000:	b1da      	cbz	r2, 800603a <f_read+0x1b2>
 8006002:	2a01      	cmp	r2, #1
 8006004:	d010      	beq.n	8006028 <f_read+0x1a0>
 8006006:	2a02      	cmp	r2, #2
 8006008:	d007      	beq.n	800601a <f_read+0x192>
 800600a:	6aba      	ldr	r2, [r7, #40]	; 0x28

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	9701      	str	r7, [sp, #4]
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006010:	f10a 0304 	add.w	r3, sl, #4
 8006014:	f8ca 2000 	str.w	r2, [sl]
 8006018:	2102      	movs	r1, #2
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	3101      	adds	r1, #1
 800601e:	f852 7f04 	ldr.w	r7, [r2, #4]!
 8006022:	9201      	str	r2, [sp, #4]
 8006024:	f843 7b04 	str.w	r7, [r3], #4
 8006028:	9a01      	ldr	r2, [sp, #4]
 800602a:	3101      	adds	r1, #1
 800602c:	f852 7f04 	ldr.w	r7, [r2, #4]!
 8006030:	428e      	cmp	r6, r1
 8006032:	9201      	str	r2, [sp, #4]
 8006034:	f843 7b04 	str.w	r7, [r3], #4
 8006038:	d912      	bls.n	8006060 <f_read+0x1d8>
 800603a:	9a01      	ldr	r2, [sp, #4]
 800603c:	4682      	mov	sl, r0
 800603e:	6850      	ldr	r0, [r2, #4]
 8006040:	469e      	mov	lr, r3
 8006042:	f84e 0b04 	str.w	r0, [lr], #4
 8006046:	6897      	ldr	r7, [r2, #8]
 8006048:	3104      	adds	r1, #4
 800604a:	605f      	str	r7, [r3, #4]
 800604c:	68d7      	ldr	r7, [r2, #12]
 800604e:	f8ce 7004 	str.w	r7, [lr, #4]
 8006052:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8006056:	60d8      	str	r0, [r3, #12]
 8006058:	3310      	adds	r3, #16
 800605a:	428e      	cmp	r6, r1
 800605c:	d8ef      	bhi.n	800603e <f_read+0x1b6>
 800605e:	4650      	mov	r0, sl
 8006060:	4560      	cmp	r0, ip
 8006062:	44e0      	add	r8, ip
 8006064:	eb05 020c 	add.w	r2, r5, ip
 8006068:	ebcc 0909 	rsb	r9, ip, r9
 800606c:	d02e      	beq.n	80060cc <f_read+0x244>

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 800606e:	4643      	mov	r3, r8
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006070:	f898 c000 	ldrb.w	ip, [r8]
 8006074:	44c8      	add	r8, r9
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006076:	4543      	cmp	r3, r8
		*d++ = *s++;
 8006078:	f802 cb01 	strb.w	ip, [r2], #1
 800607c:	f009 0103 	and.w	r1, r9, #3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006080:	d024      	beq.n	80060cc <f_read+0x244>
 8006082:	b189      	cbz	r1, 80060a8 <f_read+0x220>
 8006084:	2901      	cmp	r1, #1
 8006086:	d009      	beq.n	800609c <f_read+0x214>
 8006088:	2902      	cmp	r1, #2
		*d++ = *s++;
 800608a:	bf1c      	itt	ne
 800608c:	f813 1f01 	ldrbne.w	r1, [r3, #1]!
 8006090:	f802 1b01 	strbne.w	r1, [r2], #1
 8006094:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8006098:	f802 6b01 	strb.w	r6, [r2], #1
 800609c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80060a0:	4543      	cmp	r3, r8
		*d++ = *s++;
 80060a2:	f802 eb01 	strb.w	lr, [r2], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80060a6:	d011      	beq.n	80060cc <f_read+0x244>
		*d++ = *s++;
 80060a8:	785e      	ldrb	r6, [r3, #1]
 80060aa:	4611      	mov	r1, r2
 80060ac:	f801 6b01 	strb.w	r6, [r1], #1
 80060b0:	f893 c002 	ldrb.w	ip, [r3, #2]
 80060b4:	f882 c001 	strb.w	ip, [r2, #1]
 80060b8:	f893 e003 	ldrb.w	lr, [r3, #3]
 80060bc:	f881 e001 	strb.w	lr, [r1, #1]
 80060c0:	f813 6f04 	ldrb.w	r6, [r3, #4]!
 80060c4:	70d6      	strb	r6, [r2, #3]
 80060c6:	3204      	adds	r2, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80060c8:	4543      	cmp	r3, r8
 80060ca:	d1ed      	bne.n	80060a8 <f_read+0x220>
 80060cc:	68a2      	ldr	r2, [r4, #8]
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060ce:	f8db 6000 	ldr.w	r6, [fp]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80060d2:	9b04      	ldr	r3, [sp, #16]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060d4:	1831      	adds	r1, r6, r0
 80060d6:	1812      	adds	r2, r2, r0
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80060d8:	1a1e      	subs	r6, r3, r0
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060da:	60a2      	str	r2, [r4, #8]
 80060dc:	f8cb 1000 	str.w	r1, [fp]
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80060e0:	9604      	str	r6, [sp, #16]
 80060e2:	f000 8082 	beq.w	80061ea <f_read+0x362>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060e6:	182d      	adds	r5, r5, r0
 80060e8:	e707      	b.n	8005efa <f_read+0x72>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {						/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	d176      	bne.n	80061dc <f_read+0x354>
					clst = fp->sclust;			/* Follow from the origin */
 80060ee:	6920      	ldr	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80060f0:	2801      	cmp	r0, #1
 80060f2:	f67f af17 	bls.w	8005f24 <f_read+0x9c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80060f6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060fa:	f000 80ae 	beq.w	800625a <f_read+0x3d2>
				fp->clust = clst;				/* Update current cluster */
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6160      	str	r0, [r4, #20]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006102:	699a      	ldr	r2, [r3, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006104:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006106:	1e91      	subs	r1, r2, #2
 8006108:	4288      	cmp	r0, r1
 800610a:	f4bf af0b 	bcs.w	8005f24 <f_read+0x9c>
	return clst * fs->csize + fs->database;
 800610e:	789a      	ldrb	r2, [r3, #2]
 8006110:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8006114:	fb02 fa00 	mul.w	sl, r2, r0
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006118:	eb1a 0709 	adds.w	r7, sl, r9
 800611c:	f43f af02 	beq.w	8005f24 <f_read+0x9c>
			sect += csect;
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006120:	9804      	ldr	r0, [sp, #16]
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 8006122:	19bf      	adds	r7, r7, r6
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006124:	ea5f 2850 	movs.w	r8, r0, lsr #9
 8006128:	f43f af03 	beq.w	8005f32 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800612c:	eb06 0c08 	add.w	ip, r6, r8
 8006130:	4594      	cmp	ip, r2
					cc = fp->fs->csize - csect;
 8006132:	bf88      	it	hi
 8006134:	ebc6 0802 	rsbhi	r8, r6, r2
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 8006138:	7858      	ldrb	r0, [r3, #1]
 800613a:	4629      	mov	r1, r5
 800613c:	463a      	mov	r2, r7
 800613e:	fa5f f388 	uxtb.w	r3, r8
 8006142:	f002 ff43 	bl	8008fcc <disk_read>
 8006146:	2800      	cmp	r0, #0
 8006148:	d140      	bne.n	80061cc <f_read+0x344>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800614a:	79a1      	ldrb	r1, [r4, #6]
 800614c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006150:	d038      	beq.n	80061c4 <f_read+0x33c>
 8006152:	69a3      	ldr	r3, [r4, #24]
 8006154:	1bdf      	subs	r7, r3, r7
 8006156:	45b8      	cmp	r8, r7
 8006158:	d934      	bls.n	80061c4 <f_read+0x33c>

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 800615a:	ebc9 0003 	rsb	r0, r9, r3
 800615e:	ebc6 0e00 	rsb	lr, r6, r0
 8006162:	ebca 030e 	rsb	r3, sl, lr
 8006166:	025e      	lsls	r6, r3, #9
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8006168:	19ab      	adds	r3, r5, r6
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 800616a:	027f      	lsls	r7, r7, #9

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 800616c:	f013 0f03 	tst.w	r3, #3
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8006170:	eb05 0007 	add.w	r0, r5, r7

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8006174:	d13b      	bne.n	80061ee <f_read+0x366>
 8006176:	9e06      	ldr	r6, [sp, #24]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	428e      	cmp	r6, r1
 800617c:	9f07      	ldr	r7, [sp, #28]
 800617e:	bf94      	ite	ls
 8006180:	2200      	movls	r2, #0
 8006182:	2201      	movhi	r2, #1
 8006184:	42bb      	cmp	r3, r7
 8006186:	bf88      	it	hi
 8006188:	f042 0201 	orrhi.w	r2, r2, #1
 800618c:	2a00      	cmp	r2, #0
 800618e:	d02e      	beq.n	80061ee <f_read+0x366>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006190:	6a60      	ldr	r0, [r4, #36]	; 0x24

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8006192:	f503 7700 	add.w	r7, r3, #512	; 0x200
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006196:	6018      	str	r0, [r3, #0]

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 8006198:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800619c:	3308      	adds	r3, #8
 800619e:	e00d      	b.n	80061bc <f_read+0x334>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80061a0:	6890      	ldr	r0, [r2, #8]
 80061a2:	f103 0114 	add.w	r1, r3, #20
 80061a6:	6018      	str	r0, [r3, #0]
 80061a8:	68d6      	ldr	r6, [r2, #12]
 80061aa:	605e      	str	r6, [r3, #4]
 80061ac:	6910      	ldr	r0, [r2, #16]
 80061ae:	6098      	str	r0, [r3, #8]
 80061b0:	6956      	ldr	r6, [r2, #20]
 80061b2:	60de      	str	r6, [r3, #12]
 80061b4:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80061b8:	6118      	str	r0, [r3, #16]
 80061ba:	3318      	adds	r3, #24
 80061bc:	6856      	ldr	r6, [r2, #4]
 80061be:	42bb      	cmp	r3, r7
 80061c0:	600e      	str	r6, [r1, #0]
 80061c2:	d1ed      	bne.n	80061a0 <f_read+0x318>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80061c4:	ea4f 2048 	mov.w	r0, r8, lsl #9
 80061c8:	68a2      	ldr	r2, [r4, #8]
				continue;
 80061ca:	e780      	b.n	80060ce <f_read+0x246>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
 80061cc:	79a1      	ldrb	r1, [r4, #6]
 80061ce:	2001      	movs	r0, #1
 80061d0:	f061 037f 	orn	r3, r1, #127	; 0x7f
 80061d4:	71a3      	strb	r3, [r4, #6]
 80061d6:	e669      	b.n	8005eac <f_read+0x24>
	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 80061d8:	2007      	movs	r0, #7
 80061da:	e667      	b.n	8005eac <f_read+0x24>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80061dc:	4618      	mov	r0, r3
 80061de:	6961      	ldr	r1, [r4, #20]
 80061e0:	f7fc fc1c 	bl	8002a1c <get_fat>
 80061e4:	e784      	b.n	80060f0 <f_read+0x268>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 80061e6:	2003      	movs	r0, #3
 80061e8:	e660      	b.n	8005eac <f_read+0x24>
 80061ea:	4630      	mov	r0, r6
 80061ec:	e65e      	b.n	8005eac <f_read+0x24>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80061ee:	9a06      	ldr	r2, [sp, #24]
 80061f0:	4603      	mov	r3, r0
 80061f2:	f812 cb01 	ldrb.w	ip, [r2], #1
 80061f6:	f500 7700 	add.w	r7, r0, #512	; 0x200
 80061fa:	f803 cb01 	strb.w	ip, [r3], #1
 80061fe:	2103      	movs	r1, #3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006200:	42bb      	cmp	r3, r7
 8006202:	d0df      	beq.n	80061c4 <f_read+0x33c>
 8006204:	b1a1      	cbz	r1, 8006230 <f_read+0x3a8>
 8006206:	2901      	cmp	r1, #1
 8006208:	d00c      	beq.n	8006224 <f_read+0x39c>
 800620a:	2902      	cmp	r1, #2
 800620c:	d006      	beq.n	800621c <f_read+0x394>
		*d++ = *s++;
 800620e:	9906      	ldr	r1, [sp, #24]
 8006210:	3201      	adds	r2, #1
 8006212:	f891 e001 	ldrb.w	lr, [r1, #1]
 8006216:	3301      	adds	r3, #1
 8006218:	f880 e001 	strb.w	lr, [r0, #1]
 800621c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006220:	f803 0b01 	strb.w	r0, [r3], #1
 8006224:	f812 cb01 	ldrb.w	ip, [r2], #1
 8006228:	f803 cb01 	strb.w	ip, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800622c:	42bb      	cmp	r3, r7
 800622e:	d0c9      	beq.n	80061c4 <f_read+0x33c>
		*d++ = *s++;
 8006230:	4610      	mov	r0, r2
 8006232:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006236:	469c      	mov	ip, r3
 8006238:	f80c 1b01 	strb.w	r1, [ip], #1
 800623c:	7856      	ldrb	r6, [r2, #1]
 800623e:	705e      	strb	r6, [r3, #1]
 8006240:	f890 e001 	ldrb.w	lr, [r0, #1]
 8006244:	f88c e001 	strb.w	lr, [ip, #1]
 8006248:	78d1      	ldrb	r1, [r2, #3]
 800624a:	3204      	adds	r2, #4
 800624c:	70d9      	strb	r1, [r3, #3]
 800624e:	3304      	adds	r3, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006250:	42bb      	cmp	r3, r7
 8006252:	d1ed      	bne.n	8006230 <f_read+0x3a8>
 8006254:	e7b6      	b.n	80061c4 <f_read+0x33c>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006256:	2002      	movs	r0, #2
 8006258:	e628      	b.n	8005eac <f_read+0x24>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800625a:	f894 c006 	ldrb.w	ip, [r4, #6]
 800625e:	3002      	adds	r0, #2
 8006260:	f06c 027f 	orn	r2, ip, #127	; 0x7f
 8006264:	71a2      	strb	r2, [r4, #6]
 8006266:	e621      	b.n	8005eac <f_read+0x24>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006268:	9804      	ldr	r0, [sp, #16]
 800626a:	e61f      	b.n	8005eac <f_read+0x24>

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
 800626c:	462a      	mov	r2, r5
 800626e:	e6fe      	b.n	800606e <f_read+0x1e6>

08006270 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	b087      	sub	sp, #28
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	4604      	mov	r4, r0
 800627a:	4693      	mov	fp, r2
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
 800627c:	6800      	ldr	r0, [r0, #0]
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
 800627e:	9a02      	ldr	r2, [sp, #8]
 8006280:	2300      	movs	r3, #0
 8006282:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
 8006284:	88a2      	ldrh	r2, [r4, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 8006286:	b128      	cbz	r0, 8006294 <f_write+0x24>
 8006288:	7803      	ldrb	r3, [r0, #0]
 800628a:	b11b      	cbz	r3, 8006294 <f_write+0x24>
 800628c:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8006290:	4594      	cmp	ip, r2
 8006292:	d003      	beq.n	800629c <f_write+0x2c>
		return FR_INVALID_OBJECT;
 8006294:	2009      	movs	r0, #9

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 8006296:	b007      	add	sp, #28
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 800629c:	7840      	ldrb	r0, [r0, #1]
 800629e:	9100      	str	r1, [sp, #0]
 80062a0:	f002 fe8c 	bl	8008fbc <disk_status>
 80062a4:	f010 0f01 	tst.w	r0, #1
 80062a8:	9900      	ldr	r1, [sp, #0]
 80062aa:	f040 81a9 	bne.w	8006600 <f_write+0x390>

	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 80062ae:	79a3      	ldrb	r3, [r4, #6]
 80062b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062b4:	f040 81e3 	bne.w	800667e <f_write+0x40e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80062b8:	f013 0f02 	tst.w	r3, #2
 80062bc:	f000 8181 	beq.w	80065c2 <f_write+0x352>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 80062c0:	68e0      	ldr	r0, [r4, #12]
 80062c2:	eb1b 0f00 	cmn.w	fp, r0
 80062c6:	f080 8189 	bcs.w	80065dc <f_write+0x36c>

	for ( ;  btw;							/* Repeat until all data written */
 80062ca:	f1bb 0f00 	cmp.w	fp, #0
 80062ce:	f000 8185 	beq.w	80065dc <f_write+0x36c>
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80062d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 80062d6:	f504 7609 	add.w	r6, r4, #548	; 0x224
 80062da:	f104 0728 	add.w	r7, r4, #40	; 0x28
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
 80062de:	68a2      	ldr	r2, [r4, #8]
 80062e0:	460d      	mov	r5, r1
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80062e2:	9003      	str	r0, [sp, #12]
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 80062e4:	9605      	str	r6, [sp, #20]
 80062e6:	9704      	str	r7, [sp, #16]
 80062e8:	f8cd b004 	str.w	fp, [sp, #4]
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80062ec:	05d1      	lsls	r1, r2, #23
 80062ee:	0dcb      	lsrs	r3, r1, #23
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d136      	bne.n	8006362 <f_write+0xf2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	7898      	ldrb	r0, [r3, #2]
 80062f8:	1e46      	subs	r6, r0, #1
 80062fa:	ea06 2e52 	and.w	lr, r6, r2, lsr #9
 80062fe:	fa5f f68e 	uxtb.w	r6, lr
			if (!csect) {					/* On the cluster boundary? */
 8006302:	b97e      	cbnz	r6, 8006324 <f_write+0xb4>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006304:	2a00      	cmp	r2, #0
 8006306:	f040 815e 	bne.w	80065c6 <f_write+0x356>
					clst = fp->sclust;		/* Follow from the origin */
 800630a:	6920      	ldr	r0, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 800630c:	2800      	cmp	r0, #0
 800630e:	f000 816e 	beq.w	80065ee <f_write+0x37e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006312:	2801      	cmp	r0, #1
 8006314:	f000 81b5 	beq.w	8006682 <f_write+0x412>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800631c:	f000 81b7 	beq.w	800668e <f_write+0x41e>
				fp->clust = clst;			/* Update current cluster */
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	6160      	str	r0, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006324:	79a1      	ldrb	r1, [r4, #6]
 8006326:	f011 0f40 	tst.w	r1, #64	; 0x40
 800632a:	f040 812b 	bne.w	8006584 <f_write+0x314>
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800632e:	6960      	ldr	r0, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006330:	699a      	ldr	r2, [r3, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006332:	f1a0 0a02 	sub.w	sl, r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006336:	1e90      	subs	r0, r2, #2
 8006338:	4582      	cmp	sl, r0
 800633a:	f0c0 80cc 	bcc.w	80064d6 <f_write+0x266>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800633e:	f061 0e7f 	orn	lr, r1, #127	; 0x7f
 8006342:	f884 e006 	strb.w	lr, [r4, #6]
 8006346:	2002      	movs	r0, #2
 8006348:	e7a5      	b.n	8006296 <f_write+0x26>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800634a:	69a0      	ldr	r0, [r4, #24]
 800634c:	42b8      	cmp	r0, r7
 800634e:	f000 812e 	beq.w	80065ae <f_write+0x33e>
				if (fp->fptr < fp->fsize &&
 8006352:	68a2      	ldr	r2, [r4, #8]
 8006354:	68e1      	ldr	r1, [r4, #12]
 8006356:	428a      	cmp	r2, r1
 8006358:	f0c0 8122 	bcc.w	80065a0 <f_write+0x330>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 800635c:	05d6      	lsls	r6, r2, #23
 800635e:	61a7      	str	r7, [r4, #24]
 8006360:	0df3      	lsrs	r3, r6, #23
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006362:	9f01      	ldr	r7, [sp, #4]
 8006364:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
 8006368:	42b8      	cmp	r0, r7
 800636a:	bf28      	it	cs
 800636c:	4638      	movcs	r0, r7
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800636e:	2800      	cmp	r0, #0
 8006370:	f000 80a0 	beq.w	80064b4 <f_write+0x244>
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006374:	9a03      	ldr	r2, [sp, #12]
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8006376:	18e6      	adds	r6, r4, r3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006378:	ea4f 0c90 	mov.w	ip, r0, lsr #2
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800637c:	eb02 0b03 	add.w	fp, r2, r3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006380:	f100 39ff 	add.w	r9, r0, #4294967295
 8006384:	f106 0324 	add.w	r3, r6, #36	; 0x24
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8006388:	ea4f 088c 	mov.w	r8, ip, lsl #2
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800638c:	f1bc 0f00 	cmp.w	ip, #0
 8006390:	f000 8186 	beq.w	80066a0 <f_write+0x430>
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8006394:	ea43 0705 	orr.w	r7, r3, r5
 8006398:	f106 0e28 	add.w	lr, r6, #40	; 0x28
 800639c:	f017 0f03 	tst.w	r7, #3
 80063a0:	bf14      	ite	ne
 80063a2:	2100      	movne	r1, #0
 80063a4:	2101      	moveq	r1, #1
 80063a6:	1d2f      	adds	r7, r5, #4
 80063a8:	4575      	cmp	r5, lr
 80063aa:	bf94      	ite	ls
 80063ac:	f04f 0e00 	movls.w	lr, #0
 80063b0:	f04f 0e01 	movhi.w	lr, #1
 80063b4:	42bb      	cmp	r3, r7
 80063b6:	bf88      	it	hi
 80063b8:	f04e 0e01 	orrhi.w	lr, lr, #1
 80063bc:	2803      	cmp	r0, #3
 80063be:	bf94      	ite	ls
 80063c0:	2100      	movls	r1, #0
 80063c2:	f001 0101 	andhi.w	r1, r1, #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80063c6:	ea11 0f0e 	tst.w	r1, lr
 80063ca:	f000 8169 	beq.w	80066a0 <f_write+0x430>
		*d++ = *s++;
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	2101      	movs	r1, #1
 80063d2:	f10c 3aff 	add.w	sl, ip, #4294967295
 80063d6:	458c      	cmp	ip, r1
 80063d8:	6273      	str	r3, [r6, #36]	; 0x24
 80063da:	f00a 0a03 	and.w	sl, sl, #3
 80063de:	463b      	mov	r3, r7
 80063e0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80063e4:	d92e      	bls.n	8006444 <f_write+0x1d4>
 80063e6:	f1ba 0f00 	cmp.w	sl, #0
 80063ea:	d017      	beq.n	800641c <f_write+0x1ac>
 80063ec:	f1ba 0f01 	cmp.w	sl, #1
 80063f0:	d00d      	beq.n	800640e <f_write+0x19e>
 80063f2:	f1ba 0f02 	cmp.w	sl, #2
 80063f6:	d005      	beq.n	8006404 <f_write+0x194>
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	62b2      	str	r2, [r6, #40]	; 0x28
 80063fe:	2102      	movs	r1, #2
 8006400:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 8006404:	f853 6b04 	ldr.w	r6, [r3], #4
 8006408:	3101      	adds	r1, #1
 800640a:	f842 6b04 	str.w	r6, [r2], #4
 800640e:	f853 7b04 	ldr.w	r7, [r3], #4
 8006412:	3101      	adds	r1, #1
 8006414:	458c      	cmp	ip, r1
 8006416:	f842 7b04 	str.w	r7, [r2], #4
 800641a:	d913      	bls.n	8006444 <f_write+0x1d4>
 800641c:	4682      	mov	sl, r0
 800641e:	4618      	mov	r0, r3
 8006420:	f850 6b04 	ldr.w	r6, [r0], #4
 8006424:	4696      	mov	lr, r2
 8006426:	f84e 6b04 	str.w	r6, [lr], #4
 800642a:	685f      	ldr	r7, [r3, #4]
 800642c:	3104      	adds	r1, #4
 800642e:	6057      	str	r7, [r2, #4]
 8006430:	6846      	ldr	r6, [r0, #4]
 8006432:	f8ce 6004 	str.w	r6, [lr, #4]
 8006436:	68d8      	ldr	r0, [r3, #12]
 8006438:	3310      	adds	r3, #16
 800643a:	60d0      	str	r0, [r2, #12]
 800643c:	3210      	adds	r2, #16
 800643e:	458c      	cmp	ip, r1
 8006440:	d8ed      	bhi.n	800641e <f_write+0x1ae>
 8006442:	4650      	mov	r0, sl
 8006444:	4540      	cmp	r0, r8
 8006446:	eb05 0208 	add.w	r2, r5, r8
 800644a:	44c3      	add	fp, r8
 800644c:	ebc8 0909 	rsb	r9, r8, r9
 8006450:	d02f      	beq.n	80064b2 <f_write+0x242>
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8006452:	4613      	mov	r3, r2
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006454:	f892 c000 	ldrb.w	ip, [r2]
 8006458:	444a      	add	r2, r9
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800645a:	4293      	cmp	r3, r2
		*d++ = *s++;
 800645c:	f80b cb01 	strb.w	ip, [fp], #1
 8006460:	f009 0103 	and.w	r1, r9, #3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006464:	d025      	beq.n	80064b2 <f_write+0x242>
 8006466:	b189      	cbz	r1, 800648c <f_write+0x21c>
 8006468:	2901      	cmp	r1, #1
 800646a:	d009      	beq.n	8006480 <f_write+0x210>
 800646c:	2902      	cmp	r1, #2
		*d++ = *s++;
 800646e:	bf1c      	itt	ne
 8006470:	f813 1f01 	ldrbne.w	r1, [r3, #1]!
 8006474:	f80b 1b01 	strbne.w	r1, [fp], #1
 8006478:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800647c:	f80b 7b01 	strb.w	r7, [fp], #1
 8006480:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006484:	4293      	cmp	r3, r2
		*d++ = *s++;
 8006486:	f80b 1b01 	strb.w	r1, [fp], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800648a:	d012      	beq.n	80064b2 <f_write+0x242>
		*d++ = *s++;
 800648c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006490:	46de      	mov	lr, fp
 8006492:	f80e cb01 	strb.w	ip, [lr], #1
 8006496:	789e      	ldrb	r6, [r3, #2]
 8006498:	f88b 6001 	strb.w	r6, [fp, #1]
 800649c:	78df      	ldrb	r7, [r3, #3]
 800649e:	f88e 7001 	strb.w	r7, [lr, #1]
 80064a2:	f813 1f04 	ldrb.w	r1, [r3, #4]!
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80064a6:	4293      	cmp	r3, r2
		*d++ = *s++;
 80064a8:	f88b 1003 	strb.w	r1, [fp, #3]
 80064ac:	f10b 0b04 	add.w	fp, fp, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80064b0:	d1ec      	bne.n	800648c <f_write+0x21c>
 80064b2:	68a2      	ldr	r2, [r4, #8]
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
 80064b4:	79a1      	ldrb	r1, [r4, #6]
 80064b6:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 80064ba:	71a3      	strb	r3, [r4, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80064bc:	9e02      	ldr	r6, [sp, #8]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 80064be:	9f01      	ldr	r7, [sp, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80064c0:	6831      	ldr	r1, [r6, #0]
 80064c2:	1812      	adds	r2, r2, r0
 80064c4:	180b      	adds	r3, r1, r0
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 80064c6:	1a3f      	subs	r7, r7, r0
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80064c8:	60a2      	str	r2, [r4, #8]
 80064ca:	6033      	str	r3, [r6, #0]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 80064cc:	9701      	str	r7, [sp, #4]
 80064ce:	f000 8099 	beq.w	8006604 <f_write+0x394>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80064d2:	182d      	adds	r5, r5, r0
 80064d4:	e70a      	b.n	80062ec <f_write+0x7c>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
 80064d6:	789a      	ldrb	r2, [r3, #2]
 80064d8:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80064dc:	fb0a fa02 	mul.w	sl, sl, r2
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80064e0:	eb1a 0709 	adds.w	r7, sl, r9
 80064e4:	f43f af2b 	beq.w	800633e <f_write+0xce>
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 80064e8:	9901      	ldr	r1, [sp, #4]
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 80064ea:	19f7      	adds	r7, r6, r7
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 80064ec:	ea5f 2851 	movs.w	r8, r1, lsr #9
 80064f0:	f43f af2b 	beq.w	800634a <f_write+0xda>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80064f4:	eb06 0c08 	add.w	ip, r6, r8
 80064f8:	4594      	cmp	ip, r2
					cc = fp->fs->csize - csect;
 80064fa:	bf88      	it	hi
 80064fc:	ebc6 0802 	rsbhi	r8, r6, r2
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 8006500:	7858      	ldrb	r0, [r3, #1]
 8006502:	4629      	mov	r1, r5
 8006504:	463a      	mov	r2, r7
 8006506:	fa5f f388 	uxtb.w	r3, r8
 800650a:	f002 fe1d 	bl	8009148 <disk_write>
 800650e:	2800      	cmp	r0, #0
 8006510:	d14f      	bne.n	80065b2 <f_write+0x342>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006512:	69a3      	ldr	r3, [r4, #24]
 8006514:	1bdf      	subs	r7, r3, r7
 8006516:	45b8      	cmp	r8, r7
 8006518:	d930      	bls.n	800657c <f_write+0x30c>
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 800651a:	ebc9 0e03 	rsb	lr, r9, r3
 800651e:	ebca 020e 	rsb	r2, sl, lr
 8006522:	1b93      	subs	r3, r2, r6
 8006524:	025e      	lsls	r6, r3, #9
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8006526:	19ab      	adds	r3, r5, r6
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006528:	027f      	lsls	r7, r7, #9
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800652a:	f013 0f03 	tst.w	r3, #3
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800652e:	eb05 0107 	add.w	r1, r5, r7
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8006532:	9a03      	ldr	r2, [sp, #12]
 8006534:	d169      	bne.n	800660a <f_write+0x39a>
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 8006536:	9f04      	ldr	r7, [sp, #16]
 8006538:	1d1e      	adds	r6, r3, #4
 800653a:	42bb      	cmp	r3, r7
 800653c:	bf94      	ite	ls
 800653e:	2000      	movls	r0, #0
 8006540:	2001      	movhi	r0, #1
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8006542:	42b2      	cmp	r2, r6
 8006544:	bf88      	it	hi
 8006546:	f040 0001 	orrhi.w	r0, r0, #1
 800654a:	2800      	cmp	r0, #0
 800654c:	d05d      	beq.n	800660a <f_write+0x39a>
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 800654e:	f503 7700 	add.w	r7, r3, #512	; 0x200
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006552:	469c      	mov	ip, r3
 8006554:	f85c 6b04 	ldr.w	r6, [ip], #4
 8006558:	4611      	mov	r1, r2
 800655a:	f841 6b04 	str.w	r6, [r1], #4
 800655e:	6858      	ldr	r0, [r3, #4]
 8006560:	6050      	str	r0, [r2, #4]
 8006562:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006566:	604e      	str	r6, [r1, #4]
 8006568:	68d8      	ldr	r0, [r3, #12]
 800656a:	3310      	adds	r3, #16
 800656c:	60d0      	str	r0, [r2, #12]
 800656e:	3210      	adds	r2, #16
 8006570:	42bb      	cmp	r3, r7
 8006572:	d1ee      	bne.n	8006552 <f_write+0x2e2>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
 8006574:	79a2      	ldrb	r2, [r4, #6]
 8006576:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800657a:	71a3      	strb	r3, [r4, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800657c:	ea4f 2048 	mov.w	r0, r8, lsl #9
 8006580:	68a2      	ldr	r2, [r4, #8]
				continue;
 8006582:	e79b      	b.n	80064bc <f_write+0x24c>
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006584:	7858      	ldrb	r0, [r3, #1]
 8006586:	9903      	ldr	r1, [sp, #12]
 8006588:	69a2      	ldr	r2, [r4, #24]
 800658a:	2301      	movs	r3, #1
 800658c:	f002 fddc 	bl	8009148 <disk_write>
 8006590:	b978      	cbnz	r0, 80065b2 <f_write+0x342>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8006592:	f894 a006 	ldrb.w	sl, [r4, #6]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f00a 01bf 	and.w	r1, sl, #191	; 0xbf
 800659c:	71a1      	strb	r1, [r4, #6]
 800659e:	e6c6      	b.n	800632e <f_write+0xbe>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80065a0:	7858      	ldrb	r0, [r3, #1]
 80065a2:	9903      	ldr	r1, [sp, #12]
 80065a4:	463a      	mov	r2, r7
 80065a6:	2301      	movs	r3, #1
 80065a8:	f002 fd10 	bl	8008fcc <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 80065ac:	b908      	cbnz	r0, 80065b2 <f_write+0x342>
 80065ae:	68a2      	ldr	r2, [r4, #8]
 80065b0:	e6d4      	b.n	800635c <f_write+0xec>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 80065b2:	f894 c006 	ldrb.w	ip, [r4, #6]
 80065b6:	2001      	movs	r0, #1
 80065b8:	f06c 0e7f 	orn	lr, ip, #127	; 0x7f
 80065bc:	f884 e006 	strb.w	lr, [r4, #6]
 80065c0:	e669      	b.n	8006296 <f_write+0x26>
	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 80065c2:	2007      	movs	r0, #7
 80065c4:	e667      	b.n	8006296 <f_write+0x26>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80065c6:	4618      	mov	r0, r3
 80065c8:	6961      	ldr	r1, [r4, #20]
 80065ca:	f7fc ffe5 	bl	8003598 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f47f ae9f 	bne.w	8006312 <f_write+0xa2>
 80065d4:	68a2      	ldr	r2, [r4, #8]
 80065d6:	68e0      	ldr	r0, [r4, #12]
 80065d8:	79a3      	ldrb	r3, [r4, #6]
 80065da:	e000      	b.n	80065de <f_write+0x36e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 80065dc:	68a2      	ldr	r2, [r4, #8]
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80065de:	4290      	cmp	r0, r2
 80065e0:	bf38      	it	cc
 80065e2:	60e2      	strcc	r2, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	71a2      	strb	r2, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80065ea:	2000      	movs	r0, #0
 80065ec:	e653      	b.n	8006296 <f_write+0x26>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80065ee:	4618      	mov	r0, r3
 80065f0:	4631      	mov	r1, r6
 80065f2:	f7fc ffd1 	bl	8003598 <create_chain>
 80065f6:	6120      	str	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f47f ae8a 	bne.w	8006312 <f_write+0xa2>
 80065fe:	e7e9      	b.n	80065d4 <f_write+0x364>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 8006600:	2003      	movs	r0, #3
 8006602:	e648      	b.n	8006296 <f_write+0x26>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006604:	68e0      	ldr	r0, [r4, #12]
 8006606:	79a3      	ldrb	r3, [r4, #6]
 8006608:	e7e9      	b.n	80065de <f_write+0x36e>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 800660a:	460a      	mov	r2, r1
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	f812 cb01 	ldrb.w	ip, [r2], #1
 8006612:	9f05      	ldr	r7, [sp, #20]
 8006614:	43d8      	mvns	r0, r3
 8006616:	f803 cb01 	strb.w	ip, [r3], #1
 800661a:	eb07 0e00 	add.w	lr, r7, r0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800661e:	42bb      	cmp	r3, r7
 8006620:	f00e 0003 	and.w	r0, lr, #3
 8006624:	d0a6      	beq.n	8006574 <f_write+0x304>
 8006626:	2800      	cmp	r0, #0
 8006628:	d038      	beq.n	800669c <f_write+0x42c>
 800662a:	2801      	cmp	r0, #1
 800662c:	d00c      	beq.n	8006648 <f_write+0x3d8>
 800662e:	2802      	cmp	r0, #2
 8006630:	d006      	beq.n	8006640 <f_write+0x3d0>
		*d++ = *s++;
 8006632:	f891 e001 	ldrb.w	lr, [r1, #1]
 8006636:	9803      	ldr	r0, [sp, #12]
 8006638:	3201      	adds	r2, #1
 800663a:	f880 e001 	strb.w	lr, [r0, #1]
 800663e:	3301      	adds	r3, #1
 8006640:	f812 6b01 	ldrb.w	r6, [r2], #1
 8006644:	f803 6b01 	strb.w	r6, [r3], #1
 8006648:	f812 cb01 	ldrb.w	ip, [r2], #1
 800664c:	f803 cb01 	strb.w	ip, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006650:	9905      	ldr	r1, [sp, #20]
 8006652:	428b      	cmp	r3, r1
 8006654:	d08e      	beq.n	8006574 <f_write+0x304>
 8006656:	460f      	mov	r7, r1
		*d++ = *s++;
 8006658:	4694      	mov	ip, r2
 800665a:	f81c 1b01 	ldrb.w	r1, [ip], #1
 800665e:	469e      	mov	lr, r3
 8006660:	f80e 1b01 	strb.w	r1, [lr], #1
 8006664:	7850      	ldrb	r0, [r2, #1]
 8006666:	7058      	strb	r0, [r3, #1]
 8006668:	f89c 6001 	ldrb.w	r6, [ip, #1]
 800666c:	f88e 6001 	strb.w	r6, [lr, #1]
 8006670:	78d1      	ldrb	r1, [r2, #3]
 8006672:	3204      	adds	r2, #4
 8006674:	70d9      	strb	r1, [r3, #3]
 8006676:	3304      	adds	r3, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8006678:	42bb      	cmp	r3, r7
 800667a:	d1ed      	bne.n	8006658 <f_write+0x3e8>
 800667c:	e77a      	b.n	8006574 <f_write+0x304>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800667e:	2002      	movs	r0, #2
 8006680:	e609      	b.n	8006296 <f_write+0x26>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006682:	79a3      	ldrb	r3, [r4, #6]
 8006684:	3001      	adds	r0, #1
 8006686:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800668a:	71a2      	strb	r2, [r4, #6]
 800668c:	e603      	b.n	8006296 <f_write+0x26>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800668e:	79a1      	ldrb	r1, [r4, #6]
 8006690:	3002      	adds	r0, #2
 8006692:	f061 0c7f 	orn	ip, r1, #127	; 0x7f
 8006696:	f884 c006 	strb.w	ip, [r4, #6]
 800669a:	e5fc      	b.n	8006296 <f_write+0x26>
 800669c:	9f05      	ldr	r7, [sp, #20]
 800669e:	e7db      	b.n	8006658 <f_write+0x3e8>
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
 80066a0:	462a      	mov	r2, r5
 80066a2:	e6d6      	b.n	8006452 <f_write+0x1e2>

080066a4 <f_sync>:
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 80066a4:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 80066a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 80066aa:	8881      	ldrh	r1, [r0, #4]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 80066ac:	4604      	mov	r4, r0
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 80066ae:	b123      	cbz	r3, 80066ba <f_sync+0x16>
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	b112      	cbz	r2, 80066ba <f_sync+0x16>
 80066b4:	88d8      	ldrh	r0, [r3, #6]
 80066b6:	4288      	cmp	r0, r1
 80066b8:	d002      	beq.n	80066c0 <f_sync+0x1c>
		return FR_INVALID_OBJECT;
 80066ba:	2009      	movs	r0, #9
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 80066c0:	7858      	ldrb	r0, [r3, #1]
 80066c2:	f002 fc7b 	bl	8008fbc <disk_status>
 80066c6:	f010 0f01 	tst.w	r0, #1
 80066ca:	d159      	bne.n	8006780 <f_sync+0xdc>
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80066cc:	79a3      	ldrb	r3, [r4, #6]
 80066ce:	f013 0020 	ands.w	r0, r3, #32
 80066d2:	f000 80cd 	beq.w	8006870 <f_sync+0x1cc>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 80066d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066da:	d00d      	beq.n	80066f8 <f_sync+0x54>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80066dc:	4621      	mov	r1, r4
 80066de:	f851 3b24 	ldr.w	r3, [r1], #36
 80066e2:	69a2      	ldr	r2, [r4, #24]
 80066e4:	7858      	ldrb	r0, [r3, #1]
 80066e6:	2301      	movs	r3, #1
 80066e8:	f002 fd2e 	bl	8009148 <disk_write>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d144      	bne.n	800677a <f_sync+0xd6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80066f0:	79a5      	ldrb	r5, [r4, #6]
 80066f2:	f025 0140 	bic.w	r1, r5, #64	; 0x40
 80066f6:	71a1      	strb	r1, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80066f8:	6825      	ldr	r5, [r4, #0]
 80066fa:	f8d4 801c 	ldr.w	r8, [r4, #28]
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 80066fe:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8006700:	45b0      	cmp	r8, r6
 8006702:	d005      	beq.n	8006710 <f_sync+0x6c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8006704:	792a      	ldrb	r2, [r5, #4]
 8006706:	2a00      	cmp	r2, #0
 8006708:	d149      	bne.n	800679e <f_sync+0xfa>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 800670a:	f1b8 0f00 	cmp.w	r8, #0
 800670e:	d13a      	bne.n	8006786 <f_sync+0xe2>
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
			if (res == FR_OK) {
				dir = fp->dir_ptr;
 8006710:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006712:	f895 c00b 	ldrb.w	ip, [r5, #11]
 8006716:	f04c 0e20 	orr.w	lr, ip, #32
 800671a:	f885 e00b 	strb.w	lr, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 800671e:	68e0      	ldr	r0, [r4, #12]
 8006720:	7728      	strb	r0, [r5, #28]
 8006722:	89a1      	ldrh	r1, [r4, #12]
 8006724:	0a0a      	lsrs	r2, r1, #8
 8006726:	776a      	strb	r2, [r5, #29]
 8006728:	89e3      	ldrh	r3, [r4, #14]
 800672a:	77ab      	strb	r3, [r5, #30]
 800672c:	f894 c00f 	ldrb.w	ip, [r4, #15]
 8006730:	f885 c01f 	strb.w	ip, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
 8006734:	6920      	ldr	r0, [r4, #16]
 8006736:	76a8      	strb	r0, [r5, #26]
 8006738:	8a21      	ldrh	r1, [r4, #16]
 800673a:	0a0a      	lsrs	r2, r1, #8
 800673c:	76ea      	strb	r2, [r5, #27]
 800673e:	f8b4 e012 	ldrh.w	lr, [r4, #18]
 8006742:	f885 e014 	strb.w	lr, [r5, #20]
 8006746:	8a63      	ldrh	r3, [r4, #18]
 8006748:	0a18      	lsrs	r0, r3, #8
 800674a:	7568      	strb	r0, [r5, #21]
				tim = get_fattime();						/* Update updated time */
 800674c:	f7fb fcc0 	bl	80020d0 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
 8006750:	0c02      	lsrs	r2, r0, #16
 8006752:	0e03      	lsrs	r3, r0, #24
 8006754:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8006758:	75e9      	strb	r1, [r5, #23]
 800675a:	75a8      	strb	r0, [r5, #22]
 800675c:	762a      	strb	r2, [r5, #24]
 800675e:	766b      	strb	r3, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8006760:	79a2      	ldrb	r2, [r4, #6]
				fp->fs->wflag = 1;
 8006762:	6823      	ldr	r3, [r4, #0]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
 8006764:	f022 0c20 	bic.w	ip, r2, #32
				fp->fs->wflag = 1;
 8006768:	2101      	movs	r1, #1
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
 800676a:	f884 c006 	strb.w	ip, [r4, #6]
				fp->fs->wflag = 1;
 800676e:	7119      	strb	r1, [r3, #4]
				res = sync(fp->fs);
 8006770:	6820      	ldr	r0, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8006772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
				res = sync(fp->fs);
 8006776:	f7fc b863 	b.w	8002840 <sync>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800677a:	2001      	movs	r0, #1
 800677c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 8006780:	2003      	movs	r0, #3
 8006782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8006786:	7868      	ldrb	r0, [r5, #1]
 8006788:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800678c:	4642      	mov	r2, r8
 800678e:	2301      	movs	r3, #1
 8006790:	f002 fc1c 	bl	8008fcc <disk_read>
 8006794:	2800      	cmp	r0, #0
 8006796:	d16d      	bne.n	8006874 <f_sync+0x1d0>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8006798:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800679c:	e7b8      	b.n	8006710 <f_sync+0x6c>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800679e:	f105 0930 	add.w	r9, r5, #48	; 0x30
 80067a2:	7868      	ldrb	r0, [r5, #1]
 80067a4:	4649      	mov	r1, r9
 80067a6:	4632      	mov	r2, r6
 80067a8:	2301      	movs	r3, #1
 80067aa:	f002 fccd 	bl	8009148 <disk_write>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1e3      	bne.n	800677a <f_sync+0xd6>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80067b2:	69eb      	ldr	r3, [r5, #28]
 80067b4:	6a29      	ldr	r1, [r5, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 80067b6:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80067b8:	eb03 0c01 	add.w	ip, r3, r1
 80067bc:	4566      	cmp	r6, ip
 80067be:	d2a4      	bcs.n	800670a <f_sync+0x66>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80067c0:	78ef      	ldrb	r7, [r5, #3]
 80067c2:	2f01      	cmp	r7, #1
 80067c4:	d9a1      	bls.n	800670a <f_sync+0x66>
 80067c6:	f1a7 0a02 	sub.w	sl, r7, #2
 80067ca:	f01a 0a03 	ands.w	sl, sl, #3
 80067ce:	d023      	beq.n	8006818 <f_sync+0x174>
					wsect += fs->fsize;
 80067d0:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80067d2:	7868      	ldrb	r0, [r5, #1]
 80067d4:	2301      	movs	r3, #1
 80067d6:	4649      	mov	r1, r9
 80067d8:	4632      	mov	r2, r6
 80067da:	f002 fcb5 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80067de:	3f01      	subs	r7, #1
 80067e0:	f1ba 0f01 	cmp.w	sl, #1
 80067e4:	b2ff      	uxtb	r7, r7
 80067e6:	69eb      	ldr	r3, [r5, #28]
 80067e8:	d016      	beq.n	8006818 <f_sync+0x174>
 80067ea:	f1ba 0f02 	cmp.w	sl, #2
 80067ee:	d009      	beq.n	8006804 <f_sync+0x160>
					wsect += fs->fsize;
 80067f0:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80067f2:	4632      	mov	r2, r6
 80067f4:	2301      	movs	r3, #1
 80067f6:	7868      	ldrb	r0, [r5, #1]
 80067f8:	4649      	mov	r1, r9
 80067fa:	f002 fca5 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80067fe:	1e7a      	subs	r2, r7, #1
 8006800:	69eb      	ldr	r3, [r5, #28]
 8006802:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 8006804:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006806:	7868      	ldrb	r0, [r5, #1]
 8006808:	2301      	movs	r3, #1
 800680a:	4649      	mov	r1, r9
 800680c:	4632      	mov	r2, r6
 800680e:	f002 fc9b 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006812:	1e7b      	subs	r3, r7, #1
 8006814:	b2df      	uxtb	r7, r3
 8006816:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8006818:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800681a:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800681c:	2301      	movs	r3, #1
 800681e:	4649      	mov	r1, r9
 8006820:	4632      	mov	r2, r6
 8006822:	7868      	ldrb	r0, [r5, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006824:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8006826:	f002 fc8f 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800682a:	2f01      	cmp	r7, #1
 800682c:	f43f af6d 	beq.w	800670a <f_sync+0x66>
 8006830:	69e8      	ldr	r0, [r5, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8006832:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8006834:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8006836:	4632      	mov	r2, r6
 8006838:	2301      	movs	r3, #1
 800683a:	7868      	ldrb	r0, [r5, #1]
 800683c:	f002 fc84 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006840:	69ea      	ldr	r2, [r5, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8006842:	4649      	mov	r1, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8006844:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8006846:	4632      	mov	r2, r6
 8006848:	2301      	movs	r3, #1
 800684a:	7868      	ldrb	r0, [r5, #1]
 800684c:	f002 fc7c 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006850:	3f01      	subs	r7, #1
 8006852:	69eb      	ldr	r3, [r5, #28]
 8006854:	b2ff      	uxtb	r7, r7
 8006856:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 8006858:	18f6      	adds	r6, r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 800685a:	b2c7      	uxtb	r7, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800685c:	2301      	movs	r3, #1
 800685e:	7868      	ldrb	r0, [r5, #1]
 8006860:	4649      	mov	r1, r9
 8006862:	4632      	mov	r2, r6
 8006864:	f002 fc70 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006868:	1e7b      	subs	r3, r7, #1
 800686a:	b2df      	uxtb	r7, r3
 800686c:	69eb      	ldr	r3, [r5, #28]
 800686e:	e7d3      	b.n	8006818 <f_sync+0x174>
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8006874:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8006876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687a:	bf00      	nop

0800687c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800687c:	b510      	push	{r4, lr}
 800687e:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
 8006880:	f7ff ff10 	bl	80066a4 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8006884:	b900      	cbnz	r0, 8006888 <f_close+0xc>
 8006886:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
 8006888:	bd10      	pop	{r4, pc}
 800688a:	bf00      	nop

0800688c <f_lseek>:
)
{
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 800688c:	6803      	ldr	r3, [r0, #0]

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	460e      	mov	r6, r1
 8006894:	4604      	mov	r4, r0
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8006896:	8881      	ldrh	r1, [r0, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 8006898:	b123      	cbz	r3, 80068a4 <f_lseek+0x18>
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	b112      	cbz	r2, 80068a4 <f_lseek+0x18>
 800689e:	88d8      	ldrh	r0, [r3, #6]
 80068a0:	4288      	cmp	r0, r1
 80068a2:	d002      	beq.n	80068aa <f_lseek+0x1e>
		return FR_INVALID_OBJECT;
 80068a4:	2009      	movs	r0, #9
 80068a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 80068aa:	7858      	ldrb	r0, [r3, #1]
 80068ac:	f002 fb86 	bl	8008fbc <disk_status>
 80068b0:	f010 0f01 	tst.w	r0, #1
 80068b4:	f040 80a3 	bne.w	80069fe <f_lseek+0x172>
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 80068b8:	79a2      	ldrb	r2, [r4, #6]
 80068ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068be:	f040 80c2 	bne.w	8006a46 <f_lseek+0x1ba>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	42b3      	cmp	r3, r6
 80068c6:	d203      	bcs.n	80068d0 <f_lseek+0x44>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80068c8:	f012 0f02 	tst.w	r2, #2
 80068cc:	bf08      	it	eq
 80068ce:	461e      	moveq	r6, r3
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 80068d0:	2300      	movs	r3, #0
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
 80068d2:	68a2      	ldr	r2, [r4, #8]
		fp->fptr = nsect = 0;
 80068d4:	60a3      	str	r3, [r4, #8]
		if (ofs) {
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d03b      	beq.n	8006952 <f_lseek+0xc6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	7887      	ldrb	r7, [r0, #2]
 80068de:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	d039      	beq.n	8006958 <f_lseek+0xcc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80068e4:	3a01      	subs	r2, #1
 80068e6:	1e73      	subs	r3, r6, #1
 80068e8:	fbb3 f1f7 	udiv	r1, r3, r7
 80068ec:	fbb2 fcf7 	udiv	ip, r2, r7

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
 80068f0:	4561      	cmp	r1, ip
 80068f2:	d331      	bcc.n	8006958 <f_lseek+0xcc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80068f4:	4278      	negs	r0, r7
				ofs -= fp->fptr;
				clst = fp->clust;
 80068f6:	6961      	ldr	r1, [r4, #20]
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80068f8:	ea00 0202 	and.w	r2, r0, r2
 80068fc:	60a2      	str	r2, [r4, #8]
				ofs -= fp->fptr;
 80068fe:	1ab6      	subs	r6, r6, r2
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
 8006900:	2900      	cmp	r1, #0
 8006902:	d12f      	bne.n	8006964 <f_lseek+0xd8>
 8006904:	68a3      	ldr	r3, [r4, #8]
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8006906:	460d      	mov	r5, r1
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006908:	05da      	lsls	r2, r3, #23
 800690a:	0dd0      	lsrs	r0, r2, #23
 800690c:	2800      	cmp	r0, #0
 800690e:	d079      	beq.n	8006a04 <f_lseek+0x178>
 8006910:	69a2      	ldr	r2, [r4, #24]
 8006912:	42aa      	cmp	r2, r5
 8006914:	d076      	beq.n	8006a04 <f_lseek+0x178>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006916:	79a6      	ldrb	r6, [r4, #6]
 8006918:	f016 0f40 	tst.w	r6, #64	; 0x40
 800691c:	d15f      	bne.n	80069de <f_lseek+0x152>
 800691e:	f104 0624 	add.w	r6, r4, #36	; 0x24
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	4631      	mov	r1, r6
 8006926:	7858      	ldrb	r0, [r3, #1]
 8006928:	462a      	mov	r2, r5
 800692a:	2301      	movs	r3, #1
 800692c:	f002 fb4e 	bl	8008fcc <disk_read>
 8006930:	2800      	cmp	r0, #0
 8006932:	d15d      	bne.n	80069f0 <f_lseek+0x164>
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 8006934:	68a3      	ldr	r3, [r4, #8]
 8006936:	68e2      	ldr	r2, [r4, #12]
 8006938:	61a5      	str	r5, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800693a:	429a      	cmp	r2, r3
 800693c:	f080 8089 	bcs.w	8006a52 <f_lseek+0x1c6>
			fp->fsize = fp->fptr;
			fp->flag |= FA__WRITTEN;
 8006940:	f894 e006 	ldrb.w	lr, [r4, #6]
#endif
			fp->dsect = nsect;
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
			fp->fsize = fp->fptr;
 8006944:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
 8006946:	f04e 0020 	orr.w	r0, lr, #32
 800694a:	71a0      	strb	r0, [r4, #6]
 800694c:	2000      	movs	r0, #0
 800694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
 8006952:	4630      	mov	r0, r6
 8006954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006958:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800695a:	2900      	cmp	r1, #0
 800695c:	d02d      	beq.n	80069ba <f_lseek+0x12e>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
 800695e:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
 8006960:	2900      	cmp	r1, #0
 8006962:	d0cf      	beq.n	8006904 <f_lseek+0x78>
				while (ofs > bcs) {						/* Cluster following loop */
 8006964:	42be      	cmp	r6, r7
 8006966:	d956      	bls.n	8006a16 <f_lseek+0x18a>
 8006968:	6823      	ldr	r3, [r4, #0]
#if _FS_MINIMIZE <= 2
/*-----------------------------------------------------------------------*/
/* Seek File R/W Pointer                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_lseek (
 800696a:	f1c7 0800 	rsb	r8, r7, #0
 800696e:	1bf6      	subs	r6, r6, r7
 8006970:	e018      	b.n	80069a4 <f_lseek+0x118>
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006972:	f7fc fe11 	bl	8003598 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006976:	4601      	mov	r1, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	d067      	beq.n	8006a4c <f_lseek+0x1c0>
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
 800697c:	eb06 0208 	add.w	r2, r6, r8
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006980:	f1b1 3fff 	cmp.w	r1, #4294967295
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
 8006984:	eb02 0007 	add.w	r0, r2, r7
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006988:	d032      	beq.n	80069f0 <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800698a:	2901      	cmp	r1, #1
 800698c:	d920      	bls.n	80069d0 <f_lseek+0x144>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	699d      	ldr	r5, [r3, #24]
 8006992:	42a9      	cmp	r1, r5
 8006994:	d21c      	bcs.n	80069d0 <f_lseek+0x144>
					fp->clust = clst;
					fp->fptr += bcs;
 8006996:	68a5      	ldr	r5, [r4, #8]
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
 8006998:	4287      	cmp	r7, r0
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
 800699a:	443d      	add	r5, r7
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
 800699c:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
 800699e:	60a5      	str	r5, [r4, #8]
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
 80069a0:	d23a      	bcs.n	8006a18 <f_lseek+0x18c>
 80069a2:	4616      	mov	r6, r2
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80069a4:	f894 e006 	ldrb.w	lr, [r4, #6]
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80069a8:	4618      	mov	r0, r3
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80069aa:	f01e 0f02 	tst.w	lr, #2
 80069ae:	d1e0      	bne.n	8006972 <f_lseek+0xe6>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fc f833 	bl	8002a1c <get_fat>
 80069b6:	4601      	mov	r1, r0
 80069b8:	e7e0      	b.n	800697c <f_lseek+0xf0>
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(fp->fs, 0);
 80069ba:	f7fc fded 	bl	8003598 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80069be:	2801      	cmp	r0, #1
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(fp->fs, 0);
 80069c0:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80069c2:	d005      	beq.n	80069d0 <f_lseek+0x144>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80069c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069c8:	d012      	beq.n	80069f0 <f_lseek+0x164>
					fp->sclust = clst;
 80069ca:	6120      	str	r0, [r4, #16]
				}
#endif
				fp->clust = clst;
 80069cc:	6161      	str	r1, [r4, #20]
 80069ce:	e7c7      	b.n	8006960 <f_lseek+0xd4>
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80069d0:	79a3      	ldrb	r3, [r4, #6]
 80069d2:	2002      	movs	r0, #2
 80069d4:	f063 017f 	orn	r1, r3, #127	; 0x7f
 80069d8:	71a1      	strb	r1, [r4, #6]
 80069da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80069de:	4626      	mov	r6, r4
 80069e0:	f856 1b24 	ldr.w	r1, [r6], #36
 80069e4:	2301      	movs	r3, #1
 80069e6:	7848      	ldrb	r0, [r1, #1]
 80069e8:	4631      	mov	r1, r6
 80069ea:	f002 fbad 	bl	8009148 <disk_write>
 80069ee:	b158      	cbz	r0, 8006a08 <f_lseek+0x17c>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
 80069f0:	79a1      	ldrb	r1, [r4, #6]
 80069f2:	2001      	movs	r0, #1
 80069f4:	f061 027f 	orn	r2, r1, #127	; 0x7f
 80069f8:	71a2      	strb	r2, [r4, #6]
 80069fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 80069fe:	2003      	movs	r0, #3
 8006a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006a04:	68e2      	ldr	r2, [r4, #12]
 8006a06:	e798      	b.n	800693a <f_lseek+0xae>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8006a08:	f894 c006 	ldrb.w	ip, [r4, #6]
 8006a0c:	f02c 0e40 	bic.w	lr, ip, #64	; 0x40
 8006a10:	f884 e006 	strb.w	lr, [r4, #6]
 8006a14:	e785      	b.n	8006922 <f_lseek+0x96>
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
 8006a16:	68a5      	ldr	r5, [r4, #8]
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
 8006a18:	05f2      	lsls	r2, r6, #23
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
 8006a1a:	19ab      	adds	r3, r5, r6
				if (ofs % SS(fp->fs)) {
 8006a1c:	0dd2      	lsrs	r2, r2, #23
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
 8006a1e:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 8006a20:	b17a      	cbz	r2, 8006a42 <f_lseek+0x1b6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006a22:	6822      	ldr	r2, [r4, #0]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006a24:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006a26:	6990      	ldr	r0, [r2, #24]
 8006a28:	3802      	subs	r0, #2
 8006a2a:	4281      	cmp	r1, r0
 8006a2c:	d2d0      	bcs.n	80069d0 <f_lseek+0x144>
	return clst * fs->csize + fs->database;
 8006a2e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8006a32:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006a34:	fb0c 2101 	mla	r1, ip, r1, r2
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	d0c9      	beq.n	80069d0 <f_lseek+0x144>
					nsect += ofs / SS(fp->fs);
 8006a3c:	eb01 2556 	add.w	r5, r1, r6, lsr #9
 8006a40:	e762      	b.n	8006908 <f_lseek+0x7c>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8006a42:	4615      	mov	r5, r2
 8006a44:	e760      	b.n	8006908 <f_lseek+0x7c>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006a46:	2002      	movs	r0, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006a4c:	68a5      	ldr	r5, [r4, #8]
 8006a4e:	463e      	mov	r6, r7
 8006a50:	e7e2      	b.n	8006a18 <f_lseek+0x18c>
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006a52:	2000      	movs	r0, #0
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a58 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
 8006a58:	b530      	push	{r4, r5, lr}
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8006a60:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
 8006a62:	a801      	add	r0, sp, #4
 8006a64:	4621      	mov	r1, r4
 8006a66:	2200      	movs	r2, #0
 8006a68:	f7fb fcd6 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 8006a6c:	b110      	cbz	r0, 8006a74 <f_opendir+0x1c>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
 8006a6e:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8006a72:	bd30      	pop	{r4, r5, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
	if (res == FR_OK) {
		INIT_BUF(*dj);
 8006a74:	a883      	add	r0, sp, #524	; 0x20c
 8006a76:	ab03      	add	r3, sp, #12
 8006a78:	61a0      	str	r0, [r4, #24]
 8006a7a:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	9901      	ldr	r1, [sp, #4]
 8006a80:	f7fd fb6a 	bl	8004158 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8006a84:	b9b8      	cbnz	r0, 8006ab6 <f_opendir+0x5e>
			if (dj->dir) {						/* It is not the root dir */
 8006a86:	6963      	ldr	r3, [r4, #20]
 8006a88:	b173      	cbz	r3, 8006aa8 <f_opendir+0x50>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 8006a8a:	7ada      	ldrb	r2, [r3, #11]
 8006a8c:	f012 0f10 	tst.w	r2, #16
 8006a90:	d015      	beq.n	8006abe <f_opendir+0x66>
					dj->sclust = LD_CLUST(dj->dir);
 8006a92:	7d5d      	ldrb	r5, [r3, #21]
 8006a94:	7d1a      	ldrb	r2, [r3, #20]
 8006a96:	7ed8      	ldrb	r0, [r3, #27]
 8006a98:	7e9b      	ldrb	r3, [r3, #26]
 8006a9a:	ea42 2e05 	orr.w	lr, r2, r5, lsl #8
 8006a9e:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 8006aa2:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 8006aa6:	60a1      	str	r1, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 8006aa8:	6823      	ldr	r3, [r4, #0]
				res = dir_sdi(dj, 0);			/* Rewind dir */
 8006aaa:	4620      	mov	r0, r4
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 8006aac:	88d9      	ldrh	r1, [r3, #6]
 8006aae:	80a1      	strh	r1, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	f7fc fa29 	bl	8002f08 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006ab6:	2804      	cmp	r0, #4
 8006ab8:	bf08      	it	eq
 8006aba:	2005      	moveq	r0, #5
 8006abc:	e7d7      	b.n	8006a6e <f_opendir+0x16>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 8006abe:	2005      	movs	r0, #5
 8006ac0:	e7d5      	b.n	8006a6e <f_opendir+0x16>
 8006ac2:	bf00      	nop

08006ac4 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8006ac4:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 8006ac6:	6803      	ldr	r3, [r0, #0]

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8006ac8:	460d      	mov	r5, r1
 8006aca:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8006ace:	4604      	mov	r4, r0
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 8006ad0:	8881      	ldrh	r1, [r0, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 8006ad2:	b123      	cbz	r3, 8006ade <f_readdir+0x1a>
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	b112      	cbz	r2, 8006ade <f_readdir+0x1a>
 8006ad8:	88d8      	ldrh	r0, [r3, #6]
 8006ada:	4288      	cmp	r0, r1
 8006adc:	d003      	beq.n	8006ae6 <f_readdir+0x22>
		return FR_INVALID_OBJECT;
 8006ade:	2009      	movs	r0, #9
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
 8006ae0:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8006ae4:	bd70      	pop	{r4, r5, r6, pc}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 8006ae6:	7858      	ldrb	r0, [r3, #1]
 8006ae8:	f002 fa68 	bl	8008fbc <disk_status>
 8006aec:	f010 0601 	ands.w	r6, r0, #1
 8006af0:	d11f      	bne.n	8006b32 <f_readdir+0x6e>
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
 8006af2:	b1cd      	cbz	r5, 8006b28 <f_readdir+0x64>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
 8006af4:	a981      	add	r1, sp, #516	; 0x204
 8006af6:	ab01      	add	r3, sp, #4
 8006af8:	61a1      	str	r1, [r4, #24]
 8006afa:	61e3      	str	r3, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7fd fe01 	bl	8004704 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
 8006b02:	2804      	cmp	r0, #4
 8006b04:	d00e      	beq.n	8006b24 <f_readdir+0x60>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d1ea      	bne.n	8006ae0 <f_readdir+0x1c>
				get_fileinfo(dj, fno);		/* Get the object information */
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f7fb fb03 	bl	8002118 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
 8006b12:	2100      	movs	r1, #0
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7fc fe05 	bl	8003724 <dir_next>
				if (res == FR_NO_FILE) {
 8006b1a:	2804      	cmp	r0, #4
 8006b1c:	d1e0      	bne.n	8006ae0 <f_readdir+0x1c>
					dj->sect = 0;
 8006b1e:	2000      	movs	r0, #0
 8006b20:	6120      	str	r0, [r4, #16]
 8006b22:	e7dd      	b.n	8006ae0 <f_readdir+0x1c>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
			if (res == FR_NO_FILE) {		/* Reached end of dir */
				dj->sect = 0;
 8006b24:	6126      	str	r6, [r4, #16]
 8006b26:	e7f0      	b.n	8006b0a <f_readdir+0x46>


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7fc f9ec 	bl	8002f08 <dir_sdi>
 8006b30:	e7d6      	b.n	8006ae0 <f_readdir+0x1c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 8006b32:	2003      	movs	r0, #3
 8006b34:	e7d4      	b.n	8006ae0 <f_readdir+0x1c>
 8006b36:	bf00      	nop

08006b38 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8006b38:	b530      	push	{r4, r5, lr}
 8006b3a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8006b3e:	9001      	str	r0, [sp, #4]
 8006b40:	460c      	mov	r4, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
 8006b42:	a801      	add	r0, sp, #4
 8006b44:	a982      	add	r1, sp, #520	; 0x208
 8006b46:	2200      	movs	r2, #0
 8006b48:	f7fb fc66 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	b118      	cbz	r0, 8006b58 <f_stat+0x20>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 8006b50:	4628      	mov	r0, r5
 8006b52:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8006b56:	bd30      	pop	{r4, r5, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
	if (res == FR_OK) {
		INIT_BUF(dj);
 8006b58:	aa8b      	add	r2, sp, #556	; 0x22c
 8006b5a:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b5c:	a882      	add	r0, sp, #520	; 0x208
 8006b5e:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
	if (res == FR_OK) {
		INIT_BUF(dj);
 8006b60:	9288      	str	r2, [sp, #544]	; 0x220
 8006b62:	9389      	str	r3, [sp, #548]	; 0x224
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b64:	f7fd faf8 	bl	8004158 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8006b68:	4605      	mov	r5, r0
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d1f0      	bne.n	8006b50 <f_stat+0x18>
			if (dj.dir)		/* Found an object */
 8006b6e:	9887      	ldr	r0, [sp, #540]	; 0x21c
 8006b70:	b120      	cbz	r0, 8006b7c <f_stat+0x44>
				get_fileinfo(&dj, fno);
 8006b72:	a882      	add	r0, sp, #520	; 0x208
 8006b74:	4621      	mov	r1, r4
 8006b76:	f7fb facf 	bl	8002118 <get_fileinfo>
 8006b7a:	e7e9      	b.n	8006b50 <f_stat+0x18>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
 8006b7c:	2506      	movs	r5, #6
 8006b7e:	e7e7      	b.n	8006b50 <f_stat+0x18>

08006b80 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	b087      	sub	sp, #28
 8006b86:	ab06      	add	r3, sp, #24
 8006b88:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006b8c:	9101      	str	r1, [sp, #4]
 8006b8e:	4690      	mov	r8, r2
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	2200      	movs	r2, #0
 8006b96:	f7fb fc3f 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d15d      	bne.n	8006c5c <f_getfree+0xdc>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
 8006ba0:	f8d8 0000 	ldr.w	r0, [r8]
 8006ba4:	6984      	ldr	r4, [r0, #24]
 8006ba6:	6903      	ldr	r3, [r0, #16]
 8006ba8:	1ea2      	subs	r2, r4, #2
 8006baa:	4293      	cmp	r3, r2
 8006bac:	4605      	mov	r5, r0
 8006bae:	d959      	bls.n	8006c64 <f_getfree+0xe4>
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
 8006bb0:	f890 a000 	ldrb.w	sl, [r0]
			n = 0;
			if (fat == FS_FAT12) {
 8006bb4:	f1ba 0f01 	cmp.w	sl, #1
 8006bb8:	f000 80e5 	beq.w	8006d86 <f_getfree+0x206>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
 8006bbc:	6a06      	ldr	r6, [r0, #32]
				i = 0; p = 0;
 8006bbe:	463b      	mov	r3, r7
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
 8006bc0:	9602      	str	r6, [sp, #8]
				i = 0; p = 0;
 8006bc2:	463e      	mov	r6, r7
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
 8006bc4:	46b9      	mov	r9, r7
 8006bc6:	46bb      	mov	fp, r7
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
 8006bc8:	b1de      	cbz	r6, 8006c02 <f_getfree+0x82>
						res = move_window(*fatfs, sect++);
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
 8006bca:	f1ba 0f02 	cmp.w	sl, #2
 8006bce:	d02f      	beq.n	8006c30 <f_getfree+0xb0>
						if (LD_WORD(p) == 0) n++;
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006bd0:	789f      	ldrb	r7, [r3, #2]
 8006bd2:	78da      	ldrb	r2, [r3, #3]
 8006bd4:	0439      	lsls	r1, r7, #16
 8006bd6:	f893 e000 	ldrb.w	lr, [r3]
 8006bda:	ea41 6702 	orr.w	r7, r1, r2, lsl #24
 8006bde:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006be2:	ea47 010e 	orr.w	r1, r7, lr
 8006be6:	ea41 220c 	orr.w	r2, r1, ip, lsl #8
 8006bea:	f022 4770 	bic.w	r7, r2, #4026531840	; 0xf0000000
 8006bee:	b90f      	cbnz	r7, 8006bf4 <f_getfree+0x74>
 8006bf0:	f109 0901 	add.w	r9, r9, #1
						p += 4; i -= 4;
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	3e04      	subs	r6, #4
					}
				} while (--clst);
 8006bf8:	3c01      	subs	r4, #1
 8006bfa:	d026      	beq.n	8006c4a <f_getfree+0xca>
 8006bfc:	4628      	mov	r0, r5
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d1e3      	bne.n	8006bca <f_getfree+0x4a>
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8006c02:	6aef      	ldr	r7, [r5, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8006c04:	9a02      	ldr	r2, [sp, #8]
 8006c06:	42ba      	cmp	r2, r7
 8006c08:	d009      	beq.n	8006c1e <f_getfree+0x9e>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8006c0a:	792b      	ldrb	r3, [r5, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d142      	bne.n	8006c96 <f_getfree+0x116>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8006c10:	9a02      	ldr	r2, [sp, #8]
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	d12f      	bne.n	8006c76 <f_getfree+0xf6>
 8006c16:	f8d8 5000 	ldr.w	r5, [r8]
 8006c1a:	9a02      	ldr	r2, [sp, #8]
 8006c1c:	4628      	mov	r0, r5
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
 8006c1e:	1c53      	adds	r3, r2, #1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
 8006c20:	f1ba 0f02 	cmp.w	sl, #2
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
 8006c24:	9302      	str	r3, [sp, #8]
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
 8006c26:	f44f 7600 	mov.w	r6, #512	; 0x200
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
						if (res != FR_OK) break;
						p = (*fatfs)->win;
 8006c2a:	f105 0330 	add.w	r3, r5, #48	; 0x30
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
 8006c2e:	d1cf      	bne.n	8006bd0 <f_getfree+0x50>
						if (LD_WORD(p) == 0) n++;
 8006c30:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006c34:	f893 e000 	ldrb.w	lr, [r3]
 8006c38:	ea5e 220c 	orrs.w	r2, lr, ip, lsl #8
 8006c3c:	bf08      	it	eq
 8006c3e:	f109 0901 	addeq.w	r9, r9, #1
						p += 2; i -= 2;
 8006c42:	3302      	adds	r3, #2
 8006c44:	3e02      	subs	r6, #2
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
 8006c46:	3c01      	subs	r4, #1
 8006c48:	d1d8      	bne.n	8006bfc <f_getfree+0x7c>
 8006c4a:	465f      	mov	r7, fp
			}
			(*fatfs)->free_clust = n;
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 8006c4c:	f1ba 0f03 	cmp.w	sl, #3
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
 8006c50:	f8c0 9010 	str.w	r9, [r0, #16]
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 8006c54:	d009      	beq.n	8006c6a <f_getfree+0xea>
			*nclst = n;
 8006c56:	9801      	ldr	r0, [sp, #4]
 8006c58:	f8c0 9000 	str.w	r9, [r0]
		}
	}
	LEAVE_FF(*fatfs, res);
}
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	b007      	add	sp, #28
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
	if (res == FR_OK) {
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
 8006c64:	9801      	ldr	r0, [sp, #4]
 8006c66:	6003      	str	r3, [r0, #0]
 8006c68:	e7f8      	b.n	8006c5c <f_getfree+0xdc>
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	7143      	strb	r3, [r0, #5]
			*nclst = n;
 8006c6e:	9801      	ldr	r0, [sp, #4]
 8006c70:	f8c0 9000 	str.w	r9, [r0]
 8006c74:	e7f2      	b.n	8006c5c <f_getfree+0xdc>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8006c76:	7868      	ldrb	r0, [r5, #1]
 8006c78:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f002 f9a5 	bl	8008fcc <disk_read>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f040 8098 	bne.w	8006db8 <f_getfree+0x238>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8006c88:	9902      	ldr	r1, [sp, #8]
 8006c8a:	62e9      	str	r1, [r5, #44]	; 0x2c
 8006c8c:	f8d8 5000 	ldr.w	r5, [r8]
 8006c90:	460a      	mov	r2, r1
 8006c92:	4628      	mov	r0, r5
 8006c94:	e7c3      	b.n	8006c1e <f_getfree+0x9e>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8006c96:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8006c9a:	9203      	str	r2, [sp, #12]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	7868      	ldrb	r0, [r5, #1]
 8006ca0:	463a      	mov	r2, r7
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f002 fa50 	bl	8009148 <disk_write>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f040 8085 	bne.w	8006db8 <f_getfree+0x238>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8006cae:	69eb      	ldr	r3, [r5, #28]
 8006cb0:	6a28      	ldr	r0, [r5, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8006cb2:	712e      	strb	r6, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8006cb4:	eb03 0c00 	add.w	ip, r3, r0
 8006cb8:	4567      	cmp	r7, ip
 8006cba:	d2a9      	bcs.n	8006c10 <f_getfree+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006cbc:	78ee      	ldrb	r6, [r5, #3]
 8006cbe:	2e01      	cmp	r6, #1
 8006cc0:	d9a6      	bls.n	8006c10 <f_getfree+0x90>
 8006cc2:	f1a6 0e02 	sub.w	lr, r6, #2
 8006cc6:	f01e 0c03 	ands.w	ip, lr, #3
 8006cca:	d079      	beq.n	8006dc0 <f_getfree+0x240>
					wsect += fs->fsize;
 8006ccc:	18ff      	adds	r7, r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006cce:	7868      	ldrb	r0, [r5, #1]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	463a      	mov	r2, r7
 8006cd6:	f8cd c000 	str.w	ip, [sp]
 8006cda:	f002 fa35 	bl	8009148 <disk_write>
 8006cde:	f8dd c000 	ldr.w	ip, [sp]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006ce2:	3e01      	subs	r6, #1
 8006ce4:	f1bc 0f01 	cmp.w	ip, #1
 8006ce8:	b2f6      	uxtb	r6, r6
 8006cea:	69eb      	ldr	r3, [r5, #28]
 8006cec:	d068      	beq.n	8006dc0 <f_getfree+0x240>
 8006cee:	f1bc 0f02 	cmp.w	ip, #2
 8006cf2:	d009      	beq.n	8006d08 <f_getfree+0x188>
					wsect += fs->fsize;
 8006cf4:	18ff      	adds	r7, r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006cf6:	9903      	ldr	r1, [sp, #12]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	7868      	ldrb	r0, [r5, #1]
 8006cfc:	463a      	mov	r2, r7
 8006cfe:	f002 fa23 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d02:	1e71      	subs	r1, r6, #1
 8006d04:	69eb      	ldr	r3, [r5, #28]
 8006d06:	b2ce      	uxtb	r6, r1
					wsect += fs->fsize;
 8006d08:	18ff      	adds	r7, r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d0a:	463a      	mov	r2, r7
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	7868      	ldrb	r0, [r5, #1]
 8006d10:	9903      	ldr	r1, [sp, #12]
 8006d12:	f002 fa19 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d16:	1e72      	subs	r2, r6, #1
 8006d18:	f8cd b010 	str.w	fp, [sp, #16]
 8006d1c:	b2d6      	uxtb	r6, r2
 8006d1e:	46cb      	mov	fp, r9
 8006d20:	69eb      	ldr	r3, [r5, #28]
 8006d22:	46a1      	mov	r9, r4
 8006d24:	9c03      	ldr	r4, [sp, #12]
 8006d26:	e01e      	b.n	8006d66 <f_getfree+0x1e6>
 8006d28:	69ea      	ldr	r2, [r5, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d2a:	4621      	mov	r1, r4
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8006d2c:	18bf      	adds	r7, r7, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d2e:	463a      	mov	r2, r7
 8006d30:	2301      	movs	r3, #1
 8006d32:	7868      	ldrb	r0, [r5, #1]
 8006d34:	f002 fa08 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d38:	69e8      	ldr	r0, [r5, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d3a:	4621      	mov	r1, r4
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 8006d3c:	183f      	adds	r7, r7, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d3e:	463a      	mov	r2, r7
 8006d40:	2301      	movs	r3, #1
 8006d42:	7868      	ldrb	r0, [r5, #1]
 8006d44:	f002 fa00 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d48:	3e01      	subs	r6, #1
 8006d4a:	69eb      	ldr	r3, [r5, #28]
 8006d4c:	b2f6      	uxtb	r6, r6
 8006d4e:	1e72      	subs	r2, r6, #1
					wsect += fs->fsize;
 8006d50:	18ff      	adds	r7, r7, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d52:	b2d6      	uxtb	r6, r2
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d54:	2301      	movs	r3, #1
 8006d56:	7868      	ldrb	r0, [r5, #1]
 8006d58:	4621      	mov	r1, r4
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	f002 f9f4 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d60:	3e01      	subs	r6, #1
 8006d62:	69eb      	ldr	r3, [r5, #28]
 8006d64:	b2f6      	uxtb	r6, r6
					wsect += fs->fsize;
 8006d66:	18ff      	adds	r7, r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d68:	4621      	mov	r1, r4
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	463a      	mov	r2, r7
 8006d6e:	7868      	ldrb	r0, [r5, #1]
 8006d70:	f002 f9ea 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8006d74:	1e71      	subs	r1, r6, #1
 8006d76:	b2ce      	uxtb	r6, r1
 8006d78:	2e01      	cmp	r6, #1
 8006d7a:	d1d5      	bne.n	8006d28 <f_getfree+0x1a8>
 8006d7c:	464c      	mov	r4, r9
 8006d7e:	46d9      	mov	r9, fp
 8006d80:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006d84:	e744      	b.n	8006c10 <f_getfree+0x90>
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
			if (fat == FS_FAT12) {
 8006d86:	2402      	movs	r4, #2
 8006d88:	46b9      	mov	r9, r7
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	f7fb fe46 	bl	8002a1c <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
 8006d90:	3401      	adds	r4, #1
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d92:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d96:	d019      	beq.n	8006dcc <f_getfree+0x24c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006d98:	2801      	cmp	r0, #1
 8006d9a:	d01d      	beq.n	8006dd8 <f_getfree+0x258>
					if (stat == 0) n++;
 8006d9c:	b908      	cbnz	r0, 8006da2 <f_getfree+0x222>
 8006d9e:	f109 0901 	add.w	r9, r9, #1
				} while (++clst < (*fatfs)->n_fatent);
 8006da2:	f8d8 0000 	ldr.w	r0, [r8]
 8006da6:	6981      	ldr	r1, [r0, #24]
 8006da8:	428c      	cmp	r4, r1
 8006daa:	d3ee      	bcc.n	8006d8a <f_getfree+0x20a>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
 8006dac:	f8c0 9010 	str.w	r9, [r0, #16]
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
			*nclst = n;
 8006db0:	9801      	ldr	r0, [sp, #4]
 8006db2:	f8c0 9000 	str.w	r9, [r0]
 8006db6:	e751      	b.n	8006c5c <f_getfree+0xdc>
 8006db8:	f8d8 0000 	ldr.w	r0, [r8]
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
 8006dbc:	2701      	movs	r7, #1
 8006dbe:	e745      	b.n	8006c4c <f_getfree+0xcc>
 8006dc0:	f8cd b010 	str.w	fp, [sp, #16]
 8006dc4:	46cb      	mov	fp, r9
 8006dc6:	46a1      	mov	r9, r4
 8006dc8:	9c03      	ldr	r4, [sp, #12]
 8006dca:	e7cc      	b.n	8006d66 <f_getfree+0x1e6>
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
			*nclst = n;
 8006dcc:	f8d8 0000 	ldr.w	r0, [r8]
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006dd0:	2701      	movs	r7, #1
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
 8006dd2:	f8c0 9010 	str.w	r9, [r0, #16]
 8006dd6:	e7eb      	b.n	8006db0 <f_getfree+0x230>
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006dd8:	f8d8 0000 	ldr.w	r0, [r8]
 8006ddc:	2702      	movs	r7, #2
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
 8006dde:	f8c0 9010 	str.w	r9, [r0, #16]
 8006de2:	e7e5      	b.n	8006db0 <f_getfree+0x230>

08006de4 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
 8006de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8006de8:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
 8006dea:	4604      	mov	r4, r0
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8006dec:	8881      	ldrh	r1, [r0, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 8006dee:	b123      	cbz	r3, 8006dfa <f_truncate+0x16>
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	b112      	cbz	r2, 8006dfa <f_truncate+0x16>
 8006df4:	88d8      	ldrh	r0, [r3, #6]
 8006df6:	4288      	cmp	r0, r1
 8006df8:	d003      	beq.n	8006e02 <f_truncate+0x1e>
		return FR_INVALID_OBJECT;
 8006dfa:	2709      	movs	r7, #9
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
	}

	LEAVE_FF(fp->fs, res);
}
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 8006e02:	7858      	ldrb	r0, [r3, #1]
 8006e04:	f002 f8da 	bl	8008fbc <disk_status>
 8006e08:	f010 0701 	ands.w	r7, r0, #1
 8006e0c:	d15e      	bne.n	8006ecc <f_truncate+0xe8>
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
 8006e0e:	79a2      	ldrb	r2, [r4, #6]
 8006e10:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e14:	f040 8095 	bne.w	8006f42 <f_truncate+0x15e>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 8006e18:	f012 0f02 	tst.w	r2, #2
 8006e1c:	d103      	bne.n	8006e26 <f_truncate+0x42>
				res = FR_DENIED;
 8006e1e:	2707      	movs	r7, #7
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
	}

	LEAVE_FF(fp->fs, res);
}
 8006e20:	4638      	mov	r0, r7
 8006e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	68e1      	ldr	r1, [r4, #12]
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	d9e6      	bls.n	8006dfc <f_truncate+0x18>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
			fp->flag |= FA__WRITTEN;
 8006e2e:	f042 0120 	orr.w	r1, r2, #32
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8006e32:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
 8006e34:	71a1      	strb	r1, [r4, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d136      	bne.n	8006ea8 <f_truncate+0xc4>
				res = remove_chain(fp->fs, fp->sclust);
 8006e3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e3e:	6826      	ldr	r6, [r4, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006e40:	f1b9 0f01 	cmp.w	r9, #1
 8006e44:	d940      	bls.n	8006ec8 <f_truncate+0xe4>
 8006e46:	69b3      	ldr	r3, [r6, #24]
 8006e48:	4599      	cmp	r9, r3
 8006e4a:	d23d      	bcs.n	8006ec8 <f_truncate+0xe4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
 8006e4c:	f04f 0801 	mov.w	r8, #1
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006e50:	4649      	mov	r1, r9
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7fb fde2 	bl	8002a1c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8006e58:	4605      	mov	r5, r0
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	2200      	movs	r2, #0

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	d070      	beq.n	8006f46 <f_truncate+0x162>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006e64:	2d01      	cmp	r5, #1
 8006e66:	d02f      	beq.n	8006ec8 <f_truncate+0xe4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006e68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e6c:	d06d      	beq.n	8006f4a <f_truncate+0x166>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006e6e:	f7fc f8a7 	bl	8002fc0 <put_fat>
			if (res != FR_OK) break;
 8006e72:	4607      	mov	r7, r0
 8006e74:	b958      	cbnz	r0, 8006e8e <f_truncate+0xaa>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8006e76:	6933      	ldr	r3, [r6, #16]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006e78:	46a9      	mov	r9, r5
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d003      	beq.n	8006e88 <f_truncate+0xa4>
				fs->free_clust++;
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	6132      	str	r2, [r6, #16]
				fs->fsi_flag = 1;
 8006e84:	f886 8005 	strb.w	r8, [r6, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006e88:	69b0      	ldr	r0, [r6, #24]
 8006e8a:	4285      	cmp	r5, r0
 8006e8c:	d3e0      	bcc.n	8006e50 <f_truncate+0x6c>
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
			fp->flag |= FA__WRITTEN;
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6121      	str	r1, [r4, #16]
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
 8006e92:	2f00      	cmp	r7, #0
 8006e94:	d0b2      	beq.n	8006dfc <f_truncate+0x18>
 8006e96:	f894 e006 	ldrb.w	lr, [r4, #6]
	}

	LEAVE_FF(fp->fs, res);
}
 8006e9a:	4638      	mov	r0, r7
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
 8006e9c:	f06e 0c7f 	orn	ip, lr, #127	; 0x7f
 8006ea0:	f884 c006 	strb.w	ip, [r4, #6]
	}

	LEAVE_FF(fp->fs, res);
}
 8006ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			fp->flag |= FA__WRITTEN;
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	6961      	ldr	r1, [r4, #20]
 8006eac:	f7fb fdb6 	bl	8002a1c <get_fat>
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006eb0:	f1b0 3fff 	cmp.w	r0, #4294967295
			fp->flag |= FA__WRITTEN;
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 8006eb4:	4605      	mov	r5, r0
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006eb6:	d042      	beq.n	8006f3e <f_truncate+0x15a>
				if (ncl == 1) res = FR_INT_ERR;
 8006eb8:	2801      	cmp	r0, #1
 8006eba:	d03e      	beq.n	8006f3a <f_truncate+0x156>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	6987      	ldr	r7, [r0, #24]
 8006ec0:	42bd      	cmp	r5, r7
 8006ec2:	d305      	bcc.n	8006ed0 <f_truncate+0xec>
 8006ec4:	2700      	movs	r7, #0
 8006ec6:	e799      	b.n	8006dfc <f_truncate+0x18>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006ec8:	2702      	movs	r7, #2
 8006eca:	e7e0      	b.n	8006e8e <f_truncate+0xaa>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
 8006ecc:	2703      	movs	r7, #3
 8006ece:	e795      	b.n	8006dfc <f_truncate+0x18>
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8006ed0:	6961      	ldr	r1, [r4, #20]
 8006ed2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006ed6:	f7fc f873 	bl	8002fc0 <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8006eda:	4607      	mov	r7, r0
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d1da      	bne.n	8006e96 <f_truncate+0xb2>
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006ee0:	2d01      	cmp	r5, #1
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8006ee2:	f8d4 8000 	ldr.w	r8, [r4]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006ee6:	d928      	bls.n	8006f3a <f_truncate+0x156>
 8006ee8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006eec:	429d      	cmp	r5, r3
 8006eee:	d224      	bcs.n	8006f3a <f_truncate+0x156>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
 8006ef0:	f04f 0901 	mov.w	r9, #1
 8006ef4:	e014      	b.n	8006f20 <f_truncate+0x13c>
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006ef6:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006efa:	d020      	beq.n	8006f3e <f_truncate+0x15a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006efc:	f7fc f860 	bl	8002fc0 <put_fat>
			if (res != FR_OK) break;
 8006f00:	bb28      	cbnz	r0, 8006f4e <f_truncate+0x16a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8006f02:	f8d8 3010 	ldr.w	r3, [r8, #16]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006f06:	4635      	mov	r5, r6
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0c:	d004      	beq.n	8006f18 <f_truncate+0x134>
				fs->free_clust++;
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	f8c8 2010 	str.w	r2, [r8, #16]
				fs->fsi_flag = 1;
 8006f14:	f888 9005 	strb.w	r9, [r8, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006f18:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8006f1c:	4286      	cmp	r6, r0
 8006f1e:	d2d1      	bcs.n	8006ec4 <f_truncate+0xe0>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006f20:	4629      	mov	r1, r5
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7fb fd7a 	bl	8002a1c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8006f28:	4606      	mov	r6, r0
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4640      	mov	r0, r8
 8006f2e:	2200      	movs	r2, #0

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8006f30:	2e00      	cmp	r6, #0
 8006f32:	f43f af63 	beq.w	8006dfc <f_truncate+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006f36:	2e01      	cmp	r6, #1
 8006f38:	d1dd      	bne.n	8006ef6 <f_truncate+0x112>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
 8006f3a:	2702      	movs	r7, #2
 8006f3c:	e7ab      	b.n	8006e96 <f_truncate+0xb2>
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f3e:	2701      	movs	r7, #1
 8006f40:	e7a9      	b.n	8006e96 <f_truncate+0xb2>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
 8006f42:	2702      	movs	r7, #2
 8006f44:	e75a      	b.n	8006dfc <f_truncate+0x18>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8006f46:	462f      	mov	r7, r5
 8006f48:	e7a1      	b.n	8006e8e <f_truncate+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006f4a:	2701      	movs	r7, #1
 8006f4c:	e79f      	b.n	8006e8e <f_truncate+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006f4e:	4607      	mov	r7, r0
 8006f50:	e79f      	b.n	8006e92 <f_truncate+0xae>
 8006f52:	bf00      	nop

08006f54 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
 8006f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f56:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006f5a:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
 8006f5c:	a98c      	add	r1, sp, #560	; 0x230
 8006f5e:	a801      	add	r0, sp, #4
 8006f60:	2201      	movs	r2, #1
 8006f62:	f7fb fa59 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 8006f66:	b110      	cbz	r0, 8006f6e <f_unlink+0x1a>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
 8006f68:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 8006f6e:	aa95      	add	r2, sp, #596	; 0x254
 8006f70:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 8006f72:	a88c      	add	r0, sp, #560	; 0x230
 8006f74:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 8006f76:	9292      	str	r2, [sp, #584]	; 0x248
 8006f78:	9393      	str	r3, [sp, #588]	; 0x24c
		res = follow_path(&dj, path);		/* Follow the file path */
 8006f7a:	f7fd f8ed 	bl	8004158 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d1f2      	bne.n	8006f68 <f_unlink+0x14>
			dir = dj.dir;
 8006f82:	9b91      	ldr	r3, [sp, #580]	; 0x244
			if (!dir) {
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d06c      	beq.n	8007062 <f_unlink+0x10e>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 8006f88:	7ada      	ldrb	r2, [r3, #11]
 8006f8a:	f012 0f01 	tst.w	r2, #1
 8006f8e:	d13d      	bne.n	800700c <f_unlink+0xb8>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
 8006f90:	7d5f      	ldrb	r7, [r3, #21]
 8006f92:	7d18      	ldrb	r0, [r3, #20]
 8006f94:	7ed9      	ldrb	r1, [r3, #27]
 8006f96:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8006f9a:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
 8006f9e:	ea4c 2e01 	orr.w	lr, ip, r1, lsl #8
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 8006fa2:	f012 0f10 	tst.w	r2, #16
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
 8006fa6:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 8006faa:	d025      	beq.n	8006ff8 <f_unlink+0xa4>
				if (dclst < 2) {
 8006fac:	2f01      	cmp	r7, #1
 8006fae:	d956      	bls.n	800705e <f_unlink+0x10a>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006fb0:	a88c      	add	r0, sp, #560	; 0x230
 8006fb2:	f850 3b04 	ldr.w	r3, [r0], #4
 8006fb6:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 8006fb8:	9383      	str	r3, [sp, #524]	; 0x20c
 8006fba:	9284      	str	r2, [sp, #528]	; 0x210
 8006fbc:	6881      	ldr	r1, [r0, #8]
 8006fbe:	1d02      	adds	r2, r0, #4
 8006fc0:	9186      	str	r1, [sp, #536]	; 0x218
 8006fc2:	6893      	ldr	r3, [r2, #8]
 8006fc4:	a883      	add	r0, sp, #524	; 0x20c
 8006fc6:	9387      	str	r3, [sp, #540]	; 0x21c
 8006fc8:	68d1      	ldr	r1, [r2, #12]
 8006fca:	f100 0c08 	add.w	ip, r0, #8
 8006fce:	9188      	str	r1, [sp, #544]	; 0x220
 8006fd0:	6913      	ldr	r3, [r2, #16]
 8006fd2:	9389      	str	r3, [sp, #548]	; 0x224
 8006fd4:	6951      	ldr	r1, [r2, #20]
 8006fd6:	3210      	adds	r2, #16
 8006fd8:	918a      	str	r1, [sp, #552]	; 0x228
 8006fda:	6892      	ldr	r2, [r2, #8]
				if (dclst < 2) {
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 8006fdc:	2102      	movs	r1, #2
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8006fde:	f8cc 2018 	str.w	r2, [ip, #24]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
 8006fe2:	9785      	str	r7, [sp, #532]	; 0x214
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 8006fe4:	f7fb ff90 	bl	8002f08 <dir_sdi>
					if (res == FR_OK) {
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d1bd      	bne.n	8006f68 <f_unlink+0x14>
						res = dir_read(&sdj);
 8006fec:	a883      	add	r0, sp, #524	; 0x20c
 8006fee:	f7fd fb89 	bl	8004704 <dir_read>
						if (res == FR_OK			/* Not empty dir */
 8006ff2:	b158      	cbz	r0, 800700c <f_unlink+0xb8>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 8006ff4:	2804      	cmp	r0, #4
 8006ff6:	d1b7      	bne.n	8006f68 <f_unlink+0x14>
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
 8006ff8:	a88c      	add	r0, sp, #560	; 0x230
 8006ffa:	f7fd fabf 	bl	800457c <dir_remove>
				if (res == FR_OK) {
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d1b2      	bne.n	8006f68 <f_unlink+0x14>
					if (dclst)				/* Remove the cluster chain if exist */
 8007002:	b92f      	cbnz	r7, 8007010 <f_unlink+0xbc>
						res = remove_chain(dj.fs, dclst);
					if (res == FR_OK) res = sync(dj.fs);
 8007004:	988c      	ldr	r0, [sp, #560]	; 0x230
 8007006:	f7fb fc1b 	bl	8002840 <sync>
 800700a:	e7ad      	b.n	8006f68 <f_unlink+0x14>
						res = dir_read(&sdj);
						if (res == FR_OK			/* Not empty dir */
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
 800700c:	2007      	movs	r0, #7
 800700e:	e7ab      	b.n	8006f68 <f_unlink+0x14>
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007010:	2f01      	cmp	r7, #1
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
						res = remove_chain(dj.fs, dclst);
 8007012:	9d8c      	ldr	r5, [sp, #560]	; 0x230
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007014:	d023      	beq.n	800705e <f_unlink+0x10a>
 8007016:	69a9      	ldr	r1, [r5, #24]
 8007018:	428f      	cmp	r7, r1
 800701a:	d220      	bcs.n	800705e <f_unlink+0x10a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
 800701c:	2601      	movs	r6, #1
 800701e:	e013      	b.n	8007048 <f_unlink+0xf4>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007020:	2c01      	cmp	r4, #1
 8007022:	d01c      	beq.n	800705e <f_unlink+0x10a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007024:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007028:	d01d      	beq.n	8007066 <f_unlink+0x112>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800702a:	f7fb ffc9 	bl	8002fc0 <put_fat>
			if (res != FR_OK) break;
 800702e:	2800      	cmp	r0, #0
 8007030:	d19a      	bne.n	8006f68 <f_unlink+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8007032:	692b      	ldr	r3, [r5, #16]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007034:	4627      	mov	r7, r4
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d002      	beq.n	8007042 <f_unlink+0xee>
				fs->free_clust++;
 800703c:	1c58      	adds	r0, r3, #1
 800703e:	6128      	str	r0, [r5, #16]
				fs->fsi_flag = 1;
 8007040:	716e      	strb	r6, [r5, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007042:	69aa      	ldr	r2, [r5, #24]
 8007044:	4294      	cmp	r4, r2
 8007046:	d2dd      	bcs.n	8007004 <f_unlink+0xb0>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007048:	4639      	mov	r1, r7
 800704a:	4628      	mov	r0, r5
 800704c:	f7fb fce6 	bl	8002a1c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8007050:	4604      	mov	r4, r0
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007052:	4639      	mov	r1, r7
 8007054:	4628      	mov	r0, r5
 8007056:	2200      	movs	r2, #0

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 8007058:	2c00      	cmp	r4, #0
 800705a:	d1e1      	bne.n	8007020 <f_unlink+0xcc>
 800705c:	e7d2      	b.n	8007004 <f_unlink+0xb0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800705e:	2002      	movs	r0, #2
 8007060:	e782      	b.n	8006f68 <f_unlink+0x14>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 8007062:	2006      	movs	r0, #6
 8007064:	e780      	b.n	8006f68 <f_unlink+0x14>
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007066:	2001      	movs	r0, #1
 8007068:	e77e      	b.n	8006f68 <f_unlink+0x14>
 800706a:	bf00      	nop

0800706c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007074:	900b      	str	r0, [sp, #44]	; 0x2c
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
 8007076:	f7fb f82b 	bl	80020d0 <get_fattime>
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
 800707a:	a98c      	add	r1, sp, #560	; 0x230
)
{
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
 800707c:	4606      	mov	r6, r0
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
 800707e:	2201      	movs	r2, #1
 8007080:	a80b      	add	r0, sp, #44	; 0x2c
 8007082:	f7fb f9c9 	bl	8002418 <chk_mounted>
 8007086:	4604      	mov	r4, r0
 8007088:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800708a:	b120      	cbz	r0, 8007096 <f_mkdir+0x2a>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800708c:	4620      	mov	r0, r4
 800708e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 8007096:	aa95      	add	r2, sp, #596	; 0x254
 8007098:	ab0c      	add	r3, sp, #48	; 0x30
		res = follow_path(&dj, path);			/* Follow the file path */
 800709a:	a88c      	add	r0, sp, #560	; 0x230
 800709c:	990b      	ldr	r1, [sp, #44]	; 0x2c
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 800709e:	9292      	str	r2, [sp, #584]	; 0x248
 80070a0:	9393      	str	r3, [sp, #588]	; 0x24c
		res = follow_path(&dj, path);			/* Follow the file path */
 80070a2:	f7fd f859 	bl	8004158 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80070a6:	4604      	mov	r4, r0
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d031      	beq.n	8007110 <f_mkdir+0xa4>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80070ac:	2804      	cmp	r0, #4
 80070ae:	d1ed      	bne.n	800708c <f_mkdir+0x20>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 80070b0:	988c      	ldr	r0, [sp, #560]	; 0x230
 80070b2:	4629      	mov	r1, r5
 80070b4:	f7fc fa70 	bl	8003598 <create_chain>
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80070b8:	4683      	mov	fp, r0
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d12a      	bne.n	8007114 <f_mkdir+0xa8>
 80070be:	2407      	movs	r4, #7
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80070c0:	f1bb 0f01 	cmp.w	fp, #1
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 80070c4:	9d8c      	ldr	r5, [sp, #560]	; 0x230
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80070c6:	d9e1      	bls.n	800708c <f_mkdir+0x20>
 80070c8:	69ab      	ldr	r3, [r5, #24]
 80070ca:	459b      	cmp	fp, r3
 80070cc:	d2de      	bcs.n	800708c <f_mkdir+0x20>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
 80070ce:	2701      	movs	r7, #1
 80070d0:	e013      	b.n	80070fa <f_mkdir+0x8e>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80070d2:	2e01      	cmp	r6, #1
 80070d4:	d0da      	beq.n	800708c <f_mkdir+0x20>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80070d6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80070da:	d0d7      	beq.n	800708c <f_mkdir+0x20>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80070dc:	f7fb ff70 	bl	8002fc0 <put_fat>
			if (res != FR_OK) break;
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d1d3      	bne.n	800708c <f_mkdir+0x20>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 80070e4:	692b      	ldr	r3, [r5, #16]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80070e6:	46b3      	mov	fp, r6
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d002      	beq.n	80070f4 <f_mkdir+0x88>
				fs->free_clust++;
 80070ee:	1c58      	adds	r0, r3, #1
 80070f0:	6128      	str	r0, [r5, #16]
				fs->fsi_flag = 1;
 80070f2:	716f      	strb	r7, [r5, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80070f4:	69a9      	ldr	r1, [r5, #24]
 80070f6:	428e      	cmp	r6, r1
 80070f8:	d2c8      	bcs.n	800708c <f_mkdir+0x20>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80070fa:	4659      	mov	r1, fp
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7fb fc8d 	bl	8002a1c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8007102:	4606      	mov	r6, r0
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007104:	4659      	mov	r1, fp
 8007106:	4628      	mov	r0, r5
 8007108:	2200      	movs	r2, #0

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
 800710a:	2e00      	cmp	r6, #0
 800710c:	d1e1      	bne.n	80070d2 <f_mkdir+0x66>
 800710e:	e7bd      	b.n	800708c <f_mkdir+0x20>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8007110:	2408      	movs	r4, #8
 8007112:	e7bb      	b.n	800708c <f_mkdir+0x20>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
 8007114:	2801      	cmp	r0, #1
 8007116:	d101      	bne.n	800711c <f_mkdir+0xb0>
 8007118:	2402      	movs	r4, #2
 800711a:	e7d1      	b.n	80070c0 <f_mkdir+0x54>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800711c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007120:	d101      	bne.n	8007126 <f_mkdir+0xba>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8007122:	2401      	movs	r4, #1
 8007124:	e7cc      	b.n	80070c0 <f_mkdir+0x54>
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
 8007126:	9c8c      	ldr	r4, [sp, #560]	; 0x230
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8007128:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 800712a:	b11d      	cbz	r5, 8007134 <f_mkdir+0xc8>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 800712c:	7920      	ldrb	r0, [r4, #4]
 800712e:	2800      	cmp	r0, #0
 8007130:	f040 818f 	bne.w	8007452 <f_mkdir+0x3e6>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007134:	69a7      	ldr	r7, [r4, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8007136:	f1ab 0902 	sub.w	r9, fp, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800713a:	1ebd      	subs	r5, r7, #2
 800713c:	45a9      	cmp	r9, r5
	return clst * fs->csize + fs->database;
 800713e:	bf3c      	itt	cc
 8007140:	6aa5      	ldrcc	r5, [r4, #40]	; 0x28
 8007142:	f894 8002 	ldrbcc.w	r8, [r4, #2]

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
 8007146:	f104 0030 	add.w	r0, r4, #48	; 0x30
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
 800714a:	bf34      	ite	cc
 800714c:	fb08 5809 	mlacc	r8, r8, r9, r5
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007150:	f04f 0800 	movcs.w	r8, #0

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	f504 750c 	add.w	r5, r4, #560	; 0x230
 800715a:	4603      	mov	r3, r0
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 800715c:	2200      	movs	r2, #0
 800715e:	469c      	mov	ip, r3
 8007160:	f84c 2b04 	str.w	r2, [ip], #4
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	f8cc 2004 	str.w	r2, [ip, #4]
 800716a:	60da      	str	r2, [r3, #12]
 800716c:	3310      	adds	r3, #16
 800716e:	42ab      	cmp	r3, r5
 8007170:	d1f5      	bne.n	800715e <f_mkdir+0xf2>
 8007172:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
 8007176:	6321      	str	r1, [r4, #48]	; 0x30
 8007178:	f8dd 9008 	ldr.w	r9, [sp, #8]
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
 800717c:	202e      	movs	r0, #46	; 0x2e
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 800717e:	f8c9 1004 	str.w	r1, [r9, #4]
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
 8007182:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 8007186:	9603      	str	r6, [sp, #12]
 8007188:	f8dd c00c 	ldr.w	ip, [sp, #12]
				ST_CLUST(dir, dcl);
 800718c:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8007190:	9205      	str	r2, [sp, #20]
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 8007192:	f3cc 4e07 	ubfx	lr, ip, #16, #8
 8007196:	f8dd c00c 	ldr.w	ip, [sp, #12]
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 800719a:	6b27      	ldr	r7, [r4, #48]	; 0x30
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 800719c:	2320      	movs	r3, #32
 800719e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80071a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80071a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 80071aa:	f8cd e01c 	str.w	lr, [sp, #28]
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
 80071ae:	2310      	movs	r3, #16
				ST_DWORD(dir+DIR_WrtTime, tim);
 80071b0:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
 80071b4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
				ST_DWORD(dir+DIR_WrtTime, tim);
 80071b8:	f8cd e020 	str.w	lr, [sp, #32]
				ST_CLUST(dir, dcl);
 80071bc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80071c0:	6527      	str	r7, [r4, #80]	; 0x50
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 80071c2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80071c6:	9e03      	ldr	r6, [sp, #12]
 80071c8:	f884 9047 	strb.w	r9, [r4, #71]	; 0x47
 80071cc:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
 80071d0:	f8dd c01c 	ldr.w	ip, [sp, #28]
				ST_CLUST(dir, dcl);
 80071d4:	f3cb 2107 	ubfx	r1, fp, #8, #8
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 80071d8:	f884 c048 	strb.w	ip, [r4, #72]	; 0x48
 80071dc:	9f08      	ldr	r7, [sp, #32]
				ST_CLUST(dir, dcl);
 80071de:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 80071e2:	f884 7049 	strb.w	r7, [r4, #73]	; 0x49
				ST_CLUST(dir, dcl);
 80071e6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80071ea:	0a12      	lsrs	r2, r2, #8
 80071ec:	f884 e04a 	strb.w	lr, [r4, #74]	; 0x4a
 80071f0:	9b05      	ldr	r3, [sp, #20]
 80071f2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80071f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80071fa:	f8dd c008 	ldr.w	ip, [sp, #8]
 80071fe:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007202:	6566      	str	r6, [r4, #84]	; 0x54
 8007204:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8007208:	65a7      	str	r7, [r4, #88]	; 0x58
 800720a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800720e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007210:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007214:	f10c 0314 	add.w	r3, ip, #20
 8007218:	6626      	str	r6, [r4, #96]	; 0x60
 800721a:	f8dc 7014 	ldr.w	r7, [ip, #20]
 800721e:	6667      	str	r7, [r4, #100]	; 0x64
 8007220:	f8dc 7018 	ldr.w	r7, [ip, #24]
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
 8007224:	f88d 9029 	strb.w	r9, [sp, #41]	; 0x29
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8007228:	66a7      	str	r7, [r4, #104]	; 0x68
 800722a:	689e      	ldr	r6, [r3, #8]
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
 800722c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8007230:	66e6      	str	r6, [r4, #108]	; 0x6c
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8007232:	9e8c      	ldr	r6, [sp, #560]	; 0x230
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
 8007234:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8007238:	f896 e000 	ldrb.w	lr, [r6]
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
 800723c:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8007240:	f1be 0f03 	cmp.w	lr, #3
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
 8007244:	9b8e      	ldr	r3, [sp, #568]	; 0x238
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8007246:	f000 80ff 	beq.w	8007448 <f_mkdir+0x3dc>
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
 800724a:	0c1a      	lsrs	r2, r3, #16
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800724c:	f896 9002 	ldrb.w	r9, [r6, #2]
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
 8007250:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 8007254:	0a11      	lsrs	r1, r2, #8
 8007256:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800725a:	f884 e06b 	strb.w	lr, [r4, #107]	; 0x6b
 800725e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8007262:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	f000 80c0 	beq.w	80073ee <f_mkdir+0x382>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 800726e:	2400      	movs	r4, #0
 8007270:	f8cd b010 	str.w	fp, [sp, #16]
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
 8007274:	2301      	movs	r3, #1
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
 8007276:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
					dj.fs->wflag = 1;
 800727a:	7133      	strb	r3, [r6, #4]
{
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 800727c:	f1b8 0f00 	cmp.w	r8, #0
 8007280:	d078      	beq.n	8007374 <f_mkdir+0x308>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8007282:	f106 0a30 	add.w	sl, r6, #48	; 0x30
 8007286:	7870      	ldrb	r0, [r6, #1]
 8007288:	4651      	mov	r1, sl
 800728a:	4642      	mov	r2, r8
 800728c:	2301      	movs	r3, #1
 800728e:	f001 ff5b 	bl	8009148 <disk_write>
 8007292:	2800      	cmp	r0, #0
 8007294:	f040 80a5 	bne.w	80073e2 <f_mkdir+0x376>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8007298:	69f3      	ldr	r3, [r6, #28]
 800729a:	6a31      	ldr	r1, [r6, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 800729c:	7130      	strb	r0, [r6, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800729e:	eb03 0b01 	add.w	fp, r3, r1
 80072a2:	45d8      	cmp	r8, fp
 80072a4:	d266      	bcs.n	8007374 <f_mkdir+0x308>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80072a6:	78f7      	ldrb	r7, [r6, #3]
 80072a8:	2f01      	cmp	r7, #1
 80072aa:	d963      	bls.n	8007374 <f_mkdir+0x308>
 80072ac:	f1a7 0c02 	sub.w	ip, r7, #2
 80072b0:	f01c 0c03 	ands.w	ip, ip, #3
 80072b4:	46c3      	mov	fp, r8
 80072b6:	f000 80c2 	beq.w	800743e <f_mkdir+0x3d2>
					wsect += fs->fsize;
 80072ba:	eb08 0b03 	add.w	fp, r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80072be:	7870      	ldrb	r0, [r6, #1]
 80072c0:	2301      	movs	r3, #1
 80072c2:	4651      	mov	r1, sl
 80072c4:	465a      	mov	r2, fp
 80072c6:	f8cd c004 	str.w	ip, [sp, #4]
 80072ca:	f001 ff3d 	bl	8009148 <disk_write>
 80072ce:	f8dd c004 	ldr.w	ip, [sp, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80072d2:	3f01      	subs	r7, #1
 80072d4:	f1bc 0f01 	cmp.w	ip, #1
 80072d8:	b2ff      	uxtb	r7, r7
 80072da:	69f3      	ldr	r3, [r6, #28]
 80072dc:	f000 80af 	beq.w	800743e <f_mkdir+0x3d2>
 80072e0:	f1bc 0f02 	cmp.w	ip, #2
 80072e4:	d009      	beq.n	80072fa <f_mkdir+0x28e>
					wsect += fs->fsize;
 80072e6:	449b      	add	fp, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80072e8:	465a      	mov	r2, fp
 80072ea:	2301      	movs	r3, #1
 80072ec:	7870      	ldrb	r0, [r6, #1]
 80072ee:	4651      	mov	r1, sl
 80072f0:	f001 ff2a 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80072f4:	1e7a      	subs	r2, r7, #1
 80072f6:	69f3      	ldr	r3, [r6, #28]
 80072f8:	b2d7      	uxtb	r7, r2
					wsect += fs->fsize;
 80072fa:	449b      	add	fp, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80072fc:	7870      	ldrb	r0, [r6, #1]
 80072fe:	2301      	movs	r3, #1
 8007300:	4651      	mov	r1, sl
 8007302:	465a      	mov	r2, fp
 8007304:	f001 ff20 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007308:	1e7b      	subs	r3, r7, #1
 800730a:	b2df      	uxtb	r7, r3
 800730c:	f8cd 9018 	str.w	r9, [sp, #24]
 8007310:	69f3      	ldr	r3, [r6, #28]
 8007312:	46c1      	mov	r9, r8
 8007314:	46a8      	mov	r8, r5
 8007316:	e01e      	b.n	8007356 <f_mkdir+0x2ea>
 8007318:	69f0      	ldr	r0, [r6, #28]
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800731a:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800731c:	4483      	add	fp, r0
					disk_write(fs->drv, fs->win, wsect, 1);
 800731e:	465a      	mov	r2, fp
 8007320:	2301      	movs	r3, #1
 8007322:	7870      	ldrb	r0, [r6, #1]
 8007324:	f001 ff10 	bl	8009148 <disk_write>
 8007328:	69f3      	ldr	r3, [r6, #28]
 800732a:	4651      	mov	r1, sl
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800732c:	449b      	add	fp, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800732e:	465a      	mov	r2, fp
 8007330:	2301      	movs	r3, #1
 8007332:	7870      	ldrb	r0, [r6, #1]
 8007334:	f001 ff08 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007338:	3d01      	subs	r5, #1
 800733a:	69f2      	ldr	r2, [r6, #28]
 800733c:	b2ef      	uxtb	r7, r5
 800733e:	1e78      	subs	r0, r7, #1
					wsect += fs->fsize;
 8007340:	4493      	add	fp, r2
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007342:	b2c5      	uxtb	r5, r0
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8007344:	2301      	movs	r3, #1
 8007346:	7870      	ldrb	r0, [r6, #1]
 8007348:	4651      	mov	r1, sl
 800734a:	465a      	mov	r2, fp
 800734c:	f001 fefc 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007350:	1e6f      	subs	r7, r5, #1
 8007352:	69f3      	ldr	r3, [r6, #28]
 8007354:	b2ff      	uxtb	r7, r7
					wsect += fs->fsize;
 8007356:	449b      	add	fp, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007358:	1e7d      	subs	r5, r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 800735a:	2301      	movs	r3, #1
 800735c:	4651      	mov	r1, sl
 800735e:	465a      	mov	r2, fp
 8007360:	7870      	ldrb	r0, [r6, #1]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007362:	b2ed      	uxtb	r5, r5
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 8007364:	f001 fef0 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007368:	2d01      	cmp	r5, #1
 800736a:	d1d5      	bne.n	8007318 <f_mkdir+0x2ac>
 800736c:	4645      	mov	r5, r8
 800736e:	46c8      	mov	r8, r9
 8007370:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	1aea      	subs	r2, r5, r3
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 8007378:	f843 4b04 	str.w	r4, [r3], #4
 800737c:	1f11      	subs	r1, r2, #4
 800737e:	42ab      	cmp	r3, r5
 8007380:	f3c1 0281 	ubfx	r2, r1, #2, #2
 8007384:	d00d      	beq.n	80073a2 <f_mkdir+0x336>
 8007386:	b1ba      	cbz	r2, 80073b8 <f_mkdir+0x34c>
 8007388:	2a01      	cmp	r2, #1
 800738a:	d006      	beq.n	800739a <f_mkdir+0x32e>
 800738c:	2a02      	cmp	r2, #2
 800738e:	d002      	beq.n	8007396 <f_mkdir+0x32a>
 8007390:	9902      	ldr	r1, [sp, #8]
 8007392:	3304      	adds	r3, #4
 8007394:	604c      	str	r4, [r1, #4]
 8007396:	f843 4b04 	str.w	r4, [r3], #4
 800739a:	f843 4b04 	str.w	r4, [r3], #4
 800739e:	42ab      	cmp	r3, r5
 80073a0:	d10a      	bne.n	80073b8 <f_mkdir+0x34c>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80073a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80073a6:	fa5f f989 	uxtb.w	r9, r9
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	f1b9 0f00 	cmp.w	r9, #0
 80073b2:	d01a      	beq.n	80073ea <f_mkdir+0x37e>
 80073b4:	9e8c      	ldr	r6, [sp, #560]	; 0x230
 80073b6:	e75d      	b.n	8007274 <f_mkdir+0x208>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
 80073b8:	469e      	mov	lr, r3
 80073ba:	f84e 4b04 	str.w	r4, [lr], #4
 80073be:	605c      	str	r4, [r3, #4]
 80073c0:	f8ce 4004 	str.w	r4, [lr, #4]
 80073c4:	60dc      	str	r4, [r3, #12]
 80073c6:	3310      	adds	r3, #16
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	d0ea      	beq.n	80073a2 <f_mkdir+0x336>
 80073cc:	469e      	mov	lr, r3
 80073ce:	f84e 4b04 	str.w	r4, [lr], #4
 80073d2:	605c      	str	r4, [r3, #4]
 80073d4:	f8ce 4004 	str.w	r4, [lr, #4]
 80073d8:	60dc      	str	r4, [r3, #12]
 80073da:	3310      	adds	r3, #16
 80073dc:	42ab      	cmp	r3, r5
 80073de:	d1eb      	bne.n	80073b8 <f_mkdir+0x34c>
 80073e0:	e7df      	b.n	80073a2 <f_mkdir+0x336>
 80073e2:	f8dd b010 	ldr.w	fp, [sp, #16]

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80073e6:	2401      	movs	r4, #1
 80073e8:	e66a      	b.n	80070c0 <f_mkdir+0x54>
 80073ea:	f8dd b010 	ldr.w	fp, [sp, #16]
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 80073ee:	a88c      	add	r0, sp, #560	; 0x230
 80073f0:	f7fd fdc2 	bl	8004f78 <dir_register>
			if (res != FR_OK) {
 80073f4:	4604      	mov	r4, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f47f ae62 	bne.w	80070c0 <f_mkdir+0x54>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
			} else {
				dir = dj.dir;
 80073fc:	9b91      	ldr	r3, [sp, #580]	; 0x244
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80073fe:	2010      	movs	r0, #16
 8007400:	72d8      	strb	r0, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 8007402:	9a03      	ldr	r2, [sp, #12]
 8007404:	759a      	strb	r2, [r3, #22]
 8007406:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
 800740a:	75dc      	strb	r4, [r3, #23]
 800740c:	9907      	ldr	r1, [sp, #28]
				ST_CLUST(dir, dcl);					/* Table start cluster */
				dj.fs->wflag = 1;
 800740e:	2401      	movs	r4, #1
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
			} else {
				dir = dj.dir;
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 8007410:	7619      	strb	r1, [r3, #24]
 8007412:	9808      	ldr	r0, [sp, #32]
 8007414:	7658      	strb	r0, [r3, #25]
				ST_CLUST(dir, dcl);					/* Table start cluster */
 8007416:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800741a:	f883 c01a 	strb.w	ip, [r3, #26]
 800741e:	f89d e02a 	ldrb.w	lr, [sp, #42]	; 0x2a
 8007422:	f883 e01b 	strb.w	lr, [r3, #27]
 8007426:	9a05      	ldr	r2, [sp, #20]
 8007428:	751a      	strb	r2, [r3, #20]
 800742a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
 800742e:	f883 c015 	strb.w	ip, [r3, #21]
				dj.fs->wflag = 1;
 8007432:	988c      	ldr	r0, [sp, #560]	; 0x230
 8007434:	7104      	strb	r4, [r0, #4]
				res = sync(dj.fs);
 8007436:	f7fb fa03 	bl	8002840 <sync>
 800743a:	4604      	mov	r4, r0
 800743c:	e626      	b.n	800708c <f_mkdir+0x20>
 800743e:	f8cd 9018 	str.w	r9, [sp, #24]
 8007442:	46c1      	mov	r9, r8
 8007444:	46a8      	mov	r8, r5
 8007446:	e786      	b.n	8007356 <f_mkdir+0x2ea>
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8007448:	6a70      	ldr	r0, [r6, #36]	; 0x24
					pcl = 0;
 800744a:	4298      	cmp	r0, r3
 800744c:	bf08      	it	eq
 800744e:	2300      	moveq	r3, #0
 8007450:	e6fb      	b.n	800724a <f_mkdir+0x1de>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8007452:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8007456:	7860      	ldrb	r0, [r4, #1]
 8007458:	4641      	mov	r1, r8
 800745a:	462a      	mov	r2, r5
 800745c:	2301      	movs	r3, #1
 800745e:	f001 fe73 	bl	8009148 <disk_write>
 8007462:	2800      	cmp	r0, #0
 8007464:	f47f ae5d 	bne.w	8007122 <f_mkdir+0xb6>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8007468:	69e3      	ldr	r3, [r4, #28]
 800746a:	6a27      	ldr	r7, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 800746c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 800746e:	19d9      	adds	r1, r3, r7
 8007470:	428d      	cmp	r5, r1
 8007472:	d20d      	bcs.n	8007490 <f_mkdir+0x424>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007474:	78e7      	ldrb	r7, [r4, #3]
 8007476:	e009      	b.n	800748c <f_mkdir+0x420>
					wsect += fs->fsize;
 8007478:	69e1      	ldr	r1, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800747a:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 800747c:	186d      	adds	r5, r5, r1
					disk_write(fs->drv, fs->win, wsect, 1);
 800747e:	462a      	mov	r2, r5
 8007480:	4641      	mov	r1, r8
 8007482:	2301      	movs	r3, #1
 8007484:	f001 fe60 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8007488:	1e7a      	subs	r2, r7, #1
 800748a:	b2d7      	uxtb	r7, r2
 800748c:	2f01      	cmp	r7, #1
 800748e:	d8f3      	bhi.n	8007478 <f_mkdir+0x40c>
 8007490:	9c8c      	ldr	r4, [sp, #560]	; 0x230
 8007492:	e64f      	b.n	8007134 <f_mkdir+0xc8>

08007494 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
 8007494:	b530      	push	{r4, r5, lr}
 8007496:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800749a:	9001      	str	r0, [sp, #4]
 800749c:	460c      	mov	r4, r1
 800749e:	4615      	mov	r5, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
 80074a0:	a801      	add	r0, sp, #4
 80074a2:	a982      	add	r1, sp, #520	; 0x208
 80074a4:	2201      	movs	r2, #1
 80074a6:	f7fa ffb7 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 80074aa:	b110      	cbz	r0, 80074b2 <f_chmod+0x1e>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80074ac:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80074b0:	bd30      	pop	{r4, r5, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 80074b2:	aa8b      	add	r2, sp, #556	; 0x22c
 80074b4:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);		/* Follow the file path */
 80074b6:	a882      	add	r0, sp, #520	; 0x208
 80074b8:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 80074ba:	9288      	str	r2, [sp, #544]	; 0x220
 80074bc:	9389      	str	r3, [sp, #548]	; 0x224
		res = follow_path(&dj, path);		/* Follow the file path */
 80074be:	f7fc fe4b 	bl	8004158 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d1f2      	bne.n	80074ac <f_chmod+0x18>
			dir = dj.dir;
 80074c6:	9b87      	ldr	r3, [sp, #540]	; 0x21c
			if (!dir) {						/* Is it a root directory? */
 80074c8:	b183      	cbz	r3, 80074ec <f_chmod+0x58>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 80074ca:	f893 e00b 	ldrb.w	lr, [r3, #11]
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 80074ce:	f005 0c27 	and.w	ip, r5, #39	; 0x27
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 80074d2:	ea2e 000c 	bic.w	r0, lr, ip
 80074d6:	ea0c 0504 	and.w	r5, ip, r4
 80074da:	ea40 0505 	orr.w	r5, r0, r5
 80074de:	72dd      	strb	r5, [r3, #11]
				dj.fs->wflag = 1;
 80074e0:	9882      	ldr	r0, [sp, #520]	; 0x208
 80074e2:	2101      	movs	r1, #1
 80074e4:	7101      	strb	r1, [r0, #4]
				res = sync(dj.fs);
 80074e6:	f7fb f9ab 	bl	8002840 <sync>
 80074ea:	e7df      	b.n	80074ac <f_chmod+0x18>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
 80074ec:	2006      	movs	r0, #6
 80074ee:	e7dd      	b.n	80074ac <f_chmod+0x18>

080074f0 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
 80074f0:	b510      	push	{r4, lr}
 80074f2:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80074f6:	9001      	str	r0, [sp, #4]
 80074f8:	460c      	mov	r4, r1
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
 80074fa:	a801      	add	r0, sp, #4
 80074fc:	a982      	add	r1, sp, #520	; 0x208
 80074fe:	2201      	movs	r2, #1
 8007500:	f7fa ff8a 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 8007504:	b110      	cbz	r0, 800750c <f_utime+0x1c>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8007506:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800750a:	bd10      	pop	{r4, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 800750c:	aa8b      	add	r2, sp, #556	; 0x22c
 800750e:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007510:	a882      	add	r0, sp, #520	; 0x208
 8007512:	9901      	ldr	r1, [sp, #4]
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
 8007514:	9288      	str	r2, [sp, #544]	; 0x220
 8007516:	9389      	str	r3, [sp, #548]	; 0x224
		res = follow_path(&dj, path);	/* Follow the file path */
 8007518:	f7fc fe1e 	bl	8004158 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800751c:	2800      	cmp	r0, #0
 800751e:	d1f2      	bne.n	8007506 <f_utime+0x16>
			dir = dj.dir;
 8007520:	9b87      	ldr	r3, [sp, #540]	; 0x21c
			if (!dir) {					/* Root directory */
 8007522:	b19b      	cbz	r3, 800754c <f_utime+0x5c>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 8007524:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8007528:	f883 e016 	strb.w	lr, [r3, #22]
 800752c:	88e0      	ldrh	r0, [r4, #6]
 800752e:	0a01      	lsrs	r1, r0, #8
 8007530:	75d9      	strb	r1, [r3, #23]
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 8007532:	f8b4 c004 	ldrh.w	ip, [r4, #4]
				dj.fs->wflag = 1;
 8007536:	2101      	movs	r1, #1
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 8007538:	f883 c018 	strb.w	ip, [r3, #24]
 800753c:	88a2      	ldrh	r2, [r4, #4]
 800753e:	0a10      	lsrs	r0, r2, #8
 8007540:	7658      	strb	r0, [r3, #25]
				dj.fs->wflag = 1;
 8007542:	9882      	ldr	r0, [sp, #520]	; 0x208
 8007544:	7101      	strb	r1, [r0, #4]
				res = sync(dj.fs);
 8007546:	f7fb f97b 	bl	8002840 <sync>
 800754a:	e7dc      	b.n	8007506 <f_utime+0x16>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
 800754c:	2006      	movs	r0, #6
 800754e:	e7da      	b.n	8007506 <f_utime+0x16>

08007550 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8007558:	9003      	str	r0, [sp, #12]
 800755a:	460c      	mov	r4, r1
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
 800755c:	a803      	add	r0, sp, #12
 800755e:	a98e      	add	r1, sp, #568	; 0x238
 8007560:	2201      	movs	r2, #1
 8007562:	f7fa ff59 	bl	8002418 <chk_mounted>
	if (res == FR_OK) {
 8007566:	b118      	cbz	r0, 8007570 <f_rename+0x20>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
 8007568:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
 8007570:	9b8e      	ldr	r3, [sp, #568]	; 0x238
		INIT_BUF(djo);
 8007572:	aa9d      	add	r2, sp, #628	; 0x274
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
 8007574:	9385      	str	r3, [sp, #532]	; 0x214
		INIT_BUF(djo);
		res = follow_path(&djo, path_old);		/* Check old object */
 8007576:	a88e      	add	r0, sp, #568	; 0x238


	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
		INIT_BUF(djo);
 8007578:	ab05      	add	r3, sp, #20
		res = follow_path(&djo, path_old);		/* Check old object */
 800757a:	9903      	ldr	r1, [sp, #12]


	res = chk_mounted(&path_old, &djo.fs, 1);
	if (res == FR_OK) {
		djn.fs = djo.fs;
		INIT_BUF(djo);
 800757c:	9294      	str	r2, [sp, #592]	; 0x250
 800757e:	9395      	str	r3, [sp, #596]	; 0x254
		res = follow_path(&djo, path_old);		/* Check old object */
 8007580:	f7fc fdea 	bl	8004158 <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
 8007584:	2800      	cmp	r0, #0
 8007586:	d1ef      	bne.n	8007568 <f_rename+0x18>
			if (!djo.dir) {						/* Is root dir? */
 8007588:	9b93      	ldr	r3, [sp, #588]	; 0x24c
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80ce 	beq.w	800772c <f_rename+0x1dc>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
 8007590:	f103 010b 	add.w	r1, r3, #11

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
 8007594:	f011 0f03 	tst.w	r1, #3
 8007598:	f040 812d 	bne.w	80077f6 <f_rename+0x2a6>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 800759c:	f8d3 000b 	ldr.w	r0, [r3, #11]

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
 80075a0:	ad97      	add	r5, sp, #604	; 0x25c
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80075a2:	9097      	str	r0, [sp, #604]	; 0x25c
 80075a4:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80075a8:	f105 0808 	add.w	r8, r5, #8
 80075ac:	9298      	str	r2, [sp, #608]	; 0x260
 80075ae:	f8d3 1013 	ldr.w	r1, [r3, #19]
 80075b2:	f105 0214 	add.w	r2, r5, #20
 80075b6:	60a9      	str	r1, [r5, #8]
 80075b8:	f8d3 7017 	ldr.w	r7, [r3, #23]
 80075bc:	f103 011f 	add.w	r1, r3, #31
 80075c0:	f8c8 7004 	str.w	r7, [r8, #4]
 80075c4:	f8d3 001b 	ldr.w	r0, [r3, #27]
 80075c8:	2701      	movs	r7, #1
 80075ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80075ce:	460b      	mov	r3, r1
 80075d0:	f813 ab01 	ldrb.w	sl, [r3], #1

/*-----------------------------------------------------------------------*/
/* Rename File/Directory                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_rename (
 80075d4:	19cf      	adds	r7, r1, r7
 80075d6:	43c9      	mvns	r1, r1
 80075d8:	eb01 0907 	add.w	r9, r1, r7
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80075dc:	42bb      	cmp	r3, r7
		*d++ = *s++;
 80075de:	f802 ab01 	strb.w	sl, [r2], #1
 80075e2:	f009 0103 	and.w	r1, r9, #3
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80075e6:	d026      	beq.n	8007636 <f_rename+0xe6>
 80075e8:	b189      	cbz	r1, 800760e <f_rename+0xbe>
 80075ea:	2901      	cmp	r1, #1
 80075ec:	d009      	beq.n	8007602 <f_rename+0xb2>
 80075ee:	2902      	cmp	r1, #2
		*d++ = *s++;
 80075f0:	bf1c      	itt	ne
 80075f2:	f813 1b01 	ldrbne.w	r1, [r3], #1
 80075f6:	f802 1b01 	strbne.w	r1, [r2], #1
 80075fa:	f813 9b01 	ldrb.w	r9, [r3], #1
 80075fe:	f802 9b01 	strb.w	r9, [r2], #1
 8007602:	f813 ab01 	ldrb.w	sl, [r3], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8007606:	42bb      	cmp	r3, r7
		*d++ = *s++;
 8007608:	f802 ab01 	strb.w	sl, [r2], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 800760c:	d013      	beq.n	8007636 <f_rename+0xe6>
		*d++ = *s++;
 800760e:	4698      	mov	r8, r3
 8007610:	f818 6b01 	ldrb.w	r6, [r8], #1
 8007614:	4696      	mov	lr, r2
 8007616:	f80e 6b01 	strb.w	r6, [lr], #1
 800761a:	785e      	ldrb	r6, [r3, #1]
 800761c:	7056      	strb	r6, [r2, #1]
 800761e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8007622:	f88e c001 	strb.w	ip, [lr, #1]
 8007626:	f893 b003 	ldrb.w	fp, [r3, #3]
 800762a:	3304      	adds	r3, #4
 800762c:	f882 b003 	strb.w	fp, [r2, #3]
 8007630:	3204      	adds	r2, #4
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 8007632:	42bb      	cmp	r3, r7
 8007634:	d1eb      	bne.n	800760e <f_rename+0xbe>
		*d++ = *s++;
 8007636:	f50d 7805 	add.w	r8, sp, #532	; 0x214
 800763a:	f108 0c04 	add.w	ip, r8, #4
 800763e:	f50d 7b0e 	add.w	fp, sp, #568	; 0x238
 8007642:	f10c 0010 	add.w	r0, ip, #16
 8007646:	9001      	str	r0, [sp, #4]
 8007648:	f10b 0908 	add.w	r9, fp, #8
 800764c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007650:	f10b 0a04 	add.w	sl, fp, #4
 8007654:	f8da a004 	ldr.w	sl, [sl, #4]
 8007658:	f10b 0114 	add.w	r1, fp, #20
 800765c:	f10b 0e18 	add.w	lr, fp, #24
 8007660:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8007664:	f8cc 200c 	str.w	r2, [ip, #12]
 8007668:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800766c:	f8cc 3010 	str.w	r3, [ip, #16]
 8007670:	6848      	ldr	r0, [r1, #4]
 8007672:	9a8e      	ldr	r2, [sp, #568]	; 0x238
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
 8007674:	4621      	mov	r1, r4
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8007676:	9c8f      	ldr	r4, [sp, #572]	; 0x23c
 8007678:	9000      	str	r0, [sp, #0]
 800767a:	f8de 9004 	ldr.w	r9, [lr, #4]
 800767e:	f8de 8008 	ldr.w	r8, [lr, #8]
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	9486      	str	r4, [sp, #536]	; 0x218
 8007686:	9285      	str	r2, [sp, #532]	; 0x214
 8007688:	f8cc a004 	str.w	sl, [ip, #4]
 800768c:	f8cc b008 	str.w	fp, [ip, #8]
 8007690:	9c00      	ldr	r4, [sp, #0]
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
 8007692:	a885      	add	r0, sp, #532	; 0x214
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 8007694:	605c      	str	r4, [r3, #4]
 8007696:	f8c3 9008 	str.w	r9, [r3, #8]
 800769a:	f8c3 800c 	str.w	r8, [r3, #12]
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
 800769e:	f7fc fd5b 	bl	8004158 <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 80076a2:	b908      	cbnz	r0, 80076a8 <f_rename+0x158>
 80076a4:	2008      	movs	r0, #8
 80076a6:	e75f      	b.n	8007568 <f_rename+0x18>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 80076a8:	2804      	cmp	r0, #4
 80076aa:	f47f af5d 	bne.w	8007568 <f_rename+0x18>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
 80076ae:	a885      	add	r0, sp, #532	; 0x214
 80076b0:	f7fd fc62 	bl	8004f78 <dir_register>
					if (res == FR_OK) {
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f47f af57 	bne.w	8007568 <f_rename+0x18>

/*-----------------------------------------------------------------------*/
/* Rename File/Directory                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_rename (
 80076ba:	1c6b      	adds	r3, r5, #1
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
					if (res == FR_OK) {
						dir = djn.dir;					/* Copy object information except for name */
 80076bc:	9e8a      	ldr	r6, [sp, #552]	; 0x228
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80076be:	f813 cf01 	ldrb.w	ip, [r3, #1]!

/*-----------------------------------------------------------------------*/
/* Rename File/Directory                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_rename (
 80076c2:	3514      	adds	r5, #20
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80076c4:	f886 c00d 	strb.w	ip, [r6, #13]
 80076c8:	f106 020e 	add.w	r2, r6, #14
 80076cc:	7858      	ldrb	r0, [r3, #1]
 80076ce:	4696      	mov	lr, r2
 80076d0:	f80e 0b01 	strb.w	r0, [lr], #1
 80076d4:	7899      	ldrb	r1, [r3, #2]
 80076d6:	7051      	strb	r1, [r2, #1]
 80076d8:	f893 c003 	ldrb.w	ip, [r3, #3]
 80076dc:	f88e c001 	strb.w	ip, [lr, #1]
 80076e0:	7918      	ldrb	r0, [r3, #4]
 80076e2:	70d0      	strb	r0, [r2, #3]
 80076e4:	7959      	ldrb	r1, [r3, #5]
 80076e6:	7111      	strb	r1, [r2, #4]
 80076e8:	f813 ef06 	ldrb.w	lr, [r3, #6]!
 80076ec:	f882 e005 	strb.w	lr, [r2, #5]
 80076f0:	3206      	adds	r2, #6
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80076f2:	42ab      	cmp	r3, r5
 80076f4:	d1ea      	bne.n	80076cc <f_rename+0x17c>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
					if (res == FR_OK) {
						dir = djn.dir;					/* Copy object information except for name */
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
 80076f6:	f89d e25c 	ldrb.w	lr, [sp, #604]	; 0x25c
						djo.fs->wflag = 1;
 80076fa:	2501      	movs	r5, #1
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
					if (res == FR_OK) {
						dir = djn.dir;					/* Copy object information except for name */
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
 80076fc:	f04e 0c20 	orr.w	ip, lr, #32
 8007700:	f886 c00b 	strb.w	ip, [r6, #11]
						djo.fs->wflag = 1;
 8007704:	998e      	ldr	r1, [sp, #568]	; 0x238
 8007706:	710d      	strb	r5, [r1, #4]
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
 8007708:	9b87      	ldr	r3, [sp, #540]	; 0x21c
 800770a:	9a90      	ldr	r2, [sp, #576]	; 0x240
 800770c:	429a      	cmp	r2, r3
 800770e:	d003      	beq.n	8007718 <f_rename+0x1c8>
 8007710:	7af0      	ldrb	r0, [r6, #11]
 8007712:	f010 0f10 	tst.w	r0, #16
 8007716:	d10b      	bne.n	8007730 <f_rename+0x1e0>
									djn.fs->wflag = 1;
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
 8007718:	a88e      	add	r0, sp, #568	; 0x238
 800771a:	f7fc ff2f 	bl	800457c <dir_remove>
							if (res == FR_OK)
 800771e:	2800      	cmp	r0, #0
 8007720:	f47f af22 	bne.w	8007568 <f_rename+0x18>
								res = sync(djo.fs);
 8007724:	988e      	ldr	r0, [sp, #568]	; 0x238
 8007726:	f7fb f88b 	bl	8002840 <sync>
 800772a:	e71d      	b.n	8007568 <f_rename+0x18>
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
 800772c:	2004      	movs	r0, #4
 800772e:	e71b      	b.n	8007568 <f_rename+0x18>
						dir = djn.dir;					/* Copy object information except for name */
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
 8007730:	7d70      	ldrb	r0, [r6, #21]
 8007732:	7d33      	ldrb	r3, [r6, #20]
 8007734:	7ef2      	ldrb	r2, [r6, #27]
 8007736:	9c85      	ldr	r4, [sp, #532]	; 0x214
 8007738:	f896 e01a 	ldrb.w	lr, [r6, #26]
 800773c:	ea43 2100 	orr.w	r1, r3, r0, lsl #8
 8007740:	ea4e 2c02 	orr.w	ip, lr, r2, lsl #8
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007744:	69a0      	ldr	r0, [r4, #24]
						dir = djn.dir;					/* Copy object information except for name */
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
 8007746:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800774a:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800774c:	1e82      	subs	r2, r0, #2
 800774e:	4293      	cmp	r3, r2
 8007750:	d22f      	bcs.n	80077b2 <f_rename+0x262>
	return clst * fs->csize + fs->database;
 8007752:	f894 8002 	ldrb.w	r8, [r4, #2]
 8007756:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007758:	fb08 1803 	mla	r8, r8, r3, r1
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
 800775c:	f1b8 0f00 	cmp.w	r8, #0
 8007760:	d027      	beq.n	80077b2 <f_rename+0x262>
)					/* Move to zero only writes back dirty window */
{
	DWORD wsect;


	wsect = fs->winsect;
 8007762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8007764:	45b0      	cmp	r8, r6
 8007766:	d00d      	beq.n	8007784 <f_rename+0x234>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8007768:	7927      	ldrb	r7, [r4, #4]
 800776a:	bb37      	cbnz	r7, 80077ba <f_rename+0x26a>
 800776c:	f104 0730 	add.w	r7, r4, #48	; 0x30
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8007770:	7860      	ldrb	r0, [r4, #1]
 8007772:	4639      	mov	r1, r7
 8007774:	4642      	mov	r2, r8
 8007776:	2301      	movs	r3, #1
 8007778:	f001 fc28 	bl	8008fcc <disk_read>
 800777c:	b9d8      	cbnz	r0, 80077b6 <f_rename+0x266>
				return FR_DISK_ERR;
			fs->winsect = sector;
 800777e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8007782:	9c85      	ldr	r4, [sp, #532]	; 0x214
							if (!dw) {
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
								if (res == FR_OK && dir[1] == '.') {
 8007784:	f894 e051 	ldrb.w	lr, [r4, #81]	; 0x51
 8007788:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
 800778c:	d1c4      	bne.n	8007718 <f_rename+0x1c8>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 800778e:	7820      	ldrb	r0, [r4, #0]
 8007790:	2803      	cmp	r0, #3
 8007792:	d034      	beq.n	80077fe <f_rename+0x2ae>
 8007794:	9b87      	ldr	r3, [sp, #540]	; 0x21c
									ST_CLUST(dir, dw);
 8007796:	0c1a      	lsrs	r2, r3, #16
 8007798:	0a18      	lsrs	r0, r3, #8
 800779a:	0a11      	lsrs	r1, r2, #8
 800779c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
									djn.fs->wflag = 1;
 80077a0:	2301      	movs	r3, #1
							} else {
								res = move_window(djn.fs, dw);
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
								if (res == FR_OK && dir[1] == '.') {
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
									ST_CLUST(dir, dw);
 80077a2:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
 80077a6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80077aa:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
									djn.fs->wflag = 1;
 80077ae:	7123      	strb	r3, [r4, #4]
 80077b0:	e7b2      	b.n	8007718 <f_rename+0x1c8>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
 80077b2:	2002      	movs	r0, #2
 80077b4:	e6d8      	b.n	8007568 <f_rename+0x18>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80077b6:	2001      	movs	r0, #1
 80077b8:	e6d6      	b.n	8007568 <f_rename+0x18>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80077ba:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80077be:	7860      	ldrb	r0, [r4, #1]
 80077c0:	4639      	mov	r1, r7
 80077c2:	4632      	mov	r2, r6
 80077c4:	462b      	mov	r3, r5
 80077c6:	f001 fcbf 	bl	8009148 <disk_write>
 80077ca:	b9f0      	cbnz	r0, 800780a <f_rename+0x2ba>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80077cc:	69e2      	ldr	r2, [r4, #28]
 80077ce:	6a23      	ldr	r3, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 80077d0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80077d2:	eb02 0c03 	add.w	ip, r2, r3
 80077d6:	4566      	cmp	r6, ip
 80077d8:	d2ca      	bcs.n	8007770 <f_rename+0x220>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80077da:	78e5      	ldrb	r5, [r4, #3]
 80077dc:	2d01      	cmp	r5, #1
 80077de:	d9c7      	bls.n	8007770 <f_rename+0x220>
					wsect += fs->fsize;
 80077e0:	69e1      	ldr	r1, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077e2:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
 80077e4:	1876      	adds	r6, r6, r1
					disk_write(fs->drv, fs->win, wsect, 1);
 80077e6:	4632      	mov	r2, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80077ec:	3d01      	subs	r5, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
 80077ee:	f001 fcab 	bl	8009148 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80077f2:	b2ed      	uxtb	r5, r5
 80077f4:	e7f2      	b.n	80077dc <f_rename+0x28c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80077f6:	ad97      	add	r5, sp, #604	; 0x25c

/*-----------------------------------------------------------------------*/
/* Rename File/Directory                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_rename (
 80077f8:	2715      	movs	r7, #21
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80077fa:	462a      	mov	r2, r5
 80077fc:	e6e7      	b.n	80075ce <f_rename+0x7e>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
								if (res == FR_OK && dir[1] == '.') {
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 80077fe:	9b87      	ldr	r3, [sp, #540]	; 0x21c
 8007800:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007802:	4293      	cmp	r3, r2
 8007804:	bf08      	it	eq
 8007806:	2300      	moveq	r3, #0
 8007808:	e7c5      	b.n	8007796 <f_rename+0x246>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800780a:	4628      	mov	r0, r5
 800780c:	e6ac      	b.n	8007568 <f_rename+0x18>
 800780e:	bf00      	nop

08007810 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
 8007810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	4682      	mov	sl, r0
 8007816:	b082      	sub	sp, #8
 8007818:	4614      	mov	r4, r2
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800781a:	f101 39ff 	add.w	r9, r1, #4294967295
 800781e:	4606      	mov	r6, r0
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
	int n = 0;
 8007820:	2500      	movs	r5, #0
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8007822:	f102 0824 	add.w	r8, r2, #36	; 0x24
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
 8007826:	454d      	cmp	r5, r9
 8007828:	da07      	bge.n	800783a <f_gets+0x2a>
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	88a1      	ldrh	r1, [r4, #4]
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
 800782e:	b123      	cbz	r3, 800783a <f_gets+0x2a>
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	b112      	cbz	r2, 800783a <f_gets+0x2a>
 8007834:	88d8      	ldrh	r0, [r3, #6]
 8007836:	4288      	cmp	r0, r1
 8007838:	d008      	beq.n	800784c <f_gets+0x3c>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	7033      	strb	r3, [r6, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
}
 800783e:	429d      	cmp	r5, r3
 8007840:	bf14      	ite	ne
 8007842:	4650      	movne	r0, sl
 8007844:	4618      	moveq	r0, r3
 8007846:	b002      	add	sp, #8
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 800784c:	7858      	ldrb	r0, [r3, #1]
 800784e:	f001 fbb5 	bl	8008fbc <disk_status>
 8007852:	f010 0f01 	tst.w	r0, #1
 8007856:	d1f0      	bne.n	800783a <f_gets+0x2a>

	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8007858:	79a3      	ldrb	r3, [r4, #6]
 800785a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800785e:	d1ec      	bne.n	800783a <f_gets+0x2a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007860:	f013 0f01 	tst.w	r3, #1
 8007864:	d0e9      	beq.n	800783a <f_gets+0x2a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8007866:	68a2      	ldr	r2, [r4, #8]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8007868:	68e3      	ldr	r3, [r4, #12]
 800786a:	4293      	cmp	r3, r2
 800786c:	d0e5      	beq.n	800783a <f_gets+0x2a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800786e:	05d1      	lsls	r1, r2, #23
 8007870:	0dcb      	lsrs	r3, r1, #23
 8007872:	2b00      	cmp	r3, #0
 8007874:	d13b      	bne.n	80078ee <f_gets+0xde>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	7899      	ldrb	r1, [r3, #2]
 800787a:	1e48      	subs	r0, r1, #1
 800787c:	ea00 2752 	and.w	r7, r0, r2, lsr #9
 8007880:	b2ff      	uxtb	r7, r7
			if (!csect) {						/* On the cluster boundary? */
 8007882:	2f00      	cmp	r7, #0
 8007884:	d042      	beq.n	800790c <f_gets+0xfc>
 8007886:	6960      	ldr	r0, [r4, #20]
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8007888:	6999      	ldr	r1, [r3, #24]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800788a:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800788c:	1e8a      	subs	r2, r1, #2
 800788e:	4290      	cmp	r0, r2
 8007890:	d305      	bcc.n	800789e <f_gets+0x8e>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
 8007892:	f894 c006 	ldrb.w	ip, [r4, #6]
 8007896:	f06c 037f 	orn	r3, ip, #127	; 0x7f
 800789a:	71a3      	strb	r3, [r4, #6]
 800789c:	e7cd      	b.n	800783a <f_gets+0x2a>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
 800789e:	f893 c002 	ldrb.w	ip, [r3, #2]
 80078a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078a4:	fb0c 2000 	mla	r0, ip, r0, r2
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d0f2      	beq.n	8007892 <f_gets+0x82>
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80078ac:	69a2      	ldr	r2, [r4, #24]
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 80078ae:	19c7      	adds	r7, r0, r7
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80078b0:	4297      	cmp	r7, r2
 80078b2:	d018      	beq.n	80078e6 <f_gets+0xd6>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80078b4:	f894 e006 	ldrb.w	lr, [r4, #6]
 80078b8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80078bc:	d00b      	beq.n	80078d6 <f_gets+0xc6>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80078be:	7858      	ldrb	r0, [r3, #1]
 80078c0:	4641      	mov	r1, r8
 80078c2:	2301      	movs	r3, #1
 80078c4:	f001 fc40 	bl	8009148 <disk_write>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d1e2      	bne.n	8007892 <f_gets+0x82>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
 80078cc:	79a1      	ldrb	r1, [r4, #6]
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 80078d4:	71a0      	strb	r0, [r4, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 80078d6:	7858      	ldrb	r0, [r3, #1]
 80078d8:	4641      	mov	r1, r8
 80078da:	463a      	mov	r2, r7
 80078dc:	2301      	movs	r3, #1
 80078de:	f001 fb75 	bl	8008fcc <disk_read>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d1d5      	bne.n	8007892 <f_gets+0x82>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 80078e6:	68a2      	ldr	r2, [r4, #8]
 80078e8:	61a7      	str	r7, [r4, #24]
 80078ea:	05d0      	lsls	r0, r2, #23
 80078ec:	0dc3      	lsrs	r3, r0, #23
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80078ee:	f818 1003 	ldrb.w	r1, [r8, r3]
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078f2:	3201      	adds	r2, #1


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
		f_read(fil, s, 1, &rc);
		if (rc != 1) break;			/* Break on EOF or error */
		c = s[0];
 80078f4:	fa5f fe81 	uxtb.w	lr, r1
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
		n++;
 80078f8:	3501      	adds	r5, #1
		if (c == '\n') break;		/* Break on EOL */
 80078fa:	f1be 0f0a 	cmp.w	lr, #10
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
 80078fe:	f88d 1004 	strb.w	r1, [sp, #4]
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007902:	60a2      	str	r2, [r4, #8]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
 8007904:	f806 eb01 	strb.w	lr, [r6], #1
		n++;
		if (c == '\n') break;		/* Break on EOL */
 8007908:	d18d      	bne.n	8007826 <f_gets+0x16>
 800790a:	e796      	b.n	800783a <f_gets+0x2a>
	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {						/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
 800790c:	b942      	cbnz	r2, 8007920 <f_gets+0x110>
					clst = fp->sclust;			/* Follow from the origin */
 800790e:	6920      	ldr	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007910:	2801      	cmp	r0, #1
 8007912:	d9be      	bls.n	8007892 <f_gets+0x82>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007914:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007918:	d0bb      	beq.n	8007892 <f_gets+0x82>
				fp->clust = clst;				/* Update current cluster */
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	6160      	str	r0, [r4, #20]
 800791e:	e7b3      	b.n	8007888 <f_gets+0x78>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007920:	4618      	mov	r0, r3
 8007922:	6961      	ldr	r1, [r4, #20]
 8007924:	f7fb f87a 	bl	8002a1c <get_fat>
 8007928:	e7f2      	b.n	8007910 <f_gets+0x100>
 800792a:	bf00      	nop

0800792c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
 800792c:	b500      	push	{lr}
 800792e:	b083      	sub	sp, #12
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007930:	ab02      	add	r3, sp, #8
 8007932:	f803 0d04 	strb.w	r0, [r3, #-4]!
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007936:	466a      	mov	r2, sp
 8007938:	4608      	mov	r0, r1
 800793a:	4619      	mov	r1, r3
 800793c:	f7fd f94c 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007940:	9800      	ldr	r0, [sp, #0]
 8007942:	2801      	cmp	r0, #1
}
 8007944:	bf18      	it	ne
 8007946:	f04f 30ff 	movne.w	r0, #4294967295
 800794a:	b003      	add	sp, #12
 800794c:	bd00      	pop	{pc}
 800794e:	bf00      	nop

08007950 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
 8007950:	b570      	push	{r4, r5, r6, lr}
	int n;


	for (n = 0; *str; str++, n++) {
 8007952:	7803      	ldrb	r3, [r0, #0]
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
 8007954:	b082      	sub	sp, #8
 8007956:	460e      	mov	r6, r1
	int n;


	for (n = 0; *str; str++, n++) {
 8007958:	b1ab      	cbz	r3, 8007986 <f_puts+0x36>
 800795a:	4605      	mov	r5, r0
 800795c:	2400      	movs	r4, #0
 800795e:	e002      	b.n	8007966 <f_puts+0x16>
 8007960:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8007964:	b163      	cbz	r3, 8007980 <f_puts+0x30>
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007966:	4630      	mov	r0, r6
 8007968:	a901      	add	r1, sp, #4
 800796a:	466a      	mov	r2, sp
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800796c:	f88d 3004 	strb.w	r3, [sp, #4]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007970:	f7fd f932 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007974:	9b00      	ldr	r3, [sp, #0]
)
{
	int n;


	for (n = 0; *str; str++, n++) {
 8007976:	3401      	adds	r4, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007978:	2b01      	cmp	r3, #1
 800797a:	d0f1      	beq.n	8007960 <f_puts+0x10>
{
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
 800797c:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return n;
}
 8007980:	4620      	mov	r0, r4
 8007982:	b002      	add	sp, #8
 8007984:	bd70      	pop	{r4, r5, r6, pc}
)
{
	int n;


	for (n = 0; *str; str++, n++) {
 8007986:	461c      	mov	r4, r3
 8007988:	e7fa      	b.n	8007980 <f_puts+0x30>
 800798a:	bf00      	nop

0800798c <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const TCHAR* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800798c:	b40e      	push	{r1, r2, r3}
 800798e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007992:	b08c      	sub	sp, #48	; 0x30
 8007994:	ab15      	add	r3, sp, #84	; 0x54
 8007996:	f853 9b04 	ldr.w	r9, [r3], #4


/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/
int f_printf (
 800799a:	a905      	add	r1, sp, #20
	FIL* fil,			/* Pointer to the file object */
	const TCHAR* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800799c:	4605      	mov	r5, r0
	ULONG v;
	TCHAR c, d, s[16], *p;
	int res, cc;


	va_start(arp, str);
 800799e:	930a      	str	r3, [sp, #40]	; 0x28

	for (cc = res = 0; cc != EOF; res += cc) {
 80079a0:	f04f 0800 	mov.w	r8, #0


/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/
int f_printf (
 80079a4:	9100      	str	r1, [sp, #0]


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
 80079a6:	f899 3000 	ldrb.w	r3, [r9]
		if (c == 0) break;			/* End of string */
 80079aa:	b1a3      	cbz	r3, 80079d6 <f_printf+0x4a>
		if (c != '%') {				/* Non escape character */
 80079ac:	2b25      	cmp	r3, #37	; 0x25


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
 80079ae:	f109 0901 	add.w	r9, r9, #1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
 80079b2:	d016      	beq.n	80079e2 <f_printf+0x56>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80079b4:	a90c      	add	r1, sp, #48	; 0x30
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80079b6:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80079b8:	f801 3d04 	strb.w	r3, [r1, #-4]!
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80079bc:	4628      	mov	r0, r5
 80079be:	f7fd f90b 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80079c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c4:	2a01      	cmp	r2, #1
 80079c6:	f040 850a 	bne.w	80083de <f_printf+0xa52>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
 80079ca:	f899 3000 	ldrb.w	r3, [r9]
	int res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
 80079ce:	f108 0801 	add.w	r8, r8, #1
		c = *str++;
		if (c == 0) break;			/* End of string */
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1ea      	bne.n	80079ac <f_printf+0x20>
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
		if (cc != EOF) cc = res;
	}

	va_end(arp);
 80079d6:	4640      	mov	r0, r8
	return (cc == EOF) ? cc : res;
}
 80079d8:	b00c      	add	sp, #48	; 0x30
 80079da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079de:	b003      	add	sp, #12
 80079e0:	4770      	bx	lr
			cc = f_putc(c, fil);
			if (cc != EOF) cc = 1;
			continue;
		}
		w = f = 0;
		c = *str++;
 80079e2:	f819 3b01 	ldrb.w	r3, [r9], #1
		if (c == '0') {				/* Flag: '0' padding */
 80079e6:	2b30      	cmp	r3, #48	; 0x30
 80079e8:	f000 852e 	beq.w	8008448 <f_printf+0xabc>
			f = 1; c = *str++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 80079ec:	2b2d      	cmp	r3, #45	; 0x2d
 80079ee:	f000 853a 	beq.w	8008466 <f_printf+0xada>
 80079f2:	2100      	movs	r1, #0
 80079f4:	2704      	movs	r7, #4
		if (c != '%') {				/* Non escape character */
			cc = f_putc(c, fil);
			if (cc != EOF) cc = 1;
			continue;
		}
		w = f = 0;
 80079f6:	460e      	mov	r6, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80079f8:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80079fc:	fa5f f48c 	uxtb.w	r4, ip
 8007a00:	2c09      	cmp	r4, #9
 8007a02:	f200 852d 	bhi.w	8008460 <f_printf+0xad4>
 8007a06:	464a      	mov	r2, r9
 8007a08:	2400      	movs	r4, #0
			w = w * 10 + c - '0';
 8007a0a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
 8007a0e:	eb03 0449 	add.w	r4, r3, r9, lsl #1
			c = *str++;
 8007a12:	f812 3b01 	ldrb.w	r3, [r2], #1
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 8007a16:	3c30      	subs	r4, #48	; 0x30
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007a18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007a1c:	b2c0      	uxtb	r0, r0
 8007a1e:	2809      	cmp	r0, #9
			w = w * 10 + c - '0';
			c = *str++;
 8007a20:	4691      	mov	r9, r2
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007a22:	d9f2      	bls.n	8007a0a <f_printf+0x7e>
			w = w * 10 + c - '0';
			c = *str++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8007a24:	2b6c      	cmp	r3, #108	; 0x6c
 8007a26:	d02b      	beq.n	8007a80 <f_printf+0xf4>
 8007a28:	2b4c      	cmp	r3, #76	; 0x4c
 8007a2a:	d029      	beq.n	8007a80 <f_printf+0xf4>
			f |= 4; c = *str++;
		}
		if (!c) break;
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0d2      	beq.n	80079d6 <f_printf+0x4a>
		d = c;
		if (IsLower(d)) d -= 0x20;
 8007a30:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8007a34:	fa5f f78c 	uxtb.w	r7, ip
 8007a38:	2f19      	cmp	r7, #25
 8007a3a:	bf9a      	itte	ls
 8007a3c:	f1a3 0020 	subls.w	r0, r3, #32
 8007a40:	b2c0      	uxtbls	r0, r0
 8007a42:	4618      	movhi	r0, r3
		switch (d) {				/* Type is... */
 8007a44:	f1a0 0242 	sub.w	r2, r0, #66	; 0x42
 8007a48:	2a16      	cmp	r2, #22
 8007a4a:	f200 84f0 	bhi.w	800842e <f_printf+0xaa2>
 8007a4e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007a52:	04eb      	.short	0x04eb
 8007a54:	04d704da 	.word	0x04d704da
 8007a58:	04ee04ee 	.word	0x04ee04ee
 8007a5c:	04ee04ee 	.word	0x04ee04ee
 8007a60:	04ee04ee 	.word	0x04ee04ee
 8007a64:	04ee04ee 	.word	0x04ee04ee
 8007a68:	04ee04ee 	.word	0x04ee04ee
 8007a6c:	04ee04ca 	.word	0x04ee04ca
 8007a70:	04ee04ee 	.word	0x04ee04ee
 8007a74:	04ee0373 	.word	0x04ee0373
 8007a78:	04ee04d7 	.word	0x04ee04d7
 8007a7c:	001d04ee 	.word	0x001d04ee
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
			c = *str++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *str++;
 8007a80:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007a84:	f046 0604 	orr.w	r6, r6, #4
 8007a88:	4639      	mov	r1, r7
 8007a8a:	e7cf      	b.n	8007a2c <f_printf+0xa0>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8007a8c:	2210      	movs	r2, #16
		default:					/* Unknown type (passthrough) */
			cc = f_putc(c, fil); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
 8007a8e:	f011 0f04 	tst.w	r1, #4
 8007a92:	f000 84ad 	beq.w	80083f0 <f_printf+0xa64>
 8007a96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		if (d == 'D' && (v & 0x80000000)) {
 8007a98:	2844      	cmp	r0, #68	; 0x44
		default:					/* Unknown type (passthrough) */
			cc = f_putc(c, fil); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
 8007a9a:	f107 0a04 	add.w	sl, r7, #4
 8007a9e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007aa2:	683f      	ldr	r7, [r7, #0]
		if (d == 'D' && (v & 0x80000000)) {
 8007aa4:	f000 84ea 	beq.w	800847c <f_printf+0xaf0>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007aa8:	fbb7 f0f2 	udiv	r0, r7, r2
 8007aac:	fb02 7b10 	mls	fp, r2, r0, r7
 8007ab0:	fa5f f68b 	uxtb.w	r6, fp
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007ab4:	2e09      	cmp	r6, #9
 8007ab6:	d909      	bls.n	8007acc <f_printf+0x140>
 8007ab8:	2b78      	cmp	r3, #120	; 0x78
 8007aba:	bf14      	ite	ne
 8007abc:	f04f 0c07 	movne.w	ip, #7
 8007ac0:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8007ac4:	eb0c 0e06 	add.w	lr, ip, r6
 8007ac8:	fa5f f68e 	uxtb.w	r6, lr
			s[i++] = d + '0';
 8007acc:	3630      	adds	r6, #48	; 0x30
 8007ace:	f88d 6014 	strb.w	r6, [sp, #20]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f000 84da 	beq.w	800848c <f_printf+0xb00>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007ad8:	fbb0 f6f2 	udiv	r6, r0, r2
 8007adc:	fb02 0816 	mls	r8, r2, r6, r0
 8007ae0:	fa5f f088 	uxtb.w	r0, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007ae4:	2809      	cmp	r0, #9
 8007ae6:	d907      	bls.n	8007af8 <f_printf+0x16c>
 8007ae8:	2b78      	cmp	r3, #120	; 0x78
 8007aea:	bf14      	ite	ne
 8007aec:	2707      	movne	r7, #7
 8007aee:	2727      	moveq	r7, #39	; 0x27
 8007af0:	eb07 0a00 	add.w	sl, r7, r0
 8007af4:	fa5f f08a 	uxtb.w	r0, sl
			s[i++] = d + '0';
 8007af8:	3030      	adds	r0, #48	; 0x30
 8007afa:	f88d 0015 	strb.w	r0, [sp, #21]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	f000 84dd 	beq.w	80084be <f_printf+0xb32>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007b04:	fbb6 f0f2 	udiv	r0, r6, r2
 8007b08:	fb02 6610 	mls	r6, r2, r0, r6
 8007b0c:	b2f6      	uxtb	r6, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007b0e:	2e09      	cmp	r6, #9
 8007b10:	d909      	bls.n	8007b26 <f_printf+0x19a>
 8007b12:	2b78      	cmp	r3, #120	; 0x78
 8007b14:	bf14      	ite	ne
 8007b16:	f04f 0e07 	movne.w	lr, #7
 8007b1a:	f04f 0e27 	moveq.w	lr, #39	; 0x27
 8007b1e:	eb0e 0b06 	add.w	fp, lr, r6
 8007b22:	fa5f f68b 	uxtb.w	r6, fp
			s[i++] = d + '0';
 8007b26:	3630      	adds	r6, #48	; 0x30
 8007b28:	f88d 6016 	strb.w	r6, [sp, #22]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f000 84b9 	beq.w	80084a4 <f_printf+0xb18>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007b32:	fbb0 f6f2 	udiv	r6, r0, r2
 8007b36:	fb02 0016 	mls	r0, r2, r6, r0
 8007b3a:	b2c0      	uxtb	r0, r0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007b3c:	2809      	cmp	r0, #9
 8007b3e:	d909      	bls.n	8007b54 <f_printf+0x1c8>
 8007b40:	2b78      	cmp	r3, #120	; 0x78
 8007b42:	bf14      	ite	ne
 8007b44:	f04f 0807 	movne.w	r8, #7
 8007b48:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8007b4c:	eb08 0c00 	add.w	ip, r8, r0
 8007b50:	fa5f f08c 	uxtb.w	r0, ip
			s[i++] = d + '0';
 8007b54:	3030      	adds	r0, #48	; 0x30
 8007b56:	f88d 0017 	strb.w	r0, [sp, #23]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	f000 84b4 	beq.w	80084c8 <f_printf+0xb3c>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007b60:	fbb6 f0f2 	udiv	r0, r6, r2
 8007b64:	fb02 6a10 	mls	sl, r2, r0, r6
 8007b68:	fa5f f68a 	uxtb.w	r6, sl
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007b6c:	2e09      	cmp	r6, #9
 8007b6e:	d908      	bls.n	8007b82 <f_printf+0x1f6>
 8007b70:	2b78      	cmp	r3, #120	; 0x78
 8007b72:	bf14      	ite	ne
 8007b74:	f04f 0b07 	movne.w	fp, #7
 8007b78:	f04f 0b27 	moveq.w	fp, #39	; 0x27
 8007b7c:	eb0b 0706 	add.w	r7, fp, r6
 8007b80:	b2fe      	uxtb	r6, r7
			s[i++] = d + '0';
 8007b82:	3630      	adds	r6, #48	; 0x30
 8007b84:	f88d 6018 	strb.w	r6, [sp, #24]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	f000 84a2 	beq.w	80084d2 <f_printf+0xb46>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007b8e:	fbb0 f6f2 	udiv	r6, r0, r2
 8007b92:	fb02 0e16 	mls	lr, r2, r6, r0
 8007b96:	fa5f f08e 	uxtb.w	r0, lr
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007b9a:	2809      	cmp	r0, #9
 8007b9c:	d907      	bls.n	8007bae <f_printf+0x222>
 8007b9e:	2b78      	cmp	r3, #120	; 0x78
 8007ba0:	bf14      	ite	ne
 8007ba2:	f04f 0c07 	movne.w	ip, #7
 8007ba6:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8007baa:	4460      	add	r0, ip
 8007bac:	b2c0      	uxtb	r0, r0
			s[i++] = d + '0';
 8007bae:	3030      	adds	r0, #48	; 0x30
 8007bb0:	f88d 0019 	strb.w	r0, [sp, #25]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	f000 8491 	beq.w	80084dc <f_printf+0xb50>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007bba:	fbb6 f0f2 	udiv	r0, r6, r2
 8007bbe:	fb02 6610 	mls	r6, r2, r0, r6
 8007bc2:	b2f6      	uxtb	r6, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007bc4:	2e09      	cmp	r6, #9
 8007bc6:	d909      	bls.n	8007bdc <f_printf+0x250>
 8007bc8:	2b78      	cmp	r3, #120	; 0x78
 8007bca:	bf14      	ite	ne
 8007bcc:	f04f 0a07 	movne.w	sl, #7
 8007bd0:	f04f 0a27 	moveq.w	sl, #39	; 0x27
 8007bd4:	eb0a 0806 	add.w	r8, sl, r6
 8007bd8:	fa5f f688 	uxtb.w	r6, r8
			s[i++] = d + '0';
 8007bdc:	3630      	adds	r6, #48	; 0x30
 8007bde:	f88d 601a 	strb.w	r6, [sp, #26]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f000 847f 	beq.w	80084e6 <f_printf+0xb5a>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007be8:	fbb0 f6f2 	udiv	r6, r0, r2
 8007bec:	fb02 0716 	mls	r7, r2, r6, r0
 8007bf0:	b2f8      	uxtb	r0, r7
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007bf2:	2809      	cmp	r0, #9
 8007bf4:	d909      	bls.n	8007c0a <f_printf+0x27e>
 8007bf6:	2b78      	cmp	r3, #120	; 0x78
 8007bf8:	bf14      	ite	ne
 8007bfa:	f04f 0e07 	movne.w	lr, #7
 8007bfe:	f04f 0e27 	moveq.w	lr, #39	; 0x27
 8007c02:	eb0e 0b00 	add.w	fp, lr, r0
 8007c06:	fa5f f08b 	uxtb.w	r0, fp
			s[i++] = d + '0';
 8007c0a:	3030      	adds	r0, #48	; 0x30
 8007c0c:	f88d 001b 	strb.w	r0, [sp, #27]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007c10:	2e00      	cmp	r6, #0
 8007c12:	f000 8472 	beq.w	80084fa <f_printf+0xb6e>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007c16:	fbb6 f0f2 	udiv	r0, r6, r2
 8007c1a:	fb02 6c10 	mls	ip, r2, r0, r6
 8007c1e:	fa5f f68c 	uxtb.w	r6, ip
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007c22:	2e09      	cmp	r6, #9
 8007c24:	d907      	bls.n	8007c36 <f_printf+0x2aa>
 8007c26:	2b78      	cmp	r3, #120	; 0x78
 8007c28:	bf14      	ite	ne
 8007c2a:	f04f 0807 	movne.w	r8, #7
 8007c2e:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8007c32:	4446      	add	r6, r8
 8007c34:	b2f6      	uxtb	r6, r6
			s[i++] = d + '0';
 8007c36:	3630      	adds	r6, #48	; 0x30
 8007c38:	f88d 601c 	strb.w	r6, [sp, #28]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f000 8457 	beq.w	80084f0 <f_printf+0xb64>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007c42:	fbb0 f6f2 	udiv	r6, r0, r2
 8007c46:	fb02 0016 	mls	r0, r2, r6, r0
 8007c4a:	b2c0      	uxtb	r0, r0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007c4c:	2809      	cmp	r0, #9
 8007c4e:	d907      	bls.n	8007c60 <f_printf+0x2d4>
 8007c50:	2b78      	cmp	r3, #120	; 0x78
 8007c52:	bf14      	ite	ne
 8007c54:	2707      	movne	r7, #7
 8007c56:	2727      	moveq	r7, #39	; 0x27
 8007c58:	eb07 0a00 	add.w	sl, r7, r0
 8007c5c:	fa5f f08a 	uxtb.w	r0, sl
			s[i++] = d + '0';
 8007c60:	3030      	adds	r0, #48	; 0x30
 8007c62:	f88d 001d 	strb.w	r0, [sp, #29]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	f000 844c 	beq.w	8008504 <f_printf+0xb78>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007c6c:	fbb6 f0f2 	udiv	r0, r6, r2
 8007c70:	fb02 6b10 	mls	fp, r2, r0, r6
 8007c74:	fa5f f68b 	uxtb.w	r6, fp
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007c78:	2e09      	cmp	r6, #9
 8007c7a:	d909      	bls.n	8007c90 <f_printf+0x304>
 8007c7c:	2b78      	cmp	r3, #120	; 0x78
 8007c7e:	bf14      	ite	ne
 8007c80:	f04f 0c07 	movne.w	ip, #7
 8007c84:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8007c88:	eb0c 0e06 	add.w	lr, ip, r6
 8007c8c:	fa5f f68e 	uxtb.w	r6, lr
			s[i++] = d + '0';
 8007c90:	3630      	adds	r6, #48	; 0x30
 8007c92:	f88d 601e 	strb.w	r6, [sp, #30]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f000 843e 	beq.w	8008518 <f_printf+0xb8c>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007c9c:	fbb0 f6f2 	udiv	r6, r0, r2
 8007ca0:	fb02 0816 	mls	r8, r2, r6, r0
 8007ca4:	fa5f f088 	uxtb.w	r0, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007ca8:	2809      	cmp	r0, #9
 8007caa:	d907      	bls.n	8007cbc <f_printf+0x330>
 8007cac:	2b78      	cmp	r3, #120	; 0x78
 8007cae:	bf14      	ite	ne
 8007cb0:	f04f 0a07 	movne.w	sl, #7
 8007cb4:	f04f 0a27 	moveq.w	sl, #39	; 0x27
 8007cb8:	4450      	add	r0, sl
 8007cba:	b2c0      	uxtb	r0, r0
			s[i++] = d + '0';
 8007cbc:	3030      	adds	r0, #48	; 0x30
 8007cbe:	f88d 001f 	strb.w	r0, [sp, #31]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007cc2:	2e00      	cmp	r6, #0
 8007cc4:	f000 8423 	beq.w	800850e <f_printf+0xb82>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007cc8:	fbb6 f0f2 	udiv	r0, r6, r2
 8007ccc:	fb02 6610 	mls	r6, r2, r0, r6
 8007cd0:	b2f6      	uxtb	r6, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007cd2:	2e09      	cmp	r6, #9
 8007cd4:	d908      	bls.n	8007ce8 <f_printf+0x35c>
 8007cd6:	2b78      	cmp	r3, #120	; 0x78
 8007cd8:	bf14      	ite	ne
 8007cda:	f04f 0b07 	movne.w	fp, #7
 8007cde:	f04f 0b27 	moveq.w	fp, #39	; 0x27
 8007ce2:	eb0b 0706 	add.w	r7, fp, r6
 8007ce6:	b2fe      	uxtb	r6, r7
			s[i++] = d + '0';
 8007ce8:	3630      	adds	r6, #48	; 0x30
 8007cea:	f88d 6020 	strb.w	r6, [sp, #32]
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f000 8417 	beq.w	8008522 <f_printf+0xb96>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007cf4:	fbb0 f6f2 	udiv	r6, r0, r2
 8007cf8:	fb02 0e16 	mls	lr, r2, r6, r0
 8007cfc:	fa5f f08e 	uxtb.w	r0, lr
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007d00:	2809      	cmp	r0, #9
 8007d02:	d909      	bls.n	8007d18 <f_printf+0x38c>
 8007d04:	2b78      	cmp	r3, #120	; 0x78
 8007d06:	bf14      	ite	ne
 8007d08:	f04f 0807 	movne.w	r8, #7
 8007d0c:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8007d10:	eb08 0c00 	add.w	ip, r8, r0
 8007d14:	fa5f f08c 	uxtb.w	r0, ip
			s[i++] = d + '0';
 8007d18:	3030      	adds	r0, #48	; 0x30
 8007d1a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	f000 8409 	beq.w	8008536 <f_printf+0xbaa>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007d24:	fbb6 f0f2 	udiv	r0, r6, r2
 8007d28:	fb02 6a10 	mls	sl, r2, r0, r6
 8007d2c:	fa5f f68a 	uxtb.w	r6, sl
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007d30:	2e09      	cmp	r6, #9
 8007d32:	d905      	bls.n	8007d40 <f_printf+0x3b4>
 8007d34:	2b78      	cmp	r3, #120	; 0x78
 8007d36:	bf14      	ite	ne
 8007d38:	2707      	movne	r7, #7
 8007d3a:	2727      	moveq	r7, #39	; 0x27
 8007d3c:	19be      	adds	r6, r7, r6
 8007d3e:	b2f6      	uxtb	r6, r6
			s[i++] = d + '0';
 8007d40:	3630      	adds	r6, #48	; 0x30
 8007d42:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8007d46:	2800      	cmp	r0, #0
 8007d48:	f000 83f0 	beq.w	800852c <f_printf+0xba0>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 8007d4c:	fbb0 fbf2 	udiv	fp, r0, r2
 8007d50:	fb02 021b 	mls	r2, r2, fp, r0
 8007d54:	b2d2      	uxtb	r2, r2
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007d56:	2a09      	cmp	r2, #9
 8007d58:	d905      	bls.n	8007d66 <f_printf+0x3da>
 8007d5a:	2b78      	cmp	r3, #120	; 0x78
 8007d5c:	bf14      	ite	ne
 8007d5e:	2007      	movne	r0, #7
 8007d60:	2027      	moveq	r0, #39	; 0x27
 8007d62:	1883      	adds	r3, r0, r2
 8007d64:	b2da      	uxtb	r2, r3
			s[i++] = d + '0';
 8007d66:	3230      	adds	r2, #48	; 0x30
 8007d68:	2611      	movs	r6, #17
 8007d6a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8007d6e:	9601      	str	r6, [sp, #4]
 8007d70:	f04f 0b10 	mov.w	fp, #16
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
 8007d74:	f011 0f08 	tst.w	r1, #8
 8007d78:	d00b      	beq.n	8007d92 <f_printf+0x406>
 8007d7a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8007d7e:	eb0c 0e0b 	add.w	lr, ip, fp
 8007d82:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007d86:	222d      	movs	r2, #45	; 0x2d
 8007d88:	f10b 0701 	add.w	r7, fp, #1
 8007d8c:	f80e 2c1c 	strb.w	r2, [lr, #-28]
 8007d90:	9701      	str	r7, [sp, #4]
		j = i; d = (f & 1) ? '0' : ' ';
 8007d92:	f011 0f01 	tst.w	r1, #1
 8007d96:	bf0c      	ite	eq
 8007d98:	f04f 0a20 	moveq.w	sl, #32
 8007d9c:	f04f 0a30 	movne.w	sl, #48	; 0x30
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007da0:	f011 0102 	ands.w	r1, r1, #2
 8007da4:	f040 8377 	bne.w	8008496 <f_printf+0xb0a>
 8007da8:	45a3      	cmp	fp, r4
 8007daa:	f080 8380 	bcs.w	80084ae <f_printf+0xb22>
 8007dae:	9801      	ldr	r0, [sp, #4]
 8007db0:	ae0b      	add	r6, sp, #44	; 0x2c
 8007db2:	ebc0 0804 	rsb	r8, r0, r4
 8007db6:	af09      	add	r7, sp, #36	; 0x24
 8007db8:	f008 0303 	and.w	r3, r8, #3
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	463a      	mov	r2, r7
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	9303      	str	r3, [sp, #12]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007dc4:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007dc8:	f7fc ff06 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007dce:	9b01      	ldr	r3, [sp, #4]
 8007dd0:	9801      	ldr	r0, [sp, #4]
 8007dd2:	1c5a      	adds	r2, r3, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007dd4:	2901      	cmp	r1, #1
 8007dd6:	bf0c      	ite	eq
 8007dd8:	4688      	moveq	r8, r1
 8007dda:	f04f 38ff 	movne.w	r8, #4294967295
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007dde:	42a0      	cmp	r0, r4
 8007de0:	9202      	str	r2, [sp, #8]
 8007de2:	f080 8084 	bcs.w	8007eee <f_printf+0x562>
 8007de6:	9a03      	ldr	r2, [sp, #12]
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d036      	beq.n	8007e5a <f_printf+0x4ce>
 8007dec:	2a01      	cmp	r2, #1
 8007dee:	d021      	beq.n	8007e34 <f_printf+0x4a8>
 8007df0:	2a02      	cmp	r2, #2
 8007df2:	d00f      	beq.n	8007e14 <f_printf+0x488>
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007df4:	4631      	mov	r1, r6
 8007df6:	463a      	mov	r2, r7
 8007df8:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007dfa:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007dfe:	f7fc feeb 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e02:	9809      	ldr	r0, [sp, #36]	; 0x24
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e04:	9a02      	ldr	r2, [sp, #8]
 8007e06:	1c51      	adds	r1, r2, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e08:	2801      	cmp	r0, #1
 8007e0a:	bf18      	it	ne
 8007e0c:	f04f 30ff 	movne.w	r0, #4294967295
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e10:	9102      	str	r1, [sp, #8]
 8007e12:	4480      	add	r8, r0
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007e1a:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e1e:	f7fc fedb 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e24:	9902      	ldr	r1, [sp, #8]
 8007e26:	1c48      	adds	r0, r1, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	bf18      	it	ne
 8007e2c:	f04f 33ff 	movne.w	r3, #4294967295
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e30:	9002      	str	r0, [sp, #8]
 8007e32:	4498      	add	r8, r3
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e34:	4631      	mov	r1, r6
 8007e36:	463a      	mov	r2, r7
 8007e38:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007e3a:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e3e:	f7fc fecb 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e44:	9902      	ldr	r1, [sp, #8]
 8007e46:	1c48      	adds	r0, r1, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	bf18      	it	ne
 8007e4c:	f04f 33ff 	movne.w	r3, #4294967295
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e50:	1e42      	subs	r2, r0, #1
 8007e52:	42a2      	cmp	r2, r4
 8007e54:	9002      	str	r0, [sp, #8]
 8007e56:	4498      	add	r8, r3
 8007e58:	d249      	bcs.n	8007eee <f_printf+0x562>
 8007e5a:	f8cd b004 	str.w	fp, [sp, #4]
 8007e5e:	46a3      	mov	fp, r4
 8007e60:	9c02      	ldr	r4, [sp, #8]
 8007e62:	f8cd 900c 	str.w	r9, [sp, #12]
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e66:	4631      	mov	r1, r6
 8007e68:	463a      	mov	r2, r7
 8007e6a:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007e6c:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e70:	f7fc feb2 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e76:	4631      	mov	r1, r6
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e78:	2a01      	cmp	r2, #1
 8007e7a:	bf0c      	ite	eq
 8007e7c:	4691      	moveq	r9, r2
 8007e7e:	f04f 39ff 	movne.w	r9, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e82:	4628      	mov	r0, r5
 8007e84:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007e86:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e8a:	f7fc fea5 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e8e:	9809      	ldr	r0, [sp, #36]	; 0x24
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007e90:	44c8      	add	r8, r9
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007e92:	2801      	cmp	r0, #1
 8007e94:	bf0c      	ite	eq
 8007e96:	4684      	moveq	ip, r0
 8007e98:	f04f 3cff 	movne.w	ip, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	4628      	mov	r0, r5
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007ea2:	44e0      	add	r8, ip
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007ea4:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007ea8:	f7fc fe96 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007eac:	9909      	ldr	r1, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007eae:	463a      	mov	r2, r7
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007eb0:	2901      	cmp	r1, #1
 8007eb2:	bf0c      	ite	eq
 8007eb4:	460b      	moveq	r3, r1
 8007eb6:	f04f 33ff 	movne.w	r3, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007eba:	4628      	mov	r0, r5
 8007ebc:	4631      	mov	r1, r6
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007ebe:	eb08 0903 	add.w	r9, r8, r3
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007ec2:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007ec6:	f7fc fe87 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007ecc:	3404      	adds	r4, #4
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007ece:	2a01      	cmp	r2, #1
 8007ed0:	bf0c      	ite	eq
 8007ed2:	4694      	moveq	ip, r2
 8007ed4:	f04f 3cff 	movne.w	ip, #4294967295
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8007ed8:	1e61      	subs	r1, r4, #1
 8007eda:	4559      	cmp	r1, fp
 8007edc:	eb09 080c 	add.w	r8, r9, ip
 8007ee0:	d3c1      	bcc.n	8007e66 <f_printf+0x4da>
 8007ee2:	9402      	str	r4, [sp, #8]
 8007ee4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ee8:	465c      	mov	r4, fp
 8007eea:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007eee:	9902      	ldr	r1, [sp, #8]
 8007ef0:	1c4b      	adds	r3, r1, #1
 8007ef2:	9301      	str	r3, [sp, #4]
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007ef4:	f10d 0a14 	add.w	sl, sp, #20
 8007ef8:	44da      	add	sl, fp
 8007efa:	f81a ed01 	ldrb.w	lr, [sl, #-1]!
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007efe:	463a      	mov	r2, r7
 8007f00:	4628      	mov	r0, r5
 8007f02:	4631      	mov	r1, r6
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007f04:	f88d e02c 	strb.w	lr, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f08:	f7fc fe66 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007f0e:	9a00      	ldr	r2, [sp, #0]
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	bf18      	it	ne
 8007f14:	f04f 33ff 	movne.w	r3, #4294967295
 8007f18:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007f1c:	4592      	cmp	sl, r2
 8007f1e:	f00b 0b03 	and.w	fp, fp, #3
 8007f22:	4498      	add	r8, r3
 8007f24:	d07e      	beq.n	8008024 <f_printf+0x698>
 8007f26:	f1bb 0f00 	cmp.w	fp, #0
 8007f2a:	d035      	beq.n	8007f98 <f_printf+0x60c>
 8007f2c:	f1bb 0f01 	cmp.w	fp, #1
 8007f30:	d020      	beq.n	8007f74 <f_printf+0x5e8>
 8007f32:	f1bb 0f02 	cmp.w	fp, #2
 8007f36:	d00e      	beq.n	8007f56 <f_printf+0x5ca>
 8007f38:	f81a ed01 	ldrb.w	lr, [sl, #-1]!
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	4631      	mov	r1, r6
 8007f40:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007f42:	f88d e02c 	strb.w	lr, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f46:	f7fc fe47 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f4c:	2801      	cmp	r0, #1
 8007f4e:	bf18      	it	ne
 8007f50:	f04f 30ff 	movne.w	r0, #4294967295
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007f54:	4480      	add	r8, r0
 8007f56:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007f60:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f64:	f7fc fe38 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f6a:	2901      	cmp	r1, #1
 8007f6c:	bf18      	it	ne
 8007f6e:	f04f 31ff 	movne.w	r1, #4294967295
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007f72:	4488      	add	r8, r1
 8007f74:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f78:	463a      	mov	r2, r7
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	4631      	mov	r1, r6
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007f7e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007f82:	f7fc fe29 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007f88:	9a00      	ldr	r2, [sp, #0]
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	bf18      	it	ne
 8007f8e:	f04f 33ff 	movne.w	r3, #4294967295
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007f92:	4592      	cmp	sl, r2
 8007f94:	4498      	add	r8, r3
 8007f96:	d045      	beq.n	8008024 <f_printf+0x698>
 8007f98:	46a3      	mov	fp, r4
 8007f9a:	4654      	mov	r4, sl
 8007f9c:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	463a      	mov	r2, r7
 8007fa4:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007fa6:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007faa:	f7fc fe15 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007fae:	9909      	ldr	r1, [sp, #36]	; 0x24
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007fb0:	f814 3d01 	ldrb.w	r3, [r4, #-1]!
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007fb4:	2901      	cmp	r1, #1
 8007fb6:	bf0c      	ite	eq
 8007fb8:	468e      	moveq	lr, r1
 8007fba:	f04f 3eff 	movne.w	lr, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007fc4:	44f0      	add	r8, lr
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007fc6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007fca:	f7fc fe05 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007fce:	9809      	ldr	r0, [sp, #36]	; 0x24
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007fd0:	f814 cc01 	ldrb.w	ip, [r4, #-1]
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007fd4:	2801      	cmp	r0, #1
 8007fd6:	bf0c      	ite	eq
 8007fd8:	4604      	moveq	r4, r0
 8007fda:	f04f 34ff 	movne.w	r4, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007fde:	4631      	mov	r1, r6
 8007fe0:	463a      	mov	r2, r7
 8007fe2:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8007fe4:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007fe8:	f7fc fdf6 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007fee:	f81a cc04 	ldrb.w	ip, [sl, #-4]
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	bf18      	it	ne
 8007ff6:	f04f 33ff 	movne.w	r3, #4294967295
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8007ffa:	44a0      	add	r8, r4
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	4631      	mov	r1, r6
 8008000:	463a      	mov	r2, r7
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8008002:	4498      	add	r8, r3
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008004:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008008:	f7fc fde6 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 800800e:	9c00      	ldr	r4, [sp, #0]
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008010:	2b01      	cmp	r3, #1
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 8008012:	f1aa 0a04 	sub.w	sl, sl, #4
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008016:	bf18      	it	ne
 8008018:	f04f 33ff 	movne.w	r3, #4294967295
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
 800801c:	45a2      	cmp	sl, r4
 800801e:	4498      	add	r8, r3
 8008020:	d1bb      	bne.n	8007f9a <f_printf+0x60e>
 8008022:	465c      	mov	r4, fp
		while (j++ < w) res += (cc = f_putc(' ', fil));
 8008024:	9a02      	ldr	r2, [sp, #8]
 8008026:	42a2      	cmp	r2, r4
 8008028:	d27b      	bcs.n	8008122 <f_printf+0x796>
 800802a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800802e:	ebca 0b04 	rsb	fp, sl, r4
 8008032:	f01b 0b03 	ands.w	fp, fp, #3
 8008036:	d063      	beq.n	8008100 <f_printf+0x774>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008038:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800803a:	4628      	mov	r0, r5
 800803c:	4631      	mov	r1, r6
 800803e:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008040:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008044:	f7fc fdc8 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804a:	2b01      	cmp	r3, #1
 800804c:	bf18      	it	ne
 800804e:	f04f 33ff 	movne.w	r3, #4294967295
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 8008052:	4554      	cmp	r4, sl
 8008054:	4498      	add	r8, r3
 8008056:	d964      	bls.n	8008122 <f_printf+0x796>
 8008058:	f1bb 0f01 	cmp.w	fp, #1
 800805c:	f10a 0a01 	add.w	sl, sl, #1
 8008060:	d04e      	beq.n	8008100 <f_printf+0x774>
 8008062:	f1bb 0f02 	cmp.w	fp, #2
 8008066:	d00f      	beq.n	8008088 <f_printf+0x6fc>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008068:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008070:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008074:	f7fc fdb0 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008078:	9909      	ldr	r1, [sp, #36]	; 0x24
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 800807a:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800807e:	2901      	cmp	r1, #1
 8008080:	bf18      	it	ne
 8008082:	f04f 31ff 	movne.w	r1, #4294967295
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 8008086:	4488      	add	r8, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008088:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800808a:	463a      	mov	r2, r7
 800808c:	4628      	mov	r0, r5
 800808e:	4631      	mov	r1, r6
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008090:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008094:	f7fc fda0 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008098:	9a09      	ldr	r2, [sp, #36]	; 0x24
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 800809a:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800809e:	2a01      	cmp	r2, #1
 80080a0:	bf18      	it	ne
 80080a2:	f04f 32ff 	movne.w	r2, #4294967295
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 80080a6:	4490      	add	r8, r2
 80080a8:	e02a      	b.n	8008100 <f_printf+0x774>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80080aa:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080ac:	463a      	mov	r2, r7
 80080ae:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80080b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080b4:	f7fc fd90 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80080b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080ba:	4631      	mov	r1, r6
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80080bc:	2b01      	cmp	r3, #1
 80080be:	bf18      	it	ne
 80080c0:	f04f 33ff 	movne.w	r3, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080c4:	463a      	mov	r2, r7
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 80080c6:	4498      	add	r8, r3
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080c8:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80080ca:	2320      	movs	r3, #32
 80080cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080d0:	f7fc fd82 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80080d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080d6:	4628      	mov	r0, r5
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80080d8:	2b01      	cmp	r3, #1
 80080da:	bf18      	it	ne
 80080dc:	f04f 33ff 	movne.w	r3, #4294967295
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 80080e0:	4498      	add	r8, r3
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080e2:	4631      	mov	r1, r6
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80080e4:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080e6:	463a      	mov	r2, r7
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80080e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80080ec:	f7fc fd74 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80080f0:	9809      	ldr	r0, [sp, #36]	; 0x24
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 80080f2:	f10a 0a04 	add.w	sl, sl, #4
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80080f6:	2801      	cmp	r0, #1
 80080f8:	bf18      	it	ne
 80080fa:	f04f 30ff 	movne.w	r0, #4294967295
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 80080fe:	4480      	add	r8, r0
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008100:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008102:	4631      	mov	r1, r6
 8008104:	463a      	mov	r2, r7
 8008106:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008108:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800810c:	f7fc fd64 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008110:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008112:	4631      	mov	r1, r6
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008114:	2b01      	cmp	r3, #1
 8008116:	bf18      	it	ne
 8008118:	f04f 33ff 	movne.w	r3, #4294967295
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
 800811c:	4554      	cmp	r4, sl
 800811e:	4498      	add	r8, r3
 8008120:	d8c3      	bhi.n	80080aa <f_printf+0x71e>
		if (cc != EOF) cc = res;
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	f000 815a 	beq.w	80083de <f_printf+0xa52>
	int res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
 800812a:	f1b8 3fff 	cmp.w	r8, #4294967295
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
			if (cc != EOF) cc = res;
 800812e:	4643      	mov	r3, r8
	int res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
 8008130:	f000 8155 	beq.w	80083de <f_printf+0xa52>
 8008134:	4498      	add	r8, r3
 8008136:	e436      	b.n	80079a6 <f_printf+0x1a>
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	1d1e      	adds	r6, r3, #4
 800813c:	681f      	ldr	r7, [r3, #0]
 800813e:	960a      	str	r6, [sp, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8008140:	783e      	ldrb	r6, [r7, #0]
 8008142:	2e00      	cmp	r6, #0
 8008144:	f000 81fc 	beq.w	8008540 <f_printf+0xbb4>
 8008148:	463a      	mov	r2, r7
 800814a:	2300      	movs	r3, #0
 800814c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008150:	3301      	adds	r3, #1
 8008152:	2800      	cmp	r0, #0
 8008154:	d1fa      	bne.n	800814c <f_printf+0x7c0>
 8008156:	f103 0a01 	add.w	sl, r3, #1
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 800815a:	f011 0102 	ands.w	r1, r1, #2
 800815e:	f040 81f3 	bne.w	8008548 <f_printf+0xbbc>
 8008162:	429c      	cmp	r4, r3
 8008164:	f240 81f4 	bls.w	8008550 <f_printf+0xbc4>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008168:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800816a:	a90b      	add	r1, sp, #44	; 0x2c
 800816c:	aa09      	add	r2, sp, #36	; 0x24
 800816e:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008170:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008174:	f7fc fd30 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800817a:	ebca 0804 	rsb	r8, sl, r4
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 800817e:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008182:	2a01      	cmp	r2, #1
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008184:	f10a 31ff 	add.w	r1, sl, #4294967295
 8008188:	f008 0603 	and.w	r6, r8, #3
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800818c:	bf0c      	ite	eq
 800818e:	4690      	moveq	r8, r2
 8008190:	f04f 38ff 	movne.w	r8, #4294967295
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008194:	428c      	cmp	r4, r1
 8008196:	d978      	bls.n	800828a <f_printf+0x8fe>
 8008198:	2e00      	cmp	r6, #0
 800819a:	d037      	beq.n	800820c <f_printf+0x880>
 800819c:	2e01      	cmp	r6, #1
 800819e:	d021      	beq.n	80081e4 <f_printf+0x858>
 80081a0:	2e02      	cmp	r6, #2
 80081a2:	d00f      	beq.n	80081c4 <f_printf+0x838>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80081a4:	2620      	movs	r6, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081a6:	4628      	mov	r0, r5
 80081a8:	a90b      	add	r1, sp, #44	; 0x2c
 80081aa:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80081ac:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081b0:	f7fc fd12 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80081b4:	9809      	ldr	r0, [sp, #36]	; 0x24
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 80081b6:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80081ba:	2801      	cmp	r0, #1
 80081bc:	bf18      	it	ne
 80081be:	f04f 30ff 	movne.w	r0, #4294967295
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 80081c2:	4480      	add	r8, r0
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80081c4:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081c6:	a90b      	add	r1, sp, #44	; 0x2c
 80081c8:	4628      	mov	r0, r5
 80081ca:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80081cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081d0:	f7fc fd02 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80081d4:	9909      	ldr	r1, [sp, #36]	; 0x24
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 80081d6:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80081da:	2901      	cmp	r1, #1
 80081dc:	bf18      	it	ne
 80081de:	f04f 31ff 	movne.w	r1, #4294967295
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 80081e2:	4488      	add	r8, r1
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081e4:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80081e6:	2620      	movs	r6, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081e8:	4628      	mov	r0, r5
 80081ea:	a90b      	add	r1, sp, #44	; 0x2c
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80081ec:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80081f0:	f7fc fcf2 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80081f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 80081f6:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80081fa:	2a01      	cmp	r2, #1
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 80081fc:	f10a 3cff 	add.w	ip, sl, #4294967295
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008200:	bf18      	it	ne
 8008202:	f04f 32ff 	movne.w	r2, #4294967295
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008206:	4564      	cmp	r4, ip
 8008208:	4490      	add	r8, r2
 800820a:	d93e      	bls.n	800828a <f_printf+0x8fe>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800820c:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800820e:	a90b      	add	r1, sp, #44	; 0x2c
 8008210:	aa09      	add	r2, sp, #36	; 0x24
 8008212:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008214:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008218:	f7fc fcde 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800821c:	9e09      	ldr	r6, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800821e:	a90b      	add	r1, sp, #44	; 0x2c
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008220:	2e01      	cmp	r6, #1
 8008222:	bf18      	it	ne
 8008224:	f04f 36ff 	movne.w	r6, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008228:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800822a:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800822c:	4628      	mov	r0, r5
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 800822e:	44b0      	add	r8, r6
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008230:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008234:	f7fc fcd0 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008238:	9e09      	ldr	r6, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800823a:	a90b      	add	r1, sp, #44	; 0x2c
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800823c:	2e01      	cmp	r6, #1
 800823e:	bf18      	it	ne
 8008240:	f04f 36ff 	movne.w	r6, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008244:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008246:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008248:	4628      	mov	r0, r5
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 800824a:	44b0      	add	r8, r6
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800824c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008250:	f7fc fcc2 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008254:	9e09      	ldr	r6, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008256:	a90b      	add	r1, sp, #44	; 0x2c
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008258:	2e01      	cmp	r6, #1
 800825a:	bf18      	it	ne
 800825c:	f04f 36ff 	movne.w	r6, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008260:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008262:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008264:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008266:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800826a:	f7fc fcb5 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800826e:	9909      	ldr	r1, [sp, #36]	; 0x24
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008270:	f10a 0a04 	add.w	sl, sl, #4
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008274:	2901      	cmp	r1, #1
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008276:	f10a 3cff 	add.w	ip, sl, #4294967295
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800827a:	bf18      	it	ne
 800827c:	f04f 31ff 	movne.w	r1, #4294967295
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008280:	4446      	add	r6, r8
 8008282:	4564      	cmp	r4, ip
 8008284:	eb06 0801 	add.w	r8, r6, r1
 8008288:	d8c0      	bhi.n	800820c <f_printf+0x880>
 800828a:	783e      	ldrb	r6, [r7, #0]
)
{
	int n;


	for (n = 0; *str; str++, n++) {
 800828c:	4633      	mov	r3, r6
 800828e:	b18e      	cbz	r6, 80082b4 <f_printf+0x928>
 8008290:	2600      	movs	r6, #0
 8008292:	e002      	b.n	800829a <f_printf+0x90e>
 8008294:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8008298:	b163      	cbz	r3, 80082b4 <f_printf+0x928>
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800829a:	aa09      	add	r2, sp, #36	; 0x24
 800829c:	4628      	mov	r0, r5
 800829e:	a90b      	add	r1, sp, #44	; 0x2c
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80082a0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80082a4:	f7fc fc98 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80082a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
)
{
	int n;


	for (n = 0; *str; str++, n++) {
 80082aa:	3601      	adds	r6, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80082ac:	2a01      	cmp	r2, #1
 80082ae:	d0f1      	beq.n	8008294 <f_printf+0x908>
{
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
 80082b0:	f04f 36ff 	mov.w	r6, #4294967295
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80082b4:	45a2      	cmp	sl, r4
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
 80082b6:	44b0      	add	r8, r6
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80082b8:	f080 808d 	bcs.w	80083d6 <f_printf+0xa4a>
 80082bc:	ea6f 000a 	mvn.w	r0, sl
 80082c0:	eb00 0e04 	add.w	lr, r0, r4
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80082c4:	2620      	movs	r6, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80082c6:	4628      	mov	r0, r5
 80082c8:	a90b      	add	r1, sp, #44	; 0x2c
 80082ca:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80082cc:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
 80082d0:	f00e 0703 	and.w	r7, lr, #3
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80082d4:	f7fc fc80 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80082d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80082da:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80082de:	2e01      	cmp	r6, #1
 80082e0:	bf18      	it	ne
 80082e2:	f04f 36ff 	movne.w	r6, #4294967295
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80082e6:	45a2      	cmp	sl, r4
 80082e8:	44b0      	add	r8, r6
 80082ea:	d074      	beq.n	80083d6 <f_printf+0xa4a>
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	d035      	beq.n	800835c <f_printf+0x9d0>
 80082f0:	2f01      	cmp	r7, #1
 80082f2:	d021      	beq.n	8008338 <f_printf+0x9ac>
 80082f4:	2f02      	cmp	r7, #2
 80082f6:	d00f      	beq.n	8008318 <f_printf+0x98c>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80082f8:	2720      	movs	r7, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80082fa:	4628      	mov	r0, r5
 80082fc:	a90b      	add	r1, sp, #44	; 0x2c
 80082fe:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008300:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008304:	f7fc fc68 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008308:	9e09      	ldr	r6, [sp, #36]	; 0x24
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 800830a:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800830e:	2e01      	cmp	r6, #1
 8008310:	bf18      	it	ne
 8008312:	f04f 36ff 	movne.w	r6, #4294967295
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 8008316:	44b0      	add	r8, r6
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008318:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800831a:	2720      	movs	r7, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800831c:	4628      	mov	r0, r5
 800831e:	a90b      	add	r1, sp, #44	; 0x2c
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008320:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008324:	f7fc fc58 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008328:	9a09      	ldr	r2, [sp, #36]	; 0x24
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 800832a:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800832e:	2a01      	cmp	r2, #1
 8008330:	bf18      	it	ne
 8008332:	f04f 32ff 	movne.w	r2, #4294967295
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 8008336:	4490      	add	r8, r2
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008338:	2320      	movs	r3, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800833a:	4628      	mov	r0, r5
 800833c:	a90b      	add	r1, sp, #44	; 0x2c
 800833e:	aa09      	add	r2, sp, #36	; 0x24
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008340:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008344:	f7fc fc48 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008348:	9e09      	ldr	r6, [sp, #36]	; 0x24
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 800834a:	f10a 0a01 	add.w	sl, sl, #1
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800834e:	2e01      	cmp	r6, #1
 8008350:	bf18      	it	ne
 8008352:	f04f 36ff 	movne.w	r6, #4294967295
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 8008356:	45a2      	cmp	sl, r4
 8008358:	44b0      	add	r8, r6
 800835a:	d03c      	beq.n	80083d6 <f_printf+0xa4a>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800835c:	2720      	movs	r7, #32
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800835e:	a90b      	add	r1, sp, #44	; 0x2c
 8008360:	aa09      	add	r2, sp, #36	; 0x24
 8008362:	4628      	mov	r0, r5
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 8008364:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008368:	f7fc fc36 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800836c:	9e09      	ldr	r6, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800836e:	a90b      	add	r1, sp, #44	; 0x2c
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008370:	2e01      	cmp	r6, #1
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008372:	aa09      	add	r2, sp, #36	; 0x24
 8008374:	4628      	mov	r0, r5
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008376:	bf18      	it	ne
 8008378:	f04f 36ff 	movne.w	r6, #4294967295
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800837c:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008380:	f7fc fc2a 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008384:	9b09      	ldr	r3, [sp, #36]	; 0x24
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 8008386:	44b0      	add	r8, r6
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 8008388:	2b01      	cmp	r3, #1
 800838a:	bf18      	it	ne
 800838c:	f04f 33ff 	movne.w	r3, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008390:	a90b      	add	r1, sp, #44	; 0x2c
 8008392:	aa09      	add	r2, sp, #36	; 0x24
 8008394:	4628      	mov	r0, r5
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 8008396:	eb08 0603 	add.w	r6, r8, r3
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800839a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 800839e:	f7fc fc1b 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80083a2:	9909      	ldr	r1, [sp, #36]	; 0x24
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80083a4:	4628      	mov	r0, r5
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80083a6:	2901      	cmp	r1, #1
 80083a8:	bf0c      	ite	eq
 80083aa:	468c      	moveq	ip, r1
 80083ac:	f04f 3cff 	movne.w	ip, #4294967295
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80083b0:	aa09      	add	r2, sp, #36	; 0x24
 80083b2:	a90b      	add	r1, sp, #44	; 0x2c
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80083b4:	eb06 080c 	add.w	r8, r6, ip
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 80083b8:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 80083bc:	f7fc fc0c 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80083c2:	f10a 0a04 	add.w	sl, sl, #4
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	bf18      	it	ne
 80083ca:	f04f 33ff 	movne.w	r3, #4294967295
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
 80083ce:	45a2      	cmp	sl, r4
 80083d0:	4498      	add	r8, r3
 80083d2:	d1c3      	bne.n	800835c <f_printf+0x9d0>
 80083d4:	461e      	mov	r6, r3
			if (cc != EOF) cc = res;
 80083d6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80083da:	f47f aea6 	bne.w	800812a <f_printf+0x79e>
		do res += (cc = f_putc(s[--i], fil)); while(i);
		while (j++ < w) res += (cc = f_putc(' ', fil));
		if (cc != EOF) cc = res;
	}

	va_end(arp);
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	f7ff baf9 	b.w	80079d8 <f_printf+0x4c>
			f |= 4; c = *str++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
 80083e6:	2208      	movs	r2, #8
		default:					/* Unknown type (passthrough) */
			cc = f_putc(c, fil); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
 80083e8:	f011 0f04 	tst.w	r1, #4
 80083ec:	f47f ab53 	bne.w	8007a96 <f_printf+0x10a>
 80083f0:	2844      	cmp	r0, #68	; 0x44
 80083f2:	d03f      	beq.n	8008474 <f_printf+0xae8>
 80083f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80083f6:	1d06      	adds	r6, r0, #4
 80083f8:	960a      	str	r6, [sp, #40]	; 0x28
 80083fa:	6807      	ldr	r7, [r0, #0]
 80083fc:	f7ff bb54 	b.w	8007aa8 <f_printf+0x11c>
			f |= 4; c = *str++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
 8008400:	220a      	movs	r2, #10
 8008402:	f7ff bb44 	b.w	8007a8e <f_printf+0x102>
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
			if (cc != EOF) cc = res;
			continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
 8008406:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008408:	a90c      	add	r1, sp, #48	; 0x30
 800840a:	6802      	ldr	r2, [r0, #0]
 800840c:	1d07      	adds	r7, r0, #4
 800840e:	f801 2d04 	strb.w	r2, [r1, #-4]!
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008412:	4628      	mov	r0, r5
 8008414:	aa09      	add	r2, sp, #36	; 0x24
			res += (cc = f_puts(p, fil));
			while (j++ < w) res += (cc = f_putc(' ', fil));
			if (cc != EOF) cc = res;
			continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
 8008416:	970a      	str	r7, [sp, #40]	; 0x28
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008418:	f7fc fbde 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800841c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841e:	2b01      	cmp	r3, #1
 8008420:	d1dd      	bne.n	80083de <f_printf+0xa52>
	int res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
 8008422:	4498      	add	r8, r3
 8008424:	f7ff babf 	b.w	80079a6 <f_printf+0x1a>
			f |= 4; c = *str++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
 8008428:	2202      	movs	r2, #2
 800842a:	f7ff bb30 	b.w	8007a8e <f_printf+0x102>
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
 800842e:	a90c      	add	r1, sp, #48	; 0x30
 8008430:	f801 3d04 	strb.w	r3, [r1, #-4]!
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 8008434:	4628      	mov	r0, r5
 8008436:	aa09      	add	r2, sp, #36	; 0x24
 8008438:	f7fc fbce 	bl	8004bd8 <f_write.clone.2>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
 800843c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843e:	2b01      	cmp	r3, #1
 8008440:	d1cd      	bne.n	80083de <f_printf+0xa52>
	int res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
 8008442:	4498      	add	r8, r3
 8008444:	f7ff baaf 	b.w	80079a6 <f_printf+0x1a>
			continue;
		}
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
 8008448:	f819 3b01 	ldrb.w	r3, [r9], #1
 800844c:	2101      	movs	r1, #1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800844e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8008452:	fa5f f48c 	uxtb.w	r4, ip
			continue;
		}
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
 8008456:	2705      	movs	r7, #5
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8008458:	2c09      	cmp	r4, #9
			continue;
		}
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
 800845a:	460e      	mov	r6, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800845c:	f67f aad3 	bls.w	8007a06 <f_printf+0x7a>
 8008460:	2400      	movs	r4, #0
 8008462:	f7ff badf 	b.w	8007a24 <f_printf+0x98>
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
 8008466:	2102      	movs	r1, #2
 8008468:	f819 3b01 	ldrb.w	r3, [r9], #1
 800846c:	2706      	movs	r7, #6
 800846e:	460e      	mov	r6, r1
 8008470:	f7ff bac2 	b.w	80079f8 <f_printf+0x6c>
		default:					/* Unknown type (passthrough) */
			cc = f_putc(c, fil); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
 8008474:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008476:	1d07      	adds	r7, r0, #4
 8008478:	970a      	str	r7, [sp, #40]	; 0x28
 800847a:	6807      	ldr	r7, [r0, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800847c:	2f00      	cmp	r7, #0
 800847e:	f6bf ab13 	bge.w	8007aa8 <f_printf+0x11c>
			v = 0 - v;
 8008482:	427f      	negs	r7, r7
 8008484:	f046 0108 	orr.w	r1, r6, #8
 8008488:	f7ff bb0e 	b.w	8007aa8 <f_printf+0x11c>
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
 800848c:	2702      	movs	r7, #2
 800848e:	9701      	str	r7, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8008490:	f04f 0b01 	mov.w	fp, #1
 8008494:	e46e      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 8008496:	f8cd b008 	str.w	fp, [sp, #8]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	ae0b      	add	r6, sp, #44	; 0x2c
 80084a0:	af09      	add	r7, sp, #36	; 0x24
 80084a2:	e527      	b.n	8007ef4 <f_printf+0x568>
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084a4:	2304      	movs	r3, #4
 80084a6:	9301      	str	r3, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084a8:	f04f 0b03 	mov.w	fp, #3
 80084ac:	e462      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 80084ae:	9b01      	ldr	r3, [sp, #4]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
 80084b0:	4688      	mov	r8, r1
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
 80084b2:	1c59      	adds	r1, r3, #1
 80084b4:	9302      	str	r3, [sp, #8]
 80084b6:	9101      	str	r1, [sp, #4]
 80084b8:	ae0b      	add	r6, sp, #44	; 0x2c
 80084ba:	af09      	add	r7, sp, #36	; 0x24
 80084bc:	e51a      	b.n	8007ef4 <f_printf+0x568>
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084be:	2203      	movs	r2, #3
 80084c0:	9201      	str	r2, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084c2:	f04f 0b02 	mov.w	fp, #2
 80084c6:	e455      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084c8:	2005      	movs	r0, #5
 80084ca:	9001      	str	r0, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084cc:	f04f 0b04 	mov.w	fp, #4
 80084d0:	e450      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084d2:	2606      	movs	r6, #6
 80084d4:	9601      	str	r6, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084d6:	f04f 0b05 	mov.w	fp, #5
 80084da:	e44b      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084dc:	2707      	movs	r7, #7
 80084de:	9701      	str	r7, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084e0:	f04f 0b06 	mov.w	fp, #6
 80084e4:	e446      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084e6:	2208      	movs	r2, #8
 80084e8:	9201      	str	r2, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084ea:	f04f 0b07 	mov.w	fp, #7
 80084ee:	e441      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084f0:	200a      	movs	r0, #10
 80084f2:	9001      	str	r0, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084f4:	f04f 0b09 	mov.w	fp, #9
 80084f8:	e43c      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 80084fa:	2309      	movs	r3, #9
 80084fc:	9301      	str	r3, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80084fe:	f04f 0b08 	mov.w	fp, #8
 8008502:	e437      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8008504:	260b      	movs	r6, #11
 8008506:	9601      	str	r6, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8008508:	f04f 0b0a 	mov.w	fp, #10
 800850c:	e432      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 800850e:	220d      	movs	r2, #13
 8008510:	9201      	str	r2, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8008512:	f04f 0b0c 	mov.w	fp, #12
 8008516:	e42d      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8008518:	270c      	movs	r7, #12
 800851a:	9701      	str	r7, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 800851c:	f04f 0b0b 	mov.w	fp, #11
 8008520:	e428      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8008522:	230e      	movs	r3, #14
 8008524:	9301      	str	r3, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8008526:	f04f 0b0d 	mov.w	fp, #13
 800852a:	e423      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 800852c:	2610      	movs	r6, #16
 800852e:	9601      	str	r6, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8008530:	f04f 0b0f 	mov.w	fp, #15
 8008534:	e41e      	b.n	8007d74 <f_printf+0x3e8>
		} while (v && i < sizeof(s) / sizeof(s[0]));
 8008536:	200f      	movs	r0, #15
 8008538:	9001      	str	r0, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 800853a:	f04f 0b0e 	mov.w	fp, #14
 800853e:	e419      	b.n	8007d74 <f_printf+0x3e8>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
 8008540:	f04f 0a01 	mov.w	sl, #1
 8008544:	4633      	mov	r3, r6
 8008546:	e608      	b.n	800815a <f_printf+0x7ce>
			res = 0;
			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
 8008548:	469a      	mov	sl, r3
 800854a:	f04f 0800 	mov.w	r8, #0
 800854e:	e69d      	b.n	800828c <f_printf+0x900>
 8008550:	4688      	mov	r8, r1
 8008552:	e69b      	b.n	800828c <f_printf+0x900>

08008554 <rtc_gettime>:
* Input          : None
* Output         : time-struct gets modified
* Return         : always true/not used
*******************************************************************************/
bool rtc_gettime (RTC_t *rtc)
{
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	4605      	mov	r5, r0
	uint32_t t;

	while ( ( t = RTC_GetCounter() ) != RTC_GetCounter() ) { ; }
 800855a:	f005 febd 	bl	800e2d8 <RTC_GetCounter>
 800855e:	4604      	mov	r4, r0
 8008560:	f005 feba 	bl	800e2d8 <RTC_GetCounter>
 8008564:	4284      	cmp	r4, r0
 8008566:	d1f8      	bne.n	800855a <rtc_gettime+0x6>
	uint8_t year;
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
 8008568:	4f56      	ldr	r7, [pc, #344]	; (80086c4 <rtc_gettime+0x170>)
	t->min = sec % 60;
	sec /= 60;
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 800856a:	4e57      	ldr	r6, [pc, #348]	; (80086c8 <rtc_gettime+0x174>)
	uint8_t year;
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
 800856c:	fba7 0204 	umull	r0, r2, r7, r4
 8008570:	0952      	lsrs	r2, r2, #5
	sec /= 60;
	t->min = sec % 60;
 8008572:	fba7 3102 	umull	r3, r1, r7, r2
	sec /= 60;
	t->hour = sec % 24;
 8008576:	4855      	ldr	r0, [pc, #340]	; (80086cc <rtc_gettime+0x178>)
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
	sec /= 60;
	t->min = sec % 60;
 8008578:	0949      	lsrs	r1, r1, #5
	sec /= 60;
	t->hour = sec % 24;
 800857a:	fba0 c301 	umull	ip, r3, r0, r1
 800857e:	091f      	lsrs	r7, r3, #4
	day = (uint16_t)(sec / 24);
 8008580:	b2bb      	uxth	r3, r7

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 8008582:	1d98      	adds	r0, r3, #6
 8008584:	fb86 c800 	smull	ip, r8, r6, r0
 8008588:	eb08 0600 	add.w	r6, r8, r0
 800858c:	10b6      	asrs	r6, r6, #2

	t->sec = sec % 60;
	sec /= 60;
	t->min = sec % 60;
	sec /= 60;
	t->hour = sec % 24;
 800858e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 8008592:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
	uint8_t year;
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
 8008596:	ebc2 1802 	rsb	r8, r2, r2, lsl #4
	sec /= 60;
	t->min = sec % 60;
 800859a:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
	sec /= 60;
	t->hour = sec % 24;
 800859e:	eba1 07c7 	sub.w	r7, r1, r7, lsl #3
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 80085a2:	ebce 0600 	rsb	r6, lr, r0
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
	sec /= 60;
	t->min = sec % 60;
 80085a6:	eba2 028c 	sub.w	r2, r2, ip, lsl #2
	uint8_t year;
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
 80085aa:	eba4 0488 	sub.w	r4, r4, r8, lsl #2
	sec /= 60;
	t->min = sec % 60;
	sec /= 60;
	t->hour = sec % 24;
 80085ae:	b2ff      	uxtb	r7, r7
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 80085b0:	b2f6      	uxtb	r6, r6
	uint8_t year;
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
 80085b2:	71ec      	strb	r4, [r5, #7]
	sec /= 60;
	t->min = sec % 60;
 80085b4:	71aa      	strb	r2, [r5, #6]
	sec /= 60;
	t->hour = sec % 24;
 80085b6:	716f      	strb	r7, [r5, #5]
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 80085b8:	712e      	strb	r6, [r5, #4]

	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1
 80085ba:	2401      	movs	r4, #1
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday

	year = FIRSTYEAR % 100;				// 0..99
 80085bc:	2200      	movs	r2, #0
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
 80085be:	f240 1c6d 	movw	ip, #365	; 0x16d
 80085c2:	e017      	b.n	80085f4 <rtc_gettime+0xa0>
		if( (year & 3) == 0 ) {
 80085c4:	2a64      	cmp	r2, #100	; 0x64
 80085c6:	d003      	beq.n	80085d0 <rtc_gettime+0x7c>
 80085c8:	2ac8      	cmp	r2, #200	; 0xc8
 80085ca:	d001      	beq.n	80085d0 <rtc_gettime+0x7c>
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	d14e      	bne.n	800866e <rtc_gettime+0x11a>
			dayofyear = 366;					// leap year
			if( year == 0 || year == 100 || year == 200 ) {	// 100 year exception
				if( --leap400 ) {					// 400 year exception
 80085d0:	3c01      	subs	r4, #1
 80085d2:	b2e4      	uxtb	r4, r4
 80085d4:	2c00      	cmp	r4, #0
 80085d6:	bf0c      	ite	eq
 80085d8:	4620      	moveq	r0, r4
 80085da:	2001      	movne	r0, #1
 80085dc:	bf14      	ite	ne
 80085de:	4661      	movne	r1, ip
 80085e0:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
					dayofyear = 365;
				}
			}
		}
		if( day < dayofyear ) {
 80085e4:	428b      	cmp	r3, r1
 80085e6:	d30d      	bcc.n	8008604 <rtc_gettime+0xb0>
			break;
		}
		day -= dayofyear;
 80085e8:	ebc1 0e03 	rsb	lr, r1, r3
		year++;					// 00..136 / 99..235
 80085ec:	1c50      	adds	r0, r2, #1
			}
		}
		if( day < dayofyear ) {
			break;
		}
		day -= dayofyear;
 80085ee:	fa1f f38e 	uxth.w	r3, lr
		year++;					// 00..136 / 99..235
 80085f2:	b2c2      	uxtb	r2, r0
	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
		if( (year & 3) == 0 ) {
 80085f4:	f012 0003 	ands.w	r0, r2, #3
 80085f8:	d0e4      	beq.n	80085c4 <rtc_gettime+0x70>

	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
 80085fa:	f240 116d 	movw	r1, #365	; 0x16d
		if( (year & 3) == 0 ) {
 80085fe:	2001      	movs	r0, #1
				if( --leap400 ) {					// 400 year exception
					dayofyear = 365;
				}
			}
		}
		if( day < dayofyear ) {
 8008600:	428b      	cmp	r3, r1
 8008602:	d2f1      	bcs.n	80085e8 <rtc_gettime+0x94>
			break;
		}
		day -= dayofyear;
		year++;					// 00..136 / 99..235
	}
	t->year = year + FIRSTYEAR / 100 * 100;	// + century
 8008604:	f502 6cfa 	add.w	ip, r2, #2000	; 0x7d0
 8008608:	f8a5 c000 	strh.w	ip, [r5]

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
 800860c:	b108      	cbz	r0, 8008612 <rtc_gettime+0xbe>
 800860e:	2b3a      	cmp	r3, #58	; 0x3a
 8008610:	d84d      	bhi.n	80086ae <rtc_gettime+0x15a>
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 8008612:	2b1e      	cmp	r3, #30
 8008614:	d92e      	bls.n	8008674 <rtc_gettime+0x120>
 8008616:	4c2e      	ldr	r4, [pc, #184]	; (80086d0 <rtc_gettime+0x17c>)
		day -= dayofyear;
		year++;					// 00..136 / 99..235
	}
	t->year = year + FIRSTYEAR / 100 * 100;	// + century

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
 8008618:	211f      	movs	r1, #31
 800861a:	2201      	movs	r2, #1
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 800861c:	3201      	adds	r2, #1
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	18a0      	adds	r0, r4, r2
		day -= DaysInMonth[month-1];
 8008622:	ebc1 0e03 	rsb	lr, r1, r3

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 8008626:	f810 1c01 	ldrb.w	r1, [r0, #-1]
		day -= DaysInMonth[month-1];
 800862a:	fa1f f38e 	uxth.w	r3, lr

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 800862e:	428b      	cmp	r3, r1
 8008630:	d2f4      	bcs.n	800861c <rtc_gettime+0xc8>
{
	uint8_t wday, month;		// locals for faster access

	month = t->month;

	if( month < 3 || month > 10 ) {		// month 1, 2, 11, 12
 8008632:	1ed0      	subs	r0, r2, #3
	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
		day -= DaysInMonth[month-1];
	}

	t->month = month;				// 1..12
	t->mday = day + 1;				// 1..31
 8008634:	3301      	adds	r3, #1
{
	uint8_t wday, month;		// locals for faster access

	month = t->month;

	if( month < 3 || month > 10 ) {		// month 1, 2, 11, 12
 8008636:	fa5f fc80 	uxtb.w	ip, r0
	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
		day -= DaysInMonth[month-1];
	}

	t->month = month;				// 1..12
	t->mday = day + 1;				// 1..31
 800863a:	b2db      	uxtb	r3, r3
{
	uint8_t wday, month;		// locals for faster access

	month = t->month;

	if( month < 3 || month > 10 ) {		// month 1, 2, 11, 12
 800863c:	f1bc 0f07 	cmp.w	ip, #7

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
		day -= DaysInMonth[month-1];
	}

	t->month = month;				// 1..12
 8008640:	70aa      	strb	r2, [r5, #2]
	t->mday = day + 1;				// 1..31
 8008642:	70eb      	strb	r3, [r5, #3]
{
	uint8_t wday, month;		// locals for faster access

	month = t->month;

	if( month < 3 || month > 10 ) {		// month 1, 2, 11, 12
 8008644:	d81a      	bhi.n	800867c <rtc_gettime+0x128>
		return false;					// -> Winter
	}

	wday  = t->wday;

	if( t->mday - wday >= 25 && (wday || t->hour >= 2) ) { // after last Sunday 2:00
 8008646:	ebc6 0e03 	rsb	lr, r6, r3
 800864a:	f1be 0f18 	cmp.w	lr, #24
 800864e:	dc1a      	bgt.n	8008686 <rtc_gettime+0x132>
		if( month == 10 ) {				// October -> Winter
			return false;
		}
	} else {							// before last Sunday 2:00
		if( month == 3 ) {				// March -> Winter
 8008650:	2a03      	cmp	r2, #3
 8008652:	d013      	beq.n	800867c <rtc_gettime+0x128>
	wday  = t->wday;
	month = t->month;

	if ( isDST(t) ) {
		t->dst = 1;
		hour++;								// add one hour
 8008654:	3701      	adds	r7, #1
 8008656:	b2ff      	uxtb	r7, r7
	day   = t->mday;
	wday  = t->wday;
	month = t->month;

	if ( isDST(t) ) {
		t->dst = 1;
 8008658:	2001      	movs	r0, #1
		hour++;								// add one hour
		if( hour == 24 ){					// next day
 800865a:	2f18      	cmp	r7, #24
	day   = t->mday;
	wday  = t->wday;
	month = t->month;

	if ( isDST(t) ) {
		t->dst = 1;
 800865c:	7228      	strb	r0, [r5, #8]
		hour++;								// add one hour
		if( hour == 24 ){					// next day
 800865e:	d01b      	beq.n	8008698 <rtc_gettime+0x144>
				day = 0;
				month++;
			}
			day++;
		}
		t->month = month;
 8008660:	70aa      	strb	r2, [r5, #2]
		t->hour  = hour;
 8008662:	716f      	strb	r7, [r5, #5]
		t->mday  = day;
 8008664:	70eb      	strb	r3, [r5, #3]
		t->wday  = wday;
 8008666:	712e      	strb	r6, [r5, #4]
	while ( ( t = RTC_GetCounter() ) != RTC_GetCounter() ) { ; }
	counter_to_struct( t, rtc ); // get non DST time
	adjustDST( rtc );

	return true;
}
 8008668:	2001      	movs	r0, #1
 800866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
		if( (year & 3) == 0 ) {
			dayofyear = 366;					// leap year
 800866e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8008672:	e7b7      	b.n	80085e4 <rtc_gettime+0x90>
	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
		day -= DaysInMonth[month-1];
	}

	t->month = month;				// 1..12
	t->mday = day + 1;				// 1..31
 8008674:	1c58      	adds	r0, r3, #1

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
		day -= DaysInMonth[month-1];
	}

	t->month = month;				// 1..12
 8008676:	2301      	movs	r3, #1
 8008678:	70ab      	strb	r3, [r5, #2]
	t->mday = day + 1;				// 1..31
 800867a:	70e8      	strb	r0, [r5, #3]
		t->hour  = hour;
		t->mday  = day;
		t->wday  = wday;
		return true;
	} else {
		t->dst = 0;
 800867c:	2100      	movs	r1, #0
 800867e:	7229      	strb	r1, [r5, #8]
	while ( ( t = RTC_GetCounter() ) != RTC_GetCounter() ) { ; }
	counter_to_struct( t, rtc ); // get non DST time
	adjustDST( rtc );

	return true;
}
 8008680:	2001      	movs	r0, #1
 8008682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;					// -> Winter
	}

	wday  = t->wday;

	if( t->mday - wday >= 25 && (wday || t->hour >= 2) ) { // after last Sunday 2:00
 8008686:	b1ae      	cbz	r6, 80086b4 <rtc_gettime+0x160>
		if( month == 10 ) {				// October -> Winter
 8008688:	2a0a      	cmp	r2, #10
 800868a:	d0f7      	beq.n	800867c <rtc_gettime+0x128>
	wday  = t->wday;
	month = t->month;

	if ( isDST(t) ) {
		t->dst = 1;
		hour++;								// add one hour
 800868c:	3701      	adds	r7, #1
 800868e:	b2ff      	uxtb	r7, r7
	day   = t->mday;
	wday  = t->wday;
	month = t->month;

	if ( isDST(t) ) {
		t->dst = 1;
 8008690:	2001      	movs	r0, #1
		hour++;								// add one hour
		if( hour == 24 ){					// next day
 8008692:	2f18      	cmp	r7, #24
	day   = t->mday;
	wday  = t->wday;
	month = t->month;

	if ( isDST(t) ) {
		t->dst = 1;
 8008694:	7228      	strb	r0, [r5, #8]
		hour++;								// add one hour
		if( hour == 24 ){					// next day
 8008696:	d1e3      	bne.n	8008660 <rtc_gettime+0x10c>
			hour = 0;
			wday++;							// next weekday
 8008698:	3601      	adds	r6, #1
 800869a:	b2f6      	uxtb	r6, r6
			if( wday == 7 ) {
				wday = 0;
 800869c:	2e07      	cmp	r6, #7
 800869e:	bf08      	it	eq
 80086a0:	2600      	moveq	r6, #0
			}
			if( day == DaysInMonth[month-1] ) {		// next month
 80086a2:	428b      	cmp	r3, r1
 80086a4:	d009      	beq.n	80086ba <rtc_gettime+0x166>
 80086a6:	1c5f      	adds	r7, r3, #1
 80086a8:	b2fb      	uxtb	r3, r7

	if ( isDST(t) ) {
		t->dst = 1;
		hour++;								// add one hour
		if( hour == 24 ){					// next day
			hour = 0;
 80086aa:	2700      	movs	r7, #0
 80086ac:	e7d8      	b.n	8008660 <rtc_gettime+0x10c>
		year++;					// 00..136 / 99..235
	}
	t->year = year + FIRSTYEAR / 100 * 100;	// + century

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
		day++;					// skip 29.2.
 80086ae:	3301      	adds	r3, #1
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	e7b0      	b.n	8008616 <rtc_gettime+0xc2>
		return false;					// -> Winter
	}

	wday  = t->wday;

	if( t->mday - wday >= 25 && (wday || t->hour >= 2) ) { // after last Sunday 2:00
 80086b4:	2f01      	cmp	r7, #1
 80086b6:	d8e7      	bhi.n	8008688 <rtc_gettime+0x134>
 80086b8:	e7ca      	b.n	8008650 <rtc_gettime+0xfc>
			if( wday == 7 ) {
				wday = 0;
			}
			if( day == DaysInMonth[month-1] ) {		// next month
				day = 0;
				month++;
 80086ba:	3201      	adds	r2, #1
 80086bc:	b2d2      	uxtb	r2, r2
 80086be:	4603      	mov	r3, r0

	if ( isDST(t) ) {
		t->dst = 1;
		hour++;								// add one hour
		if( hour == 24 ){					// next day
			hour = 0;
 80086c0:	2700      	movs	r7, #0
 80086c2:	e7cd      	b.n	8008660 <rtc_gettime+0x10c>
 80086c4:	88888889 	.word	0x88888889
 80086c8:	92492493 	.word	0x92492493
 80086cc:	aaaaaaab 	.word	0xaaaaaaab
 80086d0:	0801b310 	.word	0x0801b310

080086d4 <my_RTC_SetCounter>:
* Input          : new counter-value
* Output         : None
* Return         : None
*******************************************************************************/
void my_RTC_SetCounter(uint32_t cnt)
{
 80086d4:	b510      	push	{r4, lr}
 80086d6:	4604      	mov	r4, r0
	/* Allow access to BKP Domain */
	PWR_BackupAccessCmd(ENABLE);
 80086d8:	2001      	movs	r0, #1
 80086da:	f005 fbd4 	bl	800de86 <PWR_BackupAccessCmd>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 80086de:	f005 fe3d 	bl	800e35c <RTC_WaitForLastTask>
	/* Change the current time */
	RTC_SetCounter(cnt);
 80086e2:	4620      	mov	r0, r4
 80086e4:	f005 fe02 	bl	800e2ec <RTC_SetCounter>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 80086e8:	f005 fe38 	bl	800e35c <RTC_WaitForLastTask>
	PWR_BackupAccessCmd(DISABLE);
 80086ec:	2000      	movs	r0, #0
}
 80086ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RTC_WaitForLastTask();
	/* Change the current time */
	RTC_SetCounter(cnt);
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
	PWR_BackupAccessCmd(DISABLE);
 80086f2:	f005 bbc8 	b.w	800de86 <PWR_BackupAccessCmd>
 80086f6:	bf00      	nop

080086f8 <rtc_settime>:
* Input          : None
* Output         : None
* Return         : not used
*******************************************************************************/
bool rtc_settime (const RTC_t *rtc)
{
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	uint8_t i;
	uint32_t result = 0;
	uint16_t idx, year;

	year = t->year;
 80086fc:	8805      	ldrh	r5, [r0, #0]

	/* Calculate days of years before */
	result = (uint32_t)year * 365;
 80086fe:	f240 136d 	movw	r3, #365	; 0x16d
 8008702:	fb03 f305 	mul.w	r3, r3, r5
	if (t->year >= 1) {
 8008706:	b16d      	cbz	r5, 8008724 <rtc_settime+0x2c>
		result += (year + 3) / 4;
		result -= (year - 1) / 100;
 8008708:	4f81      	ldr	r7, [pc, #516]	; (8008910 <rtc_settime+0x218>)
 800870a:	1e6a      	subs	r2, r5, #1
 800870c:	fb87 4102 	smull	r4, r1, r7, r2
 8008710:	17d7      	asrs	r7, r2, #31
	year = t->year;

	/* Calculate days of years before */
	result = (uint32_t)year * 365;
	if (t->year >= 1) {
		result += (year + 3) / 4;
 8008712:	1cec      	adds	r4, r5, #3
		result -= (year - 1) / 100;
 8008714:	eba7 1c61 	sub.w	ip, r7, r1, asr #5
	year = t->year;

	/* Calculate days of years before */
	result = (uint32_t)year * 365;
	if (t->year >= 1) {
		result += (year + 3) / 4;
 8008718:	eb0c 0694 	add.w	r6, ip, r4, lsr #2
		result -= (year - 1) / 100;
 800871c:	18f4      	adds	r4, r6, r3
		result += (year - 1) / 400;
 800871e:	ebc7 12e1 	rsb	r2, r7, r1, asr #7
 8008722:	18a3      	adds	r3, r4, r2

	/* Start with 2000 a.d. */
	result -= 730485UL;

	/* Make month an array index */
	idx = t->month - 1;
 8008724:	f890 e002 	ldrb.w	lr, [r0, #2]
		result -= (year - 1) / 100;
		result += (year - 1) / 400;
	}

	/* Start with 2000 a.d. */
	result -= 730485UL;
 8008728:	497a      	ldr	r1, [pc, #488]	; (8008914 <rtc_settime+0x21c>)

	/* Make month an array index */
	idx = t->month - 1;
 800872a:	f10e 36ff 	add.w	r6, lr, #4294967295
 800872e:	b2b6      	uxth	r6, r6
		result -= (year - 1) / 100;
		result += (year - 1) / 400;
	}

	/* Start with 2000 a.d. */
	result -= 730485UL;
 8008730:	185a      	adds	r2, r3, r1

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008732:	2e00      	cmp	r6, #0
 8008734:	d034      	beq.n	80087a0 <rtc_settime+0xa8>
 8008736:	4978      	ldr	r1, [pc, #480]	; (8008918 <rtc_settime+0x220>)
 8008738:	1e74      	subs	r4, r6, #1
		result += DaysInMonth[i];
 800873a:	780b      	ldrb	r3, [r1, #0]
 800873c:	f004 0403 	and.w	r4, r4, #3
 8008740:	18d2      	adds	r2, r2, r3

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008742:	2301      	movs	r3, #1
 8008744:	429e      	cmp	r6, r3
 8008746:	d92b      	bls.n	80087a0 <rtc_settime+0xa8>
 8008748:	b264      	sxtb	r4, r4
 800874a:	b18c      	cbz	r4, 8008770 <rtc_settime+0x78>
 800874c:	2c01      	cmp	r4, #1
 800874e:	d009      	beq.n	8008764 <rtc_settime+0x6c>
 8008750:	2c02      	cmp	r4, #2
 8008752:	d002      	beq.n	800875a <rtc_settime+0x62>
		result += DaysInMonth[i];
 8008754:	784c      	ldrb	r4, [r1, #1]

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008756:	2302      	movs	r3, #2
		result += DaysInMonth[i];
 8008758:	1912      	adds	r2, r2, r4
 800875a:	f811 c003 	ldrb.w	ip, [r1, r3]

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 800875e:	1c5f      	adds	r7, r3, #1
		result += DaysInMonth[i];
 8008760:	4462      	add	r2, ip

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008762:	b2fb      	uxtb	r3, r7
		result += DaysInMonth[i];
 8008764:	5ccc      	ldrb	r4, [r1, r3]

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008766:	3301      	adds	r3, #1
 8008768:	b2db      	uxtb	r3, r3
 800876a:	429e      	cmp	r6, r3
		result += DaysInMonth[i];
 800876c:	4422      	add	r2, r4

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 800876e:	d917      	bls.n	80087a0 <rtc_settime+0xa8>
 8008770:	1c5c      	adds	r4, r3, #1
 8008772:	b2e4      	uxtb	r4, r4
 8008774:	1c67      	adds	r7, r4, #1
		result += DaysInMonth[i];
 8008776:	f811 8003 	ldrb.w	r8, [r1, r3]

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 800877a:	b2ff      	uxtb	r7, r7
		result += DaysInMonth[i];
 800877c:	f811 c004 	ldrb.w	ip, [r1, r4]

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008780:	1c7b      	adds	r3, r7, #1
		result += DaysInMonth[i];
 8008782:	eb02 0408 	add.w	r4, r2, r8

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008786:	b2db      	uxtb	r3, r3
		result += DaysInMonth[i];
 8008788:	eb04 020c 	add.w	r2, r4, ip
 800878c:	5dcf      	ldrb	r7, [r1, r7]
 800878e:	5ccc      	ldrb	r4, [r1, r3]

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008790:	3301      	adds	r3, #1
 8008792:	b2db      	uxtb	r3, r3
		result += DaysInMonth[i];
 8008794:	eb02 0c07 	add.w	ip, r2, r7

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 8008798:	429e      	cmp	r6, r3
		result += DaysInMonth[i];
 800879a:	eb0c 0204 	add.w	r2, ip, r4

	/* Make month an array index */
	idx = t->month - 1;

	/* Loop thru each month, adding the days */
	for (i = 0; i < idx; i++) {
 800879e:	d8e7      	bhi.n	8008770 <rtc_settime+0x78>
		result += DaysInMonth[i];
	}

	/* Leap year? adjust February */
	if (year%400 == 0 || (year%4 == 0 && year%100 !=0)) {
 80087a0:	4b5b      	ldr	r3, [pc, #364]	; (8008910 <rtc_settime+0x218>)
 80087a2:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80087a6:	fba3 1305 	umull	r1, r3, r3, r5
 80087aa:	09df      	lsrs	r7, r3, #7
 80087ac:	fb0c 5617 	mls	r6, ip, r7, r5
 80087b0:	b2b1      	uxth	r1, r6
 80087b2:	b159      	cbz	r1, 80087cc <rtc_settime+0xd4>
 80087b4:	f015 0f03 	tst.w	r5, #3
 80087b8:	f040 8091 	bne.w	80088de <rtc_settime+0x1e6>
 80087bc:	095e      	lsrs	r6, r3, #5
 80087be:	2164      	movs	r1, #100	; 0x64
 80087c0:	fb01 5416 	mls	r4, r1, r6, r5
 80087c4:	b2a5      	uxth	r5, r4
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	f000 8089 	beq.w	80088de <rtc_settime+0x1e6>
	/* Add remaining days */
	result += t->mday;

	/* Convert to seconds, add all the other stuff */
	result = (result-1) * 86400L + (uint32_t)t->hour * 3600 +
		(uint32_t)t->min * 60 + t->sec;
 80087cc:	f890 c007 	ldrb.w	ip, [r0, #7]

	/* Add remaining days */
	result += t->mday;

	/* Convert to seconds, add all the other stuff */
	result = (result-1) * 86400L + (uint32_t)t->hour * 3600 +
 80087d0:	7944      	ldrb	r4, [r0, #5]
 80087d2:	f5ac 3ea8 	sub.w	lr, ip, #86016	; 0x15000
 80087d6:	f5ae 71c0 	sub.w	r1, lr, #384	; 0x180
 80087da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80087de:	fb03 1704 	mla	r7, r3, r4, r1
		(uint32_t)t->min * 60 + t->sec;
 80087e2:	7985      	ldrb	r5, [r0, #6]
			result--;
		}
	}

	/* Add remaining days */
	result += t->mday;
 80087e4:	78c6      	ldrb	r6, [r0, #3]

	/* Convert to seconds, add all the other stuff */
	result = (result-1) * 86400L + (uint32_t)t->hour * 3600 +
 80087e6:	4c4d      	ldr	r4, [pc, #308]	; (800891c <rtc_settime+0x224>)
		(uint32_t)t->min * 60 + t->sec;
 80087e8:	ebc5 1005 	rsb	r0, r5, r5, lsl #4
			result--;
		}
	}

	/* Add remaining days */
	result += t->mday;
 80087ec:	eb02 0e06 	add.w	lr, r2, r6

	/* Convert to seconds, add all the other stuff */
	result = (result-1) * 86400L + (uint32_t)t->hour * 3600 +
		(uint32_t)t->min * 60 + t->sec;
 80087f0:	eb07 0c80 	add.w	ip, r7, r0, lsl #2

	/* Add remaining days */
	result += t->mday;

	/* Convert to seconds, add all the other stuff */
	result = (result-1) * 86400L + (uint32_t)t->hour * 3600 +
 80087f4:	fb04 c40e 	mla	r4, r4, lr, ip
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
	sec /= 60;
 80087f8:	4b49      	ldr	r3, [pc, #292]	; (8008920 <rtc_settime+0x228>)

	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
 80087fa:	f240 1e6d 	movw	lr, #365	; 0x16d
	uint16_t dayofyear;
	uint8_t leap400;
	uint8_t month;

	t->sec = sec % 60;
	sec /= 60;
 80087fe:	fba3 2104 	umull	r2, r1, r3, r4
 8008802:	094d      	lsrs	r5, r1, #5
	t->min = sec % 60;
	sec /= 60;
 8008804:	fba3 0705 	umull	r0, r7, r3, r5
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);
 8008808:	4a46      	ldr	r2, [pc, #280]	; (8008924 <rtc_settime+0x22c>)
	uint8_t month;

	t->sec = sec % 60;
	sec /= 60;
	t->min = sec % 60;
	sec /= 60;
 800880a:	097e      	lsrs	r6, r7, #5
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);
 800880c:	fba2 1006 	umull	r1, r0, r2, r6
 8008810:	f3c0 150f 	ubfx	r5, r0, #4, #16
 8008814:	462b      	mov	r3, r5

	t->wday = (day + FIRSTDAY) % 7;		// weekday

	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1
 8008816:	2701      	movs	r7, #1
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday

	year = FIRSTYEAR % 100;				// 0..99
 8008818:	2200      	movs	r2, #0
 800881a:	e015      	b.n	8008848 <rtc_settime+0x150>
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
		if( (year & 3) == 0 ) {
 800881c:	2a64      	cmp	r2, #100	; 0x64
 800881e:	d003      	beq.n	8008828 <rtc_settime+0x130>
 8008820:	2ac8      	cmp	r2, #200	; 0xc8
 8008822:	d001      	beq.n	8008828 <rtc_settime+0x130>
 8008824:	2a00      	cmp	r2, #0
 8008826:	d157      	bne.n	80088d8 <rtc_settime+0x1e0>
			dayofyear = 366;					// leap year
			if( year == 0 || year == 100 || year == 200 ) {	// 100 year exception
				if( --leap400 ) {					// 400 year exception
 8008828:	1e78      	subs	r0, r7, #1
 800882a:	b2c7      	uxtb	r7, r0
 800882c:	2f00      	cmp	r7, #0
 800882e:	bf0c      	ite	eq
 8008830:	4638      	moveq	r0, r7
 8008832:	2001      	movne	r0, #1
 8008834:	bf14      	ite	ne
 8008836:	4671      	movne	r1, lr
 8008838:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
					dayofyear = 365;
				}
			}
		}
		if( day < dayofyear ) {
 800883c:	428b      	cmp	r3, r1
 800883e:	d30b      	bcc.n	8008858 <rtc_settime+0x160>
			break;
		}
		day -= dayofyear;
 8008840:	1a5b      	subs	r3, r3, r1
		year++;					// 00..136 / 99..235
 8008842:	3201      	adds	r2, #1
			}
		}
		if( day < dayofyear ) {
			break;
		}
		day -= dayofyear;
 8008844:	b29b      	uxth	r3, r3
		year++;					// 00..136 / 99..235
 8008846:	b2d2      	uxtb	r2, r2
	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
		if( (year & 3) == 0 ) {
 8008848:	f012 0003 	ands.w	r0, r2, #3
 800884c:	d0e6      	beq.n	800881c <rtc_settime+0x124>

	year = FIRSTYEAR % 100;				// 0..99
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
 800884e:	f240 116d 	movw	r1, #365	; 0x16d
		if( (year & 3) == 0 ) {
 8008852:	2001      	movs	r0, #1
				if( --leap400 ) {					// 400 year exception
					dayofyear = 365;
				}
			}
		}
		if( day < dayofyear ) {
 8008854:	428b      	cmp	r3, r1
 8008856:	d2f3      	bcs.n	8008840 <rtc_settime+0x148>
		day -= dayofyear;
		year++;					// 00..136 / 99..235
	}
	t->year = year + FIRSTYEAR / 100 * 100;	// + century

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
 8008858:	b108      	cbz	r0, 800885e <rtc_settime+0x166>
 800885a:	2b3a      	cmp	r3, #58	; 0x3a
 800885c:	d855      	bhi.n	800890a <rtc_settime+0x212>
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 800885e:	2b1e      	cmp	r3, #30
 8008860:	d92a      	bls.n	80088b8 <rtc_settime+0x1c0>
 8008862:	4f2d      	ldr	r7, [pc, #180]	; (8008918 <rtc_settime+0x220>)
		day -= dayofyear;
		year++;					// 00..136 / 99..235
	}
	t->year = year + FIRSTYEAR / 100 * 100;	// + century

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
 8008864:	211f      	movs	r1, #31
 8008866:	2201      	movs	r2, #1
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 8008868:	1c50      	adds	r0, r2, #1
 800886a:	b2c2      	uxtb	r2, r0
 800886c:	eb07 0c02 	add.w	ip, r7, r2
		day -= DaysInMonth[month-1];
 8008870:	ebc1 0e03 	rsb	lr, r1, r3

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 8008874:	f81c 1c01 	ldrb.w	r1, [ip, #-1]
		day -= DaysInMonth[month-1];
 8008878:	fa1f f38e 	uxth.w	r3, lr

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
		day++;					// skip 29.2.
	}

	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
 800887c:	428b      	cmp	r3, r1
 800887e:	d2f3      	bcs.n	8008868 <rtc_settime+0x170>
{
	uint8_t wday, month;		// locals for faster access

	month = t->month;

	if( month < 3 || month > 10 ) {		// month 1, 2, 11, 12
 8008880:	1ed0      	subs	r0, r2, #3
 8008882:	b2c1      	uxtb	r1, r0
 8008884:	2907      	cmp	r1, #7
 8008886:	d817      	bhi.n	80088b8 <rtc_settime+0x1c0>
	t->min = sec % 60;
	sec /= 60;
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 8008888:	4827      	ldr	r0, [pc, #156]	; (8008928 <rtc_settime+0x230>)
 800888a:	3506      	adds	r5, #6
 800888c:	fb80 0e05 	smull	r0, lr, r0, r5
 8008890:	eb0e 0105 	add.w	r1, lr, r5
 8008894:	1088      	asrs	r0, r1, #2
 8008896:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
	for( month = 1; day >= DaysInMonth[month-1]; month++ ) {
		day -= DaysInMonth[month-1];
	}

	t->month = month;				// 1..12
	t->mday = day + 1;				// 1..31
 800889a:	1c59      	adds	r1, r3, #1
	t->min = sec % 60;
	sec /= 60;
	t->hour = sec % 24;
	day = (uint16_t)(sec / 24);

	t->wday = (day + FIRSTDAY) % 7;		// weekday
 800889c:	ebcc 0505 	rsb	r5, ip, r5
 80088a0:	b2ed      	uxtb	r5, r5
		return false;					// -> Winter
	}

	wday  = t->wday;

	if( t->mday - wday >= 25 && (wday || t->hour >= 2) ) { // after last Sunday 2:00
 80088a2:	fa5f fe81 	uxtb.w	lr, r1
 80088a6:	ebc5 030e 	rsb	r3, r5, lr
 80088aa:	2b18      	cmp	r3, #24
 80088ac:	dd28      	ble.n	8008900 <rtc_settime+0x208>
 80088ae:	b1dd      	cbz	r5, 80088e8 <rtc_settime+0x1f0>
		if( month == 10 ) {				// October -> Winter
 80088b0:	2a0a      	cmp	r2, #10
 80088b2:	d001      	beq.n	80088b8 <rtc_settime+0x1c0>
	RTC_t ts;

	cnt = struct_to_counter( rtc ); // non-DST counter-value
	counter_to_struct( cnt, &ts );  // normalize struct (for weekday)
	if ( isDST( &ts ) ) {
		cnt -= 60*60; // Subtract one hour
 80088b4:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
* Return         : None
*******************************************************************************/
void my_RTC_SetCounter(uint32_t cnt)
{
	/* Allow access to BKP Domain */
	PWR_BackupAccessCmd(ENABLE);
 80088b8:	2001      	movs	r0, #1
 80088ba:	f005 fae4 	bl	800de86 <PWR_BackupAccessCmd>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 80088be:	f005 fd4d 	bl	800e35c <RTC_WaitForLastTask>
	/* Change the current time */
	RTC_SetCounter(cnt);
 80088c2:	4620      	mov	r0, r4
 80088c4:	f005 fd12 	bl	800e2ec <RTC_SetCounter>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 80088c8:	f005 fd48 	bl	800e35c <RTC_WaitForLastTask>
	PWR_BackupAccessCmd(DISABLE);
 80088cc:	2000      	movs	r0, #0
 80088ce:	f005 fada 	bl	800de86 <PWR_BackupAccessCmd>
		cnt -= 60*60; // Subtract one hour
	}
	my_RTC_SetCounter( cnt );

	return true;
}
 80088d2:	2001      	movs	r0, #1
 80088d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	leap400 = 4 - ((FIRSTYEAR - 1) / 100 & 3);	// 4, 3, 2, 1

	for(;;) {
		dayofyear = 365;
		if( (year & 3) == 0 ) {
			dayofyear = 366;					// leap year
 80088d8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80088dc:	e7ae      	b.n	800883c <rtc_settime+0x144>

	/* Leap year? adjust February */
	if (year%400 == 0 || (year%4 == 0 && year%100 !=0)) {
		;
	} else {
		if (t->month > 1) {
 80088de:	f1be 0f01 	cmp.w	lr, #1
			result--;
 80088e2:	bf88      	it	hi
 80088e4:	3a01      	subhi	r2, #1
 80088e6:	e771      	b.n	80087cc <rtc_settime+0xd4>

	t->sec = sec % 60;
	sec /= 60;
	t->min = sec % 60;
	sec /= 60;
	t->hour = sec % 24;
 80088e8:	490e      	ldr	r1, [pc, #56]	; (8008924 <rtc_settime+0x22c>)
 80088ea:	fba1 1306 	umull	r1, r3, r1, r6
 80088ee:	0918      	lsrs	r0, r3, #4
 80088f0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80088f4:	eba6 0cc1 	sub.w	ip, r6, r1, lsl #3
		return false;					// -> Winter
	}

	wday  = t->wday;

	if( t->mday - wday >= 25 && (wday || t->hour >= 2) ) { // after last Sunday 2:00
 80088f8:	fa5f f38c 	uxtb.w	r3, ip
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d8d7      	bhi.n	80088b0 <rtc_settime+0x1b8>
		if( month == 10 ) {				// October -> Winter
			return false;
		}
	} else {							// before last Sunday 2:00
		if( month == 3 ) {				// March -> Winter
 8008900:	2a03      	cmp	r2, #3
 8008902:	d0d9      	beq.n	80088b8 <rtc_settime+0x1c0>
	RTC_t ts;

	cnt = struct_to_counter( rtc ); // non-DST counter-value
	counter_to_struct( cnt, &ts );  // normalize struct (for weekday)
	if ( isDST( &ts ) ) {
		cnt -= 60*60; // Subtract one hour
 8008904:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
 8008908:	e7d6      	b.n	80088b8 <rtc_settime+0x1c0>
		year++;					// 00..136 / 99..235
	}
	t->year = year + FIRSTYEAR / 100 * 100;	// + century

	if( dayofyear & 1 && day > 58 ) { 	// no leap year and after 28.2.
		day++;					// skip 29.2.
 800890a:	1c5f      	adds	r7, r3, #1
 800890c:	b2bb      	uxth	r3, r7
 800890e:	e7a8      	b.n	8008862 <rtc_settime+0x16a>
 8008910:	51eb851f 	.word	0x51eb851f
 8008914:	fff4da8b 	.word	0xfff4da8b
 8008918:	0801b310 	.word	0x0801b310
 800891c:	00015180 	.word	0x00015180
 8008920:	88888889 	.word	0x88888889
 8008924:	aaaaaaab 	.word	0xaaaaaaab
 8008928:	92492493 	.word	0x92492493

0800892c <rtc_init>:
* Output         : None
* Return         : not used
*  Based on code from a STM RTC example in the StdPeriph-Library package
*******************************************************************************/
int rtc_init(void)
{
 800892c:	b500      	push	{lr}
	volatile uint16_t i;

	/* Enable PWR and BKP clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 800892e:	2101      	movs	r1, #1
* Output         : None
* Return         : not used
*  Based on code from a STM RTC example in the StdPeriph-Library package
*******************************************************************************/
int rtc_init(void)
{
 8008930:	b083      	sub	sp, #12
	volatile uint16_t i;

	/* Enable PWR and BKP clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 8008932:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8008936:	f005 fc35 	bl	800e1a4 <RCC_APB1PeriphClockCmd>

	/* LSI clock stabilization time */
	for(i=0;i<5000;i++) { ; }
 800893a:	2100      	movs	r1, #0
 800893c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8008940:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8008944:	f241 3287 	movw	r2, #4999	; 0x1387
 8008948:	b283      	uxth	r3, r0
 800894a:	4293      	cmp	r3, r2
 800894c:	d80a      	bhi.n	8008964 <rtc_init+0x38>
 800894e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008958:	f8bd e004 	ldrh.w	lr, [sp, #4]
 800895c:	fa1f fc8e 	uxth.w	ip, lr
 8008960:	4594      	cmp	ip, r2
 8008962:	d9f4      	bls.n	800894e <rtc_init+0x22>

	if (BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5) {
 8008964:	2004      	movs	r0, #4
 8008966:	f004 fd77 	bl	800d458 <BKP_ReadBackupRegister>
 800896a:	f24a 52a5 	movw	r2, #42405	; 0xa5a5
 800896e:	4290      	cmp	r0, r2
 8008970:	d02e      	beq.n	80089d0 <rtc_init+0xa4>
		/* Backup data register value is not correct or not yet programmed (when
		   the first time the program is executed) */

		/* Allow access to BKP Domain */
		PWR_BackupAccessCmd(ENABLE);
 8008972:	2001      	movs	r0, #1
 8008974:	f005 fa87 	bl	800de86 <PWR_BackupAccessCmd>

		/* Reset Backup Domain */
		BKP_DeInit();
 8008978:	f004 fd2e 	bl	800d3d8 <BKP_DeInit>

		/* Enable LSE */
		RCC_LSEConfig(RCC_LSE_ON);
 800897c:	2001      	movs	r0, #1
 800897e:	f005 fb83 	bl	800e088 <RCC_LSEConfig>

		/* Wait till LSE is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET) { ; }
 8008982:	2041      	movs	r0, #65	; 0x41
 8008984:	f005 fc44 	bl	800e210 <RCC_GetFlagStatus>
 8008988:	2800      	cmp	r0, #0
 800898a:	d0fa      	beq.n	8008982 <rtc_init+0x56>

		/* Select LSE as RTC Clock Source */
		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 800898c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008990:	f005 fb90 	bl	800e0b4 <RCC_RTCCLKConfig>

		/* Enable RTC Clock */
		RCC_RTCCLKCmd(ENABLE);
 8008994:	2001      	movs	r0, #1
 8008996:	f005 fb95 	bl	800e0c4 <RCC_RTCCLKCmd>

		/* Wait for RTC registers synchronization */
		RTC_WaitForSynchro();
 800899a:	f005 fce7 	bl	800e36c <RTC_WaitForSynchro>

		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 800899e:	f005 fcdd 	bl	800e35c <RTC_WaitForLastTask>

		/* Set RTC prescaler: set RTC period to 1sec */
		RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 80089a2:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80089a6:	f005 fcaf 	bl	800e308 <RTC_SetPrescaler>

		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 80089aa:	f005 fcd7 	bl	800e35c <RTC_WaitForLastTask>

		/* Set initial value */
		RTC_SetCounter( (uint32_t)((11*60+55)*60) ); // here: 1st January 2000 11:55:00
 80089ae:	f24a 7094 	movw	r0, #42900	; 0xa794
 80089b2:	f005 fc9b 	bl	800e2ec <RTC_SetCounter>

		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
 80089b6:	f005 fcd1 	bl	800e35c <RTC_WaitForLastTask>

		BKP_WriteBackupRegister(BKP_DR1, 0xA5A5);
 80089ba:	2004      	movs	r0, #4
 80089bc:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 80089c0:	f004 fd3c 	bl	800d43c <BKP_WriteBackupRegister>

		/* Lock access to BKP Domain */
		PWR_BackupAccessCmd(DISABLE);
 80089c4:	2000      	movs	r0, #0
 80089c6:	f005 fa5e 	bl	800de86 <PWR_BackupAccessCmd>
		RTC_WaitForSynchro();

	}

	return 0;
}
 80089ca:	2000      	movs	r0, #0
 80089cc:	b003      	add	sp, #12
 80089ce:	bd00      	pop	{pc}
		PWR_BackupAccessCmd(DISABLE);

	} else {

		/* Wait for RTC registers synchronization */
		RTC_WaitForSynchro();
 80089d0:	f005 fccc 	bl	800e36c <RTC_WaitForSynchro>
 80089d4:	e7f9      	b.n	80089ca <rtc_init+0x9e>
 80089d6:	bf00      	nop

080089d8 <power_on>:
/* Power Control and interface-initialization (Platform dependent)       */
/*-----------------------------------------------------------------------*/

static
void power_on (void)
{
 80089d8:	b530      	push	{r4, r5, lr}
	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	volatile BYTE dummyread;

	/* Enable GPIO clock for CS */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_CS, ENABLE);
 80089da:	2008      	movs	r0, #8
/* Power Control and interface-initialization (Platform dependent)       */
/*-----------------------------------------------------------------------*/

static
void power_on (void)
{
 80089dc:	b089      	sub	sp, #36	; 0x24
	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	volatile BYTE dummyread;

	/* Enable GPIO clock for CS */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_CS, ENABLE);
 80089de:	2101      	movs	r1, #1
 80089e0:	f005 fbd4 	bl	800e18c <RCC_APB2PeriphClockCmd>
	/* Enable SPI clock, SPI1: APB2, SPI2: APB1 */
	RCC_APBPeriphClockCmd_SPI_SD(RCC_APBPeriph_SPI_SD, ENABLE);
 80089e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80089e8:	2101      	movs	r1, #1
 80089ea:	f005 fbcf 	bl	800e18c <RCC_APB2PeriphClockCmd>

	card_power(1);
	socket_cp_init();
	socket_wp_init();

	for (Timer1 = 25; Timer1; );	/* Wait for 250ms */
 80089ee:	4b32      	ldr	r3, [pc, #200]	; (8008ab8 <power_on+0xe0>)
 80089f0:	2219      	movs	r2, #25
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	681c      	ldr	r4, [r3, #0]
 80089f6:	2c00      	cmp	r4, #0
 80089f8:	d1fc      	bne.n	80089f4 <power_on+0x1c>

	/* Configure I/O for Flash Chip select */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_CS;
 80089fa:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 80089fe:	2210      	movs	r2, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008a00:	2503      	movs	r5, #3
	GPIO_Init(GPIO_CS, &GPIO_InitStructure);
 8008a02:	482e      	ldr	r0, [pc, #184]	; (8008abc <power_on+0xe4>)
 8008a04:	a906      	add	r1, sp, #24
	socket_wp_init();

	for (Timer1 = 25; Timer1; );	/* Wait for 250ms */

	/* Configure I/O for Flash Chip select */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_CS;
 8008a06:	f8ad e018 	strh.w	lr, [sp, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 8008a0a:	f88d 201b 	strb.w	r2, [sp, #27]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008a0e:	f88d 501a 	strb.w	r5, [sp, #26]
	GPIO_Init(GPIO_CS, &GPIO_InitStructure);
 8008a12:	f004 ff48 	bl	800d8a6 <GPIO_Init>

	/* De-select the Card: Chip Select high */
	DESELECT();
 8008a16:	4829      	ldr	r0, [pc, #164]	; (8008abc <power_on+0xe4>)
 8008a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a1c:	f004 ffa9 	bl	800d972 <GPIO_SetBits>

	/* Configure SPI pins: SCK and MOSI with default alternate function (not re-mapped) push-pull */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MOSI;
 8008a20:	23a0      	movs	r3, #160	; 0xa0
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
 8008a22:	2218      	movs	r2, #24
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
 8008a24:	4826      	ldr	r0, [pc, #152]	; (8008ac0 <power_on+0xe8>)
 8008a26:	a906      	add	r1, sp, #24

	/* De-select the Card: Chip Select high */
	DESELECT();

	/* Configure SPI pins: SCK and MOSI with default alternate function (not re-mapped) push-pull */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MOSI;
 8008a28:	f8ad 3018 	strh.w	r3, [sp, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
 8008a2c:	f88d 201b 	strb.w	r2, [sp, #27]
	/* De-select the Card: Chip Select high */
	DESELECT();

	/* Configure SPI pins: SCK and MOSI with default alternate function (not re-mapped) push-pull */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MOSI;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008a30:	f88d 501a 	strb.w	r5, [sp, #26]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
 8008a34:	f004 ff37 	bl	800d8a6 <GPIO_Init>
	/* Configure MISO as Input with internal pull-up */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_MISO;
 8008a38:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 8008a3a:	2248      	movs	r2, #72	; 0x48
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
 8008a3c:	4820      	ldr	r0, [pc, #128]	; (8008ac0 <power_on+0xe8>)
 8008a3e:	a906      	add	r1, sp, #24
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MOSI;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
	/* Configure MISO as Input with internal pull-up */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_MISO;
 8008a40:	f8ad 3018 	strh.w	r3, [sp, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 8008a44:	f88d 201b 	strb.w	r2, [sp, #27]
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
 8008a48:	f004 ff2d 	bl	800d8a6 <GPIO_Init>

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8008a4c:	f44f 7382 	mov.w	r3, #260	; 0x104
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008a50:	f44f 7c00 	mov.w	ip, #512	; 0x200
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256; // 72000kHz/256=281kHz < 400kHz
 8008a54:	2238      	movs	r2, #56	; 0x38
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;

	SPI_Init(SPI_SD, &SPI_InitStructure);
 8008a56:	481b      	ldr	r0, [pc, #108]	; (8008ac4 <power_on+0xec>)
 8008a58:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8008a5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256; // 72000kHz/256=281kHz < 400kHz
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8008a5e:	2307      	movs	r3, #7
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008a60:	f8ad c00e 	strh.w	ip, [sp, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256; // 72000kHz/256=281kHz < 400kHz
 8008a64:	f8ad 2010 	strh.w	r2, [sp, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8008a68:	f8ad 3014 	strh.w	r3, [sp, #20]
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_MISO;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8008a6c:	f8ad 4004 	strh.w	r4, [sp, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8008a70:	f8ad 4008 	strh.w	r4, [sp, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8008a74:	f8ad 400a 	strh.w	r4, [sp, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8008a78:	f8ad 400c 	strh.w	r4, [sp, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256; // 72000kHz/256=281kHz < 400kHz
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8008a7c:	f8ad 4012 	strh.w	r4, [sp, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;

	SPI_Init(SPI_SD, &SPI_InitStructure);
 8008a80:	f005 fce6 	bl	800e450 <SPI_Init>
	SPI_CalculateCRC(SPI_SD, DISABLE);
 8008a84:	480f      	ldr	r0, [pc, #60]	; (8008ac4 <power_on+0xec>)
 8008a86:	4621      	mov	r1, r4
 8008a88:	f005 fdcf 	bl	800e62a <SPI_CalculateCRC>
	SPI_Cmd(SPI_SD, ENABLE);
 8008a8c:	480d      	ldr	r0, [pc, #52]	; (8008ac4 <power_on+0xec>)
 8008a8e:	2101      	movs	r1, #1
 8008a90:	f005 fd63 	bl	800e55a <SPI_Cmd>

	/* drain SPI */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }
 8008a94:	480b      	ldr	r0, [pc, #44]	; (8008ac4 <power_on+0xec>)
 8008a96:	2102      	movs	r1, #2
 8008a98:	f005 fdee 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0f9      	beq.n	8008a94 <power_on+0xbc>
	dummyread = SPI_I2S_ReceiveData(SPI_SD);
 8008aa0:	4808      	ldr	r0, [pc, #32]	; (8008ac4 <power_on+0xec>)
 8008aa2:	f005 fd90 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8008aa6:	4684      	mov	ip, r0

#ifdef STM32_SD_USE_DMA
	/* enable DMA clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	4601      	mov	r1, r0
	SPI_CalculateCRC(SPI_SD, DISABLE);
	SPI_Cmd(SPI_SD, ENABLE);

	/* drain SPI */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }
	dummyread = SPI_I2S_ReceiveData(SPI_SD);
 8008aac:	f88d c01f 	strb.w	ip, [sp, #31]

#ifdef STM32_SD_USE_DMA
	/* enable DMA clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8008ab0:	f005 fb60 	bl	800e174 <RCC_AHBPeriphClockCmd>
#endif
}
 8008ab4:	b009      	add	sp, #36	; 0x24
 8008ab6:	bd30      	pop	{r4, r5, pc}
 8008ab8:	2000072c 	.word	0x2000072c
 8008abc:	40010c00 	.word	0x40010c00
 8008ac0:	40010800 	.word	0x40010800
 8008ac4:	40013000 	.word	0x40013000

08008ac8 <stm32_dma_transfer>:
	const BYTE *buff,	/* receive TRUE  : 512 byte data block to be transmitted
						   receive FALSE : Data buffer to store received data    */
	UINT btr 			/* receive TRUE  : Byte count (must be multiple of 2)
						   receive FALSE : Byte count (must be 512)              */
)
{
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	460e      	mov	r6, r1
	DMA_InitTypeDef DMA_InitStructure;
	WORD rw_workbyte[] = { 0xffff };

	/* shared DMA configuration values */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (DWORD)(&(SPI_SD->DR));
 8008acc:	4931      	ldr	r1, [pc, #196]	; (8008b94 <stm32_dma_transfer+0xcc>)
	const BYTE *buff,	/* receive TRUE  : 512 byte data block to be transmitted
						   receive FALSE : Data buffer to store received data    */
	UINT btr 			/* receive TRUE  : Byte count (must be multiple of 2)
						   receive FALSE : Byte count (must be 512)              */
)
{
 8008ace:	b08c      	sub	sp, #48	; 0x30
	DMA_InitTypeDef DMA_InitStructure;
	WORD rw_workbyte[] = { 0xffff };

	/* shared DMA configuration values */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (DWORD)(&(SPI_SD->DR));
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8008ad0:	2400      	movs	r4, #0
	const BYTE *buff,	/* receive TRUE  : 512 byte data block to be transmitted
						   receive FALSE : Data buffer to store received data    */
	UINT btr 			/* receive TRUE  : Byte count (must be multiple of 2)
						   receive FALSE : Byte count (must be 512)              */
)
{
 8008ad2:	4605      	mov	r5, r0
	DMA_InitTypeDef DMA_InitStructure;
	WORD rw_workbyte[] = { 0xffff };
 8008ad4:	f04f 3cff 	mov.w	ip, #4294967295
	DMA_InitStructure.DMA_BufferSize = btr;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;

	DMA_DeInit(DMA_Channel_SPI_SD_RX);
 8008ad8:	482f      	ldr	r0, [pc, #188]	; (8008b98 <stm32_dma_transfer+0xd0>)
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_BufferSize = btr;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8008ada:	f44f 5340 	mov.w	r3, #12288	; 0x3000
	UINT btr 			/* receive TRUE  : Byte count (must be multiple of 2)
						   receive FALSE : Byte count (must be 512)              */
)
{
	DMA_InitTypeDef DMA_InitStructure;
	WORD rw_workbyte[] = { 0xffff };
 8008ade:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c

	/* shared DMA configuration values */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (DWORD)(&(SPI_SD->DR));
 8008ae2:	9100      	str	r1, [sp, #0]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8008ae4:	9406      	str	r4, [sp, #24]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8008ae6:	9407      	str	r4, [sp, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8008ae8:	9404      	str	r4, [sp, #16]
	DMA_InitStructure.DMA_BufferSize = btr;
 8008aea:	9203      	str	r2, [sp, #12]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8008aec:	9408      	str	r4, [sp, #32]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8008af0:	940a      	str	r4, [sp, #40]	; 0x28

	DMA_DeInit(DMA_Channel_SPI_SD_RX);
 8008af2:	f004 fcfb 	bl	800d4ec <DMA_DeInit>
	DMA_DeInit(DMA_Channel_SPI_SD_TX);
 8008af6:	4829      	ldr	r0, [pc, #164]	; (8008b9c <stm32_dma_transfer+0xd4>)
 8008af8:	f004 fcf8 	bl	800d4ec <DMA_DeInit>

	if ( receive ) {
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	d037      	beq.n	8008b70 <stm32_dma_transfer+0xa8>

		/* DMA1 channel2 configuration SPI1 RX ---------------------------------------------*/
		/* DMA1 channel4 configuration SPI2 RX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)buff;
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8008b00:	2280      	movs	r2, #128	; 0x80
		DMA_Init(DMA_Channel_SPI_SD_RX, &DMA_InitStructure);
 8008b02:	4669      	mov	r1, sp
 8008b04:	4824      	ldr	r0, [pc, #144]	; (8008b98 <stm32_dma_transfer+0xd0>)

		/* DMA1 channel2 configuration SPI1 RX ---------------------------------------------*/
		/* DMA1 channel4 configuration SPI2 RX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)buff;
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8008b06:	9205      	str	r2, [sp, #20]

	if ( receive ) {

		/* DMA1 channel2 configuration SPI1 RX ---------------------------------------------*/
		/* DMA1 channel4 configuration SPI2 RX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)buff;
 8008b08:	9601      	str	r6, [sp, #4]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8008b0a:	9402      	str	r4, [sp, #8]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
		DMA_Init(DMA_Channel_SPI_SD_RX, &DMA_InitStructure);
 8008b0c:	f004 fd6c 	bl	800d5e8 <DMA_Init>

		/* DMA1 channel3 configuration SPI1 TX ---------------------------------------------*/
		/* DMA1 channel5 configuration SPI2 TX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)rw_workbyte;
 8008b10:	ab0b      	add	r3, sp, #44	; 0x2c
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8008b12:	2210      	movs	r2, #16
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
		DMA_Init(DMA_Channel_SPI_SD_TX, &DMA_InitStructure);
 8008b14:	4821      	ldr	r0, [pc, #132]	; (8008b9c <stm32_dma_transfer+0xd4>)
 8008b16:	4669      	mov	r1, sp
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
		DMA_Init(DMA_Channel_SPI_SD_RX, &DMA_InitStructure);

		/* DMA1 channel3 configuration SPI1 TX ---------------------------------------------*/
		/* DMA1 channel5 configuration SPI2 TX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)rw_workbyte;
 8008b18:	9301      	str	r3, [sp, #4]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8008b1a:	9202      	str	r2, [sp, #8]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8008b1c:	9405      	str	r4, [sp, #20]
		DMA_Init(DMA_Channel_SPI_SD_TX, &DMA_InitStructure);
 8008b1e:	f004 fd63 	bl	800d5e8 <DMA_Init>
#endif

	}

	/* Enable DMA RX Channel */
	DMA_Cmd(DMA_Channel_SPI_SD_RX, ENABLE);
 8008b22:	481d      	ldr	r0, [pc, #116]	; (8008b98 <stm32_dma_transfer+0xd0>)
 8008b24:	2101      	movs	r1, #1
 8008b26:	f004 fd8c 	bl	800d642 <DMA_Cmd>
	/* Enable DMA TX Channel */
	DMA_Cmd(DMA_Channel_SPI_SD_TX, ENABLE);
 8008b2a:	481c      	ldr	r0, [pc, #112]	; (8008b9c <stm32_dma_transfer+0xd4>)
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	f004 fd88 	bl	800d642 <DMA_Cmd>

	/* Enable SPI TX/RX request */
	SPI_I2S_DMACmd(SPI_SD, SPI_I2S_DMAReq_Rx | SPI_I2S_DMAReq_Tx, ENABLE);
 8008b32:	481b      	ldr	r0, [pc, #108]	; (8008ba0 <stm32_dma_transfer+0xd8>)
 8008b34:	2103      	movs	r1, #3
 8008b36:	2201      	movs	r2, #1
 8008b38:	f005 fd38 	bl	800e5ac <SPI_I2S_DMACmd>

	/* Wait until DMA1_Channel 3 Transfer Complete */
	/// not needed: - Needed for other devices to share bus; block until bus is ready to use
	while (DMA_GetFlagStatus(DMA_FLAG_SPI_SD_TC_TX) == RESET) { ; }
 8008b3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b40:	f004 fd95 	bl	800d66e <DMA_GetFlagStatus>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d0f9      	beq.n	8008b3c <stm32_dma_transfer+0x74>
	/* Wait until DMA1_Channel 2 Receive Complete */
	while (DMA_GetFlagStatus(DMA_FLAG_SPI_SD_TC_RX) == RESET) { ; }
 8008b48:	2020      	movs	r0, #32
 8008b4a:	f004 fd90 	bl	800d66e <DMA_GetFlagStatus>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d0fa      	beq.n	8008b48 <stm32_dma_transfer+0x80>
	// same w/o function-call:
	// while ( ( ( DMA1->ISR ) & DMA_FLAG_SPI_SD_TC_RX ) == RESET ) { ; }

	/* Disable DMA RX Channel */
	DMA_Cmd(DMA_Channel_SPI_SD_RX, DISABLE);
 8008b52:	2100      	movs	r1, #0
 8008b54:	4810      	ldr	r0, [pc, #64]	; (8008b98 <stm32_dma_transfer+0xd0>)
 8008b56:	f004 fd74 	bl	800d642 <DMA_Cmd>
	/* Disable DMA TX Channel */
	DMA_Cmd(DMA_Channel_SPI_SD_TX, DISABLE);
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	480f      	ldr	r0, [pc, #60]	; (8008b9c <stm32_dma_transfer+0xd4>)
 8008b5e:	f004 fd70 	bl	800d642 <DMA_Cmd>

	/* Disable SPI RX/TX request */
	SPI_I2S_DMACmd(SPI_SD, SPI_I2S_DMAReq_Rx | SPI_I2S_DMAReq_Tx, DISABLE);
 8008b62:	480f      	ldr	r0, [pc, #60]	; (8008ba0 <stm32_dma_transfer+0xd8>)
 8008b64:	2103      	movs	r1, #3
 8008b66:	2200      	movs	r2, #0
 8008b68:	f005 fd20 	bl	800e5ac <SPI_I2S_DMACmd>
}
 8008b6c:	b00c      	add	sp, #48	; 0x30
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
	} else {

#if _FS_READONLY == 0
		/* DMA1 channel2 configuration SPI1 RX ---------------------------------------------*/
		/* DMA1 channel4 configuration SPI2 RX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)rw_workbyte;
 8008b70:	ab0b      	add	r3, sp, #44	; 0x2c
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
		DMA_Init(DMA_Channel_SPI_SD_RX, &DMA_InitStructure);
 8008b72:	4669      	mov	r1, sp
 8008b74:	4808      	ldr	r0, [pc, #32]	; (8008b98 <stm32_dma_transfer+0xd0>)
	} else {

#if _FS_READONLY == 0
		/* DMA1 channel2 configuration SPI1 RX ---------------------------------------------*/
		/* DMA1 channel4 configuration SPI2 RX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)rw_workbyte;
 8008b76:	9301      	str	r3, [sp, #4]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8008b78:	9502      	str	r5, [sp, #8]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8008b7a:	9505      	str	r5, [sp, #20]
		DMA_Init(DMA_Channel_SPI_SD_RX, &DMA_InitStructure);
 8008b7c:	f004 fd34 	bl	800d5e8 <DMA_Init>

		/* DMA1 channel3 configuration SPI1 TX ---------------------------------------------*/
		/* DMA1 channel5 configuration SPI2 TX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)buff;
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8008b80:	2210      	movs	r2, #16
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8008b82:	2380      	movs	r3, #128	; 0x80
		DMA_Init(DMA_Channel_SPI_SD_TX, &DMA_InitStructure);
 8008b84:	4805      	ldr	r0, [pc, #20]	; (8008b9c <stm32_dma_transfer+0xd4>)
 8008b86:	4669      	mov	r1, sp
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
		DMA_Init(DMA_Channel_SPI_SD_RX, &DMA_InitStructure);

		/* DMA1 channel3 configuration SPI1 TX ---------------------------------------------*/
		/* DMA1 channel5 configuration SPI2 TX ---------------------------------------------*/
		DMA_InitStructure.DMA_MemoryBaseAddr = (DWORD)buff;
 8008b88:	9601      	str	r6, [sp, #4]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8008b8a:	9202      	str	r2, [sp, #8]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8008b8c:	9305      	str	r3, [sp, #20]
		DMA_Init(DMA_Channel_SPI_SD_TX, &DMA_InitStructure);
 8008b8e:	f004 fd2b 	bl	800d5e8 <DMA_Init>
 8008b92:	e7c6      	b.n	8008b22 <stm32_dma_transfer+0x5a>
 8008b94:	4001300c 	.word	0x4001300c
 8008b98:	4002001c 	.word	0x4002001c
 8008b9c:	40020030 	.word	0x40020030
 8008ba0:	40013000 	.word	0x40013000

08008ba4 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
 8008ba4:	b570      	push	{r4, r5, r6, lr}
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8008ba6:	4c36      	ldr	r4, [pc, #216]	; (8008c80 <xmit_datablock+0xdc>)
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
 8008ba8:	4606      	mov	r6, r0
 8008baa:	460d      	mov	r5, r1
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8008bac:	2332      	movs	r3, #50	; 0x32
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008bae:	4835      	ldr	r0, [pc, #212]	; (8008c84 <xmit_datablock+0xe0>)
 8008bb0:	21ff      	movs	r1, #255	; 0xff
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8008bb2:	6063      	str	r3, [r4, #4]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008bb4:	f005 fd05 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008bb8:	4832      	ldr	r0, [pc, #200]	; (8008c84 <xmit_datablock+0xe0>)
 8008bba:	2101      	movs	r1, #1
 8008bbc:	f005 fd5c 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d0f9      	beq.n	8008bb8 <xmit_datablock+0x14>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008bc4:	482f      	ldr	r0, [pc, #188]	; (8008c84 <xmit_datablock+0xe0>)
 8008bc6:	f005 fcfe 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008bca:	482e      	ldr	r0, [pc, #184]	; (8008c84 <xmit_datablock+0xe0>)
 8008bcc:	21ff      	movs	r1, #255	; 0xff
 8008bce:	f005 fcf8 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008bd2:	482c      	ldr	r0, [pc, #176]	; (8008c84 <xmit_datablock+0xe0>)
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	f005 fd4f 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0f9      	beq.n	8008bd2 <xmit_datablock+0x2e>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008bde:	4829      	ldr	r0, [pc, #164]	; (8008c84 <xmit_datablock+0xe0>)
 8008be0:	f005 fcf1 	bl	800e5c6 <SPI_I2S_ReceiveData>

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
 8008be4:	b2c0      	uxtb	r0, r0
 8008be6:	28ff      	cmp	r0, #255	; 0xff
 8008be8:	d003      	beq.n	8008bf2 <xmit_datablock+0x4e>
 8008bea:	6860      	ldr	r0, [r4, #4]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1ec      	bne.n	8008bca <xmit_datablock+0x26>
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008bf2:	4824      	ldr	r0, [pc, #144]	; (8008c84 <xmit_datablock+0xe0>)
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	f005 fce4 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008bfa:	4822      	ldr	r0, [pc, #136]	; (8008c84 <xmit_datablock+0xe0>)
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	f005 fd3b 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d0f9      	beq.n	8008bfa <xmit_datablock+0x56>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008c06:	481f      	ldr	r0, [pc, #124]	; (8008c84 <xmit_datablock+0xe0>)
 8008c08:	f005 fcdd 	bl	800e5c6 <SPI_I2S_ReceiveData>
#endif

	if (wait_ready() != 0xFF) return FALSE;

	xmit_spi(token);					/* transmit data token */
	if (token != 0xFD) {	/* Is data token */
 8008c0c:	2dfd      	cmp	r5, #253	; 0xfd
 8008c0e:	d034      	beq.n	8008c7a <xmit_datablock+0xd6>

#ifdef STM32_SD_USE_DMA
		stm32_dma_transfer( FALSE, buff, 512 );
 8008c10:	2000      	movs	r0, #0
 8008c12:	4631      	mov	r1, r6
 8008c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c18:	f7ff ff56 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008c1c:	4819      	ldr	r0, [pc, #100]	; (8008c84 <xmit_datablock+0xe0>)
 8008c1e:	21ff      	movs	r1, #255	; 0xff
 8008c20:	f005 fccf 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008c24:	4817      	ldr	r0, [pc, #92]	; (8008c84 <xmit_datablock+0xe0>)
 8008c26:	2101      	movs	r1, #1
 8008c28:	f005 fd26 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d0f9      	beq.n	8008c24 <xmit_datablock+0x80>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008c30:	4814      	ldr	r0, [pc, #80]	; (8008c84 <xmit_datablock+0xe0>)
 8008c32:	f005 fcc8 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008c36:	4813      	ldr	r0, [pc, #76]	; (8008c84 <xmit_datablock+0xe0>)
 8008c38:	21ff      	movs	r1, #255	; 0xff
 8008c3a:	f005 fcc2 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008c3e:	4811      	ldr	r0, [pc, #68]	; (8008c84 <xmit_datablock+0xe0>)
 8008c40:	2101      	movs	r1, #1
 8008c42:	f005 fd19 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d0f9      	beq.n	8008c3e <xmit_datablock+0x9a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008c4a:	480e      	ldr	r0, [pc, #56]	; (8008c84 <xmit_datablock+0xe0>)
 8008c4c:	f005 fcbb 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008c50:	480c      	ldr	r0, [pc, #48]	; (8008c84 <xmit_datablock+0xe0>)
 8008c52:	21ff      	movs	r1, #255	; 0xff
 8008c54:	f005 fcb5 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008c58:	480a      	ldr	r0, [pc, #40]	; (8008c84 <xmit_datablock+0xe0>)
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	f005 fd0c 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0f9      	beq.n	8008c58 <xmit_datablock+0xb4>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008c64:	4807      	ldr	r0, [pc, #28]	; (8008c84 <xmit_datablock+0xe0>)
 8008c66:	f005 fcae 	bl	800e5c6 <SPI_I2S_ReceiveData>
#endif /* STM32_SD_USE_DMA */

		xmit_spi(0xFF);					/* CRC (Dummy) */
		xmit_spi(0xFF);
		resp = rcvr_spi();				/* Receive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 8008c6a:	f000 0c1f 	and.w	ip, r0, #31
	BYTE resp;
#ifndef STM32_SD_USE_DMA
	BYTE wc;
#endif

	if (wait_ready() != 0xFF) return FALSE;
 8008c6e:	f1ac 0205 	sub.w	r2, ip, #5
 8008c72:	4251      	negs	r1, r2
 8008c74:	eb41 0002 	adc.w	r0, r1, r2
 8008c78:	bd70      	pop	{r4, r5, r6, pc}
		resp = rcvr_spi();				/* Receive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
 8008c7a:	2001      	movs	r0, #1
}
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	bf00      	nop
 8008c80:	2000072c 	.word	0x2000072c
 8008c84:	40013000 	.word	0x40013000

08008c88 <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
 8008c88:	f010 0f80 	tst.w	r0, #128	; 0x80
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	4605      	mov	r5, r0
 8008c90:	460e      	mov	r6, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
 8008c92:	f040 809d 	bne.w	8008dd0 <send_cmd+0x148>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	DESELECT();
 8008c96:	485b      	ldr	r0, [pc, #364]	; (8008e04 <send_cmd+0x17c>)
 8008c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c9c:	f004 fe69 	bl	800d972 <GPIO_SetBits>
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8008ca0:	4c59      	ldr	r4, [pc, #356]	; (8008e08 <send_cmd+0x180>)
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	DESELECT();
	SELECT();
 8008ca2:	4858      	ldr	r0, [pc, #352]	; (8008e04 <send_cmd+0x17c>)
 8008ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ca8:	f004 fe65 	bl	800d976 <GPIO_ResetBits>
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8008cac:	2332      	movs	r3, #50	; 0x32
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008cae:	4857      	ldr	r0, [pc, #348]	; (8008e0c <send_cmd+0x184>)
 8008cb0:	21ff      	movs	r1, #255	; 0xff
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8008cb2:	6063      	str	r3, [r4, #4]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008cb4:	f005 fc85 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008cb8:	4854      	ldr	r0, [pc, #336]	; (8008e0c <send_cmd+0x184>)
 8008cba:	2101      	movs	r1, #1
 8008cbc:	f005 fcdc 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d0f9      	beq.n	8008cb8 <send_cmd+0x30>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008cc4:	4851      	ldr	r0, [pc, #324]	; (8008e0c <send_cmd+0x184>)
 8008cc6:	f005 fc7e 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008cca:	4850      	ldr	r0, [pc, #320]	; (8008e0c <send_cmd+0x184>)
 8008ccc:	21ff      	movs	r1, #255	; 0xff
 8008cce:	f005 fc78 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008cd2:	484e      	ldr	r0, [pc, #312]	; (8008e0c <send_cmd+0x184>)
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	f005 fccf 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d0f9      	beq.n	8008cd2 <send_cmd+0x4a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008cde:	484b      	ldr	r0, [pc, #300]	; (8008e0c <send_cmd+0x184>)
 8008ce0:	f005 fc71 	bl	800e5c6 <SPI_I2S_ReceiveData>

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
 8008ce4:	b2c0      	uxtb	r0, r0
 8008ce6:	28ff      	cmp	r0, #255	; 0xff
 8008ce8:	d004      	beq.n	8008cf4 <send_cmd+0x6c>
 8008cea:	6861      	ldr	r1, [r4, #4]
 8008cec:	2900      	cmp	r1, #0
 8008cee:	d1ec      	bne.n	8008cca <send_cmd+0x42>

	/* Select the card and wait for ready */
	DESELECT();
	SELECT();
	if (wait_ready() != 0xFF) {
		return 0xFF;
 8008cf0:	20ff      	movs	r0, #255	; 0xff
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008cf4:	4845      	ldr	r0, [pc, #276]	; (8008e0c <send_cmd+0x184>)
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f005 fc63 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008cfc:	4843      	ldr	r0, [pc, #268]	; (8008e0c <send_cmd+0x184>)
 8008cfe:	2101      	movs	r1, #1
 8008d00:	f005 fcba 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0f9      	beq.n	8008cfc <send_cmd+0x74>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008d08:	4840      	ldr	r0, [pc, #256]	; (8008e0c <send_cmd+0x184>)
 8008d0a:	f005 fc5c 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008d0e:	483f      	ldr	r0, [pc, #252]	; (8008e0c <send_cmd+0x184>)
 8008d10:	0e31      	lsrs	r1, r6, #24
 8008d12:	f005 fc56 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008d16:	483d      	ldr	r0, [pc, #244]	; (8008e0c <send_cmd+0x184>)
 8008d18:	2101      	movs	r1, #1
 8008d1a:	f005 fcad 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d0f9      	beq.n	8008d16 <send_cmd+0x8e>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008d22:	483a      	ldr	r0, [pc, #232]	; (8008e0c <send_cmd+0x184>)
 8008d24:	f005 fc4f 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008d28:	4838      	ldr	r0, [pc, #224]	; (8008e0c <send_cmd+0x184>)
 8008d2a:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8008d2e:	f005 fc48 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008d32:	4836      	ldr	r0, [pc, #216]	; (8008e0c <send_cmd+0x184>)
 8008d34:	2101      	movs	r1, #1
 8008d36:	f005 fc9f 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0f9      	beq.n	8008d32 <send_cmd+0xaa>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008d3e:	4833      	ldr	r0, [pc, #204]	; (8008e0c <send_cmd+0x184>)
 8008d40:	f005 fc41 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008d44:	4831      	ldr	r0, [pc, #196]	; (8008e0c <send_cmd+0x184>)
 8008d46:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8008d4a:	f005 fc3a 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008d4e:	482f      	ldr	r0, [pc, #188]	; (8008e0c <send_cmd+0x184>)
 8008d50:	2101      	movs	r1, #1
 8008d52:	f005 fc91 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d0f9      	beq.n	8008d4e <send_cmd+0xc6>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008d5a:	482c      	ldr	r0, [pc, #176]	; (8008e0c <send_cmd+0x184>)
 8008d5c:	f005 fc33 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008d60:	482a      	ldr	r0, [pc, #168]	; (8008e0c <send_cmd+0x184>)
 8008d62:	b2f1      	uxtb	r1, r6
 8008d64:	f005 fc2d 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008d68:	4828      	ldr	r0, [pc, #160]	; (8008e0c <send_cmd+0x184>)
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	f005 fc84 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0f9      	beq.n	8008d68 <send_cmd+0xe0>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008d74:	4825      	ldr	r0, [pc, #148]	; (8008e0c <send_cmd+0x184>)
 8008d76:	f005 fc26 	bl	800e5c6 <SPI_I2S_ReceiveData>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008d7a:	2d40      	cmp	r5, #64	; 0x40
 8008d7c:	d031      	beq.n	8008de2 <send_cmd+0x15a>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
 8008d7e:	2d48      	cmp	r5, #72	; 0x48
 8008d80:	bf0c      	ite	eq
 8008d82:	2187      	moveq	r1, #135	; 0x87
 8008d84:	2101      	movne	r1, #1
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008d86:	4821      	ldr	r0, [pc, #132]	; (8008e0c <send_cmd+0x184>)
 8008d88:	f005 fc1b 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008d8c:	481f      	ldr	r0, [pc, #124]	; (8008e0c <send_cmd+0x184>)
 8008d8e:	2101      	movs	r1, #1
 8008d90:	f005 fc72 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d0f9      	beq.n	8008d8c <send_cmd+0x104>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008d98:	481c      	ldr	r0, [pc, #112]	; (8008e0c <send_cmd+0x184>)
 8008d9a:	f005 fc14 	bl	800e5c6 <SPI_I2S_ReceiveData>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 8008d9e:	2d4c      	cmp	r5, #76	; 0x4c
 8008da0:	d021      	beq.n	8008de6 <send_cmd+0x15e>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008da2:	240a      	movs	r4, #10
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008da4:	4819      	ldr	r0, [pc, #100]	; (8008e0c <send_cmd+0x184>)
 8008da6:	21ff      	movs	r1, #255	; 0xff
 8008da8:	f005 fc0b 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008dac:	4817      	ldr	r0, [pc, #92]	; (8008e0c <send_cmd+0x184>)
 8008dae:	2101      	movs	r1, #1
 8008db0:	f005 fc62 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d0f9      	beq.n	8008dac <send_cmd+0x124>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008db8:	4814      	ldr	r0, [pc, #80]	; (8008e0c <send_cmd+0x184>)
 8008dba:	f005 fc04 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8008dbe:	b2c0      	uxtb	r0, r0
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */

	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
 8008dc0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008dc4:	d003      	beq.n	8008dce <send_cmd+0x146>
 8008dc6:	3c01      	subs	r4, #1
 8008dc8:	b2e4      	uxtb	r4, r4
 8008dca:	2c00      	cmp	r4, #0
 8008dcc:	d1ea      	bne.n	8008da4 <send_cmd+0x11c>

	return res;			/* Return with the response value */
}
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8008dd0:	2077      	movs	r0, #119	; 0x77
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f7ff ff58 	bl	8008c88 <send_cmd>
		if (res > 1) return res;
 8008dd8:	2801      	cmp	r0, #1
 8008dda:	d8f8      	bhi.n	8008dce <send_cmd+0x146>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
		cmd &= 0x7F;
 8008ddc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8008de0:	e759      	b.n	8008c96 <send_cmd+0xe>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008de2:	2195      	movs	r1, #149	; 0x95
 8008de4:	e7cf      	b.n	8008d86 <send_cmd+0xfe>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008de6:	4809      	ldr	r0, [pc, #36]	; (8008e0c <send_cmd+0x184>)
 8008de8:	21ff      	movs	r1, #255	; 0xff
 8008dea:	f005 fbea 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008dee:	4807      	ldr	r0, [pc, #28]	; (8008e0c <send_cmd+0x184>)
 8008df0:	2101      	movs	r1, #1
 8008df2:	f005 fc41 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d0f9      	beq.n	8008dee <send_cmd+0x166>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008dfa:	4804      	ldr	r0, [pc, #16]	; (8008e0c <send_cmd+0x184>)
 8008dfc:	f005 fbe3 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8008e00:	e7cf      	b.n	8008da2 <send_cmd+0x11a>
 8008e02:	bf00      	nop
 8008e04:	40010c00 	.word	0x40010c00
 8008e08:	2000072c 	.word	0x2000072c
 8008e0c:	40013000 	.word	0x40013000

08008e10 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	b083      	sub	sp, #12
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d14d      	bne.n	8008eb4 <disk_initialize+0xa4>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8008e18:	4d64      	ldr	r5, [pc, #400]	; (8008fac <disk_initialize+0x19c>)
 8008e1a:	782b      	ldrb	r3, [r5, #0]
 8008e1c:	f013 0f02 	tst.w	r3, #2
 8008e20:	d002      	beq.n	8008e28 <disk_initialize+0x18>
#else
	if (ty) 			/* Initialization succeeded */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT */
	interface_speed(INTERFACE_FAST);
#endif
	return Stat;
 8008e22:	7828      	ldrb	r0, [r5, #0]
}
 8008e24:	b003      	add	sp, #12
 8008e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on and initialize interface */
 8008e28:	f7ff fdd6 	bl	80089d8 <power_on>

static void interface_speed( enum speed_setting speed )
{
	DWORD tmp;

	tmp = SPI_SD->CR1;
 8008e2c:	4860      	ldr	r0, [pc, #384]	; (8008fb0 <disk_initialize+0x1a0>)
		tmp = ( tmp | SPI_BaudRatePrescaler_256 );
	} else {
		/* Set fast clock (depends on the CSD) */
		tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_SPI_SD;
	}
	SPI_SD->CR1 = tmp;
 8008e2e:	240a      	movs	r4, #10

static void interface_speed( enum speed_setting speed )
{
	DWORD tmp;

	tmp = SPI_SD->CR1;
 8008e30:	8806      	ldrh	r6, [r0, #0]
 8008e32:	b2b1      	uxth	r1, r6
		tmp = ( tmp | SPI_BaudRatePrescaler_256 );
	} else {
		/* Set fast clock (depends on the CSD) */
		tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_SPI_SD;
	}
	SPI_SD->CR1 = tmp;
 8008e34:	f041 0238 	orr.w	r2, r1, #56	; 0x38
 8008e38:	8002      	strh	r2, [r0, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008e3a:	485d      	ldr	r0, [pc, #372]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e3c:	21ff      	movs	r1, #255	; 0xff
 8008e3e:	f005 fbc0 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008e42:	485b      	ldr	r0, [pc, #364]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e44:	2101      	movs	r1, #1
 8008e46:	f005 fc17 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d0f9      	beq.n	8008e42 <disk_initialize+0x32>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008e4e:	3c01      	subs	r4, #1
 8008e50:	4857      	ldr	r0, [pc, #348]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e52:	b2e4      	uxtb	r4, r4
 8008e54:	f005 fbb7 	bl	800e5c6 <SPI_I2S_ReceiveData>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on and initialize interface */

	interface_speed(INTERFACE_SLOW);
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 8008e58:	2c00      	cmp	r4, #0
 8008e5a:	d1ee      	bne.n	8008e3a <disk_initialize+0x2a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8008e5c:	2040      	movs	r0, #64	; 0x40
 8008e5e:	4621      	mov	r1, r4
 8008e60:	f7ff ff12 	bl	8008c88 <send_cmd>
 8008e64:	2801      	cmp	r0, #1
 8008e66:	d027      	beq.n	8008eb8 <disk_initialize+0xa8>
 8008e68:	4e52      	ldr	r6, [pc, #328]	; (8008fb4 <disk_initialize+0x1a4>)
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 8008e6a:	4853      	ldr	r0, [pc, #332]	; (8008fb8 <disk_initialize+0x1a8>)
 8008e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
 8008e70:	7234      	strb	r4, [r6, #8]
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 8008e72:	f004 fd7e 	bl	800d972 <GPIO_SetBits>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008e76:	484e      	ldr	r0, [pc, #312]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e78:	21ff      	movs	r1, #255	; 0xff
 8008e7a:	f005 fba2 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008e7e:	484c      	ldr	r0, [pc, #304]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e80:	2101      	movs	r1, #1
 8008e82:	f005 fbf9 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d0f9      	beq.n	8008e7e <disk_initialize+0x6e>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008e8a:	4849      	ldr	r0, [pc, #292]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e8c:	f005 fb9b 	bl	800e5c6 <SPI_I2S_ReceiveData>
		interface_speed(INTERFACE_FAST);
	} else {			/* Initialization failed */
		power_off_();
	}
#else
	if (ty) 			/* Initialization succeeded */
 8008e90:	b124      	cbz	r4, 8008e9c <disk_initialize+0x8c>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT */
 8008e92:	f895 c000 	ldrb.w	ip, [r5]
 8008e96:	f00c 01fe 	and.w	r1, ip, #254	; 0xfe
 8008e9a:	7029      	strb	r1, [r5, #0]

static void interface_speed( enum speed_setting speed )
{
	DWORD tmp;

	tmp = SPI_SD->CR1;
 8008e9c:	4a44      	ldr	r2, [pc, #272]	; (8008fb0 <disk_initialize+0x1a0>)
 8008e9e:	f8b2 c000 	ldrh.w	ip, [r2]
	if ( speed == INTERFACE_SLOW ) {
		/* Set slow clock (100k-400k) */
		tmp = ( tmp | SPI_BaudRatePrescaler_256 );
	} else {
		/* Set fast clock (depends on the CSD) */
		tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_SPI_SD;
 8008ea2:	f02c 0138 	bic.w	r1, ip, #56	; 0x38
 8008ea6:	040b      	lsls	r3, r1, #16
 8008ea8:	0c18      	lsrs	r0, r3, #16
	}
	SPI_SD->CR1 = tmp;
 8008eaa:	f040 0e08 	orr.w	lr, r0, #8
 8008eae:	f8a2 e000 	strh.w	lr, [r2]
 8008eb2:	e7b6      	b.n	8008e22 <disk_initialize+0x12>
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	e7b5      	b.n	8008e24 <disk_initialize+0x14>
	interface_speed(INTERFACE_SLOW);
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 milliseconds */
 8008eb8:	4e3e      	ldr	r6, [pc, #248]	; (8008fb4 <disk_initialize+0x1a4>)
 8008eba:	2764      	movs	r7, #100	; 0x64
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
 8008ebc:	2048      	movs	r0, #72	; 0x48
 8008ebe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
	interface_speed(INTERFACE_SLOW);
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 milliseconds */
 8008ec2:	6037      	str	r7, [r6, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
 8008ec4:	f7ff fee0 	bl	8008c88 <send_cmd>
 8008ec8:	2801      	cmp	r0, #1
 8008eca:	d14f      	bne.n	8008f6c <disk_initialize+0x15c>
 8008ecc:	f10d 0403 	add.w	r4, sp, #3

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
 8008ed0:	f10d 0707 	add.w	r7, sp, #7
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008ed4:	4836      	ldr	r0, [pc, #216]	; (8008fb0 <disk_initialize+0x1a0>)
 8008ed6:	21ff      	movs	r1, #255	; 0xff
 8008ed8:	f005 fb73 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008edc:	4834      	ldr	r0, [pc, #208]	; (8008fb0 <disk_initialize+0x1a0>)
 8008ede:	2101      	movs	r1, #1
 8008ee0:	f005 fbca 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d0f9      	beq.n	8008edc <disk_initialize+0xcc>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008ee8:	4831      	ldr	r0, [pc, #196]	; (8008fb0 <disk_initialize+0x1a0>)
 8008eea:	f005 fb6c 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8008eee:	f804 0f01 	strb.w	r0, [r4, #1]!

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 milliseconds */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 response */
 8008ef2:	42bc      	cmp	r4, r7
 8008ef4:	d1ee      	bne.n	8008ed4 <disk_initialize+0xc4>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at VDD range of 2.7-3.6V */
 8008ef6:	f89d c006 	ldrb.w	ip, [sp, #6]
 8008efa:	f1bc 0f01 	cmp.w	ip, #1
 8008efe:	d001      	beq.n	8008f04 <disk_initialize+0xf4>
	power_on();							/* Force socket power on and initialize interface */

	interface_speed(INTERFACE_SLOW);
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
 8008f00:	2400      	movs	r4, #0
 8008f02:	e7b2      	b.n	8008e6a <disk_initialize+0x5a>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 milliseconds */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 response */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at VDD range of 2.7-3.6V */
 8008f04:	f89d e007 	ldrb.w	lr, [sp, #7]
 8008f08:	f1be 0faa 	cmp.w	lr, #170	; 0xaa
 8008f0c:	d1f8      	bne.n	8008f00 <disk_initialize+0xf0>
 8008f0e:	e002      	b.n	8008f16 <disk_initialize+0x106>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8008f10:	f7ff feba 	bl	8008c88 <send_cmd>
 8008f14:	b128      	cbz	r0, 8008f22 <disk_initialize+0x112>
 8008f16:	6833      	ldr	r3, [r6, #0]
 8008f18:	20e9      	movs	r0, #233	; 0xe9
 8008f1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f6      	bne.n	8008f10 <disk_initialize+0x100>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008f22:	6834      	ldr	r4, [r6, #0]
 8008f24:	2c00      	cmp	r4, #0
 8008f26:	d0a0      	beq.n	8008e6a <disk_initialize+0x5a>
 8008f28:	207a      	movs	r0, #122	; 0x7a
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f7ff feac 	bl	8008c88 <send_cmd>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d1e5      	bne.n	8008f00 <disk_initialize+0xf0>
 8008f34:	4604      	mov	r4, r0
 8008f36:	af01      	add	r7, sp, #4
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8008f38:	481d      	ldr	r0, [pc, #116]	; (8008fb0 <disk_initialize+0x1a0>)
 8008f3a:	21ff      	movs	r1, #255	; 0xff
 8008f3c:	f005 fb41 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8008f40:	481b      	ldr	r0, [pc, #108]	; (8008fb0 <disk_initialize+0x1a0>)
 8008f42:	2101      	movs	r1, #1
 8008f44:	f005 fb98 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d0f9      	beq.n	8008f40 <disk_initialize+0x130>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8008f4c:	4818      	ldr	r0, [pc, #96]	; (8008fb0 <disk_initialize+0x1a0>)
 8008f4e:	f005 fb3a 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8008f52:	5538      	strb	r0, [r7, r4]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 response */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at VDD range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8008f54:	3401      	adds	r4, #1
 8008f56:	2c04      	cmp	r4, #4
 8008f58:	d1ee      	bne.n	8008f38 <disk_initialize+0x128>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8008f5a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008f5e:	f000 0240 	and.w	r2, r0, #64	; 0x40
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	bf0c      	ite	eq
 8008f66:	2404      	moveq	r4, #4
 8008f68:	240c      	movne	r4, #12
 8008f6a:	e77e      	b.n	8008e6a <disk_initialize+0x5a>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8008f6c:	20e9      	movs	r0, #233	; 0xe9
 8008f6e:	4621      	mov	r1, r4
 8008f70:	f7ff fe8a 	bl	8008c88 <send_cmd>
				ty = CT_SD1; cmd = ACMD41;	/* SDSC */
 8008f74:	2801      	cmp	r0, #1
 8008f76:	bf8c      	ite	hi
 8008f78:	2401      	movhi	r4, #1
 8008f7a:	2402      	movls	r4, #2
 8008f7c:	bf8c      	ite	hi
 8008f7e:	2741      	movhi	r7, #65	; 0x41
 8008f80:	27e9      	movls	r7, #233	; 0xe9
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMC */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 8008f82:	6833      	ldr	r3, [r6, #0]
 8008f84:	4638      	mov	r0, r7
 8008f86:	2100      	movs	r1, #0
 8008f88:	b11b      	cbz	r3, 8008f92 <disk_initialize+0x182>
 8008f8a:	f7ff fe7d 	bl	8008c88 <send_cmd>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1f7      	bne.n	8008f82 <disk_initialize+0x172>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8008f92:	6833      	ldr	r3, [r6, #0]
 8008f94:	b90b      	cbnz	r3, 8008f9a <disk_initialize+0x18a>
				ty = 0;
 8008f96:	461c      	mov	r4, r3
 8008f98:	e767      	b.n	8008e6a <disk_initialize+0x5a>
				ty = CT_SD1; cmd = ACMD41;	/* SDSC */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMC */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8008f9a:	2050      	movs	r0, #80	; 0x50
 8008f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fa0:	f7ff fe72 	bl	8008c88 <send_cmd>
				ty = 0;
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	bf18      	it	ne
 8008fa8:	2400      	movne	r4, #0
 8008faa:	e75e      	b.n	8008e6a <disk_initialize+0x5a>
 8008fac:	2000015d 	.word	0x2000015d
 8008fb0:	40013000 	.word	0x40013000
 8008fb4:	2000072c 	.word	0x2000072c
 8008fb8:	40010c00 	.word	0x40010c00

08008fbc <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 8008fbc:	b910      	cbnz	r0, 8008fc4 <disk_status+0x8>
	return Stat;
 8008fbe:	4b02      	ldr	r3, [pc, #8]	; (8008fc8 <disk_status+0xc>)
 8008fc0:	7818      	ldrb	r0, [r3, #0]
 8008fc2:	4770      	bx	lr

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 8008fc4:	2001      	movs	r0, #1
	return Stat;
}
 8008fc6:	4770      	bx	lr
 8008fc8:	2000015d 	.word	0x2000015d

08008fcc <disk_read>:
	BYTE drv,			/* Physical drive number (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	460c      	mov	r4, r1
 8008fd0:	461e      	mov	r6, r3
	if (drv || !count) return RES_PARERR;
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d142      	bne.n	800905c <disk_read+0x90>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d040      	beq.n	800905c <disk_read+0x90>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008fda:	4857      	ldr	r0, [pc, #348]	; (8009138 <disk_read+0x16c>)
 8008fdc:	7803      	ldrb	r3, [r0, #0]
 8008fde:	f013 0f01 	tst.w	r3, #1
 8008fe2:	d166      	bne.n	80090b2 <disk_read+0xe6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8008fe4:	4d55      	ldr	r5, [pc, #340]	; (800913c <disk_read+0x170>)
 8008fe6:	7a29      	ldrb	r1, [r5, #8]
 8008fe8:	f011 0f08 	tst.w	r1, #8
 8008fec:	bf08      	it	eq
 8008fee:	0252      	lsleq	r2, r2, #9

	if (count == 1) {	/* Single block read */
 8008ff0:	2e01      	cmp	r6, #1
 8008ff2:	d060      	beq.n	80090b6 <disk_read+0xea>
				count = 0;
			}
		}
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008ff4:	2052      	movs	r0, #82	; 0x52
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	f7ff fe46 	bl	8008c88 <send_cmd>
 8008ffc:	b9c0      	cbnz	r0, 8009030 <disk_read+0x64>
)
{
	BYTE token;


	Timer1 = 10;
 8008ffe:	200a      	movs	r0, #10
 8009000:	6028      	str	r0, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009002:	484f      	ldr	r0, [pc, #316]	; (8009140 <disk_read+0x174>)
 8009004:	21ff      	movs	r1, #255	; 0xff
 8009006:	f005 fadc 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800900a:	484d      	ldr	r0, [pc, #308]	; (8009140 <disk_read+0x174>)
 800900c:	2101      	movs	r1, #1
 800900e:	f005 fb33 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009012:	2800      	cmp	r0, #0
 8009014:	d0f9      	beq.n	800900a <disk_read+0x3e>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009016:	484a      	ldr	r0, [pc, #296]	; (8009140 <disk_read+0x174>)
 8009018:	f005 fad5 	bl	800e5c6 <SPI_I2S_ReceiveData>
 800901c:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 800901e:	28ff      	cmp	r0, #255	; 0xff
 8009020:	d11e      	bne.n	8009060 <disk_read+0x94>
 8009022:	6829      	ldr	r1, [r5, #0]
 8009024:	2900      	cmp	r1, #0
 8009026:	d1ec      	bne.n	8009002 <disk_read+0x36>
				if (!rcvr_datablock(buff, 512)) {
					break;
				}
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009028:	204c      	movs	r0, #76	; 0x4c
 800902a:	2100      	movs	r1, #0
 800902c:	f7ff fe2c 	bl	8008c88 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 8009030:	4844      	ldr	r0, [pc, #272]	; (8009144 <disk_read+0x178>)
 8009032:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009036:	f004 fc9c 	bl	800d972 <GPIO_SetBits>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800903a:	4841      	ldr	r0, [pc, #260]	; (8009140 <disk_read+0x174>)
 800903c:	21ff      	movs	r1, #255	; 0xff
 800903e:	f005 fac0 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009042:	483f      	ldr	r0, [pc, #252]	; (8009140 <disk_read+0x174>)
 8009044:	2101      	movs	r1, #1
 8009046:	f005 fb17 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800904a:	2800      	cmp	r0, #0
 800904c:	d0f9      	beq.n	8009042 <disk_read+0x76>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800904e:	483c      	ldr	r0, [pc, #240]	; (8009140 <disk_read+0x174>)
 8009050:	f005 fab9 	bl	800e5c6 <SPI_I2S_ReceiveData>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
 8009054:	1e30      	subs	r0, r6, #0
 8009056:	bf18      	it	ne
 8009058:	2001      	movne	r0, #1
 800905a:	bd70      	pop	{r4, r5, r6, pc}
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
 800905c:	2004      	movs	r0, #4
 800905e:	bd70      	pop	{r4, r5, r6, pc}

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 8009060:	28fe      	cmp	r0, #254	; 0xfe
 8009062:	d1e1      	bne.n	8009028 <disk_read+0x5c>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 8009064:	2001      	movs	r0, #1
 8009066:	4621      	mov	r1, r4
 8009068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800906c:	f7ff fd2c 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009070:	4833      	ldr	r0, [pc, #204]	; (8009140 <disk_read+0x174>)
 8009072:	21ff      	movs	r1, #255	; 0xff
 8009074:	f005 faa5 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009078:	4831      	ldr	r0, [pc, #196]	; (8009140 <disk_read+0x174>)
 800907a:	2101      	movs	r1, #1
 800907c:	f005 fafc 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009080:	2800      	cmp	r0, #0
 8009082:	d0f9      	beq.n	8009078 <disk_read+0xac>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009084:	482e      	ldr	r0, [pc, #184]	; (8009140 <disk_read+0x174>)
 8009086:	f005 fa9e 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800908a:	482d      	ldr	r0, [pc, #180]	; (8009140 <disk_read+0x174>)
 800908c:	21ff      	movs	r1, #255	; 0xff
 800908e:	f005 fa98 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009092:	482b      	ldr	r0, [pc, #172]	; (8009140 <disk_read+0x174>)
 8009094:	2101      	movs	r1, #1
 8009096:	f005 faef 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800909a:	2800      	cmp	r0, #0
 800909c:	d0f9      	beq.n	8009092 <disk_read+0xc6>
			do {
				if (!rcvr_datablock(buff, 512)) {
					break;
				}
				buff += 512;
			} while (--count);
 800909e:	3e01      	subs	r6, #1

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80090a0:	4827      	ldr	r0, [pc, #156]	; (8009140 <disk_read+0x174>)
			do {
				if (!rcvr_datablock(buff, 512)) {
					break;
				}
				buff += 512;
			} while (--count);
 80090a2:	b2f6      	uxtb	r6, r6

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80090a4:	f005 fa8f 	bl	800e5c6 <SPI_I2S_ReceiveData>
			do {
				if (!rcvr_datablock(buff, 512)) {
					break;
				}
				buff += 512;
			} while (--count);
 80090a8:	2e00      	cmp	r6, #0
 80090aa:	d0bd      	beq.n	8009028 <disk_read+0x5c>
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) {
					break;
				}
				buff += 512;
 80090ac:	f504 7400 	add.w	r4, r4, #512	; 0x200
 80090b0:	e7a5      	b.n	8008ffe <disk_read+0x32>
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80090b2:	2003      	movs	r0, #3
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
}
 80090b4:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if (send_cmd(CMD17, sector) == 0)	{ /* READ_SINGLE_BLOCK */
 80090b6:	2051      	movs	r0, #81	; 0x51
 80090b8:	4611      	mov	r1, r2
 80090ba:	f7ff fde5 	bl	8008c88 <send_cmd>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d1b6      	bne.n	8009030 <disk_read+0x64>
)
{
	BYTE token;


	Timer1 = 10;
 80090c2:	220a      	movs	r2, #10
 80090c4:	602a      	str	r2, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80090c6:	481e      	ldr	r0, [pc, #120]	; (8009140 <disk_read+0x174>)
 80090c8:	21ff      	movs	r1, #255	; 0xff
 80090ca:	f005 fa7a 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80090ce:	481c      	ldr	r0, [pc, #112]	; (8009140 <disk_read+0x174>)
 80090d0:	2101      	movs	r1, #1
 80090d2:	f005 fad1 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d0f9      	beq.n	80090ce <disk_read+0x102>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80090da:	4819      	ldr	r0, [pc, #100]	; (8009140 <disk_read+0x174>)
 80090dc:	f005 fa73 	bl	800e5c6 <SPI_I2S_ReceiveData>
 80090e0:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 80090e2:	28ff      	cmp	r0, #255	; 0xff
 80090e4:	d103      	bne.n	80090ee <disk_read+0x122>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1ec      	bne.n	80090c6 <disk_read+0xfa>
 80090ec:	e7a0      	b.n	8009030 <disk_read+0x64>
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 80090ee:	28fe      	cmp	r0, #254	; 0xfe
 80090f0:	d19e      	bne.n	8009030 <disk_read+0x64>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 80090f2:	38fd      	subs	r0, #253	; 0xfd
 80090f4:	4621      	mov	r1, r4
 80090f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090fa:	f7ff fce5 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80090fe:	4810      	ldr	r0, [pc, #64]	; (8009140 <disk_read+0x174>)
 8009100:	21ff      	movs	r1, #255	; 0xff
 8009102:	f005 fa5e 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009106:	480e      	ldr	r0, [pc, #56]	; (8009140 <disk_read+0x174>)
 8009108:	2101      	movs	r1, #1
 800910a:	f005 fab5 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800910e:	2800      	cmp	r0, #0
 8009110:	d0f9      	beq.n	8009106 <disk_read+0x13a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009112:	480b      	ldr	r0, [pc, #44]	; (8009140 <disk_read+0x174>)
 8009114:	f005 fa57 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009118:	4809      	ldr	r0, [pc, #36]	; (8009140 <disk_read+0x174>)
 800911a:	21ff      	movs	r1, #255	; 0xff
 800911c:	f005 fa51 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009120:	4807      	ldr	r0, [pc, #28]	; (8009140 <disk_read+0x174>)
 8009122:	2101      	movs	r1, #1
 8009124:	f005 faa8 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009128:	2800      	cmp	r0, #0
 800912a:	d0f9      	beq.n	8009120 <disk_read+0x154>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800912c:	4804      	ldr	r0, [pc, #16]	; (8009140 <disk_read+0x174>)
 800912e:	f005 fa4a 	bl	800e5c6 <SPI_I2S_ReceiveData>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if (send_cmd(CMD17, sector) == 0)	{ /* READ_SINGLE_BLOCK */
			if (rcvr_datablock(buff, 512)) {
				count = 0;
 8009132:	2600      	movs	r6, #0
 8009134:	e77c      	b.n	8009030 <disk_read+0x64>
 8009136:	bf00      	nop
 8009138:	2000015d 	.word	0x2000015d
 800913c:	2000072c 	.word	0x2000072c
 8009140:	40013000 	.word	0x40013000
 8009144:	40010c00 	.word	0x40010c00

08009148 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
 8009148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	b083      	sub	sp, #12
 800914e:	461e      	mov	r6, r3
	if (drv || !count) return RES_PARERR;
 8009150:	2800      	cmp	r0, #0
 8009152:	d133      	bne.n	80091bc <disk_write+0x74>
 8009154:	2b00      	cmp	r3, #0
 8009156:	d031      	beq.n	80091bc <disk_write+0x74>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009158:	4b5f      	ldr	r3, [pc, #380]	; (80092d8 <disk_write+0x190>)
 800915a:	7819      	ldrb	r1, [r3, #0]
 800915c:	f011 0f01 	tst.w	r1, #1
 8009160:	f040 80a1 	bne.w	80092a6 <disk_write+0x15e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f013 0f04 	tst.w	r3, #4
 800916a:	d12a      	bne.n	80091c2 <disk_write+0x7a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 800916c:	4d5b      	ldr	r5, [pc, #364]	; (80092dc <disk_write+0x194>)
 800916e:	7a2b      	ldrb	r3, [r5, #8]
 8009170:	f013 0f08 	tst.w	r3, #8
 8009174:	bf08      	it	eq
 8009176:	0252      	lsleq	r2, r2, #9

	if (count == 1) {	/* Single block write */
 8009178:	2e01      	cmp	r6, #1
 800917a:	f000 809d 	beq.w	80092b8 <disk_write+0x170>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 800917e:	f013 0f06 	tst.w	r3, #6
 8009182:	f040 8092 	bne.w	80092aa <disk_write+0x162>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009186:	2059      	movs	r0, #89	; 0x59
 8009188:	4611      	mov	r1, r2
 800918a:	f7ff fd7d 	bl	8008c88 <send_cmd>
 800918e:	b1d0      	cbz	r0, 80091c6 <disk_write+0x7e>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 8009190:	4853      	ldr	r0, [pc, #332]	; (80092e0 <disk_write+0x198>)
 8009192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009196:	f004 fbec 	bl	800d972 <GPIO_SetBits>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800919a:	4852      	ldr	r0, [pc, #328]	; (80092e4 <disk_write+0x19c>)
 800919c:	21ff      	movs	r1, #255	; 0xff
 800919e:	f005 fa10 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80091a2:	4850      	ldr	r0, [pc, #320]	; (80092e4 <disk_write+0x19c>)
 80091a4:	2101      	movs	r1, #1
 80091a6:	f005 fa67 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d0f9      	beq.n	80091a2 <disk_write+0x5a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80091ae:	484d      	ldr	r0, [pc, #308]	; (80092e4 <disk_write+0x19c>)
 80091b0:	f005 fa09 	bl	800e5c6 <SPI_I2S_ReceiveData>
				count = 1;
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
 80091b4:	1e30      	subs	r0, r6, #0
 80091b6:	bf18      	it	ne
 80091b8:	2001      	movne	r0, #1
 80091ba:	e000      	b.n	80091be <disk_write+0x76>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
 80091bc:	2004      	movs	r0, #4
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
}
 80091be:	b003      	add	sp, #12
 80091c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80091c2:	2002      	movs	r0, #2
 80091c4:	e7fb      	b.n	80091be <disk_write+0x76>
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 80091c6:	2732      	movs	r7, #50	; 0x32
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80091c8:	4846      	ldr	r0, [pc, #280]	; (80092e4 <disk_write+0x19c>)
 80091ca:	21ff      	movs	r1, #255	; 0xff
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 80091cc:	606f      	str	r7, [r5, #4]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80091ce:	f005 f9f8 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80091d2:	4844      	ldr	r0, [pc, #272]	; (80092e4 <disk_write+0x19c>)
 80091d4:	2101      	movs	r1, #1
 80091d6:	f005 fa4f 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0f9      	beq.n	80091d2 <disk_write+0x8a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80091de:	4841      	ldr	r0, [pc, #260]	; (80092e4 <disk_write+0x19c>)
 80091e0:	f005 f9f1 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80091e4:	483f      	ldr	r0, [pc, #252]	; (80092e4 <disk_write+0x19c>)
 80091e6:	21ff      	movs	r1, #255	; 0xff
 80091e8:	f005 f9eb 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80091ec:	483d      	ldr	r0, [pc, #244]	; (80092e4 <disk_write+0x19c>)
 80091ee:	2101      	movs	r1, #1
 80091f0:	f005 fa42 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d0f9      	beq.n	80091ec <disk_write+0xa4>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80091f8:	483a      	ldr	r0, [pc, #232]	; (80092e4 <disk_write+0x19c>)
 80091fa:	f005 f9e4 	bl	800e5c6 <SPI_I2S_ReceiveData>

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
 80091fe:	b2c0      	uxtb	r0, r0
 8009200:	28ff      	cmp	r0, #255	; 0xff
 8009202:	d00a      	beq.n	800921a <disk_write+0xd2>
 8009204:	686a      	ldr	r2, [r5, #4]
 8009206:	2a00      	cmp	r2, #0
 8009208:	d1ec      	bne.n	80091e4 <disk_write+0x9c>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 800920a:	2000      	movs	r0, #0
 800920c:	21fd      	movs	r1, #253	; 0xfd
 800920e:	f7ff fcc9 	bl	8008ba4 <xmit_datablock>
				count = 1;
 8009212:	2800      	cmp	r0, #0
 8009214:	bf08      	it	eq
 8009216:	2601      	moveq	r6, #1
 8009218:	e7ba      	b.n	8009190 <disk_write+0x48>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800921a:	4832      	ldr	r0, [pc, #200]	; (80092e4 <disk_write+0x19c>)
 800921c:	21fc      	movs	r1, #252	; 0xfc
 800921e:	f005 f9d0 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009222:	4830      	ldr	r0, [pc, #192]	; (80092e4 <disk_write+0x19c>)
 8009224:	2101      	movs	r1, #1
 8009226:	f005 fa27 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800922a:	2800      	cmp	r0, #0
 800922c:	d0f9      	beq.n	8009222 <disk_write+0xda>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800922e:	482d      	ldr	r0, [pc, #180]	; (80092e4 <disk_write+0x19c>)
 8009230:	f005 f9c9 	bl	800e5c6 <SPI_I2S_ReceiveData>

	xmit_spi(token);					/* transmit data token */
	if (token != 0xFD) {	/* Is data token */

#ifdef STM32_SD_USE_DMA
		stm32_dma_transfer( FALSE, buff, 512 );
 8009234:	2000      	movs	r0, #0
 8009236:	4621      	mov	r1, r4
 8009238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800923c:	f7ff fc44 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009240:	4828      	ldr	r0, [pc, #160]	; (80092e4 <disk_write+0x19c>)
 8009242:	21ff      	movs	r1, #255	; 0xff
 8009244:	f005 f9bd 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009248:	4826      	ldr	r0, [pc, #152]	; (80092e4 <disk_write+0x19c>)
 800924a:	2101      	movs	r1, #1
 800924c:	f005 fa14 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009250:	2800      	cmp	r0, #0
 8009252:	d0f9      	beq.n	8009248 <disk_write+0x100>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009254:	4823      	ldr	r0, [pc, #140]	; (80092e4 <disk_write+0x19c>)
 8009256:	f005 f9b6 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800925a:	4822      	ldr	r0, [pc, #136]	; (80092e4 <disk_write+0x19c>)
 800925c:	21ff      	movs	r1, #255	; 0xff
 800925e:	f005 f9b0 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009262:	4820      	ldr	r0, [pc, #128]	; (80092e4 <disk_write+0x19c>)
 8009264:	2101      	movs	r1, #1
 8009266:	f005 fa07 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800926a:	2800      	cmp	r0, #0
 800926c:	d0f9      	beq.n	8009262 <disk_write+0x11a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800926e:	481d      	ldr	r0, [pc, #116]	; (80092e4 <disk_write+0x19c>)
 8009270:	f005 f9a9 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009274:	481b      	ldr	r0, [pc, #108]	; (80092e4 <disk_write+0x19c>)
 8009276:	21ff      	movs	r1, #255	; 0xff
 8009278:	f005 f9a3 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800927c:	4819      	ldr	r0, [pc, #100]	; (80092e4 <disk_write+0x19c>)
 800927e:	2101      	movs	r1, #1
 8009280:	f005 f9fa 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009284:	2800      	cmp	r0, #0
 8009286:	d0f9      	beq.n	800927c <disk_write+0x134>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009288:	4816      	ldr	r0, [pc, #88]	; (80092e4 <disk_write+0x19c>)
 800928a:	f005 f99c 	bl	800e5c6 <SPI_I2S_ReceiveData>
#endif /* STM32_SD_USE_DMA */

		xmit_spi(0xFF);					/* CRC (Dummy) */
		xmit_spi(0xFF);
		resp = rcvr_spi();				/* Receive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 800928e:	f000 0c1f 	and.w	ip, r0, #31
 8009292:	f1bc 0f05 	cmp.w	ip, #5
 8009296:	d1b8      	bne.n	800920a <disk_write+0xc2>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
 8009298:	3e01      	subs	r6, #1
 800929a:	b2f6      	uxtb	r6, r6
 800929c:	2e00      	cmp	r6, #0
 800929e:	d0b4      	beq.n	800920a <disk_write+0xc2>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
 80092a0:	f504 7400 	add.w	r4, r4, #512	; 0x200
 80092a4:	e790      	b.n	80091c8 <disk_write+0x80>
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80092a6:	2003      	movs	r0, #3
 80092a8:	e789      	b.n	80091be <disk_write+0x76>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 80092aa:	20d7      	movs	r0, #215	; 0xd7
 80092ac:	4631      	mov	r1, r6
 80092ae:	9201      	str	r2, [sp, #4]
 80092b0:	f7ff fcea 	bl	8008c88 <send_cmd>
 80092b4:	9a01      	ldr	r2, [sp, #4]
 80092b6:	e766      	b.n	8009186 <disk_write+0x3e>
	if (Stat & STA_PROTECT) return RES_WRPRT;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80092b8:	2058      	movs	r0, #88	; 0x58
 80092ba:	4611      	mov	r1, r2
 80092bc:	f7ff fce4 	bl	8008c88 <send_cmd>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	f47f af65 	bne.w	8009190 <disk_write+0x48>
			&& xmit_datablock(buff, 0xFE))
 80092c6:	21fe      	movs	r1, #254	; 0xfe
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff fc6b 	bl	8008ba4 <xmit_datablock>
			count = 0;
 80092ce:	f1d0 0601 	rsbs	r6, r0, #1
 80092d2:	bf38      	it	cc
 80092d4:	2600      	movcc	r6, #0
 80092d6:	e75b      	b.n	8009190 <disk_write+0x48>
 80092d8:	2000015d 	.word	0x2000015d
 80092dc:	2000072c 	.word	0x2000072c
 80092e0:	40010c00 	.word	0x40010c00
 80092e4:	40013000 	.word	0x40013000

080092e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	4614      	mov	r4, r2
 80092ec:	b088      	sub	sp, #32
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;
 80092ee:	b9d0      	cbnz	r0, 8009326 <disk_ioctl+0x3e>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
 80092f0:	2905      	cmp	r1, #5
 80092f2:	d01e      	beq.n	8009332 <disk_ioctl+0x4a>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80092f4:	4b9c      	ldr	r3, [pc, #624]	; (8009568 <disk_ioctl+0x280>)
 80092f6:	f893 c000 	ldrb.w	ip, [r3]
 80092fa:	f01c 0f01 	tst.w	ip, #1
 80092fe:	d116      	bne.n	800932e <disk_ioctl+0x46>

		switch (ctrl) {
 8009300:	290e      	cmp	r1, #14
 8009302:	d844      	bhi.n	800938e <disk_ioctl+0xa6>
 8009304:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009308:	00820057 	.word	0x00820057
 800930c:	00e400a1 	.word	0x00e400a1
 8009310:	00430043 	.word	0x00430043
 8009314:	00430043 	.word	0x00430043
 8009318:	00430043 	.word	0x00430043
 800931c:	00a60167 	.word	0x00a60167
 8009320:	011500c5 	.word	0x011500c5
 8009324:	013a      	.short	0x013a
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
 8009326:	2504      	movs	r5, #4

		release_spi();
	}

	return res;
}
 8009328:	4628      	mov	r0, r5
 800932a:	b008      	add	sp, #32
 800932c:	bd70      	pop	{r4, r5, r6, pc}
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800932e:	2503      	movs	r5, #3
 8009330:	e7fa      	b.n	8009328 <disk_ioctl+0x40>
	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
 8009332:	7813      	ldrb	r3, [r2, #0]
 8009334:	2b01      	cmp	r3, #1
 8009336:	f000 8155 	beq.w	80095e4 <disk_ioctl+0x2fc>
 800933a:	d222      	bcs.n	8009382 <disk_ioctl+0x9a>
static
void power_off_ (void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	if (!(Stat & STA_NOINIT)) {
 800933c:	4c8a      	ldr	r4, [pc, #552]	; (8009568 <disk_ioctl+0x280>)
 800933e:	7823      	ldrb	r3, [r4, #0]
 8009340:	f013 0f01 	tst.w	r3, #1
 8009344:	f000 8172 	beq.w	800962c <disk_ioctl+0x344>
		SELECT();
		wait_ready();
		release_spi();
	}

	SPI_I2S_DeInit(SPI_SD);
 8009348:	4888      	ldr	r0, [pc, #544]	; (800956c <disk_ioctl+0x284>)
 800934a:	f005 f84f 	bl	800e3ec <SPI_I2S_DeInit>
	SPI_Cmd(SPI_SD, DISABLE);
 800934e:	4887      	ldr	r0, [pc, #540]	; (800956c <disk_ioctl+0x284>)
 8009350:	2100      	movs	r1, #0
 8009352:	f005 f902 	bl	800e55a <SPI_Cmd>
	RCC_APBPeriphClockCmd_SPI_SD(RCC_APBPeriph_SPI_SD, DISABLE);
 8009356:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800935a:	2100      	movs	r1, #0
 800935c:	f004 ff16 	bl	800e18c <RCC_APB2PeriphClockCmd>

	/* All SPI-Pins to input with weak internal pull-downs */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MISO | GPIO_Pin_SPI_SD_MOSI;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPD;
 8009360:	2528      	movs	r5, #40	; 0x28
	SPI_I2S_DeInit(SPI_SD);
	SPI_Cmd(SPI_SD, DISABLE);
	RCC_APBPeriphClockCmd_SPI_SD(RCC_APBPeriph_SPI_SD, DISABLE);

	/* All SPI-Pins to input with weak internal pull-downs */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MISO | GPIO_Pin_SPI_SD_MOSI;
 8009362:	22e0      	movs	r2, #224	; 0xe0
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPD;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
 8009364:	4882      	ldr	r0, [pc, #520]	; (8009570 <disk_ioctl+0x288>)
 8009366:	a907      	add	r1, sp, #28
	SPI_Cmd(SPI_SD, DISABLE);
	RCC_APBPeriphClockCmd_SPI_SD(RCC_APBPeriph_SPI_SD, DISABLE);

	/* All SPI-Pins to input with weak internal pull-downs */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MISO | GPIO_Pin_SPI_SD_MOSI;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPD;
 8009368:	f88d 501f 	strb.w	r5, [sp, #31]
	SPI_I2S_DeInit(SPI_SD);
	SPI_Cmd(SPI_SD, DISABLE);
	RCC_APBPeriphClockCmd_SPI_SD(RCC_APBPeriph_SPI_SD, DISABLE);

	/* All SPI-Pins to input with weak internal pull-downs */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_SPI_SD_SCK | GPIO_Pin_SPI_SD_MISO | GPIO_Pin_SPI_SD_MOSI;
 800936c:	f8ad 201c 	strh.w	r2, [sp, #28]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPD;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);
 8009370:	f004 fa99 	bl	800d8a6 <GPIO_Init>

	card_power(0);

	Stat |= STA_NOINIT;		/* Set STA_NOINIT */
 8009374:	7823      	ldrb	r3, [r4, #0]
	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off_();		/* Power off */
			res = RES_OK;
 8009376:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPD;
	GPIO_Init(GPIO_SPI_SD, &GPIO_InitStructure);

	card_power(0);

	Stat |= STA_NOINIT;		/* Set STA_NOINIT */
 8009378:	f043 0c01 	orr.w	ip, r3, #1
 800937c:	f884 c000 	strb.w	ip, [r4]
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off_();		/* Power off */
			res = RES_OK;
			break;
 8009380:	e7d2      	b.n	8009328 <disk_ioctl+0x40>
	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
 8009382:	2b02      	cmp	r3, #2
 8009384:	d1cf      	bne.n	8009326 <disk_ioctl+0x3e>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
 8009386:	2101      	movs	r1, #1
 8009388:	7051      	strb	r1, [r2, #1]
			res = RES_OK;
 800938a:	4605      	mov	r5, r0
			break;
 800938c:	e7cc      	b.n	8009328 <disk_ioctl+0x40>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
 800938e:	2504      	movs	r5, #4
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 8009390:	4878      	ldr	r0, [pc, #480]	; (8009574 <disk_ioctl+0x28c>)
 8009392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009396:	f004 faec 	bl	800d972 <GPIO_SetBits>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800939a:	4874      	ldr	r0, [pc, #464]	; (800956c <disk_ioctl+0x284>)
 800939c:	21ff      	movs	r1, #255	; 0xff
 800939e:	f005 f910 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80093a2:	4872      	ldr	r0, [pc, #456]	; (800956c <disk_ioctl+0x284>)
 80093a4:	2101      	movs	r1, #1
 80093a6:	f005 f967 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d0f9      	beq.n	80093a2 <disk_ioctl+0xba>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80093ae:	486f      	ldr	r0, [pc, #444]	; (800956c <disk_ioctl+0x284>)
 80093b0:	f005 f909 	bl	800e5c6 <SPI_I2S_ReceiveData>
 80093b4:	e7b8      	b.n	8009328 <disk_ioctl+0x40>
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 80093b6:	4c70      	ldr	r4, [pc, #448]	; (8009578 <disk_ioctl+0x290>)
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;

		switch (ctrl) {
		case CTRL_SYNC :		/* CT_BLOCKMake sure that no pending write process */
			SELECT();
 80093b8:	486e      	ldr	r0, [pc, #440]	; (8009574 <disk_ioctl+0x28c>)
 80093ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 80093be:	2532      	movs	r5, #50	; 0x32
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;

		switch (ctrl) {
		case CTRL_SYNC :		/* CT_BLOCKMake sure that no pending write process */
			SELECT();
 80093c0:	f004 fad9 	bl	800d976 <GPIO_ResetBits>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80093c4:	4869      	ldr	r0, [pc, #420]	; (800956c <disk_ioctl+0x284>)
 80093c6:	21ff      	movs	r1, #255	; 0xff
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 80093c8:	6065      	str	r5, [r4, #4]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80093ca:	f005 f8fa 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80093ce:	4867      	ldr	r0, [pc, #412]	; (800956c <disk_ioctl+0x284>)
 80093d0:	2101      	movs	r1, #1
 80093d2:	f005 f951 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0f9      	beq.n	80093ce <disk_ioctl+0xe6>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80093da:	4864      	ldr	r0, [pc, #400]	; (800956c <disk_ioctl+0x284>)
 80093dc:	f005 f8f3 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80093e0:	4862      	ldr	r0, [pc, #392]	; (800956c <disk_ioctl+0x284>)
 80093e2:	21ff      	movs	r1, #255	; 0xff
 80093e4:	f005 f8ed 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80093e8:	4860      	ldr	r0, [pc, #384]	; (800956c <disk_ioctl+0x284>)
 80093ea:	2101      	movs	r1, #1
 80093ec:	f005 f944 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d0f9      	beq.n	80093e8 <disk_ioctl+0x100>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80093f4:	485d      	ldr	r0, [pc, #372]	; (800956c <disk_ioctl+0x284>)
 80093f6:	f005 f8e6 	bl	800e5c6 <SPI_I2S_ReceiveData>

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
 80093fa:	b2c2      	uxtb	r2, r0
 80093fc:	2aff      	cmp	r2, #255	; 0xff
 80093fe:	f000 80b1 	beq.w	8009564 <disk_ioctl+0x27c>
 8009402:	6860      	ldr	r0, [r4, #4]
 8009404:	2800      	cmp	r0, #0
 8009406:	d1eb      	bne.n	80093e0 <disk_ioctl+0xf8>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 8009408:	2501      	movs	r5, #1
 800940a:	e7c1      	b.n	8009390 <disk_ioctl+0xa8>
			if (wait_ready() == 0xFF)
				res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800940c:	2049      	movs	r0, #73	; 0x49
 800940e:	2100      	movs	r1, #0
 8009410:	f7ff fc3a 	bl	8008c88 <send_cmd>
 8009414:	2800      	cmp	r0, #0
 8009416:	d1f7      	bne.n	8009408 <disk_ioctl+0x120>
)
{
	BYTE token;


	Timer1 = 10;
 8009418:	4d57      	ldr	r5, [pc, #348]	; (8009578 <disk_ioctl+0x290>)
 800941a:	210a      	movs	r1, #10
 800941c:	6029      	str	r1, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800941e:	4853      	ldr	r0, [pc, #332]	; (800956c <disk_ioctl+0x284>)
 8009420:	21ff      	movs	r1, #255	; 0xff
 8009422:	f005 f8ce 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009426:	4851      	ldr	r0, [pc, #324]	; (800956c <disk_ioctl+0x284>)
 8009428:	2101      	movs	r1, #1
 800942a:	f005 f925 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800942e:	2800      	cmp	r0, #0
 8009430:	d0f9      	beq.n	8009426 <disk_ioctl+0x13e>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009432:	484e      	ldr	r0, [pc, #312]	; (800956c <disk_ioctl+0x284>)
 8009434:	f005 f8c7 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8009438:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 800943a:	28ff      	cmp	r0, #255	; 0xff
 800943c:	f040 8199 	bne.w	8009772 <disk_ioctl+0x48a>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1eb      	bne.n	800941e <disk_ioctl+0x136>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 8009446:	2501      	movs	r5, #1
 8009448:	e7a2      	b.n	8009390 <disk_ioctl+0xa8>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
 800944a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800944e:	8010      	strh	r0, [r2, #0]
			res = RES_OK;
 8009450:	2500      	movs	r5, #0
			break;
 8009452:	e79d      	b.n	8009390 <disk_ioctl+0xa8>
			*ptr = CardType;
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8009454:	2049      	movs	r0, #73	; 0x49
 8009456:	2100      	movs	r1, #0
 8009458:	f7ff fc16 	bl	8008c88 <send_cmd>
 800945c:	2800      	cmp	r0, #0
 800945e:	d1d3      	bne.n	8009408 <disk_ioctl+0x120>
)
{
	BYTE token;


	Timer1 = 10;
 8009460:	4d45      	ldr	r5, [pc, #276]	; (8009578 <disk_ioctl+0x290>)
 8009462:	220a      	movs	r2, #10
 8009464:	602a      	str	r2, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009466:	4841      	ldr	r0, [pc, #260]	; (800956c <disk_ioctl+0x284>)
 8009468:	21ff      	movs	r1, #255	; 0xff
 800946a:	f005 f8aa 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800946e:	483f      	ldr	r0, [pc, #252]	; (800956c <disk_ioctl+0x284>)
 8009470:	2101      	movs	r1, #1
 8009472:	f005 f901 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009476:	2800      	cmp	r0, #0
 8009478:	d0f9      	beq.n	800946e <disk_ioctl+0x186>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800947a:	483c      	ldr	r0, [pc, #240]	; (800956c <disk_ioctl+0x284>)
 800947c:	f005 f8a3 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8009480:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 8009482:	28ff      	cmp	r0, #255	; 0xff
 8009484:	f040 8131 	bne.w	80096ea <disk_ioctl+0x402>
 8009488:	6828      	ldr	r0, [r5, #0]
 800948a:	2800      	cmp	r0, #0
 800948c:	d1eb      	bne.n	8009466 <disk_ioctl+0x17e>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 800948e:	2501      	movs	r5, #1
 8009490:	e77e      	b.n	8009390 <disk_ioctl+0xa8>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8009492:	204a      	movs	r0, #74	; 0x4a
 8009494:	2100      	movs	r1, #0
 8009496:	f7ff fbf7 	bl	8008c88 <send_cmd>
 800949a:	2800      	cmp	r0, #0
 800949c:	d1b4      	bne.n	8009408 <disk_ioctl+0x120>
)
{
	BYTE token;


	Timer1 = 10;
 800949e:	4d36      	ldr	r5, [pc, #216]	; (8009578 <disk_ioctl+0x290>)
 80094a0:	210a      	movs	r1, #10
 80094a2:	6029      	str	r1, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80094a4:	4831      	ldr	r0, [pc, #196]	; (800956c <disk_ioctl+0x284>)
 80094a6:	21ff      	movs	r1, #255	; 0xff
 80094a8:	f005 f88b 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80094ac:	482f      	ldr	r0, [pc, #188]	; (800956c <disk_ioctl+0x284>)
 80094ae:	2101      	movs	r1, #1
 80094b0:	f005 f8e2 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0f9      	beq.n	80094ac <disk_ioctl+0x1c4>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80094b8:	482c      	ldr	r0, [pc, #176]	; (800956c <disk_ioctl+0x284>)
 80094ba:	f005 f884 	bl	800e5c6 <SPI_I2S_ReceiveData>
 80094be:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 80094c0:	28ff      	cmp	r0, #255	; 0xff
 80094c2:	f040 80ee 	bne.w	80096a2 <disk_ioctl+0x3ba>
 80094c6:	682b      	ldr	r3, [r5, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1eb      	bne.n	80094a4 <disk_ioctl+0x1bc>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 80094cc:	2501      	movs	r5, #1
 80094ce:	e75f      	b.n	8009390 <disk_ioctl+0xa8>
			*(WORD*)buff = 512;
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC version 2.00 */
 80094d0:	4d29      	ldr	r5, [pc, #164]	; (8009578 <disk_ioctl+0x290>)
 80094d2:	7a2a      	ldrb	r2, [r5, #8]
 80094d4:	f012 0104 	ands.w	r1, r2, #4
 80094d8:	f000 808a 	beq.w	80095f0 <disk_ioctl+0x308>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80094dc:	20cd      	movs	r0, #205	; 0xcd
 80094de:	2100      	movs	r1, #0
 80094e0:	f7ff fbd2 	bl	8008c88 <send_cmd>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d18f      	bne.n	8009408 <disk_ioctl+0x120>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80094e8:	4820      	ldr	r0, [pc, #128]	; (800956c <disk_ioctl+0x284>)
 80094ea:	21ff      	movs	r1, #255	; 0xff
 80094ec:	f005 f869 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80094f0:	481e      	ldr	r0, [pc, #120]	; (800956c <disk_ioctl+0x284>)
 80094f2:	2101      	movs	r1, #1
 80094f4:	f005 f8c0 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d0f9      	beq.n	80094f0 <disk_ioctl+0x208>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80094fc:	481b      	ldr	r0, [pc, #108]	; (800956c <disk_ioctl+0x284>)
 80094fe:	f005 f862 	bl	800e5c6 <SPI_I2S_ReceiveData>
)
{
	BYTE token;


	Timer1 = 10;
 8009502:	210a      	movs	r1, #10
 8009504:	6029      	str	r1, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009506:	4819      	ldr	r0, [pc, #100]	; (800956c <disk_ioctl+0x284>)
 8009508:	21ff      	movs	r1, #255	; 0xff
 800950a:	f005 f85a 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800950e:	4817      	ldr	r0, [pc, #92]	; (800956c <disk_ioctl+0x284>)
 8009510:	2101      	movs	r1, #1
 8009512:	f005 f8b1 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009516:	2800      	cmp	r0, #0
 8009518:	d0f9      	beq.n	800950e <disk_ioctl+0x226>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800951a:	4814      	ldr	r0, [pc, #80]	; (800956c <disk_ioctl+0x284>)
 800951c:	f005 f853 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8009520:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 8009522:	28ff      	cmp	r0, #255	; 0xff
 8009524:	f040 8176 	bne.w	8009814 <disk_ioctl+0x52c>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1eb      	bne.n	8009506 <disk_ioctl+0x21e>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 800952e:	2501      	movs	r5, #1
 8009530:	e72e      	b.n	8009390 <disk_ioctl+0xa8>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8009532:	207a      	movs	r0, #122	; 0x7a
 8009534:	2100      	movs	r1, #0
 8009536:	f7ff fba7 	bl	8008c88 <send_cmd>
 800953a:	2800      	cmp	r0, #0
 800953c:	f47f af64 	bne.w	8009408 <disk_ioctl+0x120>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if (STM32_SD_DISK_IOCTRL == 1)
DRESULT disk_ioctl (
 8009540:	1d25      	adds	r5, r4, #4
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009542:	480a      	ldr	r0, [pc, #40]	; (800956c <disk_ioctl+0x284>)
 8009544:	21ff      	movs	r1, #255	; 0xff
 8009546:	f005 f83c 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800954a:	4808      	ldr	r0, [pc, #32]	; (800956c <disk_ioctl+0x284>)
 800954c:	2101      	movs	r1, #1
 800954e:	f005 f893 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009552:	2800      	cmp	r0, #0
 8009554:	d0f9      	beq.n	800954a <disk_ioctl+0x262>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009556:	4805      	ldr	r0, [pc, #20]	; (800956c <disk_ioctl+0x284>)
 8009558:	f005 f835 	bl	800e5c6 <SPI_I2S_ReceiveData>
 800955c:	f804 0b01 	strb.w	r0, [r4], #1
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8009560:	42ac      	cmp	r4, r5
 8009562:	d1ee      	bne.n	8009542 <disk_ioctl+0x25a>

		case MMC_GET_SDSTAT :	/* Receive SD status as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
 8009564:	2500      	movs	r5, #0
 8009566:	e713      	b.n	8009390 <disk_ioctl+0xa8>
 8009568:	2000015d 	.word	0x2000015d
 800956c:	40013000 	.word	0x40013000
 8009570:	40010800 	.word	0x40010800
 8009574:	40010c00 	.word	0x40010c00
 8009578:	2000072c 	.word	0x2000072c
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD status as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 800957c:	20cd      	movs	r0, #205	; 0xcd
 800957e:	2100      	movs	r1, #0
 8009580:	f7ff fb82 	bl	8008c88 <send_cmd>
 8009584:	2800      	cmp	r0, #0
 8009586:	f47f af3f 	bne.w	8009408 <disk_ioctl+0x120>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800958a:	489f      	ldr	r0, [pc, #636]	; (8009808 <disk_ioctl+0x520>)
 800958c:	21ff      	movs	r1, #255	; 0xff
 800958e:	f005 f818 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009592:	489d      	ldr	r0, [pc, #628]	; (8009808 <disk_ioctl+0x520>)
 8009594:	2101      	movs	r1, #1
 8009596:	f005 f86f 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800959a:	2800      	cmp	r0, #0
 800959c:	d0f9      	beq.n	8009592 <disk_ioctl+0x2aa>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800959e:	489a      	ldr	r0, [pc, #616]	; (8009808 <disk_ioctl+0x520>)
)
{
	BYTE token;


	Timer1 = 10;
 80095a0:	4d9a      	ldr	r5, [pc, #616]	; (800980c <disk_ioctl+0x524>)

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80095a2:	f005 f810 	bl	800e5c6 <SPI_I2S_ReceiveData>
)
{
	BYTE token;


	Timer1 = 10;
 80095a6:	220a      	movs	r2, #10
 80095a8:	602a      	str	r2, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80095aa:	4897      	ldr	r0, [pc, #604]	; (8009808 <disk_ioctl+0x520>)
 80095ac:	21ff      	movs	r1, #255	; 0xff
 80095ae:	f005 f808 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80095b2:	4895      	ldr	r0, [pc, #596]	; (8009808 <disk_ioctl+0x520>)
 80095b4:	2101      	movs	r1, #1
 80095b6:	f005 f85f 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0f9      	beq.n	80095b2 <disk_ioctl+0x2ca>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80095be:	4892      	ldr	r0, [pc, #584]	; (8009808 <disk_ioctl+0x520>)
 80095c0:	f005 f801 	bl	800e5c6 <SPI_I2S_ReceiveData>
 80095c4:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 80095c6:	28ff      	cmp	r0, #255	; 0xff
 80095c8:	f040 80af 	bne.w	800972a <disk_ioctl+0x442>
 80095cc:	6828      	ldr	r0, [r5, #0]
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d1eb      	bne.n	80095aa <disk_ioctl+0x2c2>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 80095d2:	2501      	movs	r5, #1
 80095d4:	e6dc      	b.n	8009390 <disk_ioctl+0xa8>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
 80095d6:	4b8d      	ldr	r3, [pc, #564]	; (800980c <disk_ioctl+0x524>)
			res = RES_OK;
 80095d8:	2500      	movs	r5, #0
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
 80095da:	f893 e008 	ldrb.w	lr, [r3, #8]
 80095de:	f882 e000 	strb.w	lr, [r2]
			res = RES_OK;
			break;
 80095e2:	e6d5      	b.n	8009390 <disk_ioctl+0xa8>
			if (chk_power())
				power_off_();		/* Power off */
			res = RES_OK;
			break;
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
 80095e4:	9001      	str	r0, [sp, #4]
 80095e6:	f7ff f9f7 	bl	80089d8 <power_on>
			res = RES_OK;
 80095ea:	9801      	ldr	r0, [sp, #4]
 80095ec:	4605      	mov	r5, r0
			break;
 80095ee:	e69b      	b.n	8009328 <disk_ioctl+0x40>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
						res = RES_OK;
					}
				}
			} else {					/* SDC version 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80095f0:	2049      	movs	r0, #73	; 0x49
 80095f2:	f7ff fb49 	bl	8008c88 <send_cmd>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f47f af06 	bne.w	8009408 <disk_ioctl+0x120>
)
{
	BYTE token;


	Timer1 = 10;
 80095fc:	200a      	movs	r0, #10
 80095fe:	6028      	str	r0, [r5, #0]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009600:	4881      	ldr	r0, [pc, #516]	; (8009808 <disk_ioctl+0x520>)
 8009602:	21ff      	movs	r1, #255	; 0xff
 8009604:	f004 ffdd 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009608:	487f      	ldr	r0, [pc, #508]	; (8009808 <disk_ioctl+0x520>)
 800960a:	2101      	movs	r1, #1
 800960c:	f005 f834 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009610:	2800      	cmp	r0, #0
 8009612:	d0f9      	beq.n	8009608 <disk_ioctl+0x320>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009614:	487c      	ldr	r0, [pc, #496]	; (8009808 <disk_ioctl+0x520>)
 8009616:	f004 ffd6 	bl	800e5c6 <SPI_I2S_ReceiveData>
 800961a:	b2c0      	uxtb	r0, r0


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
 800961c:	28ff      	cmp	r0, #255	; 0xff
 800961e:	f040 8135 	bne.w	800988c <disk_ioctl+0x5a4>
 8009622:	6829      	ldr	r1, [r5, #0]
 8009624:	2900      	cmp	r1, #0
 8009626:	d1eb      	bne.n	8009600 <disk_ioctl+0x318>
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	if (drv) return RES_PARERR;

	res = RES_ERROR;
 8009628:	2501      	movs	r5, #1
 800962a:	e6b1      	b.n	8009390 <disk_ioctl+0xa8>
void power_off_ (void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	if (!(Stat & STA_NOINIT)) {
		SELECT();
 800962c:	4878      	ldr	r0, [pc, #480]	; (8009810 <disk_ioctl+0x528>)
 800962e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8009632:	4d76      	ldr	r5, [pc, #472]	; (800980c <disk_ioctl+0x524>)
void power_off_ (void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	if (!(Stat & STA_NOINIT)) {
		SELECT();
 8009634:	f004 f99f 	bl	800d976 <GPIO_ResetBits>
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 8009638:	2232      	movs	r2, #50	; 0x32
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800963a:	4873      	ldr	r0, [pc, #460]	; (8009808 <disk_ioctl+0x520>)
 800963c:	21ff      	movs	r1, #255	; 0xff
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
 800963e:	606a      	str	r2, [r5, #4]
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009640:	f004 ffbf 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009644:	4870      	ldr	r0, [pc, #448]	; (8009808 <disk_ioctl+0x520>)
 8009646:	2101      	movs	r1, #1
 8009648:	f005 f816 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800964c:	2800      	cmp	r0, #0
 800964e:	d0f9      	beq.n	8009644 <disk_ioctl+0x35c>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009650:	486d      	ldr	r0, [pc, #436]	; (8009808 <disk_ioctl+0x520>)
 8009652:	f004 ffb8 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009656:	486c      	ldr	r0, [pc, #432]	; (8009808 <disk_ioctl+0x520>)
 8009658:	21ff      	movs	r1, #255	; 0xff
 800965a:	f004 ffb2 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800965e:	486a      	ldr	r0, [pc, #424]	; (8009808 <disk_ioctl+0x520>)
 8009660:	2101      	movs	r1, #1
 8009662:	f005 f809 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009666:	2800      	cmp	r0, #0
 8009668:	d0f9      	beq.n	800965e <disk_ioctl+0x376>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800966a:	4867      	ldr	r0, [pc, #412]	; (8009808 <disk_ioctl+0x520>)
 800966c:	f004 ffab 	bl	800e5c6 <SPI_I2S_ReceiveData>

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
 8009670:	b2c0      	uxtb	r0, r0
 8009672:	28ff      	cmp	r0, #255	; 0xff
 8009674:	d002      	beq.n	800967c <disk_ioctl+0x394>
 8009676:	6869      	ldr	r1, [r5, #4]
 8009678:	2900      	cmp	r1, #0
 800967a:	d1ec      	bne.n	8009656 <disk_ioctl+0x36e>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 800967c:	4864      	ldr	r0, [pc, #400]	; (8009810 <disk_ioctl+0x528>)
 800967e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009682:	f004 f976 	bl	800d972 <GPIO_SetBits>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009686:	4860      	ldr	r0, [pc, #384]	; (8009808 <disk_ioctl+0x520>)
 8009688:	21ff      	movs	r1, #255	; 0xff
 800968a:	f004 ff9a 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800968e:	485e      	ldr	r0, [pc, #376]	; (8009808 <disk_ioctl+0x520>)
 8009690:	2101      	movs	r1, #1
 8009692:	f004 fff1 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009696:	2800      	cmp	r0, #0
 8009698:	d0f9      	beq.n	800968e <disk_ioctl+0x3a6>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800969a:	485b      	ldr	r0, [pc, #364]	; (8009808 <disk_ioctl+0x520>)
 800969c:	f004 ff93 	bl	800e5c6 <SPI_I2S_ReceiveData>
 80096a0:	e652      	b.n	8009348 <disk_ioctl+0x60>

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 80096a2:	28fe      	cmp	r0, #254	; 0xfe
 80096a4:	f47f aeb0 	bne.w	8009408 <disk_ioctl+0x120>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 80096a8:	38fd      	subs	r0, #253	; 0xfd
 80096aa:	4621      	mov	r1, r4
 80096ac:	2210      	movs	r2, #16
 80096ae:	f7ff fa0b 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80096b2:	4855      	ldr	r0, [pc, #340]	; (8009808 <disk_ioctl+0x520>)
 80096b4:	21ff      	movs	r1, #255	; 0xff
 80096b6:	f004 ff84 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80096ba:	4853      	ldr	r0, [pc, #332]	; (8009808 <disk_ioctl+0x520>)
 80096bc:	2101      	movs	r1, #1
 80096be:	f004 ffdb 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d0f9      	beq.n	80096ba <disk_ioctl+0x3d2>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80096c6:	4850      	ldr	r0, [pc, #320]	; (8009808 <disk_ioctl+0x520>)
 80096c8:	f004 ff7d 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80096cc:	484e      	ldr	r0, [pc, #312]	; (8009808 <disk_ioctl+0x520>)
 80096ce:	21ff      	movs	r1, #255	; 0xff
 80096d0:	f004 ff77 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80096d4:	484c      	ldr	r0, [pc, #304]	; (8009808 <disk_ioctl+0x520>)
 80096d6:	2101      	movs	r1, #1
 80096d8:	f004 ffce 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d0f9      	beq.n	80096d4 <disk_ioctl+0x3ec>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80096e0:	4849      	ldr	r0, [pc, #292]	; (8009808 <disk_ioctl+0x520>)
 80096e2:	f004 ff70 	bl	800e5c6 <SPI_I2S_ReceiveData>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
 80096e6:	2500      	movs	r5, #0
 80096e8:	e652      	b.n	8009390 <disk_ioctl+0xa8>

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 80096ea:	28fe      	cmp	r0, #254	; 0xfe
 80096ec:	f47f ae8c 	bne.w	8009408 <disk_ioctl+0x120>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 80096f0:	38fd      	subs	r0, #253	; 0xfd
 80096f2:	4621      	mov	r1, r4
 80096f4:	2210      	movs	r2, #16
 80096f6:	f7ff f9e7 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80096fa:	4843      	ldr	r0, [pc, #268]	; (8009808 <disk_ioctl+0x520>)
 80096fc:	21ff      	movs	r1, #255	; 0xff
 80096fe:	f004 ff60 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009702:	4841      	ldr	r0, [pc, #260]	; (8009808 <disk_ioctl+0x520>)
 8009704:	2101      	movs	r1, #1
 8009706:	f004 ffb7 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800970a:	2800      	cmp	r0, #0
 800970c:	d0f9      	beq.n	8009702 <disk_ioctl+0x41a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800970e:	483e      	ldr	r0, [pc, #248]	; (8009808 <disk_ioctl+0x520>)
 8009710:	f004 ff59 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009714:	483c      	ldr	r0, [pc, #240]	; (8009808 <disk_ioctl+0x520>)
 8009716:	21ff      	movs	r1, #255	; 0xff
 8009718:	f004 ff53 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800971c:	483a      	ldr	r0, [pc, #232]	; (8009808 <disk_ioctl+0x520>)
 800971e:	2101      	movs	r1, #1
 8009720:	f004 ffaa 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009724:	2800      	cmp	r0, #0
 8009726:	d0f9      	beq.n	800971c <disk_ioctl+0x434>
 8009728:	e7da      	b.n	80096e0 <disk_ioctl+0x3f8>

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 800972a:	28fe      	cmp	r0, #254	; 0xfe
 800972c:	f47f ae6c 	bne.w	8009408 <disk_ioctl+0x120>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 8009730:	38fd      	subs	r0, #253	; 0xfd
 8009732:	4621      	mov	r1, r4
 8009734:	2240      	movs	r2, #64	; 0x40
 8009736:	f7ff f9c7 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800973a:	4833      	ldr	r0, [pc, #204]	; (8009808 <disk_ioctl+0x520>)
 800973c:	21ff      	movs	r1, #255	; 0xff
 800973e:	f004 ff40 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009742:	4831      	ldr	r0, [pc, #196]	; (8009808 <disk_ioctl+0x520>)
 8009744:	2101      	movs	r1, #1
 8009746:	f004 ff97 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800974a:	2800      	cmp	r0, #0
 800974c:	d0f9      	beq.n	8009742 <disk_ioctl+0x45a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800974e:	482e      	ldr	r0, [pc, #184]	; (8009808 <disk_ioctl+0x520>)
 8009750:	f004 ff39 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009754:	482c      	ldr	r0, [pc, #176]	; (8009808 <disk_ioctl+0x520>)
 8009756:	21ff      	movs	r1, #255	; 0xff
 8009758:	f004 ff33 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800975c:	482a      	ldr	r0, [pc, #168]	; (8009808 <disk_ioctl+0x520>)
 800975e:	2101      	movs	r1, #1
 8009760:	f004 ff8a 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009764:	2800      	cmp	r0, #0
 8009766:	d0f9      	beq.n	800975c <disk_ioctl+0x474>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009768:	4827      	ldr	r0, [pc, #156]	; (8009808 <disk_ioctl+0x520>)
 800976a:	f004 ff2c 	bl	800e5c6 <SPI_I2S_ReceiveData>

		case MMC_GET_SDSTAT :	/* Receive SD status as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
 800976e:	2500      	movs	r5, #0
 8009770:	e60e      	b.n	8009390 <disk_ioctl+0xa8>

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 8009772:	28fe      	cmp	r0, #254	; 0xfe
 8009774:	f47f ae48 	bne.w	8009408 <disk_ioctl+0x120>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 8009778:	38fd      	subs	r0, #253	; 0xfd
 800977a:	a903      	add	r1, sp, #12
 800977c:	2210      	movs	r2, #16
 800977e:	f7ff f9a3 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009782:	4821      	ldr	r0, [pc, #132]	; (8009808 <disk_ioctl+0x520>)
 8009784:	21ff      	movs	r1, #255	; 0xff
 8009786:	f004 ff1c 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800978a:	481f      	ldr	r0, [pc, #124]	; (8009808 <disk_ioctl+0x520>)
 800978c:	2101      	movs	r1, #1
 800978e:	f004 ff73 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009792:	2800      	cmp	r0, #0
 8009794:	d0f9      	beq.n	800978a <disk_ioctl+0x4a2>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009796:	481c      	ldr	r0, [pc, #112]	; (8009808 <disk_ioctl+0x520>)
 8009798:	f004 ff15 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800979c:	481a      	ldr	r0, [pc, #104]	; (8009808 <disk_ioctl+0x520>)
 800979e:	21ff      	movs	r1, #255	; 0xff
 80097a0:	f004 ff0f 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80097a4:	4818      	ldr	r0, [pc, #96]	; (8009808 <disk_ioctl+0x520>)
 80097a6:	2101      	movs	r1, #1
 80097a8:	f004 ff66 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d0f9      	beq.n	80097a4 <disk_ioctl+0x4bc>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80097b0:	4815      	ldr	r0, [pc, #84]	; (8009808 <disk_ioctl+0x520>)
 80097b2:	f004 ff08 	bl	800e5c6 <SPI_I2S_ReceiveData>
				res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC version 2.00 */
 80097b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80097ba:	0995      	lsrs	r5, r2, #6
 80097bc:	2d01      	cmp	r5, #1
 80097be:	f000 809f 	beq.w	8009900 <disk_ioctl+0x618>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80097c2:	f89d e011 	ldrb.w	lr, [sp, #17]
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80097c6:	f89d 5013 	ldrb.w	r5, [sp, #19]
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC version 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80097ca:	f89d 6016 	ldrb.w	r6, [sp, #22]
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80097ce:	f89d c014 	ldrb.w	ip, [sp, #20]
 80097d2:	f89d 2012 	ldrb.w	r2, [sp, #18]
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC version 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80097d6:	f00e 030f 	and.w	r3, lr, #15
 80097da:	f89d e015 	ldrb.w	lr, [sp, #21]
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80097de:	00a9      	lsls	r1, r5, #2
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC version 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80097e0:	eb03 10d6 	add.w	r0, r3, r6, lsr #7
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80097e4:	eb01 119c 	add.w	r1, r1, ip, lsr #6
 80097e8:	f002 0503 	and.w	r5, r2, #3
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC version 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80097ec:	1c83      	adds	r3, r0, #2
 80097ee:	f00e 0c03 	and.w	ip, lr, #3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80097f2:	3101      	adds	r1, #1
 80097f4:	02aa      	lsls	r2, r5, #10
					*(DWORD*)buff = (DWORD)csize << (n - 9);
 80097f6:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 80097fa:	188d      	adds	r5, r1, r2
 80097fc:	3b09      	subs	r3, #9
 80097fe:	fa15 f103 	lsls.w	r1, r5, r3
				}
				res = RES_OK;
 8009802:	2500      	movs	r5, #0
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
 8009804:	6021      	str	r1, [r4, #0]
 8009806:	e5c3      	b.n	8009390 <disk_ioctl+0xa8>
 8009808:	40013000 	.word	0x40013000
 800980c:	2000072c 	.word	0x2000072c
 8009810:	40010c00 	.word	0x40010c00

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 8009814:	28fe      	cmp	r0, #254	; 0xfe
 8009816:	f47f adf7 	bne.w	8009408 <disk_ioctl+0x120>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 800981a:	38fd      	subs	r0, #253	; 0xfd
 800981c:	a903      	add	r1, sp, #12
 800981e:	2210      	movs	r2, #16
 8009820:	f7ff f952 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 8009824:	4846      	ldr	r0, [pc, #280]	; (8009940 <disk_ioctl+0x658>)
 8009826:	21ff      	movs	r1, #255	; 0xff
 8009828:	f004 fecb 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 800982c:	4844      	ldr	r0, [pc, #272]	; (8009940 <disk_ioctl+0x658>)
 800982e:	2101      	movs	r1, #1
 8009830:	f004 ff22 	bl	800e678 <SPI_I2S_GetFlagStatus>
 8009834:	2800      	cmp	r0, #0
 8009836:	d0f9      	beq.n	800982c <disk_ioctl+0x544>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009838:	4841      	ldr	r0, [pc, #260]	; (8009940 <disk_ioctl+0x658>)
 800983a:	f004 fec4 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800983e:	4840      	ldr	r0, [pc, #256]	; (8009940 <disk_ioctl+0x658>)
 8009840:	21ff      	movs	r1, #255	; 0xff
 8009842:	f004 febe 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009846:	483e      	ldr	r0, [pc, #248]	; (8009940 <disk_ioctl+0x658>)
 8009848:	2101      	movs	r1, #1
 800984a:	f004 ff15 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800984e:	2800      	cmp	r0, #0
 8009850:	d0f9      	beq.n	8009846 <disk_ioctl+0x55e>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 8009852:	483b      	ldr	r0, [pc, #236]	; (8009940 <disk_ioctl+0x658>)
 8009854:	f004 feb7 	bl	800e5c6 <SPI_I2S_ReceiveData>
 8009858:	2530      	movs	r5, #48	; 0x30
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800985a:	4839      	ldr	r0, [pc, #228]	; (8009940 <disk_ioctl+0x658>)
 800985c:	21ff      	movs	r1, #255	; 0xff
 800985e:	f004 feb0 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 8009862:	4837      	ldr	r0, [pc, #220]	; (8009940 <disk_ioctl+0x658>)
 8009864:	2101      	movs	r1, #1
 8009866:	f004 ff07 	bl	800e678 <SPI_I2S_GetFlagStatus>
 800986a:	2800      	cmp	r0, #0
 800986c:	d0f9      	beq.n	8009862 <disk_ioctl+0x57a>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 800986e:	3d01      	subs	r5, #1
 8009870:	4833      	ldr	r0, [pc, #204]	; (8009940 <disk_ioctl+0x658>)
 8009872:	b2ed      	uxtb	r5, r5
 8009874:	f004 fea7 	bl	800e5c6 <SPI_I2S_ReceiveData>
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC version 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 8009878:	2d00      	cmp	r5, #0
 800987a:	d1ee      	bne.n	800985a <disk_ioctl+0x572>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800987c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009880:	2210      	movs	r2, #16
 8009882:	0919      	lsrs	r1, r3, #4
 8009884:	fa12 f001 	lsls.w	r0, r2, r1
 8009888:	6020      	str	r0, [r4, #0]
 800988a:	e581      	b.n	8009390 <disk_ioctl+0xa8>

	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, return with error */
 800988c:	28fe      	cmp	r0, #254	; 0xfe
 800988e:	f47f adbb 	bne.w	8009408 <disk_ioctl+0x120>

#ifdef STM32_SD_USE_DMA
	stm32_dma_transfer( TRUE, buff, btr );
 8009892:	38fd      	subs	r0, #253	; 0xfd
 8009894:	a903      	add	r1, sp, #12
 8009896:	2210      	movs	r2, #16
 8009898:	f7ff f916 	bl	8008ac8 <stm32_dma_transfer>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 800989c:	4828      	ldr	r0, [pc, #160]	; (8009940 <disk_ioctl+0x658>)
 800989e:	21ff      	movs	r1, #255	; 0xff
 80098a0:	f004 fe8f 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80098a4:	4826      	ldr	r0, [pc, #152]	; (8009940 <disk_ioctl+0x658>)
 80098a6:	2101      	movs	r1, #1
 80098a8:	f004 fee6 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d0f9      	beq.n	80098a4 <disk_ioctl+0x5bc>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80098b0:	4823      	ldr	r0, [pc, #140]	; (8009940 <disk_ioctl+0x658>)
 80098b2:	f004 fe88 	bl	800e5c6 <SPI_I2S_ReceiveData>
{
	/* Loop while DR register in not empty */
	/// not needed: while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_TXE) == RESET) { ; }

	/* Send byte through the SPI peripheral */
	SPI_I2S_SendData(SPI_SD, out);
 80098b6:	4822      	ldr	r0, [pc, #136]	; (8009940 <disk_ioctl+0x658>)
 80098b8:	21ff      	movs	r1, #255	; 0xff
 80098ba:	f004 fe82 	bl	800e5c2 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI_SD, SPI_I2S_FLAG_RXNE) == RESET) { ; }
 80098be:	4820      	ldr	r0, [pc, #128]	; (8009940 <disk_ioctl+0x658>)
 80098c0:	2101      	movs	r1, #1
 80098c2:	f004 fed9 	bl	800e678 <SPI_I2S_GetFlagStatus>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0f9      	beq.n	80098be <disk_ioctl+0x5d6>

	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData(SPI_SD);
 80098ca:	481d      	ldr	r0, [pc, #116]	; (8009940 <disk_ioctl+0x658>)
 80098cc:	f004 fe7b 	bl	800e5c6 <SPI_I2S_ReceiveData>
						res = RES_OK;
					}
				}
			} else {					/* SDC version 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC version 1.XX */
 80098d0:	f895 c008 	ldrb.w	ip, [r5, #8]
 80098d4:	f01c 0502 	ands.w	r5, ip, #2
 80098d8:	d020      	beq.n	800991c <disk_ioctl+0x634>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80098da:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80098de:	f89d 5019 	ldrb.w	r5, [sp, #25]
 80098e2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80098e6:	09d8      	lsrs	r0, r3, #7
 80098e8:	1c42      	adds	r2, r0, #1
 80098ea:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
 80098ee:	09ab      	lsrs	r3, r5, #6
 80098f0:	1e5d      	subs	r5, r3, #1
 80098f2:	eb02 004e 	add.w	r0, r2, lr, lsl #1
 80098f6:	fa10 f205 	lsls.w	r2, r0, r5
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
 80098fa:	2500      	movs	r5, #0
					}
				}
			} else {					/* SDC version 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC version 1.XX */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80098fc:	6022      	str	r2, [r4, #0]
 80098fe:	e547      	b.n	8009390 <disk_ioctl+0xa8>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC version 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8009900:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8009904:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009908:	0203      	lsls	r3, r0, #8
 800990a:	1c55      	adds	r5, r2, #1
 800990c:	eb05 0e03 	add.w	lr, r5, r3
					*(DWORD*)buff = (DWORD)csize << 10;
 8009910:	fa1f f18e 	uxth.w	r1, lr
 8009914:	0288      	lsls	r0, r1, #10
 8009916:	6020      	str	r0, [r4, #0]
				} else {					/* SDC version 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
 8009918:	2500      	movs	r5, #0
 800991a:	e539      	b.n	8009390 <disk_ioctl+0xa8>
			} else {					/* SDC version 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC version 1.XX */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800991c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009920:	f89d c016 	ldrb.w	ip, [sp, #22]
 8009924:	0958      	lsrs	r0, r3, #5
 8009926:	f00c 017c 	and.w	r1, ip, #124	; 0x7c
 800992a:	088a      	lsrs	r2, r1, #2
 800992c:	f003 0e03 	and.w	lr, r3, #3
 8009930:	1c41      	adds	r1, r0, #1
 8009932:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 8009936:	1c50      	adds	r0, r2, #1
 8009938:	fb0c f200 	mul.w	r2, ip, r0
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	e527      	b.n	8009390 <disk_ioctl+0xa8>
 8009940:	40013000 	.word	0x40013000

08009944 <disk_timerproc>:
	static DWORD pv;
	DWORD ns;
	BYTE n, s;


	n = Timer1;                /* 100Hz decrement timers */
 8009944:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <disk_timerproc+0x34>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	b2d2      	uxtb	r2, r2
	if (n) Timer1 = --n;
 800994a:	b112      	cbz	r2, 8009952 <disk_timerproc+0xe>
 800994c:	1e51      	subs	r1, r2, #1
 800994e:	b2c8      	uxtb	r0, r1
 8009950:	6018      	str	r0, [r3, #0]
	n = Timer2;
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	b2d2      	uxtb	r2, r2
	if (n) Timer2 = --n;
 8009956:	b11a      	cbz	r2, 8009960 <disk_timerproc+0x1c>
 8009958:	3a01      	subs	r2, #1
 800995a:	4807      	ldr	r0, [pc, #28]	; (8009978 <disk_timerproc+0x34>)
 800995c:	b2d1      	uxtb	r1, r2
 800995e:	6041      	str	r1, [r0, #4]

	ns = pv;
 8009960:	68d8      	ldr	r0, [r3, #12]
	pv = socket_is_empty() | socket_is_write_protected();	/* Sample socket switch */
 8009962:	2100      	movs	r1, #0
 8009964:	60d9      	str	r1, [r3, #12]

	if (ns == pv) {                         /* Have contacts stabled? */
 8009966:	b928      	cbnz	r0, 8009974 <disk_timerproc+0x30>
		s = Stat;
 8009968:	4b04      	ldr	r3, [pc, #16]	; (800997c <disk_timerproc+0x38>)
 800996a:	781a      	ldrb	r2, [r3, #0]
			s &= ~STA_PROTECT;

		if (pv & socket_state_mask_cp)      /* INS = H (Socket empty) */
			s |= (STA_NODISK | STA_NOINIT);
		else                                /* INS = L (Card inserted) */
			s &= ~STA_NODISK;
 800996c:	f002 0cf9 	and.w	ip, r2, #249	; 0xf9

		Stat = s;
 8009970:	f883 c000 	strb.w	ip, [r3]
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	2000072c 	.word	0x2000072c
 800997c:	2000015d 	.word	0x2000015d

08009980 <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(char c)) {
	rputchar = putchar_func;
 8009980:	4b01      	ldr	r3, [pc, #4]	; (8009988 <rprintfInit+0x8>)
 8009982:	6018      	str	r0, [r3, #0]
}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	2000073c 	.word	0x2000073c

0800998c <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800998c:	280a      	cmp	r0, #10
	rputchar = putchar_func;
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
 800998e:	b538      	push	{r3, r4, r5, lr}
 8009990:	4604      	mov	r4, r0
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009992:	d004      	beq.n	800999e <rprintfChar+0x12>
 8009994:	4d06      	ldr	r5, [pc, #24]	; (80099b0 <rprintfChar+0x24>)
		rputchar('\r');
	rputchar(c);	// send character
 8009996:	4620      	mov	r0, r4
 8009998:	6829      	ldr	r1, [r5, #0]
 800999a:	4788      	blx	r1
}
 800999c:	bd38      	pop	{r3, r4, r5, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800999e:	4d04      	ldr	r5, [pc, #16]	; (80099b0 <rprintfChar+0x24>)
 80099a0:	200d      	movs	r0, #13
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	4798      	blx	r3
	rputchar(c);	// send character
 80099a6:	6829      	ldr	r1, [r5, #0]
 80099a8:	4620      	mov	r0, r4
 80099aa:	4788      	blx	r1
}
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	bf00      	nop
 80099b0:	2000073c 	.word	0x2000073c

080099b4 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[]) {	// send a string stored in RAM
 80099b4:	b570      	push	{r4, r5, r6, lr}
	// check to make sure we have a good pointer
	if (!str) return;
 80099b6:	b1b0      	cbz	r0, 80099e6 <rprintfStr+0x32>
	// print the string until a null-terminator
	while (*str)
 80099b8:	7804      	ldrb	r4, [r0, #0]
 80099ba:	b1a4      	cbz	r4, 80099e6 <rprintfStr+0x32>
 80099bc:	4e0a      	ldr	r6, [pc, #40]	; (80099e8 <rprintfStr+0x34>)
 80099be:	4605      	mov	r5, r0
 80099c0:	e005      	b.n	80099ce <rprintfStr+0x1a>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 80099c2:	4620      	mov	r0, r4
 80099c4:	6831      	ldr	r1, [r6, #0]
 80099c6:	4788      	blx	r1
// prints a null-terminated string stored in RAM
void rprintfStr(char str[]) {	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
	// print the string until a null-terminator
	while (*str)
 80099c8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80099cc:	b15c      	cbz	r4, 80099e6 <rprintfStr+0x32>

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 80099ce:	2c0a      	cmp	r4, #10
 80099d0:	d1f7      	bne.n	80099c2 <rprintfStr+0xe>
		rputchar('\r');
 80099d2:	200d      	movs	r0, #13
 80099d4:	6833      	ldr	r3, [r6, #0]
 80099d6:	4798      	blx	r3
	rputchar(c);	// send character
 80099d8:	4620      	mov	r0, r4
 80099da:	6831      	ldr	r1, [r6, #0]
 80099dc:	4788      	blx	r1
// prints a null-terminated string stored in RAM
void rprintfStr(char str[]) {	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
	// print the string until a null-terminator
	while (*str)
 80099de:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	d1f3      	bne.n	80099ce <rprintfStr+0x1a>
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	2000073c 	.word	0x2000073c

080099ec <rprintfStrLen>:

// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len) {
 80099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f0:	4690      	mov	r8, r2
	unsigned int i=0;
	// check to make sure we have a good pointer
	if (!str) return;
 80099f2:	2800      	cmp	r0, #0
 80099f4:	f000 80a6 	beq.w	8009b44 <rprintfStrLen+0x158>
 80099f8:	1842      	adds	r2, r0, r1
 80099fa:	f011 0103 	ands.w	r1, r1, #3
 80099fe:	d00f      	beq.n	8009a20 <rprintfStrLen+0x34>
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
 8009a00:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009a04:	4604      	mov	r4, r0
 8009a06:	b1eb      	cbz	r3, 8009a44 <rprintfStrLen+0x58>
 8009a08:	2901      	cmp	r1, #1
 8009a0a:	d009      	beq.n	8009a20 <rprintfStrLen+0x34>
 8009a0c:	2902      	cmp	r1, #2
 8009a0e:	d003      	beq.n	8009a18 <rprintfStrLen+0x2c>
 8009a10:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009a14:	4604      	mov	r4, r0
 8009a16:	b1a9      	cbz	r1, 8009a44 <rprintfStrLen+0x58>
 8009a18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	b18b      	cbz	r3, 8009a44 <rprintfStrLen+0x58>
 8009a20:	4290      	cmp	r0, r2

// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len) {
 8009a22:	4604      	mov	r4, r0
	unsigned int i=0;
	// check to make sure we have a good pointer
	if (!str) return;
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
 8009a24:	d00e      	beq.n	8009a44 <rprintfStrLen+0x58>
 8009a26:	4604      	mov	r4, r0
 8009a28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a2c:	b153      	cbz	r3, 8009a44 <rprintfStrLen+0x58>
 8009a2e:	7841      	ldrb	r1, [r0, #1]
 8009a30:	3401      	adds	r4, #1
 8009a32:	b139      	cbz	r1, 8009a44 <rprintfStrLen+0x58>
 8009a34:	7823      	ldrb	r3, [r4, #0]
 8009a36:	1cc4      	adds	r4, r0, #3
 8009a38:	b123      	cbz	r3, 8009a44 <rprintfStrLen+0x58>
 8009a3a:	78c1      	ldrb	r1, [r0, #3]
 8009a3c:	3004      	adds	r0, #4
 8009a3e:	4604      	mov	r4, r0
 8009a40:	2900      	cmp	r1, #0
 8009a42:	d1ed      	bne.n	8009a20 <rprintfStrLen+0x34>
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009a44:	f1b8 0f00 	cmp.w	r8, #0
 8009a48:	f000 809e 	beq.w	8009b88 <rprintfStrLen+0x19c>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009a4c:	7825      	ldrb	r5, [r4, #0]
 8009a4e:	f108 37ff 	add.w	r7, r8, #4294967295
 8009a52:	4e56      	ldr	r6, [pc, #344]	; (8009bac <rprintfStrLen+0x1c0>)
 8009a54:	f007 0703 	and.w	r7, r7, #3
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	d075      	beq.n	8009b48 <rprintfStrLen+0x15c>
			rprintfChar(*str++);
 8009a5c:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009a5e:	2d0a      	cmp	r5, #10
 8009a60:	f000 8094 	beq.w	8009b8c <rprintfStrLen+0x1a0>
		rputchar('\r');
	rputchar(c);	// send character
 8009a64:	6831      	ldr	r1, [r6, #0]
 8009a66:	4628      	mov	r0, r5
 8009a68:	4788      	blx	r1
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009a6a:	2501      	movs	r5, #1
 8009a6c:	4545      	cmp	r5, r8
 8009a6e:	d069      	beq.n	8009b44 <rprintfStrLen+0x158>
 8009a70:	2f00      	cmp	r7, #0
 8009a72:	d049      	beq.n	8009b08 <rprintfStrLen+0x11c>
 8009a74:	42af      	cmp	r7, r5
 8009a76:	d017      	beq.n	8009aa8 <rprintfStrLen+0xbc>
 8009a78:	2f02      	cmp	r7, #2
 8009a7a:	d00a      	beq.n	8009a92 <rprintfStrLen+0xa6>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009a7c:	7827      	ldrb	r7, [r4, #0]
 8009a7e:	2f00      	cmp	r7, #0
 8009a80:	d06a      	beq.n	8009b58 <rprintfStrLen+0x16c>
			rprintfChar(*str++);
 8009a82:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009a84:	2f0a      	cmp	r7, #10
 8009a86:	f000 8085 	beq.w	8009b94 <rprintfStrLen+0x1a8>
		rputchar('\r');
	rputchar(c);	// send character
 8009a8a:	6833      	ldr	r3, [r6, #0]
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	4798      	blx	r3
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009a90:	3501      	adds	r5, #1
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009a92:	7827      	ldrb	r7, [r4, #0]
 8009a94:	2f00      	cmp	r7, #0
 8009a96:	d05b      	beq.n	8009b50 <rprintfStrLen+0x164>
			rprintfChar(*str++);
 8009a98:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009a9a:	2f0a      	cmp	r7, #10
 8009a9c:	f000 8082 	beq.w	8009ba4 <rprintfStrLen+0x1b8>
		rputchar('\r');
	rputchar(c);	// send character
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	4798      	blx	r3
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009aa6:	3501      	adds	r5, #1
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009aa8:	7827      	ldrb	r7, [r4, #0]
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	d058      	beq.n	8009b60 <rprintfStrLen+0x174>
			rprintfChar(*str++);
 8009aae:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009ab0:	2f0a      	cmp	r7, #10
 8009ab2:	d073      	beq.n	8009b9c <rprintfStrLen+0x1b0>
		rputchar('\r');
	rputchar(c);	// send character
 8009ab4:	6833      	ldr	r3, [r6, #0]
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	4798      	blx	r3
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009aba:	3501      	adds	r5, #1
 8009abc:	4545      	cmp	r5, r8
 8009abe:	d123      	bne.n	8009b08 <rprintfStrLen+0x11c>
 8009ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
			rprintfChar(*str++);
 8009ac4:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009ac6:	2f0a      	cmp	r7, #10
 8009ac8:	d04e      	beq.n	8009b68 <rprintfStrLen+0x17c>
		rputchar('\r');
	rputchar(c);	// send character
 8009aca:	4638      	mov	r0, r7
 8009acc:	6832      	ldr	r2, [r6, #0]
 8009ace:	4790      	blx	r2
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009ad0:	7827      	ldrb	r7, [r4, #0]
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009ad2:	3501      	adds	r5, #1
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009ad4:	b317      	cbz	r7, 8009b1c <rprintfStrLen+0x130>
			rprintfChar(*str++);
 8009ad6:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009ad8:	2f0a      	cmp	r7, #10
 8009ada:	d049      	beq.n	8009b70 <rprintfStrLen+0x184>
		rputchar('\r');
	rputchar(c);	// send character
 8009adc:	4638      	mov	r0, r7
 8009ade:	6832      	ldr	r2, [r6, #0]
 8009ae0:	4790      	blx	r2
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009ae2:	7827      	ldrb	r7, [r4, #0]
 8009ae4:	b307      	cbz	r7, 8009b28 <rprintfStrLen+0x13c>
			rprintfChar(*str++);
 8009ae6:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009ae8:	2f0a      	cmp	r7, #10
 8009aea:	d045      	beq.n	8009b78 <rprintfStrLen+0x18c>
		rputchar('\r');
	rputchar(c);	// send character
 8009aec:	4638      	mov	r0, r7
 8009aee:	6832      	ldr	r2, [r6, #0]
 8009af0:	4790      	blx	r2
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009af2:	7827      	ldrb	r7, [r4, #0]
 8009af4:	b1f7      	cbz	r7, 8009b34 <rprintfStrLen+0x148>
			rprintfChar(*str++);
 8009af6:	3401      	adds	r4, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009af8:	2f0a      	cmp	r7, #10
 8009afa:	d041      	beq.n	8009b80 <rprintfStrLen+0x194>
		rputchar('\r');
	rputchar(c);	// send character
 8009afc:	6832      	ldr	r2, [r6, #0]
 8009afe:	4638      	mov	r0, r7
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009b00:	3503      	adds	r5, #3
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b02:	4790      	blx	r2
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009b04:	4545      	cmp	r5, r8
 8009b06:	d01b      	beq.n	8009b40 <rprintfStrLen+0x154>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009b08:	7827      	ldrb	r7, [r4, #0]
 8009b0a:	2f00      	cmp	r7, #0
 8009b0c:	d1da      	bne.n	8009ac4 <rprintfStrLen+0xd8>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b0e:	6833      	ldr	r3, [r6, #0]
 8009b10:	2020      	movs	r0, #32
 8009b12:	4798      	blx	r3
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009b14:	7827      	ldrb	r7, [r4, #0]
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009b16:	3501      	adds	r5, #1
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009b18:	2f00      	cmp	r7, #0
 8009b1a:	d1dc      	bne.n	8009ad6 <rprintfStrLen+0xea>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b1c:	6837      	ldr	r7, [r6, #0]
 8009b1e:	2020      	movs	r0, #32
 8009b20:	47b8      	blx	r7
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009b22:	7827      	ldrb	r7, [r4, #0]
 8009b24:	2f00      	cmp	r7, #0
 8009b26:	d1de      	bne.n	8009ae6 <rprintfStrLen+0xfa>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b28:	6831      	ldr	r1, [r6, #0]
 8009b2a:	2020      	movs	r0, #32
 8009b2c:	4788      	blx	r1
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 8009b2e:	7827      	ldrb	r7, [r4, #0]
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	d1e0      	bne.n	8009af6 <rprintfStrLen+0x10a>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b34:	2020      	movs	r0, #32
 8009b36:	6831      	ldr	r1, [r6, #0]
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009b38:	3503      	adds	r5, #3
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b3a:	4788      	blx	r1
//	{
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}
	// then print exactly len characters
	for(i=0; i<len; i++)
 8009b3c:	4545      	cmp	r5, r8
 8009b3e:	d1e3      	bne.n	8009b08 <rprintfStrLen+0x11c>
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009b48:	6835      	ldr	r5, [r6, #0]
 8009b4a:	2020      	movs	r0, #32
 8009b4c:	47a8      	blx	r5
 8009b4e:	e78c      	b.n	8009a6a <rprintfStrLen+0x7e>
 8009b50:	6832      	ldr	r2, [r6, #0]
 8009b52:	2020      	movs	r0, #32
 8009b54:	4790      	blx	r2
 8009b56:	e7a6      	b.n	8009aa6 <rprintfStrLen+0xba>
 8009b58:	6837      	ldr	r7, [r6, #0]
 8009b5a:	2020      	movs	r0, #32
 8009b5c:	47b8      	blx	r7
 8009b5e:	e797      	b.n	8009a90 <rprintfStrLen+0xa4>
 8009b60:	6832      	ldr	r2, [r6, #0]
 8009b62:	2020      	movs	r0, #32
 8009b64:	4790      	blx	r2
 8009b66:	e7a8      	b.n	8009aba <rprintfStrLen+0xce>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009b68:	6831      	ldr	r1, [r6, #0]
 8009b6a:	200d      	movs	r0, #13
 8009b6c:	4788      	blx	r1
 8009b6e:	e7ac      	b.n	8009aca <rprintfStrLen+0xde>
 8009b70:	6833      	ldr	r3, [r6, #0]
 8009b72:	200d      	movs	r0, #13
 8009b74:	4798      	blx	r3
 8009b76:	e7b1      	b.n	8009adc <rprintfStrLen+0xf0>
 8009b78:	6833      	ldr	r3, [r6, #0]
 8009b7a:	200d      	movs	r0, #13
 8009b7c:	4798      	blx	r3
 8009b7e:	e7b5      	b.n	8009aec <rprintfStrLen+0x100>
 8009b80:	6833      	ldr	r3, [r6, #0]
 8009b82:	200d      	movs	r0, #13
 8009b84:	4798      	blx	r3
 8009b86:	e7b9      	b.n	8009afc <rprintfStrLen+0x110>
 8009b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b8c:	6832      	ldr	r2, [r6, #0]
 8009b8e:	200d      	movs	r0, #13
 8009b90:	4790      	blx	r2
 8009b92:	e767      	b.n	8009a64 <rprintfStrLen+0x78>
 8009b94:	6831      	ldr	r1, [r6, #0]
 8009b96:	200d      	movs	r0, #13
 8009b98:	4788      	blx	r1
 8009b9a:	e776      	b.n	8009a8a <rprintfStrLen+0x9e>
 8009b9c:	6831      	ldr	r1, [r6, #0]
 8009b9e:	200d      	movs	r0, #13
 8009ba0:	4788      	blx	r1
 8009ba2:	e787      	b.n	8009ab4 <rprintfStrLen+0xc8>
 8009ba4:	6831      	ldr	r1, [r6, #0]
 8009ba6:	200d      	movs	r0, #13
 8009ba8:	4788      	blx	r1
 8009baa:	e779      	b.n	8009aa0 <rprintfStrLen+0xb4>
 8009bac:	2000073c 	.word	0x2000073c

08009bb0 <rprintfCRLF>:

}

// *** rprintfCRLF ***
// prints carriage return and line feed
void rprintfCRLF(void) {
 8009bb0:	b510      	push	{r4, lr}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009bb2:	4c04      	ldr	r4, [pc, #16]	; (8009bc4 <rprintfCRLF+0x14>)
 8009bb4:	200d      	movs	r0, #13
 8009bb6:	6821      	ldr	r1, [r4, #0]
 8009bb8:	4788      	blx	r1
	rputchar(c);	// send character
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	200a      	movs	r0, #10
 8009bbe:	4798      	blx	r3
void rprintfCRLF(void) {
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
}
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	bf00      	nop
 8009bc4:	2000073c 	.word	0x2000073c

08009bc8 <rprintfu04>:

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data) {
 8009bc8:	b538      	push	{r3, r4, r5, lr}
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009bca:	4b08      	ldr	r3, [pc, #32]	; (8009bec <rprintfu04+0x24>)
 8009bcc:	5c1c      	ldrb	r4, [r3, r0]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009bce:	2c0a      	cmp	r4, #10
 8009bd0:	d004      	beq.n	8009bdc <rprintfu04+0x14>
 8009bd2:	4d07      	ldr	r5, [pc, #28]	; (8009bf0 <rprintfu04+0x28>)
		rputchar('\r');
	rputchar(c);	// send character
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	682a      	ldr	r2, [r5, #0]
 8009bd8:	4790      	blx	r2
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
}
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009bdc:	4d04      	ldr	r5, [pc, #16]	; (8009bf0 <rprintfu04+0x28>)
 8009bde:	200d      	movs	r0, #13
 8009be0:	6829      	ldr	r1, [r5, #0]
 8009be2:	4788      	blx	r1
	rputchar(c);	// send character
 8009be4:	682a      	ldr	r2, [r5, #0]
 8009be6:	4620      	mov	r0, r4
 8009be8:	4790      	blx	r2
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
}
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	0801b31c 	.word	0x0801b31c
 8009bf0:	2000073c 	.word	0x2000073c

08009bf4 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data) {
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009bf6:	4e0f      	ldr	r6, [pc, #60]	; (8009c34 <rprintfu08+0x40>)
 8009bf8:	0903      	lsrs	r3, r0, #4
 8009bfa:	5cf7      	ldrb	r7, [r6, r3]
}

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data) {
 8009bfc:	4605      	mov	r5, r0

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009bfe:	2f0a      	cmp	r7, #10
 8009c00:	d012      	beq.n	8009c28 <rprintfu08+0x34>
 8009c02:	4c0d      	ldr	r4, [pc, #52]	; (8009c38 <rprintfu08+0x44>)
		rputchar('\r');
	rputchar(c);	// send character
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	4638      	mov	r0, r7
 8009c08:	4790      	blx	r2
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c0a:	5d75      	ldrb	r5, [r6, r5]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009c0c:	2d0a      	cmp	r5, #10
 8009c0e:	d003      	beq.n	8009c18 <rprintfu08+0x24>
		rputchar('\r');
	rputchar(c);	// send character
 8009c10:	6821      	ldr	r1, [r4, #0]
 8009c12:	4628      	mov	r0, r5
 8009c14:	4788      	blx	r1
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data) {
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
}
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009c18:	4807      	ldr	r0, [pc, #28]	; (8009c38 <rprintfu08+0x44>)
 8009c1a:	6803      	ldr	r3, [r0, #0]
 8009c1c:	200d      	movs	r0, #13
 8009c1e:	4798      	blx	r3
	rputchar(c);	// send character
 8009c20:	6821      	ldr	r1, [r4, #0]
 8009c22:	4628      	mov	r0, r5
 8009c24:	4788      	blx	r1
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data) {
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
}
 8009c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009c28:	4c03      	ldr	r4, [pc, #12]	; (8009c38 <rprintfu08+0x44>)
 8009c2a:	200d      	movs	r0, #13
 8009c2c:	6821      	ldr	r1, [r4, #0]
 8009c2e:	4788      	blx	r1
 8009c30:	e7e8      	b.n	8009c04 <rprintfu08+0x10>
 8009c32:	bf00      	nop
 8009c34:	0801b330 	.word	0x0801b330
 8009c38:	2000073c 	.word	0x2000073c

08009c3c <rprintfu16>:
	rprintfu04(data);
}

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
 8009c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// print 16-bit hex value
	rprintfu08(data>>8);
 8009c40:	0a07      	lsrs	r7, r0, #8
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c42:	4d23      	ldr	r5, [pc, #140]	; (8009cd0 <rprintfu16+0x94>)
 8009c44:	093b      	lsrs	r3, r7, #4
 8009c46:	f815 8003 	ldrb.w	r8, [r5, r3]
	rprintfu04(data);
}

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
 8009c4a:	4606      	mov	r6, r0

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009c4c:	f1b8 0f0a 	cmp.w	r8, #10
 8009c50:	d038      	beq.n	8009cc4 <rprintfu16+0x88>
 8009c52:	4c20      	ldr	r4, [pc, #128]	; (8009cd4 <rprintfu16+0x98>)
		rputchar('\r');
	rputchar(c);	// send character
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	4640      	mov	r0, r8
 8009c58:	4790      	blx	r2
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c5a:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009c5c:	2f0a      	cmp	r7, #10
 8009c5e:	d012      	beq.n	8009c86 <rprintfu16+0x4a>
// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
 8009c60:	b2f6      	uxtb	r6, r6
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009c62:	4638      	mov	r0, r7
 8009c64:	6821      	ldr	r1, [r4, #0]
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c66:	0937      	lsrs	r7, r6, #4
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009c68:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c6a:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009c6c:	2f0a      	cmp	r7, #10
 8009c6e:	d016      	beq.n	8009c9e <rprintfu16+0x62>
		rputchar('\r');
	rputchar(c);	// send character
 8009c70:	6821      	ldr	r1, [r4, #0]
 8009c72:	4638      	mov	r0, r7
 8009c74:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c76:	5dad      	ldrb	r5, [r5, r6]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009c78:	2d0a      	cmp	r5, #10
 8009c7a:	d01a      	beq.n	8009cb2 <rprintfu16+0x76>
		rputchar('\r');
	rputchar(c);	// send character
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	4628      	mov	r0, r5
 8009c80:	4798      	blx	r3
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
}
 8009c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009c86:	4813      	ldr	r0, [pc, #76]	; (8009cd4 <rprintfu16+0x98>)
// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
 8009c88:	b2f6      	uxtb	r6, r6
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009c8a:	6803      	ldr	r3, [r0, #0]
 8009c8c:	200d      	movs	r0, #13
 8009c8e:	4798      	blx	r3
	rputchar(c);	// send character
 8009c90:	4638      	mov	r0, r7
 8009c92:	6821      	ldr	r1, [r4, #0]
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c94:	0937      	lsrs	r7, r6, #4
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009c96:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009c98:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009c9a:	2f0a      	cmp	r7, #10
 8009c9c:	d1e8      	bne.n	8009c70 <rprintfu16+0x34>
		rputchar('\r');
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <rprintfu16+0x98>)
 8009ca0:	200d      	movs	r0, #13
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	4790      	blx	r2
	rputchar(c);	// send character
 8009ca6:	6821      	ldr	r1, [r4, #0]
 8009ca8:	4638      	mov	r0, r7
 8009caa:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009cac:	5dad      	ldrb	r5, [r5, r6]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009cae:	2d0a      	cmp	r5, #10
 8009cb0:	d1e4      	bne.n	8009c7c <rprintfu16+0x40>
		rputchar('\r');
 8009cb2:	4808      	ldr	r0, [pc, #32]	; (8009cd4 <rprintfu16+0x98>)
 8009cb4:	6802      	ldr	r2, [r0, #0]
 8009cb6:	200d      	movs	r0, #13
 8009cb8:	4790      	blx	r2
	rputchar(c);	// send character
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	4798      	blx	r3
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
}
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009cc4:	4c03      	ldr	r4, [pc, #12]	; (8009cd4 <rprintfu16+0x98>)
 8009cc6:	200d      	movs	r0, #13
 8009cc8:	6821      	ldr	r1, [r4, #0]
 8009cca:	4788      	blx	r1
 8009ccc:	e7c2      	b.n	8009c54 <rprintfu16+0x18>
 8009cce:	bf00      	nop
 8009cd0:	0801b330 	.word	0x0801b330
 8009cd4:	2000073c 	.word	0x2000073c

08009cd8 <rprintfu32>:
	rprintfu08(data);
}

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data) {
 8009cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// print 32-bit hex value
	rprintfu16(data>>16);
 8009cdc:	0c07      	lsrs	r7, r0, #16

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
 8009cde:	ea4f 2817 	mov.w	r8, r7, lsr #8
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009ce2:	4d4e      	ldr	r5, [pc, #312]	; (8009e1c <rprintfu32+0x144>)
 8009ce4:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8009ce8:	f815 9003 	ldrb.w	r9, [r5, r3]
	rprintfu08(data);
}

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data) {
 8009cec:	4606      	mov	r6, r0

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009cee:	f1b9 0f0a 	cmp.w	r9, #10
 8009cf2:	f000 808d 	beq.w	8009e10 <rprintfu32+0x138>
 8009cf6:	4c4a      	ldr	r4, [pc, #296]	; (8009e20 <rprintfu32+0x148>)
		rputchar('\r');
	rputchar(c);	// send character
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	4648      	mov	r0, r9
 8009cfc:	4790      	blx	r2
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009cfe:	f815 8008 	ldrb.w	r8, [r5, r8]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d02:	f1b8 0f0a 	cmp.w	r8, #10
 8009d06:	d033      	beq.n	8009d70 <rprintfu32+0x98>
		rputchar('\r');
	rputchar(c);	// send character
 8009d08:	4640      	mov	r0, r8
 8009d0a:	6822      	ldr	r2, [r4, #0]
// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
 8009d0c:	b2ff      	uxtb	r7, r7
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009d0e:	4790      	blx	r2
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d10:	0939      	lsrs	r1, r7, #4
 8009d12:	f815 8001 	ldrb.w	r8, [r5, r1]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d16:	f1b8 0f0a 	cmp.w	r8, #10
 8009d1a:	d037      	beq.n	8009d8c <rprintfu32+0xb4>
		rputchar('\r');
	rputchar(c);	// send character
 8009d1c:	6821      	ldr	r1, [r4, #0]
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d22:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d24:	2f0a      	cmp	r7, #10
 8009d26:	d03b      	beq.n	8009da0 <rprintfu32+0xc8>
// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data) {
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
 8009d28:	b2b6      	uxth	r6, r6
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	6821      	ldr	r1, [r4, #0]

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
 8009d2e:	0a37      	lsrs	r7, r6, #8
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009d30:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d32:	0938      	lsrs	r0, r7, #4
 8009d34:	f815 8000 	ldrb.w	r8, [r5, r0]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d38:	f1b8 0f0a 	cmp.w	r8, #10
 8009d3c:	d03f      	beq.n	8009dbe <rprintfu32+0xe6>
		rputchar('\r');
	rputchar(c);	// send character
 8009d3e:	6821      	ldr	r1, [r4, #0]
 8009d40:	4640      	mov	r0, r8
 8009d42:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d44:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d46:	2f0a      	cmp	r7, #10
 8009d48:	d043      	beq.n	8009dd2 <rprintfu32+0xfa>
// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
 8009d4a:	b2f6      	uxtb	r6, r6
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	6823      	ldr	r3, [r4, #0]
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d50:	0937      	lsrs	r7, r6, #4
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009d52:	4798      	blx	r3
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d54:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d56:	2f0a      	cmp	r7, #10
 8009d58:	d047      	beq.n	8009dea <rprintfu32+0x112>
		rputchar('\r');
	rputchar(c);	// send character
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	4798      	blx	r3
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d60:	5dad      	ldrb	r5, [r5, r6]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d62:	2d0a      	cmp	r5, #10
 8009d64:	d04b      	beq.n	8009dfe <rprintfu32+0x126>
		rputchar('\r');
	rputchar(c);	// send character
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	4628      	mov	r0, r5
 8009d6a:	4790      	blx	r2
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data) {
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
}
 8009d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009d70:	482b      	ldr	r0, [pc, #172]	; (8009e20 <rprintfu32+0x148>)
// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
 8009d72:	b2ff      	uxtb	r7, r7
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009d74:	6803      	ldr	r3, [r0, #0]
 8009d76:	200d      	movs	r0, #13
 8009d78:	4798      	blx	r3
	rputchar(c);	// send character
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	4790      	blx	r2
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d80:	0939      	lsrs	r1, r7, #4
 8009d82:	f815 8001 	ldrb.w	r8, [r5, r1]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d86:	f1b8 0f0a 	cmp.w	r8, #10
 8009d8a:	d1c7      	bne.n	8009d1c <rprintfu32+0x44>
		rputchar('\r');
 8009d8c:	4824      	ldr	r0, [pc, #144]	; (8009e20 <rprintfu32+0x148>)
 8009d8e:	6803      	ldr	r3, [r0, #0]
 8009d90:	200d      	movs	r0, #13
 8009d92:	4798      	blx	r3
	rputchar(c);	// send character
 8009d94:	6821      	ldr	r1, [r4, #0]
 8009d96:	4640      	mov	r0, r8
 8009d98:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009d9a:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009d9c:	2f0a      	cmp	r7, #10
 8009d9e:	d1c3      	bne.n	8009d28 <rprintfu32+0x50>
		rputchar('\r');
 8009da0:	4b1f      	ldr	r3, [pc, #124]	; (8009e20 <rprintfu32+0x148>)
 8009da2:	200d      	movs	r0, #13
 8009da4:	681a      	ldr	r2, [r3, #0]
// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data) {
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
 8009da6:	b2b6      	uxth	r6, r6
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009da8:	4790      	blx	r2
	rputchar(c);	// send character
 8009daa:	4638      	mov	r0, r7
 8009dac:	6821      	ldr	r1, [r4, #0]

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
 8009dae:	0a37      	lsrs	r7, r6, #8
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009db0:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009db2:	0938      	lsrs	r0, r7, #4
 8009db4:	f815 8000 	ldrb.w	r8, [r5, r0]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009db8:	f1b8 0f0a 	cmp.w	r8, #10
 8009dbc:	d1bf      	bne.n	8009d3e <rprintfu32+0x66>
		rputchar('\r');
 8009dbe:	4b18      	ldr	r3, [pc, #96]	; (8009e20 <rprintfu32+0x148>)
 8009dc0:	200d      	movs	r0, #13
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	4790      	blx	r2
	rputchar(c);	// send character
 8009dc6:	6821      	ldr	r1, [r4, #0]
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4788      	blx	r1
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009dcc:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009dce:	2f0a      	cmp	r7, #10
 8009dd0:	d1bb      	bne.n	8009d4a <rprintfu32+0x72>
		rputchar('\r');
 8009dd2:	4813      	ldr	r0, [pc, #76]	; (8009e20 <rprintfu32+0x148>)
// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data) {
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
 8009dd4:	b2f6      	uxtb	r6, r6
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009dd6:	6802      	ldr	r2, [r0, #0]
 8009dd8:	200d      	movs	r0, #13
 8009dda:	4790      	blx	r2
	rputchar(c);	// send character
 8009ddc:	4638      	mov	r0, r7
 8009dde:	6823      	ldr	r3, [r4, #0]
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009de0:	0937      	lsrs	r7, r6, #4
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 8009de2:	4798      	blx	r3
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009de4:	5def      	ldrb	r7, [r5, r7]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009de6:	2f0a      	cmp	r7, #10
 8009de8:	d1b7      	bne.n	8009d5a <rprintfu32+0x82>
		rputchar('\r');
 8009dea:	4a0d      	ldr	r2, [pc, #52]	; (8009e20 <rprintfu32+0x148>)
 8009dec:	200d      	movs	r0, #13
 8009dee:	6811      	ldr	r1, [r2, #0]
 8009df0:	4788      	blx	r1
	rputchar(c);	// send character
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	4638      	mov	r0, r7
 8009df6:	4798      	blx	r3
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(HexChars[data]);
 8009df8:	5dad      	ldrb	r5, [r5, r6]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009dfa:	2d0a      	cmp	r5, #10
 8009dfc:	d1b3      	bne.n	8009d66 <rprintfu32+0x8e>
		rputchar('\r');
 8009dfe:	4808      	ldr	r0, [pc, #32]	; (8009e20 <rprintfu32+0x148>)
 8009e00:	6801      	ldr	r1, [r0, #0]
 8009e02:	200d      	movs	r0, #13
 8009e04:	4788      	blx	r1
	rputchar(c);	// send character
 8009e06:	6822      	ldr	r2, [r4, #0]
 8009e08:	4628      	mov	r0, r5
 8009e0a:	4790      	blx	r2
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data) {
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
}
 8009e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 8009e10:	4c03      	ldr	r4, [pc, #12]	; (8009e20 <rprintfu32+0x148>)
 8009e12:	200d      	movs	r0, #13
 8009e14:	6821      	ldr	r1, [r4, #0]
 8009e16:	4788      	blx	r1
 8009e18:	e76e      	b.n	8009cf8 <rprintfu32+0x20>
 8009e1a:	bf00      	nop
 8009e1c:	0801b330 	.word	0x0801b330
 8009e20:	2000073c 	.word	0x2000073c

08009e24 <rprintfNum>:
//
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n) {
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	b089      	sub	sp, #36	; 0x24
 8009e2a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
	char *p, buf_[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
 8009e2e:	b11a      	cbz	r2, 8009e38 <rprintfNum+0x14>
 8009e30:	f1bb 0f00 	cmp.w	fp, #0
 8009e34:	f2c0 810b 	blt.w	800a04e <rprintfNum+0x22a>
		x = -n;
	else
	 	x = n;
 8009e38:	465d      	mov	r5, fp
	count = (numDigits-1)-(isSigned?1:0);
  	p = buf_ + sizeof (buf_);
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
 8009e3a:	fbb5 f4f0 	udiv	r4, r5, r0
 8009e3e:	fb00 5514 	mls	r5, r0, r4, r5
	if( isSigned && (n < 0) )
		x = -n;
	else
	 	x = n;
	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
 8009e42:	f101 39ff 	add.w	r9, r1, #4294967295
  	p = buf_ + sizeof (buf_);
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
 8009e46:	4e91      	ldr	r6, [pc, #580]	; (800a08c <rprintfNum+0x268>)
	if( isSigned && (n < 0) )
		x = -n;
	else
	 	x = n;
	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
 8009e48:	fa5f f989 	uxtb.w	r9, r9
  	p = buf_ + sizeof (buf_);
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
 8009e4c:	f816 c005 	ldrb.w	ip, [r6, r5]
	if( isSigned && (n < 0) )
		x = -n;
	else
	 	x = n;
	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	bf0c      	ite	eq
 8009e54:	46c8      	moveq	r8, r9
 8009e56:	f1a9 0801 	subne.w	r8, r9, #1
//
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n) {
 8009e5a:	fa5f f788 	uxtb.w	r7, r8
	count = (numDigits-1)-(isSigned?1:0);
  	p = buf_ + sizeof (buf_);
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
 8009e5e:	f10d 051e 	add.w	r5, sp, #30
	else
	 	x = n;
	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
  	p = buf_ + sizeof (buf_);
  	*--p = '\0';
 8009e62:	f04f 0800 	mov.w	r8, #0
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
 8009e66:	f88d c01e 	strb.w	ip, [sp, #30]
 8009e6a:	ebc7 0c05 	rsb	ip, r7, r5
 8009e6e:	f017 0703 	ands.w	r7, r7, #3
	else
	 	x = n;
	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
  	p = buf_ + sizeof (buf_);
  	*--p = '\0';
 8009e72:	f88d 801f 	strb.w	r8, [sp, #31]
 8009e76:	d015      	beq.n	8009ea4 <rprintfNum+0x80>
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
 8009e78:	2c00      	cmp	r4, #0
 8009e7a:	f040 80d2 	bne.w	800a022 <rprintfNum+0x1fe>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009e7e:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009e82:	3d01      	subs	r5, #1
 8009e84:	2f01      	cmp	r7, #1
 8009e86:	d00d      	beq.n	8009ea4 <rprintfNum+0x80>
 8009e88:	2f02      	cmp	r7, #2
 8009e8a:	d005      	beq.n	8009e98 <rprintfNum+0x74>
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	f040 80b2 	bne.w	8009ff6 <rprintfNum+0x1d2>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009e92:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009e96:	3d01      	subs	r5, #1
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
 8009e98:	2c00      	cmp	r4, #0
 8009e9a:	f040 80b7 	bne.w	800a00c <rprintfNum+0x1e8>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009e9e:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009ea2:	3d01      	subs	r5, #1
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
 8009ea4:	4565      	cmp	r5, ip
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009ea6:	462f      	mov	r7, r5
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
 8009ea8:	d026      	beq.n	8009ef8 <rprintfNum+0xd4>
		if(x != 0){
 8009eaa:	2c00      	cmp	r4, #0
 8009eac:	f000 80a0 	beq.w	8009ff0 <rprintfNum+0x1cc>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 8009eb0:	fbb4 f7f0 	udiv	r7, r4, r0
 8009eb4:	fb00 4417 	mls	r4, r0, r7, r4
 8009eb8:	f816 8004 	ldrb.w	r8, [r6, r4]
 8009ebc:	463c      	mov	r4, r7
 8009ebe:	f805 8c01 	strb.w	r8, [r5, #-1]
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009ec2:	3d01      	subs	r5, #1
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
 8009ec4:	2c00      	cmp	r4, #0
 8009ec6:	f000 8090 	beq.w	8009fea <rprintfNum+0x1c6>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 8009eca:	fbb4 f7f0 	udiv	r7, r4, r0
 8009ece:	fb00 4817 	mls	r8, r0, r7, r4
 8009ed2:	f816 8008 	ldrb.w	r8, [r6, r8]
 8009ed6:	463c      	mov	r4, r7
 8009ed8:	f805 8c01 	strb.w	r8, [r5, #-1]
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009edc:	1e6f      	subs	r7, r5, #1
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
 8009ede:	2c00      	cmp	r4, #0
 8009ee0:	d179      	bne.n	8009fd6 <rprintfNum+0x1b2>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009ee2:	f807 3c01 	strb.w	r3, [r7, #-1]
 8009ee6:	1eaf      	subs	r7, r5, #2
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
 8009ee8:	2c00      	cmp	r4, #0
 8009eea:	d169      	bne.n	8009fc0 <rprintfNum+0x19c>
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009eec:	f807 3c01 	strb.w	r3, [r7, #-1]
 8009ef0:	3d03      	subs	r5, #3
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
 8009ef2:	4565      	cmp	r5, ip
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009ef4:	462f      	mov	r7, r5
  	*--p = '\0';
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
 8009ef6:	d1d8      	bne.n	8009eaa <rprintfNum+0x86>
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
		else
			*--p = padchar;// no more digits left, pad out to desired length
	}// apply signed notation if requested
	if( isSigned ) {
 8009ef8:	b152      	cbz	r2, 8009f10 <rprintfNum+0xec>
		if(n < 0)
 8009efa:	f1bb 0f00 	cmp.w	fp, #0
 8009efe:	f2c0 80a9 	blt.w	800a054 <rprintfNum+0x230>
   			*--p = '-';
		else if(n > 0)
 8009f02:	f000 80bd 	beq.w	800a080 <rprintfNum+0x25c>
	   		*--p = '+';
 8009f06:	202b      	movs	r0, #43	; 0x2b
 8009f08:	f10c 37ff 	add.w	r7, ip, #4294967295
 8009f0c:	f80c 0c01 	strb.w	r0, [ip, #-1]
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
 8009f10:	2900      	cmp	r1, #0
 8009f12:	d052      	beq.n	8009fba <rprintfNum+0x196>
		rprintfChar(*p++);
 8009f14:	463c      	mov	r4, r7
//
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n) {
 8009f16:	f109 0e01 	add.w	lr, r9, #1
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
		rprintfChar(*p++);
 8009f1a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f1e:	43fe      	mvns	r6, r7
//
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n) {
 8009f20:	eb07 090e 	add.w	r9, r7, lr
 8009f24:	eb09 0106 	add.w	r1, r9, r6

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f28:	2d0a      	cmp	r5, #10
 8009f2a:	4e59      	ldr	r6, [pc, #356]	; (800a090 <rprintfNum+0x26c>)
 8009f2c:	f001 0703 	and.w	r7, r1, #3
 8009f30:	f000 8096 	beq.w	800a060 <rprintfNum+0x23c>
		rputchar('\r');
	rputchar(c);	// send character
 8009f34:	6832      	ldr	r2, [r6, #0]
 8009f36:	4628      	mov	r0, r5
 8009f38:	4790      	blx	r2
	   		*--p = '+';
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
 8009f3a:	454c      	cmp	r4, r9
 8009f3c:	d03d      	beq.n	8009fba <rprintfNum+0x196>
 8009f3e:	b1e7      	cbz	r7, 8009f7a <rprintfNum+0x156>
 8009f40:	2f01      	cmp	r7, #1
 8009f42:	d011      	beq.n	8009f68 <rprintfNum+0x144>
 8009f44:	2f02      	cmp	r7, #2
 8009f46:	d007      	beq.n	8009f58 <rprintfNum+0x134>
		rprintfChar(*p++);
 8009f48:	f814 5b01 	ldrb.w	r5, [r4], #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f4c:	2d0a      	cmp	r5, #10
 8009f4e:	f000 8093 	beq.w	800a078 <rprintfNum+0x254>
		rputchar('\r');
	rputchar(c);	// send character
 8009f52:	6833      	ldr	r3, [r6, #0]
 8009f54:	4628      	mov	r0, r5
 8009f56:	4798      	blx	r3
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
		rprintfChar(*p++);
 8009f58:	f814 5b01 	ldrb.w	r5, [r4], #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f5c:	2d0a      	cmp	r5, #10
 8009f5e:	f000 8083 	beq.w	800a068 <rprintfNum+0x244>
		rputchar('\r');
	rputchar(c);	// send character
 8009f62:	6831      	ldr	r1, [r6, #0]
 8009f64:	4628      	mov	r0, r5
 8009f66:	4788      	blx	r1
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
		rprintfChar(*p++);
 8009f68:	f814 5b01 	ldrb.w	r5, [r4], #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f6c:	2d0a      	cmp	r5, #10
 8009f6e:	d07f      	beq.n	800a070 <rprintfNum+0x24c>
		rputchar('\r');
	rputchar(c);	// send character
 8009f70:	6832      	ldr	r2, [r6, #0]
 8009f72:	4628      	mov	r0, r5
 8009f74:	4790      	blx	r2
	   		*--p = '+';
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
 8009f76:	454c      	cmp	r4, r9
 8009f78:	d01f      	beq.n	8009fba <rprintfNum+0x196>
		rprintfChar(*p++);
 8009f7a:	4625      	mov	r5, r4
 8009f7c:	f815 4b01 	ldrb.w	r4, [r5], #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f80:	2c0a      	cmp	r4, #10
 8009f82:	d060      	beq.n	800a046 <rprintfNum+0x222>
		rputchar('\r');
	rputchar(c);	// send character
 8009f84:	4620      	mov	r0, r4
 8009f86:	6834      	ldr	r4, [r6, #0]
 8009f88:	47a0      	blx	r4
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
		rprintfChar(*p++);
 8009f8a:	782c      	ldrb	r4, [r5, #0]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f8c:	2c0a      	cmp	r4, #10
 8009f8e:	d056      	beq.n	800a03e <rprintfNum+0x21a>
		rputchar('\r');
	rputchar(c);	// send character
 8009f90:	4620      	mov	r0, r4
 8009f92:	6834      	ldr	r4, [r6, #0]
 8009f94:	47a0      	blx	r4
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
		rprintfChar(*p++);
 8009f96:	786f      	ldrb	r7, [r5, #1]
 8009f98:	1cec      	adds	r4, r5, #3

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009f9a:	2f0a      	cmp	r7, #10
 8009f9c:	d04b      	beq.n	800a036 <rprintfNum+0x212>
		rputchar('\r');
	rputchar(c);	// send character
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	6831      	ldr	r1, [r6, #0]
 8009fa2:	4788      	blx	r1
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
		rprintfChar(*p++);
 8009fa4:	78ad      	ldrb	r5, [r5, #2]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 8009fa6:	2d0a      	cmp	r5, #10
 8009fa8:	d1e2      	bne.n	8009f70 <rprintfNum+0x14c>
		rputchar('\r');
 8009faa:	200d      	movs	r0, #13
 8009fac:	6833      	ldr	r3, [r6, #0]
 8009fae:	4798      	blx	r3
	rputchar(c);	// send character
 8009fb0:	6832      	ldr	r2, [r6, #0]
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	4790      	blx	r2
	   		*--p = '+';
		else
	   		*--p = ' ';
	}// print the string right-justified
	count = numDigits;
	while(count--)
 8009fb6:	454c      	cmp	r4, r9
 8009fb8:	d1df      	bne.n	8009f7a <rprintfNum+0x156>
		rprintfChar(*p++);
}
 8009fba:	b009      	add	sp, #36	; 0x24
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 8009fc0:	fbb4 f8f0 	udiv	r8, r4, r0
 8009fc4:	fb00 4418 	mls	r4, r0, r8, r4
 8009fc8:	f816 a004 	ldrb.w	sl, [r6, r4]
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009fcc:	3d03      	subs	r5, #3
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 8009fce:	4644      	mov	r4, r8
 8009fd0:	f807 ac01 	strb.w	sl, [r7, #-1]
 8009fd4:	e78d      	b.n	8009ef2 <rprintfNum+0xce>
 8009fd6:	fbb4 f8f0 	udiv	r8, r4, r0
 8009fda:	fb00 4a18 	mls	sl, r0, r8, r4
 8009fde:	f816 a00a 	ldrb.w	sl, [r6, sl]
 8009fe2:	4644      	mov	r4, r8
 8009fe4:	f807 ac01 	strb.w	sl, [r7, #-1]
 8009fe8:	e77d      	b.n	8009ee6 <rprintfNum+0xc2>
		else
			*--p = padchar;// no more digits left, pad out to desired length
 8009fea:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009fee:	e775      	b.n	8009edc <rprintfNum+0xb8>
 8009ff0:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009ff4:	e765      	b.n	8009ec2 <rprintfNum+0x9e>
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 8009ff6:	fbb4 f7f0 	udiv	r7, r4, r0
 8009ffa:	fb00 4817 	mls	r8, r0, r7, r4
 8009ffe:	f816 8008 	ldrb.w	r8, [r6, r8]
 800a002:	463c      	mov	r4, r7
 800a004:	f805 8c01 	strb.w	r8, [r5, #-1]
		else
			*--p = padchar;// no more digits left, pad out to desired length
 800a008:	3d01      	subs	r5, #1
 800a00a:	e745      	b.n	8009e98 <rprintfNum+0x74>
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 800a00c:	fbb4 f7f0 	udiv	r7, r4, r0
 800a010:	fb00 4417 	mls	r4, r0, r7, r4
 800a014:	f816 8004 	ldrb.w	r8, [r6, r4]
 800a018:	463c      	mov	r4, r7
 800a01a:	f805 8c01 	strb.w	r8, [r5, #-1]
		else
			*--p = padchar;// no more digits left, pad out to desired length
 800a01e:	3d01      	subs	r5, #1
 800a020:	e740      	b.n	8009ea4 <rprintfNum+0x80>
	// (to prevent zero from not printing at all!!!)
	*--p = HexChars[x%base]; x /= base;
	// calculate remaining digits
	while(count--) {
		if(x != 0){
			*--p = HexChars[x%base]; x /= base;}// calculate next digit
 800a022:	fbb4 f8f0 	udiv	r8, r4, r0
 800a026:	fb00 4a18 	mls	sl, r0, r8, r4
 800a02a:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800a02e:	4644      	mov	r4, r8
 800a030:	f805 ac01 	strb.w	sl, [r5, #-1]
 800a034:	e725      	b.n	8009e82 <rprintfNum+0x5e>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800a036:	200d      	movs	r0, #13
 800a038:	6832      	ldr	r2, [r6, #0]
 800a03a:	4790      	blx	r2
 800a03c:	e7af      	b.n	8009f9e <rprintfNum+0x17a>
 800a03e:	200d      	movs	r0, #13
 800a040:	6837      	ldr	r7, [r6, #0]
 800a042:	47b8      	blx	r7
 800a044:	e7a4      	b.n	8009f90 <rprintfNum+0x16c>
 800a046:	6837      	ldr	r7, [r6, #0]
 800a048:	200d      	movs	r0, #13
 800a04a:	47b8      	blx	r7
 800a04c:	e79a      	b.n	8009f84 <rprintfNum+0x160>
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
		x = -n;
 800a04e:	f1cb 0500 	rsb	r5, fp, #0
 800a052:	e6f2      	b.n	8009e3a <rprintfNum+0x16>
		else
			*--p = padchar;// no more digits left, pad out to desired length
	}// apply signed notation if requested
	if( isSigned ) {
		if(n < 0)
   			*--p = '-';
 800a054:	232d      	movs	r3, #45	; 0x2d
 800a056:	f10c 37ff 	add.w	r7, ip, #4294967295
 800a05a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800a05e:	e757      	b.n	8009f10 <rprintfNum+0xec>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800a060:	6833      	ldr	r3, [r6, #0]
 800a062:	200d      	movs	r0, #13
 800a064:	4798      	blx	r3
 800a066:	e765      	b.n	8009f34 <rprintfNum+0x110>
 800a068:	6832      	ldr	r2, [r6, #0]
 800a06a:	200d      	movs	r0, #13
 800a06c:	4790      	blx	r2
 800a06e:	e778      	b.n	8009f62 <rprintfNum+0x13e>
 800a070:	6833      	ldr	r3, [r6, #0]
 800a072:	200d      	movs	r0, #13
 800a074:	4798      	blx	r3
 800a076:	e77b      	b.n	8009f70 <rprintfNum+0x14c>
 800a078:	6831      	ldr	r1, [r6, #0]
 800a07a:	200d      	movs	r0, #13
 800a07c:	4788      	blx	r1
 800a07e:	e768      	b.n	8009f52 <rprintfNum+0x12e>
		if(n < 0)
   			*--p = '-';
		else if(n > 0)
	   		*--p = '+';
		else
	   		*--p = ' ';
 800a080:	2220      	movs	r2, #32
 800a082:	f10c 37ff 	add.w	r7, ip, #4294967295
 800a086:	f80c 2c01 	strb.w	r2, [ip, #-1]
 800a08a:	e741      	b.n	8009f10 <rprintfNum+0xec>
 800a08c:	0801b31c 	.word	0x0801b31c
 800a090:	2000073c 	.word	0x2000073c

0800a094 <rprintfFloat>:
}

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, float x) {
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460d      	mov	r5, r1
 800a09a:	4681      	mov	r9, r0
 800a09c:	b083      	sub	sp, #12
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
        // print polarity character
        if(x<0)
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f008 fffd 	bl	80130a0 <__aeabi_fcmplt>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f040 8112 	bne.w	800a2d0 <rprintfFloat+0x23c>
 800a0ac:	4f9a      	ldr	r7, [pc, #616]	; (800a318 <rprintfFloat+0x284>)
                rprintfChar('-');
        // convert to absolute value
        x = (x>0)?(x):(-x);
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f009 f813 	bl	80130dc <__aeabi_fcmpgt>
 800a0b6:	b908      	cbnz	r0, 800a0bc <rprintfFloat+0x28>
 800a0b8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
 800a0bc:	4628      	mov	r0, r5
 800a0be:	4997      	ldr	r1, [pc, #604]	; (800a31c <rprintfFloat+0x288>)
 800a0c0:	f008 ffee 	bl	80130a0 <__aeabi_fcmplt>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	f040 810a 	bne.w	800a2de <rprintfFloat+0x24a>
 800a0ca:	4994      	ldr	r1, [pc, #592]	; (800a31c <rprintfFloat+0x288>)
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f008 fefd 	bl	8012ecc <__aeabi_fdiv>
 800a0d2:	4992      	ldr	r1, [pc, #584]	; (800a31c <rprintfFloat+0x288>)
 800a0d4:	f008 ffe4 	bl	80130a0 <__aeabi_fcmplt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f040 8103 	bne.w	800a2e4 <rprintfFloat+0x250>
 800a0de:	4990      	ldr	r1, [pc, #576]	; (800a320 <rprintfFloat+0x28c>)
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f008 fef3 	bl	8012ecc <__aeabi_fdiv>
 800a0e6:	498d      	ldr	r1, [pc, #564]	; (800a31c <rprintfFloat+0x288>)
 800a0e8:	f008 ffda 	bl	80130a0 <__aeabi_fcmplt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f040 80fb 	bne.w	800a2e8 <rprintfFloat+0x254>
 800a0f2:	498c      	ldr	r1, [pc, #560]	; (800a324 <rprintfFloat+0x290>)
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f008 fee9 	bl	8012ecc <__aeabi_fdiv>
 800a0fa:	4988      	ldr	r1, [pc, #544]	; (800a31c <rprintfFloat+0x288>)
 800a0fc:	f008 ffd0 	bl	80130a0 <__aeabi_fcmplt>
 800a100:	2800      	cmp	r0, #0
 800a102:	f040 80f3 	bne.w	800a2ec <rprintfFloat+0x258>
 800a106:	4988      	ldr	r1, [pc, #544]	; (800a328 <rprintfFloat+0x294>)
 800a108:	4628      	mov	r0, r5
 800a10a:	f008 fedf 	bl	8012ecc <__aeabi_fdiv>
 800a10e:	4983      	ldr	r1, [pc, #524]	; (800a31c <rprintfFloat+0x288>)
 800a110:	f008 ffc6 	bl	80130a0 <__aeabi_fcmplt>
 800a114:	2800      	cmp	r0, #0
 800a116:	f040 80eb 	bne.w	800a2f0 <rprintfFloat+0x25c>
 800a11a:	4984      	ldr	r1, [pc, #528]	; (800a32c <rprintfFloat+0x298>)
 800a11c:	4628      	mov	r0, r5
 800a11e:	f008 fed5 	bl	8012ecc <__aeabi_fdiv>
 800a122:	497e      	ldr	r1, [pc, #504]	; (800a31c <rprintfFloat+0x288>)
 800a124:	f008 ffbc 	bl	80130a0 <__aeabi_fcmplt>
 800a128:	2800      	cmp	r0, #0
 800a12a:	f040 80e3 	bne.w	800a2f4 <rprintfFloat+0x260>
 800a12e:	4980      	ldr	r1, [pc, #512]	; (800a330 <rprintfFloat+0x29c>)
 800a130:	4628      	mov	r0, r5
 800a132:	f008 fecb 	bl	8012ecc <__aeabi_fdiv>
 800a136:	4979      	ldr	r1, [pc, #484]	; (800a31c <rprintfFloat+0x288>)
 800a138:	f008 ffb2 	bl	80130a0 <__aeabi_fcmplt>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	f040 80db 	bne.w	800a2f8 <rprintfFloat+0x264>
 800a142:	497c      	ldr	r1, [pc, #496]	; (800a334 <rprintfFloat+0x2a0>)
 800a144:	4628      	mov	r0, r5
 800a146:	f008 fec1 	bl	8012ecc <__aeabi_fdiv>
 800a14a:	4974      	ldr	r1, [pc, #464]	; (800a31c <rprintfFloat+0x288>)
 800a14c:	f008 ffa8 	bl	80130a0 <__aeabi_fcmplt>
 800a150:	2800      	cmp	r0, #0
 800a152:	f040 80d3 	bne.w	800a2fc <rprintfFloat+0x268>
 800a156:	4978      	ldr	r1, [pc, #480]	; (800a338 <rprintfFloat+0x2a4>)
 800a158:	4628      	mov	r0, r5
 800a15a:	f008 feb7 	bl	8012ecc <__aeabi_fdiv>
 800a15e:	496f      	ldr	r1, [pc, #444]	; (800a31c <rprintfFloat+0x288>)
 800a160:	f008 ff9e 	bl	80130a0 <__aeabi_fcmplt>
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 80cb 	bne.w	800a300 <rprintfFloat+0x26c>
 800a16a:	4974      	ldr	r1, [pc, #464]	; (800a33c <rprintfFloat+0x2a8>)
 800a16c:	4628      	mov	r0, r5
 800a16e:	f008 fead 	bl	8012ecc <__aeabi_fdiv>
 800a172:	496a      	ldr	r1, [pc, #424]	; (800a31c <rprintfFloat+0x288>)
 800a174:	f008 ff94 	bl	80130a0 <__aeabi_fcmplt>
 800a178:	2800      	cmp	r0, #0
 800a17a:	f040 80c3 	bne.w	800a304 <rprintfFloat+0x270>
 800a17e:	4970      	ldr	r1, [pc, #448]	; (800a340 <rprintfFloat+0x2ac>)
 800a180:	4628      	mov	r0, r5
 800a182:	f008 fea3 	bl	8012ecc <__aeabi_fdiv>
 800a186:	4965      	ldr	r1, [pc, #404]	; (800a31c <rprintfFloat+0x288>)
 800a188:	f008 ff8a 	bl	80130a0 <__aeabi_fcmplt>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f040 80bb 	bne.w	800a308 <rprintfFloat+0x274>
 800a192:	496c      	ldr	r1, [pc, #432]	; (800a344 <rprintfFloat+0x2b0>)
 800a194:	4628      	mov	r0, r5
 800a196:	f008 fe99 	bl	8012ecc <__aeabi_fdiv>
 800a19a:	4960      	ldr	r1, [pc, #384]	; (800a31c <rprintfFloat+0x288>)
 800a19c:	f008 ff80 	bl	80130a0 <__aeabi_fcmplt>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f040 80b3 	bne.w	800a30c <rprintfFloat+0x278>
 800a1a6:	4968      	ldr	r1, [pc, #416]	; (800a348 <rprintfFloat+0x2b4>)
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f008 fe8f 	bl	8012ecc <__aeabi_fdiv>
 800a1ae:	495b      	ldr	r1, [pc, #364]	; (800a31c <rprintfFloat+0x288>)
 800a1b0:	f008 ff76 	bl	80130a0 <__aeabi_fcmplt>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f040 80ab 	bne.w	800a310 <rprintfFloat+0x27c>
 800a1ba:	4964      	ldr	r1, [pc, #400]	; (800a34c <rprintfFloat+0x2b8>)
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f008 fe85 	bl	8012ecc <__aeabi_fdiv>
 800a1c2:	4956      	ldr	r1, [pc, #344]	; (800a31c <rprintfFloat+0x288>)
 800a1c4:	f008 ff6c 	bl	80130a0 <__aeabi_fcmplt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	f040 80a3 	bne.w	800a314 <rprintfFloat+0x280>
 800a1ce:	4960      	ldr	r1, [pc, #384]	; (800a350 <rprintfFloat+0x2bc>)
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f008 fe7b 	bl	8012ecc <__aeabi_fdiv>
 800a1d6:	4951      	ldr	r1, [pc, #324]	; (800a31c <rprintfFloat+0x288>)
 800a1d8:	f008 ff62 	bl	80130a0 <__aeabi_fcmplt>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d17c      	bne.n	800a2da <rprintfFloat+0x246>
                        break;
                else
                        place *= 10.0;
 800a1e0:	4c5c      	ldr	r4, [pc, #368]	; (800a354 <rprintfFloat+0x2c0>)
                rprintfChar('-');
        // convert to absolute value
        x = (x>0)?(x):(-x);
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d12e      	bne.n	800a246 <rprintfFloat+0x1b2>
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f008 fe6e 	bl	8012ecc <__aeabi_fdiv>
 800a1f0:	f008 ffa4 	bl	801313c <__aeabi_f2uiz>
 800a1f4:	b2c6      	uxtb	r6, r0
                rprintfChar(digit+0x30);
 800a1f6:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800a1fa:	fa5f f888 	uxtb.w	r8, r8

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a1fe:	f1b8 0f0a 	cmp.w	r8, #10
 800a202:	d01c      	beq.n	800a23e <rprintfFloat+0x1aa>
		rputchar('\r');
	rputchar(c);	// send character
 800a204:	4640      	mov	r0, r8
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	4790      	blx	r2
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
                rprintfChar(digit+0x30);
                if(place == 1.0){
 800a20a:	4620      	mov	r0, r4
 800a20c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a210:	f008 ff3c 	bl	801308c <__aeabi_fcmpeq>
 800a214:	b110      	cbz	r0, 800a21c <rprintfFloat+0x188>
		if(!sig)
			i++;
                x -= (digit*place);
                place /= 10.0;
        }
}
 800a216:	b003      	add	sp, #12
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800a21c:	4630      	mov	r0, r6
 800a21e:	f008 fd4d 	bl	8012cbc <__aeabi_i2f>
 800a222:	4621      	mov	r1, r4
 800a224:	f008 fd9e 	bl	8012d64 <__aeabi_fmul>
 800a228:	4601      	mov	r1, r0
 800a22a:	4628      	mov	r0, r5
 800a22c:	f008 fc90 	bl	8012b50 <__aeabi_fsub>
                place /= 10.0;
 800a230:	493a      	ldr	r1, [pc, #232]	; (800a31c <rprintfFloat+0x288>)
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800a232:	4605      	mov	r5, r0
                place /= 10.0;
 800a234:	4620      	mov	r0, r4
 800a236:	f008 fe49 	bl	8012ecc <__aeabi_fdiv>
 800a23a:	4604      	mov	r4, r0
 800a23c:	e7d4      	b.n	800a1e8 <rprintfFloat+0x154>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	200d      	movs	r0, #13
 800a242:	4788      	blx	r1
 800a244:	e7de      	b.n	800a204 <rprintfFloat+0x170>
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
                        break;
                else
                        place *= 10.0;
 800a246:	f04f 0800 	mov.w	r8, #0
 800a24a:	f04f 0a01 	mov.w	sl, #1
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a24e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800a318 <rprintfFloat+0x284>
 800a252:	e01b      	b.n	800a28c <rprintfFloat+0x1f8>
 800a254:	f8db 3000 	ldr.w	r3, [fp]
 800a258:	202e      	movs	r0, #46	; 0x2e
 800a25a:	4798      	blx	r3
                        if(numDigits)rprintfChar('.');
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
 800a25c:	f108 0a01 	add.w	sl, r8, #1
 800a260:	fa5f f88a 	uxtb.w	r8, sl
 800a264:	f04f 0a00 	mov.w	sl, #0
                        break;
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
 800a268:	45c8      	cmp	r8, r9
 800a26a:	d8d4      	bhi.n	800a216 <rprintfFloat+0x182>
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800a26c:	4630      	mov	r0, r6
 800a26e:	f008 fd25 	bl	8012cbc <__aeabi_i2f>
 800a272:	4621      	mov	r1, r4
 800a274:	f008 fd76 	bl	8012d64 <__aeabi_fmul>
 800a278:	4601      	mov	r1, r0
 800a27a:	4628      	mov	r0, r5
 800a27c:	f008 fc68 	bl	8012b50 <__aeabi_fsub>
                place /= 10.0;
 800a280:	4926      	ldr	r1, [pc, #152]	; (800a31c <rprintfFloat+0x288>)
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800a282:	4605      	mov	r5, r0
                place /= 10.0;
 800a284:	4620      	mov	r0, r4
 800a286:	f008 fe21 	bl	8012ecc <__aeabi_fdiv>
 800a28a:	4604      	mov	r4, r0
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
 800a28c:	4621      	mov	r1, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f008 fe1c 	bl	8012ecc <__aeabi_fdiv>
 800a294:	f008 ff52 	bl	801313c <__aeabi_f2uiz>
 800a298:	b2c6      	uxtb	r6, r0
                rprintfChar(digit+0x30);
 800a29a:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800a29e:	b2c3      	uxtb	r3, r0

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a2a0:	2b0a      	cmp	r3, #10
 800a2a2:	d00f      	beq.n	800a2c4 <rprintfFloat+0x230>
		rputchar('\r');
	rputchar(c);	// send character
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	4790      	blx	r2
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
                rprintfChar(digit+0x30);
                if(place == 1.0){
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2b0:	f008 feec 	bl	801308c <__aeabi_fcmpeq>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d1cd      	bne.n	800a254 <rprintfFloat+0x1c0>
                        if(numDigits)rprintfChar('.');
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
 800a2b8:	f1ba 0f00 	cmp.w	sl, #0
 800a2bc:	d0ce      	beq.n	800a25c <rprintfFloat+0x1c8>
 800a2be:	f04f 0a01 	mov.w	sl, #1
 800a2c2:	e7d1      	b.n	800a268 <rprintfFloat+0x1d4>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	200d      	movs	r0, #13
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	4788      	blx	r1
 800a2cc:	9b01      	ldr	r3, [sp, #4]
 800a2ce:	e7e9      	b.n	800a2a4 <rprintfFloat+0x210>
	rputchar(c);	// send character
 800a2d0:	4f11      	ldr	r7, [pc, #68]	; (800a318 <rprintfFloat+0x284>)
 800a2d2:	202d      	movs	r0, #45	; 0x2d
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	4798      	blx	r3
 800a2d8:	e6e9      	b.n	800a0ae <rprintfFloat+0x1a>
                rprintfChar('-');
        // convert to absolute value
        x = (x>0)?(x):(-x);
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
 800a2da:	4c1d      	ldr	r4, [pc, #116]	; (800a350 <rprintfFloat+0x2bc>)
 800a2dc:	e781      	b.n	800a1e2 <rprintfFloat+0x14e>
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
 800a2de:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 800a2e2:	e77e      	b.n	800a1e2 <rprintfFloat+0x14e>
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
                        break;
                else
                        place *= 10.0;
 800a2e4:	4c0d      	ldr	r4, [pc, #52]	; (800a31c <rprintfFloat+0x288>)
 800a2e6:	e77c      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a2e8:	4c0d      	ldr	r4, [pc, #52]	; (800a320 <rprintfFloat+0x28c>)
 800a2ea:	e77a      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a2ec:	4c0d      	ldr	r4, [pc, #52]	; (800a324 <rprintfFloat+0x290>)
 800a2ee:	e778      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a2f0:	4c0d      	ldr	r4, [pc, #52]	; (800a328 <rprintfFloat+0x294>)
 800a2f2:	e776      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a2f4:	4c0d      	ldr	r4, [pc, #52]	; (800a32c <rprintfFloat+0x298>)
 800a2f6:	e774      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a2f8:	4c0d      	ldr	r4, [pc, #52]	; (800a330 <rprintfFloat+0x29c>)
 800a2fa:	e772      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a2fc:	4c0d      	ldr	r4, [pc, #52]	; (800a334 <rprintfFloat+0x2a0>)
 800a2fe:	e770      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a300:	4c0d      	ldr	r4, [pc, #52]	; (800a338 <rprintfFloat+0x2a4>)
 800a302:	e76e      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a304:	4c0d      	ldr	r4, [pc, #52]	; (800a33c <rprintfFloat+0x2a8>)
 800a306:	e76c      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a308:	4c0d      	ldr	r4, [pc, #52]	; (800a340 <rprintfFloat+0x2ac>)
 800a30a:	e76a      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a30c:	4c0d      	ldr	r4, [pc, #52]	; (800a344 <rprintfFloat+0x2b0>)
 800a30e:	e768      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a310:	4c0d      	ldr	r4, [pc, #52]	; (800a348 <rprintfFloat+0x2b4>)
 800a312:	e766      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a314:	4c0d      	ldr	r4, [pc, #52]	; (800a34c <rprintfFloat+0x2b8>)
 800a316:	e764      	b.n	800a1e2 <rprintfFloat+0x14e>
 800a318:	2000073c 	.word	0x2000073c
 800a31c:	41200000 	.word	0x41200000
 800a320:	42c80000 	.word	0x42c80000
 800a324:	447a0000 	.word	0x447a0000
 800a328:	461c4000 	.word	0x461c4000
 800a32c:	47c35000 	.word	0x47c35000
 800a330:	49742400 	.word	0x49742400
 800a334:	4b189680 	.word	0x4b189680
 800a338:	4cbebc20 	.word	0x4cbebc20
 800a33c:	4e6e6b28 	.word	0x4e6e6b28
 800a340:	501502f9 	.word	0x501502f9
 800a344:	51ba43b7 	.word	0x51ba43b7
 800a348:	5368d4a5 	.word	0x5368d4a5
 800a34c:	551184e7 	.word	0x551184e7
 800a350:	56b5e621 	.word	0x56b5e621
 800a354:	58635fa9 	.word	0x58635fa9

0800a358 <rprintf2RamRom>:
// %c - character
// %s - strings
// and the width,precision,padding modifiers
// **this printf does not support floating point numbers
int rprintf2RamRom(const char *sfmt, ...)
{
 800a358:	b40f      	push	{r0, r1, r2, r3}
 800a35a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35e:	b089      	sub	sp, #36	; 0x24
 800a360:	ab12      	add	r3, sp, #72	; 0x48
 800a362:	f853 5b04 	ldr.w	r5, [r3], #4
	int fmt;
	unsigned char pad = ' ',f=0;
	int flush_left = 0, f_width = 0, prec = INF, hash = 0, do_long = 0;
	int sign = 0;
	va_list ap;
	va_start(ap, sfmt);
 800a366:	9307      	str	r3, [sp, #28]
	for (; sfmt[f]; f++){
 800a368:	782e      	ldrb	r6, [r5, #0]
 800a36a:	2e00      	cmp	r6, #0
 800a36c:	f000 82db 	beq.w	800a926 <rprintf2RamRom+0x5ce>
 800a370:	2400      	movs	r4, #0
 800a372:	e00b      	b.n	800a38c <rprintf2RamRom+0x34>

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a374:	2e0a      	cmp	r6, #10
 800a376:	d046      	beq.n	800a406 <rprintf2RamRom+0xae>
 800a378:	4f90      	ldr	r7, [pc, #576]	; (800a5bc <rprintf2RamRom+0x264>)
		rputchar('\r');
	rputchar(c);	// send character
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	4630      	mov	r0, r6
 800a37e:	4790      	blx	r2
	unsigned char pad = ' ',f=0;
	int flush_left = 0, f_width = 0, prec = INF, hash = 0, do_long = 0;
	int sign = 0;
	va_list ap;
	va_start(ap, sfmt);
	for (; sfmt[f]; f++){
 800a380:	3401      	adds	r4, #1
 800a382:	b2e4      	uxtb	r4, r4
 800a384:	5d2e      	ldrb	r6, [r5, r4]
 800a386:	2e00      	cmp	r6, #0
 800a388:	f000 82cd 	beq.w	800a926 <rprintf2RamRom+0x5ce>
		if (sfmt[f] != '%'){	// not a format character
 800a38c:	2e25      	cmp	r6, #37	; 0x25
 800a38e:	d1f1      	bne.n	800a374 <rprintf2RamRom+0x1c>
			// then just output the char
			rprintfChar(sfmt[f]);
		}
		else{
			f++;			// if we have a "%" then skip it
 800a390:	3401      	adds	r4, #1
 800a392:	b2e4      	uxtb	r4, r4
			if (sfmt[f] == '-'){
 800a394:	5d28      	ldrb	r0, [r5, r4]
 800a396:	192a      	adds	r2, r5, r4
 800a398:	282d      	cmp	r0, #45	; 0x2d
 800a39a:	f000 82ca 	beq.w	800a932 <rprintf2RamRom+0x5da>
 800a39e:	f04f 0800 	mov.w	r8, #0
				flush_left = 1;	// minus: flush left
				f++;
			}
            if (sfmt[f] == '0' || sfmt[f] == '.'){
 800a3a2:	2830      	cmp	r0, #48	; 0x30
 800a3a4:	f000 817a 	beq.w	800a69c <rprintf2RamRom+0x344>
 800a3a8:	282e      	cmp	r0, #46	; 0x2e
 800a3aa:	f000 8177 	beq.w	800a69c <rprintf2RamRom+0x344>
 800a3ae:	2720      	movs	r7, #32
					// padding with 0 rather than blank
					pad = '0';
					f++;
            }
            if (sfmt[f] == '*'){	// field width
 800a3b0:	282a      	cmp	r0, #42	; 0x2a
 800a3b2:	f000 817c 	beq.w	800a6ae <rprintf2RamRom+0x356>
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a3b6:	f1a0 0c30 	sub.w	ip, r0, #48	; 0x30
 800a3ba:	fa5f fb8c 	uxtb.w	fp, ip
 800a3be:	f1bb 0f09 	cmp.w	fp, #9
 800a3c2:	f240 8152 	bls.w	800a66a <rprintf2RamRom+0x312>
 800a3c6:	f04f 0b00 	mov.w	fp, #0
            else if (Isdigit(sfmt[f])){
					f_width = atoiRamRom((char *)&sfmt[f]);
					while (Isdigit(sfmt[f]))
						f++;        // skip the digits
            }
            if (sfmt[f] == '.'){	// precision
 800a3ca:	282e      	cmp	r0, #46	; 0x2e
 800a3cc:	d020      	beq.n	800a410 <rprintf2RamRom+0xb8>
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a3ce:	f647 76fe 	movw	r6, #32766	; 0x7ffe
						prec = atoiRamRom((char *)&sfmt[f]);
						while (Isdigit(sfmt[f]))
							f++;    // skip the digits
					}
				}
            if (sfmt[f] == '#'){	// alternate form
 800a3d2:	2823      	cmp	r0, #35	; 0x23
 800a3d4:	d044      	beq.n	800a460 <rprintf2RamRom+0x108>
 800a3d6:	2100      	movs	r1, #0
					hash = 1;
					f++;
            }
            if (sfmt[f] == 'l'){	// long format
 800a3d8:	286c      	cmp	r0, #108	; 0x6c
 800a3da:	d047      	beq.n	800a46c <rprintf2RamRom+0x114>
 800a3dc:	2300      	movs	r3, #0
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
				switch (fmt) {		// do the formatting
 800a3de:	286f      	cmp	r0, #111	; 0x6f
 800a3e0:	d04a      	beq.n	800a478 <rprintf2RamRom+0x120>
 800a3e2:	f200 816d 	bhi.w	800a6c0 <rprintf2RamRom+0x368>
 800a3e6:	2864      	cmp	r0, #100	; 0x64
 800a3e8:	f000 83c2 	beq.w	800ab70 <rprintf2RamRom+0x818>
 800a3ec:	f200 82ac 	bhi.w	800a948 <rprintf2RamRom+0x5f0>
 800a3f0:	2825      	cmp	r0, #37	; 0x25
 800a3f2:	f000 8398 	beq.w	800ab26 <rprintf2RamRom+0x7ce>
 800a3f6:	2863      	cmp	r0, #99	; 0x63
 800a3f8:	d1c2      	bne.n	800a380 <rprintf2RamRom+0x28>
					v = (float) (va_arg(ap, double));
					if(!f_width)f_width=9;//default width
					rprintfFloat(f_width,v);//f_width
					break;
            case 'c':			// 'c' character
					i = va_arg(ap, int);
 800a3fa:	9807      	ldr	r0, [sp, #28]
					rprintfChar((int) (i));
 800a3fc:	7806      	ldrb	r6, [r0, #0]
					v = (float) (va_arg(ap, double));
					if(!f_width)f_width=9;//default width
					rprintfFloat(f_width,v);//f_width
					break;
            case 'c':			// 'c' character
					i = va_arg(ap, int);
 800a3fe:	1d07      	adds	r7, r0, #4

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a400:	2e0a      	cmp	r6, #10
					v = (float) (va_arg(ap, double));
					if(!f_width)f_width=9;//default width
					rprintfFloat(f_width,v);//f_width
					break;
            case 'c':			// 'c' character
					i = va_arg(ap, int);
 800a402:	9707      	str	r7, [sp, #28]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a404:	d1b8      	bne.n	800a378 <rprintf2RamRom+0x20>
		rputchar('\r');
 800a406:	4f6d      	ldr	r7, [pc, #436]	; (800a5bc <rprintf2RamRom+0x264>)
 800a408:	200d      	movs	r0, #13
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	4788      	blx	r1
 800a40e:	e7b4      	b.n	800a37a <rprintf2RamRom+0x22>
					f_width = atoiRamRom((char *)&sfmt[f]);
					while (Isdigit(sfmt[f]))
						f++;        // skip the digits
            }
            if (sfmt[f] == '.'){	// precision
					f++;
 800a410:	1c60      	adds	r0, r4, #1
 800a412:	b2c4      	uxtb	r4, r0
					if (sfmt[f] == '*'){
 800a414:	5d28      	ldrb	r0, [r5, r4]
 800a416:	1929      	adds	r1, r5, r4
 800a418:	282a      	cmp	r0, #42	; 0x2a
 800a41a:	f000 84d6 	beq.w	800adca <rprintf2RamRom+0xa72>
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a41e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 800a422:	fa5f fc86 	uxtb.w	ip, r6
 800a426:	f1bc 0f09 	cmp.w	ip, #9
 800a42a:	d8d0      	bhi.n	800a3ce <rprintf2RamRom+0x76>
 800a42c:	2300      	movs	r3, #0
 800a42e:	461e      	mov	r6, r3

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
		num *= 10;
		num += str[r++] - 0x30;
 800a430:	3301      	adds	r3, #1
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
		num *= 10;
 800a432:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		num += str[r++] - 0x30;
 800a436:	b2db      	uxtb	r3, r3
 800a438:	eb00 0646 	add.w	r6, r0, r6, lsl #1
		return FALSE;
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
 800a43c:	5cc8      	ldrb	r0, [r1, r3]
		num *= 10;
		num += str[r++] - 0x30;
 800a43e:	3e30      	subs	r6, #48	; 0x30
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a440:	f1a0 0c30 	sub.w	ip, r0, #48	; 0x30
 800a444:	fa5f f28c 	uxtb.w	r2, ip
 800a448:	2a09      	cmp	r2, #9
 800a44a:	d9f1      	bls.n	800a430 <rprintf2RamRom+0xd8>
						f++;
					}
					else if (Isdigit(sfmt[f])){
						prec = atoiRamRom((char *)&sfmt[f]);
						while (Isdigit(sfmt[f]))
							f++;    // skip the digits
 800a44c:	3401      	adds	r4, #1
 800a44e:	b2e4      	uxtb	r4, r4
						prec = va_arg(ap, int);
						f++;
					}
					else if (Isdigit(sfmt[f])){
						prec = atoiRamRom((char *)&sfmt[f]);
						while (Isdigit(sfmt[f]))
 800a450:	5d28      	ldrb	r0, [r5, r4]
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a452:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800a456:	b2d1      	uxtb	r1, r2
 800a458:	2909      	cmp	r1, #9
 800a45a:	d9f7      	bls.n	800a44c <rprintf2RamRom+0xf4>
						prec = atoiRamRom((char *)&sfmt[f]);
						while (Isdigit(sfmt[f]))
							f++;    // skip the digits
					}
				}
            if (sfmt[f] == '#'){	// alternate form
 800a45c:	2823      	cmp	r0, #35	; 0x23
 800a45e:	d1ba      	bne.n	800a3d6 <rprintf2RamRom+0x7e>
					hash = 1;
					f++;
 800a460:	1c60      	adds	r0, r4, #1
 800a462:	b2c4      	uxtb	r4, r0
 800a464:	5d28      	ldrb	r0, [r5, r4]
						while (Isdigit(sfmt[f]))
							f++;    // skip the digits
					}
				}
            if (sfmt[f] == '#'){	// alternate form
					hash = 1;
 800a466:	2101      	movs	r1, #1
					f++;
            }
            if (sfmt[f] == 'l'){	// long format
 800a468:	286c      	cmp	r0, #108	; 0x6c
 800a46a:	d1b7      	bne.n	800a3dc <rprintf2RamRom+0x84>
					do_long = 1;
					f++;
 800a46c:	1c63      	adds	r3, r4, #1
 800a46e:	b2dc      	uxtb	r4, r3
 800a470:	5d28      	ldrb	r0, [r5, r4]
            if (sfmt[f] == '#'){	// alternate form
					hash = 1;
					f++;
            }
            if (sfmt[f] == 'l'){	// long format
					do_long = 1;
 800a472:	2301      	movs	r3, #1
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
				switch (fmt) {		// do the formatting
 800a474:	286f      	cmp	r0, #111	; 0x6f
 800a476:	d1b4      	bne.n	800a3e2 <rprintf2RamRom+0x8a>
							rprintfChar(' ');
					break;
            case 'o':			// 'o' octal number
            case 'x':			// 'x' hex number
            case 'u':			// 'u' unsigned decimal
					if (do_long)
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 84af 	beq.w	800addc <rprintf2RamRom+0xa84>
						u = va_arg(ap, unsigned long);
 800a47e:	9e07      	ldr	r6, [sp, #28]
 800a480:	1d33      	adds	r3, r6, #4
					else
						u = (unsigned long) (va_arg(ap, unsigned));
					if (fmt == 'u'){// unsigned decimal
 800a482:	2875      	cmp	r0, #117	; 0x75
					break;
            case 'o':			// 'o' octal number
            case 'x':			// 'x' hex number
            case 'u':			// 'u' unsigned decimal
					if (do_long)
						u = va_arg(ap, unsigned long);
 800a484:	9307      	str	r3, [sp, #28]
 800a486:	6833      	ldr	r3, [r6, #0]
					else
						u = (unsigned long) (va_arg(ap, unsigned));
					if (fmt == 'u'){// unsigned decimal
 800a488:	f000 84af 	beq.w	800adea <rprintf2RamRom+0xa92>
						do {
							*bp++ = u % 10 + '0';
						} while ((u /= 10) > 0);
					}
					else if (fmt == 'o'){  // octal
 800a48c:	286f      	cmp	r0, #111	; 0x6f
 800a48e:	f000 85a6 	beq.w	800afde <rprintf2RamRom+0xc86>
							*bp++ = u % 8 + '0';
						} while ((u /= 8) > 0);
						if (hash)
							*bp++ = '0';
					}
					else if (fmt == 'x'){	// hex
 800a492:	2878      	cmp	r0, #120	; 0x78
 800a494:	f000 84e2 	beq.w	800ae5c <rprintf2RamRom+0xb04>
 800a498:	4a49      	ldr	r2, [pc, #292]	; (800a5c0 <rprintf2RamRom+0x268>)
					do_long = 1;
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
 800a49a:	1c56      	adds	r6, r2, #1
							*bp++ = u % 8 + '0';
						} while ((u /= 8) > 0);
						if (hash)
							*bp++ = '0';
					}
					else if (fmt == 'x'){	// hex
 800a49c:	9203      	str	r2, [sp, #12]
					do_long = 1;
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
 800a49e:	4632      	mov	r2, r6
						if (hash){
							*bp++ = 'x';
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
 800a4a0:	44b3      	add	fp, r6
 800a4a2:	ebc2 0b0b 	rsb	fp, r2, fp
					if (!flush_left)
 800a4a6:	f1b8 0f00 	cmp.w	r8, #0
 800a4aa:	d143      	bne.n	800a534 <rprintf2RamRom+0x1dc>
						while (i-- > 0)
 800a4ac:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a4b0:	f1bb 0f00 	cmp.w	fp, #0
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	f340 8608 	ble.w	800b0ca <rprintf2RamRom+0xd72>
 800a4ba:	f8df a100 	ldr.w	sl, [pc, #256]	; 800a5bc <rprintf2RamRom+0x264>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f8da 3000 	ldr.w	r3, [sl]
 800a4c4:	4798      	blx	r3
 800a4c6:	f04f 0901 	mov.w	r9, #1
 800a4ca:	9804      	ldr	r0, [sp, #16]
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
 800a4cc:	45d9      	cmp	r9, fp
 800a4ce:	f000 0303 	and.w	r3, r0, #3
 800a4d2:	d02c      	beq.n	800a52e <rprintf2RamRom+0x1d6>
 800a4d4:	b1bb      	cbz	r3, 800a506 <rprintf2RamRom+0x1ae>
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d00d      	beq.n	800a4f6 <rprintf2RamRom+0x19e>
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d005      	beq.n	800a4ea <rprintf2RamRom+0x192>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a4de:	f8da 3000 	ldr.w	r3, [sl]
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	4798      	blx	r3
 800a4e6:	f04f 0902 	mov.w	r9, #2
 800a4ea:	f8da 1000 	ldr.w	r1, [sl]
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	4788      	blx	r1
 800a4f2:	f109 0901 	add.w	r9, r9, #1
 800a4f6:	f8da 2000 	ldr.w	r2, [sl]
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f109 0901 	add.w	r9, r9, #1
 800a500:	4790      	blx	r2
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
 800a502:	45d9      	cmp	r9, fp
 800a504:	d013      	beq.n	800a52e <rprintf2RamRom+0x1d6>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a506:	f8da 1000 	ldr.w	r1, [sl]
 800a50a:	4638      	mov	r0, r7
 800a50c:	4788      	blx	r1
 800a50e:	f8da 3000 	ldr.w	r3, [sl]
 800a512:	4638      	mov	r0, r7
 800a514:	4798      	blx	r3
 800a516:	4638      	mov	r0, r7
 800a518:	f8da 2000 	ldr.w	r2, [sl]
 800a51c:	4790      	blx	r2
 800a51e:	f109 0904 	add.w	r9, r9, #4
 800a522:	f8da 1000 	ldr.w	r1, [sl]
 800a526:	4638      	mov	r0, r7
 800a528:	4788      	blx	r1
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
 800a52a:	45d9      	cmp	r9, fp
 800a52c:	d1eb      	bne.n	800a506 <rprintf2RamRom+0x1ae>
 800a52e:	9804      	ldr	r0, [sp, #16]
 800a530:	ebcb 0b00 	rsb	fp, fp, r0
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800a534:	9a03      	ldr	r2, [sp, #12]
 800a536:	42b2      	cmp	r2, r6
 800a538:	f0c0 84a5 	bcc.w	800ae86 <rprintf2RamRom+0xb2e>
						rprintfChar((int) (*bp));
 800a53c:	4617      	mov	r7, r2
 800a53e:	f817 9901 	ldrb.w	r9, [r7], #-1
 800a542:	ebc6 0e02 	rsb	lr, r6, r2

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a546:	f1b9 0f0a 	cmp.w	r9, #10
 800a54a:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a5bc <rprintf2RamRom+0x264>
 800a54e:	f00e 0303 	and.w	r3, lr, #3
 800a552:	f000 8571 	beq.w	800b038 <rprintf2RamRom+0xce0>
		rputchar('\r');
	rputchar(c);	// send character
 800a556:	f8da 2000 	ldr.w	r2, [sl]
 800a55a:	4648      	mov	r0, r9
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	4790      	blx	r2
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800a560:	42b7      	cmp	r7, r6
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	f0c0 848f 	bcc.w	800ae86 <rprintf2RamRom+0xb2e>
 800a568:	b323      	cbz	r3, 800a5b4 <rprintf2RamRom+0x25c>
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d015      	beq.n	800a59a <rprintf2RamRom+0x242>
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d009      	beq.n	800a586 <rprintf2RamRom+0x22e>
						rprintfChar((int) (*bp));
 800a572:	f817 9901 	ldrb.w	r9, [r7], #-1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a576:	f1b9 0f0a 	cmp.w	r9, #10
 800a57a:	f000 8583 	beq.w	800b084 <rprintf2RamRom+0xd2c>
		rputchar('\r');
	rputchar(c);	// send character
 800a57e:	f8da 1000 	ldr.w	r1, [sl]
 800a582:	4648      	mov	r0, r9
 800a584:	4788      	blx	r1
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a586:	f817 9901 	ldrb.w	r9, [r7], #-1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a58a:	f1b9 0f0a 	cmp.w	r9, #10
 800a58e:	f000 8573 	beq.w	800b078 <rprintf2RamRom+0xd20>
		rputchar('\r');
	rputchar(c);	// send character
 800a592:	f8da 3000 	ldr.w	r3, [sl]
 800a596:	4648      	mov	r0, r9
 800a598:	4798      	blx	r3
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a59a:	f817 9901 	ldrb.w	r9, [r7], #-1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a59e:	f1b9 0f0a 	cmp.w	r9, #10
 800a5a2:	f000 8575 	beq.w	800b090 <rprintf2RamRom+0xd38>
		rputchar('\r');
	rputchar(c);	// send character
 800a5a6:	f8da 2000 	ldr.w	r2, [sl]
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	4790      	blx	r2
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800a5ae:	42b7      	cmp	r7, r6
 800a5b0:	f0c0 8469 	bcc.w	800ae86 <rprintf2RamRom+0xb2e>
 800a5b4:	9503      	str	r5, [sp, #12]
 800a5b6:	4625      	mov	r5, r4
 800a5b8:	4634      	mov	r4, r6
 800a5ba:	e025      	b.n	800a608 <rprintf2RamRom+0x2b0>
 800a5bc:	2000073c 	.word	0x2000073c
 800a5c0:	2000073f 	.word	0x2000073f
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f8da 6000 	ldr.w	r6, [sl]
 800a5ca:	47b0      	blx	r6
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a5cc:	f899 6000 	ldrb.w	r6, [r9]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a5d0:	2e0a      	cmp	r6, #10
 800a5d2:	d02a      	beq.n	800a62a <rprintf2RamRom+0x2d2>
		rputchar('\r');
	rputchar(c);	// send character
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f8da 6000 	ldr.w	r6, [sl]
 800a5da:	47b0      	blx	r6
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a5dc:	f819 6c01 	ldrb.w	r6, [r9, #-1]
 800a5e0:	f1a9 0703 	sub.w	r7, r9, #3

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a5e4:	2e0a      	cmp	r6, #10
 800a5e6:	d02e      	beq.n	800a646 <rprintf2RamRom+0x2ee>
		rputchar('\r');
	rputchar(c);	// send character
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f8da 1000 	ldr.w	r1, [sl]
 800a5ee:	4788      	blx	r1
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a5f0:	f819 9c02 	ldrb.w	r9, [r9, #-2]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a5f4:	f1b9 0f0a 	cmp.w	r9, #10
 800a5f8:	d032      	beq.n	800a660 <rprintf2RamRom+0x308>
		rputchar('\r');
	rputchar(c);	// send character
 800a5fa:	f8da 6000 	ldr.w	r6, [sl]
 800a5fe:	4648      	mov	r0, r9
 800a600:	47b0      	blx	r6
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800a602:	42a7      	cmp	r7, r4
 800a604:	f0c0 843d 	bcc.w	800ae82 <rprintf2RamRom+0xb2a>
						rprintfChar((int) (*bp));
 800a608:	46b9      	mov	r9, r7
 800a60a:	f819 6901 	ldrb.w	r6, [r9], #-1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a60e:	2e0a      	cmp	r6, #10
 800a610:	d1d8      	bne.n	800a5c4 <rprintf2RamRom+0x26c>
		rputchar('\r');
 800a612:	200d      	movs	r0, #13
 800a614:	f8da 7000 	ldr.w	r7, [sl]
 800a618:	47b8      	blx	r7
	rputchar(c);	// send character
 800a61a:	4630      	mov	r0, r6
 800a61c:	f8da 6000 	ldr.w	r6, [sl]
 800a620:	47b0      	blx	r6
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a622:	f899 6000 	ldrb.w	r6, [r9]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a626:	2e0a      	cmp	r6, #10
 800a628:	d1d4      	bne.n	800a5d4 <rprintf2RamRom+0x27c>
		rputchar('\r');
 800a62a:	200d      	movs	r0, #13
 800a62c:	f8da 7000 	ldr.w	r7, [sl]
 800a630:	47b8      	blx	r7
	rputchar(c);	// send character
 800a632:	4630      	mov	r0, r6
 800a634:	f8da 6000 	ldr.w	r6, [sl]
 800a638:	47b0      	blx	r6
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a63a:	f819 6c01 	ldrb.w	r6, [r9, #-1]
 800a63e:	f1a9 0703 	sub.w	r7, r9, #3

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a642:	2e0a      	cmp	r6, #10
 800a644:	d1d0      	bne.n	800a5e8 <rprintf2RamRom+0x290>
		rputchar('\r');
 800a646:	200d      	movs	r0, #13
 800a648:	f8da 3000 	ldr.w	r3, [sl]
 800a64c:	4798      	blx	r3
	rputchar(c);	// send character
 800a64e:	4630      	mov	r0, r6
 800a650:	f8da 1000 	ldr.w	r1, [sl]
 800a654:	4788      	blx	r1
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
 800a656:	f819 9c02 	ldrb.w	r9, [r9, #-2]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a65a:	f1b9 0f0a 	cmp.w	r9, #10
 800a65e:	d1cc      	bne.n	800a5fa <rprintf2RamRom+0x2a2>
		rputchar('\r');
 800a660:	200d      	movs	r0, #13
 800a662:	f8da 2000 	ldr.w	r2, [sl]
 800a666:	4790      	blx	r2
 800a668:	e7c7      	b.n	800a5fa <rprintf2RamRom+0x2a2>
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a66a:	2300      	movs	r3, #0
 800a66c:	469b      	mov	fp, r3

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
		num *= 10;
		num += str[r++] - 0x30;
 800a66e:	3301      	adds	r3, #1
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
		num *= 10;
 800a670:	eb0b 0c8b 	add.w	ip, fp, fp, lsl #2
		num += str[r++] - 0x30;
 800a674:	b2db      	uxtb	r3, r3
 800a676:	eb00 0b4c 	add.w	fp, r0, ip, lsl #1
		return FALSE;
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
 800a67a:	5cd0      	ldrb	r0, [r2, r3]
		num *= 10;
		num += str[r++] - 0x30;
 800a67c:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a680:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 800a684:	b2f1      	uxtb	r1, r6
 800a686:	2909      	cmp	r1, #9
 800a688:	d9f1      	bls.n	800a66e <rprintf2RamRom+0x316>
					f++;
            }
            else if (Isdigit(sfmt[f])){
					f_width = atoiRamRom((char *)&sfmt[f]);
					while (Isdigit(sfmt[f]))
						f++;        // skip the digits
 800a68a:	3401      	adds	r4, #1
 800a68c:	b2e4      	uxtb	r4, r4
					f_width = va_arg(ap, int);
					f++;
            }
            else if (Isdigit(sfmt[f])){
					f_width = atoiRamRom((char *)&sfmt[f]);
					while (Isdigit(sfmt[f]))
 800a68e:	5d28      	ldrb	r0, [r5, r4]
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800a690:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800a694:	b2ca      	uxtb	r2, r1
 800a696:	2a09      	cmp	r2, #9
 800a698:	d9f7      	bls.n	800a68a <rprintf2RamRom+0x332>
 800a69a:	e696      	b.n	800a3ca <rprintf2RamRom+0x72>
				f++;
			}
            if (sfmt[f] == '0' || sfmt[f] == '.'){
					// padding with 0 rather than blank
					pad = '0';
					f++;
 800a69c:	1c61      	adds	r1, r4, #1
 800a69e:	b2cc      	uxtb	r4, r1
 800a6a0:	5d28      	ldrb	r0, [r5, r4]
				flush_left = 1;	// minus: flush left
				f++;
			}
            if (sfmt[f] == '0' || sfmt[f] == '.'){
					// padding with 0 rather than blank
					pad = '0';
 800a6a2:	2730      	movs	r7, #48	; 0x30
					f++;
            }
            if (sfmt[f] == '*'){	// field width
 800a6a4:	282a      	cmp	r0, #42	; 0x2a
				f++;
			}
            if (sfmt[f] == '0' || sfmt[f] == '.'){
					// padding with 0 rather than blank
					pad = '0';
					f++;
 800a6a6:	eb05 0204 	add.w	r2, r5, r4
            }
            if (sfmt[f] == '*'){	// field width
 800a6aa:	f47f ae84 	bne.w	800a3b6 <rprintf2RamRom+0x5e>
					f_width = va_arg(ap, int);
 800a6ae:	9e07      	ldr	r6, [sp, #28]
					f++;
 800a6b0:	1c63      	adds	r3, r4, #1
					// padding with 0 rather than blank
					pad = '0';
					f++;
            }
            if (sfmt[f] == '*'){	// field width
					f_width = va_arg(ap, int);
 800a6b2:	1d32      	adds	r2, r6, #4
 800a6b4:	9207      	str	r2, [sp, #28]
					f++;
 800a6b6:	b2dc      	uxtb	r4, r3
					// padding with 0 rather than blank
					pad = '0';
					f++;
            }
            if (sfmt[f] == '*'){	// field width
					f_width = va_arg(ap, int);
 800a6b8:	f8d6 b000 	ldr.w	fp, [r6]
					f++;
 800a6bc:	5d28      	ldrb	r0, [r5, r4]
 800a6be:	e684      	b.n	800a3ca <rprintf2RamRom+0x72>
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
				switch (fmt) {		// do the formatting
 800a6c0:	2875      	cmp	r0, #117	; 0x75
 800a6c2:	f43f aed9 	beq.w	800a478 <rprintf2RamRom+0x120>
 800a6c6:	2878      	cmp	r0, #120	; 0x78
 800a6c8:	f43f aed6 	beq.w	800a478 <rprintf2RamRom+0x120>
 800a6cc:	2873      	cmp	r0, #115	; 0x73
 800a6ce:	f47f ae57 	bne.w	800a380 <rprintf2RamRom+0x28>
            case 'c':			// 'c' character
					i = va_arg(ap, int);
					rprintfChar((int) (i));
					break;
            case 's':			// 's' string
					bp = va_arg(ap, unsigned char *);
 800a6d2:	9a07      	ldr	r2, [sp, #28]
					if (!bp)
						bp = (unsigned char *) "(nil)";
 800a6d4:	489a      	ldr	r0, [pc, #616]	; (800a940 <rprintf2RamRom+0x5e8>)
            case 'c':			// 'c' character
					i = va_arg(ap, int);
					rprintfChar((int) (i));
					break;
            case 's':			// 's' string
					bp = va_arg(ap, unsigned char *);
 800a6d6:	6813      	ldr	r3, [r2, #0]
 800a6d8:	1d11      	adds	r1, r2, #4
					if (!bp)
						bp = (unsigned char *) "(nil)";
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	bf14      	ite	ne
 800a6de:	4699      	movne	r9, r3
 800a6e0:	4681      	moveq	r9, r0
            case 'c':			// 'c' character
					i = va_arg(ap, int);
					rprintfChar((int) (i));
					break;
            case 's':			// 's' string
					bp = va_arg(ap, unsigned char *);
 800a6e2:	9107      	str	r1, [sp, #28]
	}
	return num;
}

int rStrLen(char *str) {
	unsigned char i=0;
 800a6e4:	2300      	movs	r3, #0
	while(str[i++]);
 800a6e6:	f819 0003 	ldrb.w	r0, [r9, r3]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1f9      	bne.n	800a6e6 <rprintf2RamRom+0x38e>
					break;
            case 's':			// 's' string
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
 800a6f2:	ebc3 030b 	rsb	r3, r3, fp
 800a6f6:	9303      	str	r3, [sp, #12]
					if (!flush_left)
 800a6f8:	f1b8 0f00 	cmp.w	r8, #0
 800a6fc:	d14f      	bne.n	800a79e <rprintf2RamRom+0x446>
 800a6fe:	469a      	mov	sl, r3
						while (f_width-- > 0)
 800a700:	3b01      	subs	r3, #1
 800a702:	f1ba 0f00 	cmp.w	sl, #0
 800a706:	9304      	str	r3, [sp, #16]
 800a708:	f340 84a9 	ble.w	800b05e <rprintf2RamRom+0xd06>
 800a70c:	f8df b234 	ldr.w	fp, [pc, #564]	; 800a944 <rprintf2RamRom+0x5ec>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a710:	4638      	mov	r0, r7
 800a712:	f8db 3000 	ldr.w	r3, [fp]
 800a716:	4798      	blx	r3
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
 800a718:	9903      	ldr	r1, [sp, #12]
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a71a:	f04f 0a01 	mov.w	sl, #1
 800a71e:	9a04      	ldr	r2, [sp, #16]
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
 800a720:	458a      	cmp	sl, r1
 800a722:	f002 0303 	and.w	r3, r2, #3
 800a726:	d036      	beq.n	800a796 <rprintf2RamRom+0x43e>
 800a728:	b1c3      	cbz	r3, 800a75c <rprintf2RamRom+0x404>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d00d      	beq.n	800a74a <rprintf2RamRom+0x3f2>
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d005      	beq.n	800a73e <rprintf2RamRom+0x3e6>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a732:	f8db 3000 	ldr.w	r3, [fp]
 800a736:	4638      	mov	r0, r7
 800a738:	4798      	blx	r3
 800a73a:	f04f 0a02 	mov.w	sl, #2
 800a73e:	f8db 2000 	ldr.w	r2, [fp]
 800a742:	4638      	mov	r0, r7
 800a744:	4790      	blx	r2
 800a746:	f10a 0a01 	add.w	sl, sl, #1
 800a74a:	4638      	mov	r0, r7
 800a74c:	f8db 1000 	ldr.w	r1, [fp]
 800a750:	4788      	blx	r1
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
 800a752:	9803      	ldr	r0, [sp, #12]
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a754:	f10a 0a01 	add.w	sl, sl, #1
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
 800a758:	4582      	cmp	sl, r0
 800a75a:	d01c      	beq.n	800a796 <rprintf2RamRom+0x43e>
 800a75c:	f8cd 9014 	str.w	r9, [sp, #20]
 800a760:	46a9      	mov	r9, r5
 800a762:	4625      	mov	r5, r4
 800a764:	9c03      	ldr	r4, [sp, #12]
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a766:	f8db 1000 	ldr.w	r1, [fp]
 800a76a:	4638      	mov	r0, r7
 800a76c:	4788      	blx	r1
 800a76e:	f8db 3000 	ldr.w	r3, [fp]
 800a772:	4638      	mov	r0, r7
 800a774:	4798      	blx	r3
 800a776:	4638      	mov	r0, r7
 800a778:	f8db 2000 	ldr.w	r2, [fp]
 800a77c:	4790      	blx	r2
 800a77e:	f10a 0a04 	add.w	sl, sl, #4
 800a782:	f8db 1000 	ldr.w	r1, [fp]
 800a786:	4638      	mov	r0, r7
 800a788:	4788      	blx	r1
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
 800a78a:	45a2      	cmp	sl, r4
 800a78c:	d1eb      	bne.n	800a766 <rprintf2RamRom+0x40e>
 800a78e:	462c      	mov	r4, r5
 800a790:	464d      	mov	r5, r9
 800a792:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a796:	9a03      	ldr	r2, [sp, #12]
 800a798:	9b04      	ldr	r3, [sp, #16]
 800a79a:	1a98      	subs	r0, r3, r2
 800a79c:	9003      	str	r0, [sp, #12]
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a79e:	f899 a000 	ldrb.w	sl, [r9]
 800a7a2:	f1ba 0f00 	cmp.w	sl, #0
 800a7a6:	d07e      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a7a8:	2e00      	cmp	r6, #0
 800a7aa:	dd7c      	ble.n	800a8a6 <rprintf2RamRom+0x54e>
 800a7ac:	1e71      	subs	r1, r6, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a7ae:	f1ba 0f0a 	cmp.w	sl, #10
 800a7b2:	4f64      	ldr	r7, [pc, #400]	; (800a944 <rprintf2RamRom+0x5ec>)
 800a7b4:	f001 0303 	and.w	r3, r1, #3
 800a7b8:	f000 842e 	beq.w	800b018 <rprintf2RamRom+0xcc0>
		rputchar('\r');
	rputchar(c);	// send character
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	4650      	mov	r0, sl
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	4788      	blx	r1
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a7c4:	f819 af01 	ldrb.w	sl, [r9, #1]!
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	f1ba 0f00 	cmp.w	sl, #0
 800a7ce:	d06a      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a7d0:	f04f 0b01 	mov.w	fp, #1
 800a7d4:	45b3      	cmp	fp, r6
 800a7d6:	d066      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d02f      	beq.n	800a83c <rprintf2RamRom+0x4e4>
 800a7dc:	455b      	cmp	r3, fp
 800a7de:	d01d      	beq.n	800a81c <rprintf2RamRom+0x4c4>
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d00d      	beq.n	800a800 <rprintf2RamRom+0x4a8>

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a7e4:	f1ba 0f0a 	cmp.w	sl, #10
 800a7e8:	f000 843c 	beq.w	800b064 <rprintf2RamRom+0xd0c>
		rputchar('\r');
	rputchar(c);	// send character
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	4790      	blx	r2
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a7f2:	f819 af01 	ldrb.w	sl, [r9, #1]!
 800a7f6:	f1ba 0f00 	cmp.w	sl, #0
 800a7fa:	d054      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a7fc:	f10b 0b01 	add.w	fp, fp, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a800:	f1ba 0f0a 	cmp.w	sl, #10
 800a804:	f000 8454 	beq.w	800b0b0 <rprintf2RamRom+0xd58>
		rputchar('\r');
	rputchar(c);	// send character
 800a808:	4650      	mov	r0, sl
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	4798      	blx	r3
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a80e:	f819 af01 	ldrb.w	sl, [r9, #1]!
 800a812:	f1ba 0f00 	cmp.w	sl, #0
 800a816:	d046      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a818:	f10b 0b01 	add.w	fp, fp, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a81c:	f1ba 0f0a 	cmp.w	sl, #10
 800a820:	f000 844b 	beq.w	800b0ba <rprintf2RamRom+0xd62>
		rputchar('\r');
	rputchar(c);	// send character
 800a824:	4650      	mov	r0, sl
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	4788      	blx	r1
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a82a:	f819 af01 	ldrb.w	sl, [r9, #1]!
 800a82e:	f1ba 0f00 	cmp.w	sl, #0
 800a832:	d038      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a834:	f10b 0b01 	add.w	fp, fp, #1
 800a838:	45b3      	cmp	fp, r6
 800a83a:	d034      	beq.n	800a8a6 <rprintf2RamRom+0x54e>
 800a83c:	9504      	str	r5, [sp, #16]
 800a83e:	4625      	mov	r5, r4
 800a840:	4634      	mov	r4, r6
 800a842:	4656      	mov	r6, sl

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a844:	2e0a      	cmp	r6, #10
 800a846:	f000 83a6 	beq.w	800af96 <rprintf2RamRom+0xc3e>
		rputchar('\r');
	rputchar(c);	// send character
 800a84a:	4630      	mov	r0, r6
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	4798      	blx	r3
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a850:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800a854:	b32e      	cbz	r6, 800a8a2 <rprintf2RamRom+0x54a>

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a856:	2e0a      	cmp	r6, #10
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a858:	f10b 0b01 	add.w	fp, fp, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a85c:	f000 83b3 	beq.w	800afc6 <rprintf2RamRom+0xc6e>
		rputchar('\r');
	rputchar(c);	// send character
 800a860:	4630      	mov	r0, r6
 800a862:	683a      	ldr	r2, [r7, #0]
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a864:	46ca      	mov	sl, r9
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a866:	4790      	blx	r2
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a868:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800a86c:	b1ce      	cbz	r6, 800a8a2 <rprintf2RamRom+0x54a>

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a86e:	2e0a      	cmp	r6, #10
 800a870:	f000 83ad 	beq.w	800afce <rprintf2RamRom+0xc76>
		rputchar('\r');
	rputchar(c);	// send character
 800a874:	4630      	mov	r0, r6
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	4798      	blx	r3
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a87a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800a87e:	f109 0a02 	add.w	sl, r9, #2
 800a882:	b176      	cbz	r6, 800a8a2 <rprintf2RamRom+0x54a>

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800a884:	2e0a      	cmp	r6, #10
 800a886:	f000 83a6 	beq.w	800afd6 <rprintf2RamRom+0xc7e>
		rputchar('\r');
	rputchar(c);	// send character
 800a88a:	4630      	mov	r0, r6
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	4788      	blx	r1
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++){
 800a890:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800a894:	f109 0903 	add.w	r9, r9, #3
 800a898:	b11e      	cbz	r6, 800a8a2 <rprintf2RamRom+0x54a>
 800a89a:	f10b 0b03 	add.w	fp, fp, #3
 800a89e:	45a3      	cmp	fp, r4
 800a8a0:	d1d0      	bne.n	800a844 <rprintf2RamRom+0x4ec>
 800a8a2:	462c      	mov	r4, r5
 800a8a4:	9d04      	ldr	r5, [sp, #16]
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
 800a8a6:	f1b8 0f00 	cmp.w	r8, #0
 800a8aa:	f43f ad69 	beq.w	800a380 <rprintf2RamRom+0x28>
						while (f_width-- > 0)
 800a8ae:	9a03      	ldr	r2, [sp, #12]
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	f77f ad65 	ble.w	800a380 <rprintf2RamRom+0x28>
 800a8b6:	4f23      	ldr	r7, [pc, #140]	; (800a944 <rprintf2RamRom+0x5ec>)
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a8b8:	2020      	movs	r0, #32
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	f102 38ff 	add.w	r8, r2, #4294967295
 800a8c0:	4788      	blx	r1
					for (i = 0; *bp && i < prec; i++){
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
						while (f_width-- > 0)
 800a8c2:	9803      	ldr	r0, [sp, #12]
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a8c4:	2601      	movs	r6, #1
					for (i = 0; *bp && i < prec; i++){
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
						while (f_width-- > 0)
 800a8c6:	4286      	cmp	r6, r0
 800a8c8:	f008 0803 	and.w	r8, r8, #3
 800a8cc:	f43f ad58 	beq.w	800a380 <rprintf2RamRom+0x28>
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	f000 83f6 	beq.w	800b0c4 <rprintf2RamRom+0xd6c>
 800a8d8:	f1b8 0f01 	cmp.w	r8, #1
 800a8dc:	d00a      	beq.n	800a8f4 <rprintf2RamRom+0x59c>
 800a8de:	f1b8 0f02 	cmp.w	r8, #2
 800a8e2:	d003      	beq.n	800a8ec <rprintf2RamRom+0x594>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a8e4:	683e      	ldr	r6, [r7, #0]
 800a8e6:	2020      	movs	r0, #32
 800a8e8:	47b0      	blx	r6
 800a8ea:	2602      	movs	r6, #2
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2020      	movs	r0, #32
 800a8f0:	4798      	blx	r3
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	2020      	movs	r0, #32
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	4788      	blx	r1
					for (i = 0; *bp && i < prec; i++){
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
						while (f_width-- > 0)
 800a8fa:	9a03      	ldr	r2, [sp, #12]
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a8fc:	3601      	adds	r6, #1
					for (i = 0; *bp && i < prec; i++){
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
						while (f_width-- > 0)
 800a8fe:	4296      	cmp	r6, r2
 800a900:	f43f ad3e 	beq.w	800a380 <rprintf2RamRom+0x28>
 800a904:	4690      	mov	r8, r2
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	2020      	movs	r0, #32
 800a90a:	4790      	blx	r2
 800a90c:	2020      	movs	r0, #32
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	4788      	blx	r1
 800a912:	2020      	movs	r0, #32
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	4798      	blx	r3
 800a918:	3604      	adds	r6, #4
 800a91a:	2020      	movs	r0, #32
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	4790      	blx	r2
					for (i = 0; *bp && i < prec; i++){
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
						while (f_width-- > 0)
 800a920:	4546      	cmp	r6, r8
 800a922:	d1f0      	bne.n	800a906 <rprintf2RamRom+0x5ae>
 800a924:	e52c      	b.n	800a380 <rprintf2RamRom+0x28>
			pad = ' ';
		}
	}
	va_end(ap);
	return 0;
}
 800a926:	2000      	movs	r0, #0
 800a928:	b009      	add	sp, #36	; 0x24
 800a92a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92e:	b004      	add	sp, #16
 800a930:	4770      	bx	lr
		}
		else{
			f++;			// if we have a "%" then skip it
			if (sfmt[f] == '-'){
				flush_left = 1;	// minus: flush left
				f++;
 800a932:	1c60      	adds	r0, r4, #1
 800a934:	b2c4      	uxtb	r4, r0
 800a936:	192a      	adds	r2, r5, r4
 800a938:	5d28      	ldrb	r0, [r5, r4]
			rprintfChar(sfmt[f]);
		}
		else{
			f++;			// if we have a "%" then skip it
			if (sfmt[f] == '-'){
				flush_left = 1;	// minus: flush left
 800a93a:	f04f 0801 	mov.w	r8, #1
 800a93e:	e530      	b.n	800a3a2 <rprintf2RamRom+0x4a>
 800a940:	0801b344 	.word	0x0801b344
 800a944:	2000073c 	.word	0x2000073c
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
				switch (fmt) {		// do the formatting
 800a948:	2866      	cmp	r0, #102	; 0x66
 800a94a:	f47f ad19 	bne.w	800a380 <rprintf2RamRom+0x28>
					if (flush_left)
						while (i-- > 0)
							rprintfChar(' ');
					break;
	    case 'f':			// 'f' character
					v = (float) (va_arg(ap, double));
 800a94e:	9a07      	ldr	r2, [sp, #28]
 800a950:	3207      	adds	r2, #7
 800a952:	f022 0207 	bic.w	r2, r2, #7
 800a956:	f102 0308 	add.w	r3, r2, #8
 800a95a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	f008 f8a2 	bl	8012aa8 <__aeabi_d2f>
 800a964:	4607      	mov	r7, r0
					if(!f_width)f_width=9;//default width
 800a966:	f1bb 0f00 	cmp.w	fp, #0
 800a96a:	f000 8267 	beq.w	800ae3c <rprintf2RamRom+0xae4>
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
        // print polarity character
        if(x<0)
 800a96e:	4638      	mov	r0, r7
 800a970:	2100      	movs	r1, #0
						while (i-- > 0)
							rprintfChar(' ');
					break;
	    case 'f':			// 'f' character
					v = (float) (va_arg(ap, double));
					if(!f_width)f_width=9;//default width
 800a972:	fa5f fb8b 	uxtb.w	fp, fp
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
        // print polarity character
        if(x<0)
 800a976:	f008 fb93 	bl	80130a0 <__aeabi_fcmplt>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f040 8267 	bne.w	800ae4e <rprintf2RamRom+0xaf6>
 800a980:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 800ab6c <rprintf2RamRom+0x814>
                rprintfChar('-');
        // convert to absolute value
        x = (x>0)?(x):(-x);
 800a984:	4638      	mov	r0, r7
 800a986:	2100      	movs	r1, #0
 800a988:	f008 fba8 	bl	80130dc <__aeabi_fcmpgt>
 800a98c:	b910      	cbnz	r0, 800a994 <rprintf2RamRom+0x63c>
 800a98e:	f107 4900 	add.w	r9, r7, #2147483648	; 0x80000000
 800a992:	464f      	mov	r7, r9
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
 800a994:	4638      	mov	r0, r7
 800a996:	4966      	ldr	r1, [pc, #408]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a998:	f008 fb82 	bl	80130a0 <__aeabi_fcmplt>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	f040 8399 	bne.w	800b0d4 <rprintf2RamRom+0xd7c>
 800a9a2:	4963      	ldr	r1, [pc, #396]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a9a4:	4638      	mov	r0, r7
 800a9a6:	f008 fa91 	bl	8012ecc <__aeabi_fdiv>
 800a9aa:	4961      	ldr	r1, [pc, #388]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a9ac:	f008 fb78 	bl	80130a0 <__aeabi_fcmplt>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	f040 838d 	bne.w	800b0d0 <rprintf2RamRom+0xd78>
 800a9b6:	495f      	ldr	r1, [pc, #380]	; (800ab34 <rprintf2RamRom+0x7dc>)
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f008 fa87 	bl	8012ecc <__aeabi_fdiv>
 800a9be:	495c      	ldr	r1, [pc, #368]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a9c0:	f008 fb6e 	bl	80130a0 <__aeabi_fcmplt>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	f040 8388 	bne.w	800b0da <rprintf2RamRom+0xd82>
 800a9ca:	495b      	ldr	r1, [pc, #364]	; (800ab38 <rprintf2RamRom+0x7e0>)
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	f008 fa7d 	bl	8012ecc <__aeabi_fdiv>
 800a9d2:	4957      	ldr	r1, [pc, #348]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a9d4:	f008 fb64 	bl	80130a0 <__aeabi_fcmplt>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f040 8382 	bne.w	800b0e2 <rprintf2RamRom+0xd8a>
 800a9de:	4957      	ldr	r1, [pc, #348]	; (800ab3c <rprintf2RamRom+0x7e4>)
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f008 fa73 	bl	8012ecc <__aeabi_fdiv>
 800a9e6:	4952      	ldr	r1, [pc, #328]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a9e8:	f008 fb5a 	bl	80130a0 <__aeabi_fcmplt>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f040 8376 	bne.w	800b0de <rprintf2RamRom+0xd86>
 800a9f2:	4953      	ldr	r1, [pc, #332]	; (800ab40 <rprintf2RamRom+0x7e8>)
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f008 fa69 	bl	8012ecc <__aeabi_fdiv>
 800a9fa:	494d      	ldr	r1, [pc, #308]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800a9fc:	f008 fb50 	bl	80130a0 <__aeabi_fcmplt>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	f040 8372 	bne.w	800b0ea <rprintf2RamRom+0xd92>
 800aa06:	494f      	ldr	r1, [pc, #316]	; (800ab44 <rprintf2RamRom+0x7ec>)
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f008 fa5f 	bl	8012ecc <__aeabi_fdiv>
 800aa0e:	4948      	ldr	r1, [pc, #288]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa10:	f008 fb46 	bl	80130a0 <__aeabi_fcmplt>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f040 8366 	bne.w	800b0e6 <rprintf2RamRom+0xd8e>
 800aa1a:	494b      	ldr	r1, [pc, #300]	; (800ab48 <rprintf2RamRom+0x7f0>)
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f008 fa55 	bl	8012ecc <__aeabi_fdiv>
 800aa22:	4943      	ldr	r1, [pc, #268]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa24:	f008 fb3c 	bl	80130a0 <__aeabi_fcmplt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f040 8375 	bne.w	800b118 <rprintf2RamRom+0xdc0>
 800aa2e:	4947      	ldr	r1, [pc, #284]	; (800ab4c <rprintf2RamRom+0x7f4>)
 800aa30:	4638      	mov	r0, r7
 800aa32:	f008 fa4b 	bl	8012ecc <__aeabi_fdiv>
 800aa36:	493e      	ldr	r1, [pc, #248]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa38:	f008 fb32 	bl	80130a0 <__aeabi_fcmplt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 8369 	bne.w	800b114 <rprintf2RamRom+0xdbc>
 800aa42:	4943      	ldr	r1, [pc, #268]	; (800ab50 <rprintf2RamRom+0x7f8>)
 800aa44:	4638      	mov	r0, r7
 800aa46:	f008 fa41 	bl	8012ecc <__aeabi_fdiv>
 800aa4a:	4939      	ldr	r1, [pc, #228]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa4c:	f008 fb28 	bl	80130a0 <__aeabi_fcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f040 8365 	bne.w	800b120 <rprintf2RamRom+0xdc8>
 800aa56:	493f      	ldr	r1, [pc, #252]	; (800ab54 <rprintf2RamRom+0x7fc>)
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f008 fa37 	bl	8012ecc <__aeabi_fdiv>
 800aa5e:	4934      	ldr	r1, [pc, #208]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa60:	f008 fb1e 	bl	80130a0 <__aeabi_fcmplt>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f040 8359 	bne.w	800b11c <rprintf2RamRom+0xdc4>
 800aa6a:	493b      	ldr	r1, [pc, #236]	; (800ab58 <rprintf2RamRom+0x800>)
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	f008 fa2d 	bl	8012ecc <__aeabi_fdiv>
 800aa72:	492f      	ldr	r1, [pc, #188]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa74:	f008 fb14 	bl	80130a0 <__aeabi_fcmplt>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	f040 8355 	bne.w	800b128 <rprintf2RamRom+0xdd0>
 800aa7e:	4937      	ldr	r1, [pc, #220]	; (800ab5c <rprintf2RamRom+0x804>)
 800aa80:	4638      	mov	r0, r7
 800aa82:	f008 fa23 	bl	8012ecc <__aeabi_fdiv>
 800aa86:	492a      	ldr	r1, [pc, #168]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa88:	f008 fb0a 	bl	80130a0 <__aeabi_fcmplt>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f040 8349 	bne.w	800b124 <rprintf2RamRom+0xdcc>
 800aa92:	4933      	ldr	r1, [pc, #204]	; (800ab60 <rprintf2RamRom+0x808>)
 800aa94:	4638      	mov	r0, r7
 800aa96:	f008 fa19 	bl	8012ecc <__aeabi_fdiv>
 800aa9a:	4925      	ldr	r1, [pc, #148]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aa9c:	f008 fb00 	bl	80130a0 <__aeabi_fcmplt>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	f040 8343 	bne.w	800b12c <rprintf2RamRom+0xdd4>
 800aaa6:	492f      	ldr	r1, [pc, #188]	; (800ab64 <rprintf2RamRom+0x80c>)
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f008 fa0f 	bl	8012ecc <__aeabi_fdiv>
 800aaae:	4920      	ldr	r1, [pc, #128]	; (800ab30 <rprintf2RamRom+0x7d8>)
 800aab0:	f008 faf6 	bl	80130a0 <__aeabi_fcmplt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f040 833b 	bne.w	800b130 <rprintf2RamRom+0xdd8>
 800aaba:	4e2b      	ldr	r6, [pc, #172]	; (800ab68 <rprintf2RamRom+0x810>)
 800aabc:	f1bb 0f00 	cmp.w	fp, #0
 800aac0:	d01d      	beq.n	800aafe <rprintf2RamRom+0x7a6>
 800aac2:	e21d      	b.n	800af00 <rprintf2RamRom+0xba8>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800aac4:	4650      	mov	r0, sl
 800aac6:	f8d8 2000 	ldr.w	r2, [r8]
 800aaca:	4790      	blx	r2
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
                rprintfChar(digit+0x30);
                if(place == 1.0){
 800aacc:	4630      	mov	r0, r6
 800aace:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aad2:	f008 fadb 	bl	801308c <__aeabi_fcmpeq>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f47f ac52 	bne.w	800a380 <rprintf2RamRom+0x28>
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800aadc:	4648      	mov	r0, r9
 800aade:	f008 f8ed 	bl	8012cbc <__aeabi_i2f>
 800aae2:	4601      	mov	r1, r0
 800aae4:	4630      	mov	r0, r6
 800aae6:	f008 f93d 	bl	8012d64 <__aeabi_fmul>
 800aaea:	4601      	mov	r1, r0
 800aaec:	4638      	mov	r0, r7
 800aaee:	f008 f82f 	bl	8012b50 <__aeabi_fsub>
                place /= 10.0;
 800aaf2:	490f      	ldr	r1, [pc, #60]	; (800ab30 <rprintf2RamRom+0x7d8>)
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800aaf4:	4607      	mov	r7, r0
                place /= 10.0;
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f008 f9e8 	bl	8012ecc <__aeabi_fdiv>
 800aafc:	4606      	mov	r6, r0
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
 800aafe:	4631      	mov	r1, r6
 800ab00:	4638      	mov	r0, r7
 800ab02:	f008 f9e3 	bl	8012ecc <__aeabi_fdiv>
 800ab06:	f008 fb19 	bl	801313c <__aeabi_f2uiz>
 800ab0a:	fa5f f980 	uxtb.w	r9, r0
                rprintfChar(digit+0x30);
 800ab0e:	f109 0a30 	add.w	sl, r9, #48	; 0x30
 800ab12:	fa5f fa8a 	uxtb.w	sl, sl

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ab16:	f1ba 0f0a 	cmp.w	sl, #10
 800ab1a:	d1d3      	bne.n	800aac4 <rprintf2RamRom+0x76c>
		rputchar('\r');
 800ab1c:	f8d8 1000 	ldr.w	r1, [r8]
 800ab20:	200d      	movs	r0, #13
 800ab22:	4788      	blx	r1
 800ab24:	e7ce      	b.n	800aac4 <rprintf2RamRom+0x76c>
	rputchar(c);	// send character
 800ab26:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <rprintf2RamRom+0x814>)
 800ab28:	681e      	ldr	r6, [r3, #0]
 800ab2a:	47b0      	blx	r6
						while (f_width-- > 0)
							rprintfChar(' ');
					break;
            case '%':			// '%' character
					rprintfChar('%');
					break;
 800ab2c:	e428      	b.n	800a380 <rprintf2RamRom+0x28>
 800ab2e:	bf00      	nop
 800ab30:	41200000 	.word	0x41200000
 800ab34:	42c80000 	.word	0x42c80000
 800ab38:	447a0000 	.word	0x447a0000
 800ab3c:	461c4000 	.word	0x461c4000
 800ab40:	47c35000 	.word	0x47c35000
 800ab44:	49742400 	.word	0x49742400
 800ab48:	4b189680 	.word	0x4b189680
 800ab4c:	4cbebc20 	.word	0x4cbebc20
 800ab50:	4e6e6b28 	.word	0x4e6e6b28
 800ab54:	501502f9 	.word	0x501502f9
 800ab58:	51ba43b7 	.word	0x51ba43b7
 800ab5c:	5368d4a5 	.word	0x5368d4a5
 800ab60:	551184e7 	.word	0x551184e7
 800ab64:	56b5e621 	.word	0x56b5e621
 800ab68:	58635fa9 	.word	0x58635fa9
 800ab6c:	2000073c 	.word	0x2000073c

				fmt = sfmt[f];
				bp = buf;
				switch (fmt) {		// do the formatting
				case 'd':			// 'd' signed decimal
					if (do_long)
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 8150 	beq.w	800ae16 <rprintf2RamRom+0xabe>
						l = va_arg(ap, long);
 800ab76:	9e07      	ldr	r6, [sp, #28]
 800ab78:	6832      	ldr	r2, [r6, #0]
 800ab7a:	1d31      	adds	r1, r6, #4
					else
						l = (long) (va_arg(ap, int));
					if (l < 0){
 800ab7c:	2a00      	cmp	r2, #0
				fmt = sfmt[f];
				bp = buf;
				switch (fmt) {		// do the formatting
				case 'd':			// 'd' signed decimal
					if (do_long)
						l = va_arg(ap, long);
 800ab7e:	9107      	str	r1, [sp, #28]
					else
						l = (long) (va_arg(ap, int));
					if (l < 0){
 800ab80:	f2c0 8150 	blt.w	800ae24 <rprintf2RamRom+0xacc>
 800ab84:	2000      	movs	r0, #0
					do_long = 1;
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
 800ab86:	49a9      	ldr	r1, [pc, #676]	; (800ae2c <rprintf2RamRom+0xad4>)
					if (l < 0){
						sign = 1;
						l = -l;
					}
					do{
						*bp++ = l % 10 + '0';
 800ab88:	4ba9      	ldr	r3, [pc, #676]	; (800ae30 <rprintf2RamRom+0xad8>)
 800ab8a:	fb83 3602 	smull	r3, r6, r3, r2
 800ab8e:	17d3      	asrs	r3, r2, #31
 800ab90:	ebc3 0aa6 	rsb	sl, r3, r6, asr #2
 800ab94:	eb0a 0c8a 	add.w	ip, sl, sl, lsl #2
 800ab98:	eba2 034c 	sub.w	r3, r2, ip, lsl #1
 800ab9c:	460e      	mov	r6, r1
 800ab9e:	3330      	adds	r3, #48	; 0x30
 800aba0:	f806 3b01 	strb.w	r3, [r6], #1
					} while ((l /= 10) > 0);
 800aba4:	f1ba 0200 	subs.w	r2, sl, #0
					if (l < 0){
						sign = 1;
						l = -l;
					}
					do{
						*bp++ = l % 10 + '0';
 800aba8:	4631      	mov	r1, r6
					} while ((l /= 10) > 0);
 800abaa:	dced      	bgt.n	800ab88 <rprintf2RamRom+0x830>
					if (sign)
 800abac:	b110      	cbz	r0, 800abb4 <rprintf2RamRom+0x85c>
						*bp++ = '-';
 800abae:	212d      	movs	r1, #45	; 0x2d
 800abb0:	f806 1b01 	strb.w	r1, [r6], #1
					f_width = f_width - (bp - buf);
 800abb4:	4a9d      	ldr	r2, [pc, #628]	; (800ae2c <rprintf2RamRom+0xad4>)
 800abb6:	4493      	add	fp, r2
 800abb8:	ebc6 0a0b 	rsb	sl, r6, fp
					if (!flush_left)
 800abbc:	f1b8 0f00 	cmp.w	r8, #0
 800abc0:	d143      	bne.n	800ac4a <rprintf2RamRom+0x8f2>
						while (f_width-- > 0)
 800abc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800abc6:	f1ba 0f00 	cmp.w	sl, #0
 800abca:	9303      	str	r3, [sp, #12]
 800abcc:	f340 8245 	ble.w	800b05a <rprintf2RamRom+0xd02>
 800abd0:	f1a2 0b04 	sub.w	fp, r2, #4
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800abd4:	4638      	mov	r0, r7
 800abd6:	f8db 2000 	ldr.w	r2, [fp]
 800abda:	4790      	blx	r2
 800abdc:	f04f 0901 	mov.w	r9, #1
 800abe0:	9803      	ldr	r0, [sp, #12]
					} while ((l /= 10) > 0);
					if (sign)
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
 800abe2:	45d1      	cmp	r9, sl
 800abe4:	f000 0303 	and.w	r3, r0, #3
 800abe8:	d02c      	beq.n	800ac44 <rprintf2RamRom+0x8ec>
 800abea:	b1bb      	cbz	r3, 800ac1c <rprintf2RamRom+0x8c4>
 800abec:	2b01      	cmp	r3, #1
 800abee:	d00d      	beq.n	800ac0c <rprintf2RamRom+0x8b4>
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d005      	beq.n	800ac00 <rprintf2RamRom+0x8a8>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800abf4:	f8db 3000 	ldr.w	r3, [fp]
 800abf8:	4638      	mov	r0, r7
 800abfa:	4798      	blx	r3
 800abfc:	f04f 0902 	mov.w	r9, #2
 800ac00:	f8db 2000 	ldr.w	r2, [fp]
 800ac04:	4638      	mov	r0, r7
 800ac06:	4790      	blx	r2
 800ac08:	f109 0901 	add.w	r9, r9, #1
 800ac0c:	f8db 1000 	ldr.w	r1, [fp]
 800ac10:	4638      	mov	r0, r7
 800ac12:	f109 0901 	add.w	r9, r9, #1
 800ac16:	4788      	blx	r1
					} while ((l /= 10) > 0);
					if (sign)
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
 800ac18:	45d1      	cmp	r9, sl
 800ac1a:	d013      	beq.n	800ac44 <rprintf2RamRom+0x8ec>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800ac1c:	f8db 3000 	ldr.w	r3, [fp]
 800ac20:	4638      	mov	r0, r7
 800ac22:	4798      	blx	r3
 800ac24:	f8db 2000 	ldr.w	r2, [fp]
 800ac28:	4638      	mov	r0, r7
 800ac2a:	4790      	blx	r2
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	f8db 1000 	ldr.w	r1, [fp]
 800ac32:	4788      	blx	r1
 800ac34:	f109 0904 	add.w	r9, r9, #4
 800ac38:	f8db 3000 	ldr.w	r3, [fp]
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	4798      	blx	r3
					} while ((l /= 10) > 0);
					if (sign)
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
 800ac40:	45d1      	cmp	r9, sl
 800ac42:	d1eb      	bne.n	800ac1c <rprintf2RamRom+0x8c4>
 800ac44:	9803      	ldr	r0, [sp, #12]
 800ac46:	ebca 0a00 	rsb	sl, sl, r0
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800ac4a:	4a78      	ldr	r2, [pc, #480]	; (800ae2c <rprintf2RamRom+0xad4>)
 800ac4c:	f106 3bff 	add.w	fp, r6, #4294967295
 800ac50:	4593      	cmp	fp, r2
 800ac52:	d33c      	bcc.n	800acce <rprintf2RamRom+0x976>
						rprintfChar(*bp);
 800ac54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac58:	1b91      	subs	r1, r2, r6
 800ac5a:	43ce      	mvns	r6, r1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ac5c:	2b0a      	cmp	r3, #10
 800ac5e:	f006 0103 	and.w	r1, r6, #3
// %x - hex
// %c - character
// %s - strings
// and the width,precision,padding modifiers
// **this printf does not support floating point numbers
int rprintf2RamRom(const char *sfmt, ...)
 800ac62:	4617      	mov	r7, r2
 800ac64:	f1a2 0904 	sub.w	r9, r2, #4
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800ac68:	465e      	mov	r6, fp

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ac6a:	f000 81dc 	beq.w	800b026 <rprintf2RamRom+0xcce>
		rputchar('\r');
	rputchar(c);	// send character
 800ac6e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ac72:	4618      	mov	r0, r3
 800ac74:	9102      	str	r1, [sp, #8]
 800ac76:	4790      	blx	r2
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800ac78:	42be      	cmp	r6, r7
 800ac7a:	9902      	ldr	r1, [sp, #8]
 800ac7c:	d027      	beq.n	800acce <rprintf2RamRom+0x976>
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	f000 808f 	beq.w	800ada2 <rprintf2RamRom+0xa4a>
 800ac84:	2901      	cmp	r1, #1
 800ac86:	d016      	beq.n	800acb6 <rprintf2RamRom+0x95e>
 800ac88:	2902      	cmp	r1, #2
 800ac8a:	d00a      	beq.n	800aca2 <rprintf2RamRom+0x94a>
						rprintfChar(*bp);
 800ac8c:	f81b bc01 	ldrb.w	fp, [fp, #-1]
 800ac90:	3e01      	subs	r6, #1

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ac92:	f1bb 0f0a 	cmp.w	fp, #10
 800ac96:	f000 81ea 	beq.w	800b06e <rprintf2RamRom+0xd16>
		rputchar('\r');
	rputchar(c);	// send character
 800ac9a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800ac9e:	4658      	mov	r0, fp
 800aca0:	4798      	blx	r3
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800aca2:	f816 bd01 	ldrb.w	fp, [r6, #-1]!

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800aca6:	f1bb 0f0a 	cmp.w	fp, #10
 800acaa:	f000 81f7 	beq.w	800b09c <rprintf2RamRom+0xd44>
		rputchar('\r');
	rputchar(c);	// send character
 800acae:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800acb2:	4658      	mov	r0, fp
 800acb4:	4788      	blx	r1
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800acb6:	f816 bd01 	ldrb.w	fp, [r6, #-1]!

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800acba:	f1bb 0f0a 	cmp.w	fp, #10
 800acbe:	f000 81f2 	beq.w	800b0a6 <rprintf2RamRom+0xd4e>
		rputchar('\r');
	rputchar(c);	// send character
 800acc2:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800acc6:	4658      	mov	r0, fp
 800acc8:	4790      	blx	r2
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800acca:	42be      	cmp	r6, r7
 800accc:	d169      	bne.n	800ada2 <rprintf2RamRom+0xa4a>
						rprintfChar(*bp);
					if (flush_left)
 800acce:	f1b8 0f00 	cmp.w	r8, #0
 800acd2:	f43f ab55 	beq.w	800a380 <rprintf2RamRom+0x28>
						while (f_width-- > 0)
 800acd6:	f1ba 0f00 	cmp.w	sl, #0
 800acda:	f77f ab51 	ble.w	800a380 <rprintf2RamRom+0x28>
 800acde:	4f55      	ldr	r7, [pc, #340]	; (800ae34 <rprintf2RamRom+0xadc>)
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800ace0:	2020      	movs	r0, #32
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	2601      	movs	r6, #1
 800ace6:	f10a 38ff 	add.w	r8, sl, #4294967295
 800acea:	4788      	blx	r1
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
					if (flush_left)
						while (f_width-- > 0)
 800acec:	4556      	cmp	r6, sl
 800acee:	f008 0803 	and.w	r8, r8, #3
 800acf2:	f43f ab45 	beq.w	800a380 <rprintf2RamRom+0x28>
 800acf6:	f1b8 0f00 	cmp.w	r8, #0
 800acfa:	d014      	beq.n	800ad26 <rprintf2RamRom+0x9ce>
 800acfc:	f1b8 0f01 	cmp.w	r8, #1
 800ad00:	d00a      	beq.n	800ad18 <rprintf2RamRom+0x9c0>
 800ad02:	f1b8 0f02 	cmp.w	r8, #2
 800ad06:	d003      	beq.n	800ad10 <rprintf2RamRom+0x9b8>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800ad08:	683e      	ldr	r6, [r7, #0]
 800ad0a:	2020      	movs	r0, #32
 800ad0c:	47b0      	blx	r6
 800ad0e:	2602      	movs	r6, #2
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2020      	movs	r0, #32
 800ad14:	4798      	blx	r3
 800ad16:	3601      	adds	r6, #1
 800ad18:	2020      	movs	r0, #32
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	3601      	adds	r6, #1
 800ad1e:	4790      	blx	r2
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
					if (flush_left)
						while (f_width-- > 0)
 800ad20:	4556      	cmp	r6, sl
 800ad22:	f43f ab2d 	beq.w	800a380 <rprintf2RamRom+0x28>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	2020      	movs	r0, #32
 800ad2a:	4790      	blx	r2
 800ad2c:	2020      	movs	r0, #32
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	4788      	blx	r1
 800ad32:	2020      	movs	r0, #32
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	4798      	blx	r3
 800ad38:	3604      	adds	r6, #4
 800ad3a:	2020      	movs	r0, #32
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	4790      	blx	r2
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
					if (flush_left)
						while (f_width-- > 0)
 800ad40:	4556      	cmp	r6, sl
 800ad42:	d1f0      	bne.n	800ad26 <rprintf2RamRom+0x9ce>
 800ad44:	f7ff bb1c 	b.w	800a380 <rprintf2RamRom+0x28>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800ad48:	f8d9 2000 	ldr.w	r2, [r9]
 800ad4c:	200d      	movs	r0, #13
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	4790      	blx	r2
 800ad52:	9b01      	ldr	r3, [sp, #4]
	rputchar(c);	// send character
 800ad54:	4618      	mov	r0, r3
 800ad56:	f8d9 3000 	ldr.w	r3, [r9]
 800ad5a:	4798      	blx	r3
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800ad5c:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ad60:	2b0a      	cmp	r3, #10
 800ad62:	d02b      	beq.n	800adbc <rprintf2RamRom+0xa64>
		rputchar('\r');
	rputchar(c);	// send character
 800ad64:	4618      	mov	r0, r3
 800ad66:	f8d9 3000 	ldr.w	r3, [r9]
 800ad6a:	4798      	blx	r3
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800ad6c:	f81b bc01 	ldrb.w	fp, [fp, #-1]
 800ad70:	1eb0      	subs	r0, r6, #2

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ad72:	f1bb 0f0a 	cmp.w	fp, #10
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800ad76:	9003      	str	r0, [sp, #12]
 800ad78:	f1a6 0603 	sub.w	r6, r6, #3

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ad7c:	f000 810f 	beq.w	800af9e <rprintf2RamRom+0xc46>
		rputchar('\r');
	rputchar(c);	// send character
 800ad80:	4658      	mov	r0, fp
 800ad82:	f8d9 3000 	ldr.w	r3, [r9]
 800ad86:	4798      	blx	r3
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800ad88:	9903      	ldr	r1, [sp, #12]
 800ad8a:	f811 bc01 	ldrb.w	fp, [r1, #-1]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ad8e:	f1bb 0f0a 	cmp.w	fp, #10
 800ad92:	f000 8113 	beq.w	800afbc <rprintf2RamRom+0xc64>
		rputchar('\r');
	rputchar(c);	// send character
 800ad96:	f8d9 1000 	ldr.w	r1, [r9]
 800ad9a:	4658      	mov	r0, fp
 800ad9c:	4788      	blx	r1
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
 800ad9e:	42be      	cmp	r6, r7
 800ada0:	d095      	beq.n	800acce <rprintf2RamRom+0x976>
						rprintfChar(*bp);
 800ada2:	f816 3d01 	ldrb.w	r3, [r6, #-1]!

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800ada6:	2b0a      	cmp	r3, #10
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800ada8:	46b3      	mov	fp, r6

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800adaa:	d0cd      	beq.n	800ad48 <rprintf2RamRom+0x9f0>
		rputchar('\r');
	rputchar(c);	// send character
 800adac:	4618      	mov	r0, r3
 800adae:	f8d9 3000 	ldr.w	r3, [r9]
 800adb2:	4798      	blx	r3
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800adb4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800adb8:	2b0a      	cmp	r3, #10
 800adba:	d1d3      	bne.n	800ad64 <rprintf2RamRom+0xa0c>
		rputchar('\r');
 800adbc:	f8d9 1000 	ldr.w	r1, [r9]
 800adc0:	200d      	movs	r0, #13
 800adc2:	9301      	str	r3, [sp, #4]
 800adc4:	4788      	blx	r1
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	e7cc      	b.n	800ad64 <rprintf2RamRom+0xa0c>
						f++;        // skip the digits
            }
            if (sfmt[f] == '.'){	// precision
					f++;
					if (sfmt[f] == '*'){
						prec = va_arg(ap, int);
 800adca:	9e07      	ldr	r6, [sp, #28]
						f++;
 800adcc:	1c63      	adds	r3, r4, #1
						f++;        // skip the digits
            }
            if (sfmt[f] == '.'){	// precision
					f++;
					if (sfmt[f] == '*'){
						prec = va_arg(ap, int);
 800adce:	1d32      	adds	r2, r6, #4
 800add0:	9207      	str	r2, [sp, #28]
						f++;
 800add2:	b2dc      	uxtb	r4, r3
						f++;        // skip the digits
            }
            if (sfmt[f] == '.'){	// precision
					f++;
					if (sfmt[f] == '*'){
						prec = va_arg(ap, int);
 800add4:	6836      	ldr	r6, [r6, #0]
						f++;
 800add6:	5d28      	ldrb	r0, [r5, r4]
 800add8:	f7ff bafb 	b.w	800a3d2 <rprintf2RamRom+0x7a>
            case 'x':			// 'x' hex number
            case 'u':			// 'u' unsigned decimal
					if (do_long)
						u = va_arg(ap, unsigned long);
					else
						u = (unsigned long) (va_arg(ap, unsigned));
 800addc:	9e07      	ldr	r6, [sp, #28]
 800adde:	1d32      	adds	r2, r6, #4
					if (fmt == 'u'){// unsigned decimal
 800ade0:	2875      	cmp	r0, #117	; 0x75
            case 'x':			// 'x' hex number
            case 'u':			// 'u' unsigned decimal
					if (do_long)
						u = va_arg(ap, unsigned long);
					else
						u = (unsigned long) (va_arg(ap, unsigned));
 800ade2:	6833      	ldr	r3, [r6, #0]
 800ade4:	9207      	str	r2, [sp, #28]
					if (fmt == 'u'){// unsigned decimal
 800ade6:	f47f ab51 	bne.w	800a48c <rprintf2RamRom+0x134>
					do_long = 1;
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
 800adea:	4e10      	ldr	r6, [pc, #64]	; (800ae2c <rprintf2RamRom+0xad4>)
 800adec:	4630      	mov	r0, r6
						u = va_arg(ap, unsigned long);
					else
						u = (unsigned long) (va_arg(ap, unsigned));
					if (fmt == 'u'){// unsigned decimal
						do {
							*bp++ = u % 10 + '0';
 800adee:	4a12      	ldr	r2, [pc, #72]	; (800ae38 <rprintf2RamRom+0xae0>)
 800adf0:	fba2 2103 	umull	r2, r1, r2, r3
 800adf4:	08c9      	lsrs	r1, r1, #3
 800adf6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800adfa:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
 800adfe:	4602      	mov	r2, r0
 800ae00:	3330      	adds	r3, #48	; 0x30
 800ae02:	f802 3b01 	strb.w	r3, [r2], #1
 800ae06:	4610      	mov	r0, r2
						} while ((u /= 10) > 0);
 800ae08:	460b      	mov	r3, r1
 800ae0a:	2900      	cmp	r1, #0
 800ae0c:	d1ef      	bne.n	800adee <rprintf2RamRom+0xa96>
 800ae0e:	1e50      	subs	r0, r2, #1
 800ae10:	9003      	str	r0, [sp, #12]
 800ae12:	f7ff bb45 	b.w	800a4a0 <rprintf2RamRom+0x148>
				switch (fmt) {		// do the formatting
				case 'd':			// 'd' signed decimal
					if (do_long)
						l = va_arg(ap, long);
					else
						l = (long) (va_arg(ap, int));
 800ae16:	9a07      	ldr	r2, [sp, #28]
 800ae18:	1d10      	adds	r0, r2, #4
 800ae1a:	6812      	ldr	r2, [r2, #0]
 800ae1c:	9007      	str	r0, [sp, #28]
					if (l < 0){
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	f6bf aeb0 	bge.w	800ab84 <rprintf2RamRom+0x82c>
						sign = 1;
						l = -l;
 800ae24:	4252      	negs	r2, r2
					if (do_long)
						l = va_arg(ap, long);
					else
						l = (long) (va_arg(ap, int));
					if (l < 0){
						sign = 1;
 800ae26:	2001      	movs	r0, #1
 800ae28:	e6ad      	b.n	800ab86 <rprintf2RamRom+0x82e>
 800ae2a:	bf00      	nop
 800ae2c:	20000740 	.word	0x20000740
 800ae30:	66666667 	.word	0x66666667
 800ae34:	2000073c 	.word	0x2000073c
 800ae38:	cccccccd 	.word	0xcccccccd
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
        // print polarity character
        if(x<0)
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	2100      	movs	r1, #0
						while (i-- > 0)
							rprintfChar(' ');
					break;
	    case 'f':			// 'f' character
					v = (float) (va_arg(ap, double));
					if(!f_width)f_width=9;//default width
 800ae40:	f04f 0b09 	mov.w	fp, #9
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
        // print polarity character
        if(x<0)
 800ae44:	f008 f92c 	bl	80130a0 <__aeabi_fcmplt>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	f43f ad99 	beq.w	800a980 <rprintf2RamRom+0x628>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800ae4e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 800b0f4 <rprintf2RamRom+0xd9c>
 800ae52:	202d      	movs	r0, #45	; 0x2d
 800ae54:	f8d8 6000 	ldr.w	r6, [r8]
 800ae58:	47b0      	blx	r6
 800ae5a:	e593      	b.n	800a984 <rprintf2RamRom+0x62c>
							*bp++ = u % 8 + '0';
						} while ((u /= 8) > 0);
						if (hash)
							*bp++ = '0';
					}
					else if (fmt == 'x'){	// hex
 800ae5c:	48a4      	ldr	r0, [pc, #656]	; (800b0f0 <rprintf2RamRom+0xd98>)
 800ae5e:	e007      	b.n	800ae70 <rprintf2RamRom+0xb18>
						do {
							i = u % 16;
							if (i < 10)
								*bp++ = i + '0';
 800ae60:	3230      	adds	r2, #48	; 0x30
 800ae62:	f800 2c01 	strb.w	r2, [r0, #-1]
 800ae66:	4602      	mov	r2, r0
							else
								*bp++ = i - 10 + 'a';
						} while ((u /= 16) > 0);
 800ae68:	3001      	adds	r0, #1
 800ae6a:	091b      	lsrs	r3, r3, #4
 800ae6c:	f000 80c8 	beq.w	800b000 <rprintf2RamRom+0xca8>
						if (hash)
							*bp++ = '0';
					}
					else if (fmt == 'x'){	// hex
						do {
							i = u % 16;
 800ae70:	f003 020f 	and.w	r2, r3, #15
							if (i < 10)
 800ae74:	2a09      	cmp	r2, #9
 800ae76:	ddf3      	ble.n	800ae60 <rprintf2RamRom+0xb08>
								*bp++ = i + '0';
							else
								*bp++ = i - 10 + 'a';
 800ae78:	3257      	adds	r2, #87	; 0x57
 800ae7a:	f800 2c01 	strb.w	r2, [r0, #-1]
 800ae7e:	4602      	mov	r2, r0
 800ae80:	e7f2      	b.n	800ae68 <rprintf2RamRom+0xb10>
 800ae82:	462c      	mov	r4, r5
 800ae84:	9d03      	ldr	r5, [sp, #12]
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
					if (flush_left)
 800ae86:	f1b8 0f00 	cmp.w	r8, #0
 800ae8a:	f43f aa79 	beq.w	800a380 <rprintf2RamRom+0x28>
						while (i-- > 0)
 800ae8e:	f1bb 0f00 	cmp.w	fp, #0
 800ae92:	f77f aa75 	ble.w	800a380 <rprintf2RamRom+0x28>
 800ae96:	4f97      	ldr	r7, [pc, #604]	; (800b0f4 <rprintf2RamRom+0xd9c>)
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800ae98:	2020      	movs	r0, #32
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	2601      	movs	r6, #1
 800ae9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800aea2:	4790      	blx	r2
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
					if (flush_left)
						while (i-- > 0)
 800aea4:	455e      	cmp	r6, fp
 800aea6:	f008 0803 	and.w	r8, r8, #3
 800aeaa:	f43f aa69 	beq.w	800a380 <rprintf2RamRom+0x28>
 800aeae:	f1b8 0f00 	cmp.w	r8, #0
 800aeb2:	d014      	beq.n	800aede <rprintf2RamRom+0xb86>
 800aeb4:	f1b8 0f01 	cmp.w	r8, #1
 800aeb8:	d00a      	beq.n	800aed0 <rprintf2RamRom+0xb78>
 800aeba:	f1b8 0f02 	cmp.w	r8, #2
 800aebe:	d003      	beq.n	800aec8 <rprintf2RamRom+0xb70>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	2020      	movs	r0, #32
 800aec4:	4788      	blx	r1
 800aec6:	2602      	movs	r6, #2
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	2020      	movs	r0, #32
 800aecc:	4790      	blx	r2
 800aece:	3601      	adds	r6, #1
 800aed0:	2020      	movs	r0, #32
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	3601      	adds	r6, #1
 800aed6:	4798      	blx	r3
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
					if (flush_left)
						while (i-- > 0)
 800aed8:	455e      	cmp	r6, fp
 800aeda:	f43f aa51 	beq.w	800a380 <rprintf2RamRom+0x28>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2020      	movs	r0, #32
 800aee2:	4798      	blx	r3
 800aee4:	2020      	movs	r0, #32
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	4790      	blx	r2
 800aeea:	2020      	movs	r0, #32
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	4788      	blx	r1
 800aef0:	3604      	adds	r6, #4
 800aef2:	2020      	movs	r0, #32
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	4798      	blx	r3
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
					if (flush_left)
						while (i-- > 0)
 800aef8:	455e      	cmp	r6, fp
 800aefa:	d1f0      	bne.n	800aede <rprintf2RamRom+0xb86>
 800aefc:	f7ff ba40 	b.w	800a380 <rprintf2RamRom+0x28>
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
 800af00:	2001      	movs	r0, #1
 800af02:	46a9      	mov	r9, r5
 800af04:	f04f 0a00 	mov.w	sl, #0
 800af08:	9403      	str	r4, [sp, #12]
 800af0a:	4605      	mov	r5, r0
 800af0c:	e01b      	b.n	800af46 <rprintf2RamRom+0xbee>
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
	rputchar(c);	// send character
 800af0e:	4b79      	ldr	r3, [pc, #484]	; (800b0f4 <rprintf2RamRom+0xd9c>)
 800af10:	202e      	movs	r0, #46	; 0x2e
 800af12:	681d      	ldr	r5, [r3, #0]
 800af14:	47a8      	blx	r5
                        if(numDigits)rprintfChar('.');
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
 800af16:	f10a 0e01 	add.w	lr, sl, #1
 800af1a:	fa5f fa8e 	uxtb.w	sl, lr
 800af1e:	2500      	movs	r5, #0
                        break;
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
 800af20:	45da      	cmp	sl, fp
 800af22:	d82d      	bhi.n	800af80 <rprintf2RamRom+0xc28>
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800af24:	4620      	mov	r0, r4
 800af26:	f007 fec9 	bl	8012cbc <__aeabi_i2f>
 800af2a:	4601      	mov	r1, r0
 800af2c:	4630      	mov	r0, r6
 800af2e:	f007 ff19 	bl	8012d64 <__aeabi_fmul>
 800af32:	4601      	mov	r1, r0
 800af34:	4638      	mov	r0, r7
 800af36:	f007 fe0b 	bl	8012b50 <__aeabi_fsub>
                place /= 10.0;
 800af3a:	496f      	ldr	r1, [pc, #444]	; (800b0f8 <rprintf2RamRom+0xda0>)
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
			i++;
                x -= (digit*place);
 800af3c:	4607      	mov	r7, r0
                place /= 10.0;
 800af3e:	4630      	mov	r0, r6
 800af40:	f007 ffc4 	bl	8012ecc <__aeabi_fdiv>
 800af44:	4606      	mov	r6, r0
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
 800af46:	4631      	mov	r1, r6
 800af48:	4638      	mov	r0, r7
 800af4a:	f007 ffbf 	bl	8012ecc <__aeabi_fdiv>
 800af4e:	f008 f8f5 	bl	801313c <__aeabi_f2uiz>
 800af52:	b2c4      	uxtb	r4, r0
                rprintfChar(digit+0x30);
 800af54:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800af58:	fa5f f38c 	uxtb.w	r3, ip

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800af5c:	2b0a      	cmp	r3, #10
 800af5e:	d013      	beq.n	800af88 <rprintf2RamRom+0xc30>
		rputchar('\r');
	rputchar(c);	// send character
 800af60:	4618      	mov	r0, r3
 800af62:	f8d8 2000 	ldr.w	r2, [r8]
 800af66:	4790      	blx	r2
        }
        // print digits
        for(i=0; i<=numDigits; ) {
                digit = (unsigned char)(x/place);
                rprintfChar(digit+0x30);
                if(place == 1.0){
 800af68:	4630      	mov	r0, r6
 800af6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800af6e:	f008 f88d 	bl	801308c <__aeabi_fcmpeq>
 800af72:	2800      	cmp	r0, #0
 800af74:	d1cb      	bne.n	800af0e <rprintf2RamRom+0xbb6>
                        if(numDigits)rprintfChar('.');
                        sig=FALSE;
                }
		// if we have passed the decimal place, count digits 
		if(!sig)
 800af76:	2d00      	cmp	r5, #0
 800af78:	d0cd      	beq.n	800af16 <rprintf2RamRom+0xbbe>
 800af7a:	2501      	movs	r5, #1
                        break;
                else
                        place *= 10.0;
        }
        // print digits
        for(i=0; i<=numDigits; ) {
 800af7c:	45da      	cmp	sl, fp
 800af7e:	d9d1      	bls.n	800af24 <rprintf2RamRom+0xbcc>
 800af80:	9c03      	ldr	r4, [sp, #12]
 800af82:	464d      	mov	r5, r9
 800af84:	f7ff b9fc 	b.w	800a380 <rprintf2RamRom+0x28>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800af88:	f8d8 1000 	ldr.w	r1, [r8]
 800af8c:	200d      	movs	r0, #13
 800af8e:	9301      	str	r3, [sp, #4]
 800af90:	4788      	blx	r1
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	e7e4      	b.n	800af60 <rprintf2RamRom+0xc08>
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	200d      	movs	r0, #13
 800af9a:	4790      	blx	r2
 800af9c:	e455      	b.n	800a84a <rprintf2RamRom+0x4f2>
 800af9e:	200d      	movs	r0, #13
 800afa0:	f8d9 2000 	ldr.w	r2, [r9]
 800afa4:	4790      	blx	r2
	rputchar(c);	// send character
 800afa6:	4658      	mov	r0, fp
 800afa8:	f8d9 3000 	ldr.w	r3, [r9]
 800afac:	4798      	blx	r3
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
 800afae:	9903      	ldr	r1, [sp, #12]
 800afb0:	f811 bc01 	ldrb.w	fp, [r1, #-1]

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
 800afb4:	f1bb 0f0a 	cmp.w	fp, #10
 800afb8:	f47f aeed 	bne.w	800ad96 <rprintf2RamRom+0xa3e>
		rputchar('\r');
 800afbc:	200d      	movs	r0, #13
 800afbe:	f8d9 2000 	ldr.w	r2, [r9]
 800afc2:	4790      	blx	r2
 800afc4:	e6e7      	b.n	800ad96 <rprintf2RamRom+0xa3e>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	200d      	movs	r0, #13
 800afca:	4798      	blx	r3
 800afcc:	e448      	b.n	800a860 <rprintf2RamRom+0x508>
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	200d      	movs	r0, #13
 800afd2:	4788      	blx	r1
 800afd4:	e44e      	b.n	800a874 <rprintf2RamRom+0x51c>
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	200d      	movs	r0, #13
 800afda:	4790      	blx	r2
 800afdc:	e455      	b.n	800a88a <rprintf2RamRom+0x532>
					do_long = 1;
					f++;
            }

				fmt = sfmt[f];
				bp = buf;
 800afde:	4e47      	ldr	r6, [pc, #284]	; (800b0fc <rprintf2RamRom+0xda4>)
 800afe0:	4630      	mov	r0, r6
							*bp++ = u % 10 + '0';
						} while ((u /= 10) > 0);
					}
					else if (fmt == 'o'){  // octal
						do {
							*bp++ = u % 8 + '0';
 800afe2:	f003 0207 	and.w	r2, r3, #7
 800afe6:	3230      	adds	r2, #48	; 0x30
 800afe8:	f800 2b01 	strb.w	r2, [r0], #1
						} while ((u /= 8) > 0);
 800afec:	08db      	lsrs	r3, r3, #3
							*bp++ = u % 10 + '0';
						} while ((u /= 10) > 0);
					}
					else if (fmt == 'o'){  // octal
						do {
							*bp++ = u % 8 + '0';
 800afee:	4602      	mov	r2, r0
						} while ((u /= 8) > 0);
 800aff0:	d1f7      	bne.n	800afe2 <rprintf2RamRom+0xc8a>
						if (hash)
 800aff2:	b349      	cbz	r1, 800b048 <rprintf2RamRom+0xcf0>
							*bp++ = '0';
 800aff4:	2130      	movs	r1, #48	; 0x30
 800aff6:	f802 1b01 	strb.w	r1, [r2], #1
 800affa:	9003      	str	r0, [sp, #12]
 800affc:	f7ff ba50 	b.w	800a4a0 <rprintf2RamRom+0x148>
							if (i < 10)
								*bp++ = i + '0';
							else
								*bp++ = i - 10 + 'a';
						} while ((u /= 16) > 0);
						if (hash){
 800b000:	b331      	cbz	r1, 800b050 <rprintf2RamRom+0xcf8>
							*bp++ = 'x';
 800b002:	4610      	mov	r0, r2
 800b004:	2178      	movs	r1, #120	; 0x78
 800b006:	f800 1b01 	strb.w	r1, [r0], #1
							*bp++ = '0';
 800b00a:	2330      	movs	r3, #48	; 0x30
 800b00c:	7053      	strb	r3, [r2, #1]
 800b00e:	4e3b      	ldr	r6, [pc, #236]	; (800b0fc <rprintf2RamRom+0xda4>)
 800b010:	9003      	str	r0, [sp, #12]
 800b012:	1c42      	adds	r2, r0, #1
 800b014:	f7ff ba44 	b.w	800a4a0 <rprintf2RamRom+0x148>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	200d      	movs	r0, #13
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	4790      	blx	r2
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	f7ff bbcb 	b.w	800a7bc <rprintf2RamRom+0x464>
 800b026:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b02a:	200d      	movs	r0, #13
 800b02c:	9102      	str	r1, [sp, #8]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	4790      	blx	r2
 800b032:	9b01      	ldr	r3, [sp, #4]
 800b034:	9902      	ldr	r1, [sp, #8]
 800b036:	e61a      	b.n	800ac6e <rprintf2RamRom+0x916>
 800b038:	f8da 1000 	ldr.w	r1, [sl]
 800b03c:	200d      	movs	r0, #13
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	4788      	blx	r1
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	f7ff ba87 	b.w	800a556 <rprintf2RamRom+0x1fe>
					}
					else if (fmt == 'o'){  // octal
						do {
							*bp++ = u % 8 + '0';
						} while ((u /= 8) > 0);
						if (hash)
 800b048:	1e43      	subs	r3, r0, #1
 800b04a:	9303      	str	r3, [sp, #12]
 800b04c:	f7ff ba28 	b.w	800a4a0 <rprintf2RamRom+0x148>
							if (i < 10)
								*bp++ = i + '0';
							else
								*bp++ = i - 10 + 'a';
						} while ((u /= 16) > 0);
						if (hash){
 800b050:	1e56      	subs	r6, r2, #1
 800b052:	9603      	str	r6, [sp, #12]
 800b054:	4e29      	ldr	r6, [pc, #164]	; (800b0fc <rprintf2RamRom+0xda4>)
 800b056:	f7ff ba23 	b.w	800a4a0 <rprintf2RamRom+0x148>
 800b05a:	469a      	mov	sl, r3
 800b05c:	e5f5      	b.n	800ac4a <rprintf2RamRom+0x8f2>
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - rStrLen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	f7ff bb9d 	b.w	800a79e <rprintf2RamRom+0x446>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c) {
	// do LF -> CR/LF translation
 	if(c == '\n')
		rputchar('\r');
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	200d      	movs	r0, #13
 800b068:	4798      	blx	r3
 800b06a:	f7ff bbbf 	b.w	800a7ec <rprintf2RamRom+0x494>
 800b06e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800b072:	200d      	movs	r0, #13
 800b074:	4788      	blx	r1
 800b076:	e610      	b.n	800ac9a <rprintf2RamRom+0x942>
 800b078:	f8da 2000 	ldr.w	r2, [sl]
 800b07c:	200d      	movs	r0, #13
 800b07e:	4790      	blx	r2
 800b080:	f7ff ba87 	b.w	800a592 <rprintf2RamRom+0x23a>
 800b084:	f8da 3000 	ldr.w	r3, [sl]
 800b088:	200d      	movs	r0, #13
 800b08a:	4798      	blx	r3
 800b08c:	f7ff ba77 	b.w	800a57e <rprintf2RamRom+0x226>
 800b090:	f8da 1000 	ldr.w	r1, [sl]
 800b094:	200d      	movs	r0, #13
 800b096:	4788      	blx	r1
 800b098:	f7ff ba85 	b.w	800a5a6 <rprintf2RamRom+0x24e>
 800b09c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b0a0:	200d      	movs	r0, #13
 800b0a2:	4790      	blx	r2
 800b0a4:	e603      	b.n	800acae <rprintf2RamRom+0x956>
 800b0a6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b0aa:	200d      	movs	r0, #13
 800b0ac:	4798      	blx	r3
 800b0ae:	e608      	b.n	800acc2 <rprintf2RamRom+0x96a>
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	200d      	movs	r0, #13
 800b0b4:	4788      	blx	r1
 800b0b6:	f7ff bba7 	b.w	800a808 <rprintf2RamRom+0x4b0>
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	200d      	movs	r0, #13
 800b0be:	4790      	blx	r2
 800b0c0:	f7ff bbb0 	b.w	800a824 <rprintf2RamRom+0x4cc>
 800b0c4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b0c8:	e41d      	b.n	800a906 <rprintf2RamRom+0x5ae>
 800b0ca:	469b      	mov	fp, r3
 800b0cc:	f7ff ba32 	b.w	800a534 <rprintf2RamRom+0x1dc>
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
                        break;
                else
                        place *= 10.0;
 800b0d0:	4e09      	ldr	r6, [pc, #36]	; (800b0f8 <rprintf2RamRom+0xda0>)
 800b0d2:	e4f3      	b.n	800aabc <rprintf2RamRom+0x764>
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, float x) {
        unsigned char sig = TRUE;
        unsigned char i, digit;
        float place = 1.0;
 800b0d4:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800b0d8:	e4f0      	b.n	800aabc <rprintf2RamRom+0x764>
        // find starting digit place
        for(i=0; i<15; i++) {
                if((x/place) < 10.0)
                        break;
                else
                        place *= 10.0;
 800b0da:	4e09      	ldr	r6, [pc, #36]	; (800b100 <rprintf2RamRom+0xda8>)
 800b0dc:	e4ee      	b.n	800aabc <rprintf2RamRom+0x764>
 800b0de:	4e09      	ldr	r6, [pc, #36]	; (800b104 <rprintf2RamRom+0xdac>)
 800b0e0:	e4ec      	b.n	800aabc <rprintf2RamRom+0x764>
 800b0e2:	4e09      	ldr	r6, [pc, #36]	; (800b108 <rprintf2RamRom+0xdb0>)
 800b0e4:	e4ea      	b.n	800aabc <rprintf2RamRom+0x764>
 800b0e6:	4e09      	ldr	r6, [pc, #36]	; (800b10c <rprintf2RamRom+0xdb4>)
 800b0e8:	e4e8      	b.n	800aabc <rprintf2RamRom+0x764>
 800b0ea:	4e09      	ldr	r6, [pc, #36]	; (800b110 <rprintf2RamRom+0xdb8>)
 800b0ec:	e4e6      	b.n	800aabc <rprintf2RamRom+0x764>
 800b0ee:	bf00      	nop
 800b0f0:	20000741 	.word	0x20000741
 800b0f4:	2000073c 	.word	0x2000073c
 800b0f8:	41200000 	.word	0x41200000
 800b0fc:	20000740 	.word	0x20000740
 800b100:	42c80000 	.word	0x42c80000
 800b104:	461c4000 	.word	0x461c4000
 800b108:	447a0000 	.word	0x447a0000
 800b10c:	49742400 	.word	0x49742400
 800b110:	47c35000 	.word	0x47c35000
 800b114:	4e07      	ldr	r6, [pc, #28]	; (800b134 <rprintf2RamRom+0xddc>)
 800b116:	e4d1      	b.n	800aabc <rprintf2RamRom+0x764>
 800b118:	4e07      	ldr	r6, [pc, #28]	; (800b138 <rprintf2RamRom+0xde0>)
 800b11a:	e4cf      	b.n	800aabc <rprintf2RamRom+0x764>
 800b11c:	4e07      	ldr	r6, [pc, #28]	; (800b13c <rprintf2RamRom+0xde4>)
 800b11e:	e4cd      	b.n	800aabc <rprintf2RamRom+0x764>
 800b120:	4e07      	ldr	r6, [pc, #28]	; (800b140 <rprintf2RamRom+0xde8>)
 800b122:	e4cb      	b.n	800aabc <rprintf2RamRom+0x764>
 800b124:	4e07      	ldr	r6, [pc, #28]	; (800b144 <rprintf2RamRom+0xdec>)
 800b126:	e4c9      	b.n	800aabc <rprintf2RamRom+0x764>
 800b128:	4e07      	ldr	r6, [pc, #28]	; (800b148 <rprintf2RamRom+0xdf0>)
 800b12a:	e4c7      	b.n	800aabc <rprintf2RamRom+0x764>
 800b12c:	4e07      	ldr	r6, [pc, #28]	; (800b14c <rprintf2RamRom+0xdf4>)
 800b12e:	e4c5      	b.n	800aabc <rprintf2RamRom+0x764>
 800b130:	4e07      	ldr	r6, [pc, #28]	; (800b150 <rprintf2RamRom+0xdf8>)
 800b132:	e4c3      	b.n	800aabc <rprintf2RamRom+0x764>
 800b134:	4cbebc20 	.word	0x4cbebc20
 800b138:	4b189680 	.word	0x4b189680
 800b13c:	501502f9 	.word	0x501502f9
 800b140:	4e6e6b28 	.word	0x4e6e6b28
 800b144:	5368d4a5 	.word	0x5368d4a5
 800b148:	51ba43b7 	.word	0x51ba43b7
 800b14c:	551184e7 	.word	0x551184e7
 800b150:	56b5e621 	.word	0x56b5e621

0800b154 <Isdigit>:
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800b154:	3830      	subs	r0, #48	; 0x30
		return TRUE;
 800b156:	b2c0      	uxtb	r0, r0
	else
		return FALSE;
}
 800b158:	2809      	cmp	r0, #9
 800b15a:	bf8c      	ite	hi
 800b15c:	2000      	movhi	r0, #0
 800b15e:	2001      	movls	r0, #1
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop

0800b164 <atoiRamRom>:

int atoiRamRom(char *str) {
 800b164:	b410      	push	{r4}
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
 800b166:	7802      	ldrb	r2, [r0, #0]
		return TRUE;
	else
		return FALSE;
}

int atoiRamRom(char *str) {
 800b168:	4604      	mov	r4, r0
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800b16a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800b16e:	b2c3      	uxtb	r3, r0
 800b170:	2b09      	cmp	r3, #9
 800b172:	d902      	bls.n	800b17a <atoiRamRom+0x16>
	else
		return FALSE;
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
 800b174:	2000      	movs	r0, #0
	while(Isdigit(str[r])){
		num *= 10;
		num += str[r++] - 0x30;
	}
	return num;
}
 800b176:	bc10      	pop	{r4}
 800b178:	4770      	bx	lr
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800b17a:	2300      	movs	r3, #0
 800b17c:	4618      	mov	r0, r3

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
		num *= 10;
		num += str[r++] - 0x30;
 800b17e:	3301      	adds	r3, #1
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
		num *= 10;
 800b180:	eb00 0180 	add.w	r1, r0, r0, lsl #2
		num += str[r++] - 0x30;
 800b184:	b2db      	uxtb	r3, r3
 800b186:	eb02 0041 	add.w	r0, r2, r1, lsl #1
		return FALSE;
}

int atoiRamRom(char *str) {
	int num = 0;unsigned char r=0;
	while(Isdigit(str[r])){
 800b18a:	5ce2      	ldrb	r2, [r4, r3]
		num *= 10;
		num += str[r++] - 0x30;
 800b18c:	3830      	subs	r0, #48	; 0x30
	va_end(ap);
	return 0;
}

unsigned char Isdigit(char c) {
	if((c >= 0x30) && (c <= 0x39))
 800b18e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b192:	fa5f f18c 	uxtb.w	r1, ip
 800b196:	2909      	cmp	r1, #9
 800b198:	d9f1      	bls.n	800b17e <atoiRamRom+0x1a>
 800b19a:	e7ec      	b.n	800b176 <atoiRamRom+0x12>

0800b19c <rStrLen>:
		num += str[r++] - 0x30;
	}
	return num;
}

int rStrLen(char *str) {
 800b19c:	4602      	mov	r2, r0
	unsigned char i=0;
 800b19e:	2000      	movs	r0, #0
	while(str[i++]);
 800b1a0:	5c13      	ldrb	r3, [r2, r0]
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	b2c0      	uxtb	r0, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1fa      	bne.n	800b1a0 <rStrLen+0x4>
	return (int) i;
}
 800b1aa:	4770      	bx	lr

0800b1ac <ADC_Configuration>:
#include "interrupts.h"

uint16_t * ADC1_Convertion_buff;	//malloc this to a different size depending on free ram - before adc init

void ADC_Configuration(void)
{
 800b1ac:	b570      	push	{r4, r5, r6, lr}
  ADC1_Convertion_buff=malloc(ADC_BUFF_SIZE);	//64 samples * 2 for interleaving, * 2bytes/sample==256
 800b1ae:	f44f 7080 	mov.w	r0, #256	; 0x100
#include "interrupts.h"

uint16_t * ADC1_Convertion_buff;	//malloc this to a different size depending on free ram - before adc init

void ADC_Configuration(void)
{
 800b1b2:	b090      	sub	sp, #64	; 0x40
  ADC1_Convertion_buff=malloc(ADC_BUFF_SIZE);	//64 samples * 2 for interleaving, * 2bytes/sample==256
 800b1b4:	f007 ffe8 	bl	8013188 <malloc>
 800b1b8:	4d65      	ldr	r5, [pc, #404]	; (800b350 <ADC_Configuration+0x1a4>)
  /* ADC2 Configuration ------------------------------------------------------*/

  /* ADC1 and ADC2 operate independently */
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  /* Enable the scan conversion so we do three at a time */
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 800b1ba:	2401      	movs	r4, #1

uint16_t * ADC1_Convertion_buff;	//malloc this to a different size depending on free ram - before adc init

void ADC_Configuration(void)
{
  ADC1_Convertion_buff=malloc(ADC_BUFF_SIZE);	//64 samples * 2 for interleaving, * 2bytes/sample==256
 800b1bc:	6028      	str	r0, [r5, #0]
  ADC_InitTypeDef  ADC_InitStructure;
  DMA_InitTypeDef  DMA_InitStructure;
  /* PCLK2 is the APB2 clock */
  /* ADCCLK = PCLK2/6 = 72/6 = 12MHz*/
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 800b1be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b1c2:	f002 ff57 	bl	800e074 <RCC_ADCCLKConfig>

  /* Enable ADC1,2 clock so that we can talk to them */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800b1c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	f002 ffde 	bl	800e18c <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 800b1d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	f002 ffd9 	bl	800e18c <RCC_APB2PeriphClockCmd>
  /*Enable the DMA1 clk*/
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800b1da:	2001      	movs	r0, #1
 800b1dc:	4601      	mov	r1, r0
 800b1de:	f002 ffc9 	bl	800e174 <RCC_AHBPeriphClockCmd>
  /* Put everything back to power-on defaults */
  ADC_DeInit(ADC1);
 800b1e2:	485c      	ldr	r0, [pc, #368]	; (800b354 <ADC_Configuration+0x1a8>)
 800b1e4:	f001 ff38 	bl	800d058 <ADC_DeInit>
  ADC_DeInit(ADC2);
 800b1e8:	485b      	ldr	r0, [pc, #364]	; (800b358 <ADC_Configuration+0x1ac>)
 800b1ea:	f001 ff35 	bl	800d058 <ADC_DeInit>

  /* ADC2 Configuration ------------------------------------------------------*/

  /* ADC1 and ADC2 operate independently */
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 800b1ee:	2300      	movs	r3, #0
  /* Enable the scan conversion so we do three at a time */
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  /* Don't do contimuous conversions - do them on demand */
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
  /* Start conversin by software, not an external trigger */
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800b1f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  /* Say how many channels would be used by the sequencer */
  ADC_InitStructure.ADC_NbrOfChannel = 1;

  /* Now do the setup */
  ADC_Init(ADC2, &ADC_InitStructure);
 800b1f4:	4858      	ldr	r0, [pc, #352]	; (800b358 <ADC_Configuration+0x1ac>)
 800b1f6:	a90b      	add	r1, sp, #44	; 0x2c
  ADC_DeInit(ADC2);

  /* ADC2 Configuration ------------------------------------------------------*/

  /* ADC1 and ADC2 operate independently */
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 800b1f8:	930b      	str	r3, [sp, #44]	; 0x2c
  /* Enable the scan conversion so we do three at a time */
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  /* Don't do contimuous conversions - do them on demand */
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 800b1fa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  /* Start conversin by software, not an external trigger */
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800b1fe:	920d      	str	r2, [sp, #52]	; 0x34
  /* Conversions are 12 bit - put them in the lower 12 bits of the result */
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800b200:	930e      	str	r3, [sp, #56]	; 0x38
  /* ADC2 Configuration ------------------------------------------------------*/

  /* ADC1 and ADC2 operate independently */
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  /* Enable the scan conversion so we do three at a time */
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 800b202:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  /* Start conversin by software, not an external trigger */
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
  /* Conversions are 12 bit - put them in the lower 12 bits of the result */
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  /* Say how many channels would be used by the sequencer */
  ADC_InitStructure.ADC_NbrOfChannel = 1;
 800b206:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c

  /* Now do the setup */
  ADC_Init(ADC2, &ADC_InitStructure);
 800b20a:	f001 ff53 	bl	800d0b4 <ADC_Init>

  /* ADC2 injected channel configuration */
  ADC_InjectedSequencerLengthConfig(ADC2, 2);//two conversions
 800b20e:	4852      	ldr	r0, [pc, #328]	; (800b358 <ADC_Configuration+0x1ac>)
 800b210:	2102      	movs	r1, #2
 800b212:	f002 f888 	bl	800d326 <ADC_InjectedSequencerLengthConfig>
  ADC_InjectedChannelConfig(ADC2, PRESSURE_ADC_CHAN, 1, ADC_SampleTime_239Cycles5);
 800b216:	4850      	ldr	r0, [pc, #320]	; (800b358 <ADC_Configuration+0x1ac>)
 800b218:	4621      	mov	r1, r4
 800b21a:	4622      	mov	r2, r4
 800b21c:	2307      	movs	r3, #7
 800b21e:	f002 f854 	bl	800d2ca <ADC_InjectedChannelConfig>
  //ADC_InjectedChannelConfig(ADC2, 16, 2, ADC_SampleTime_239Cycles5);//on die temperature sensor - only on adc1 :-(
  ADC_InjectedChannelConfig(ADC2, BATTERY_ADC_CHAN, 2, ADC_SampleTime_239Cycles5);
 800b222:	2307      	movs	r3, #7
 800b224:	2202      	movs	r2, #2
 800b226:	484c      	ldr	r0, [pc, #304]	; (800b358 <ADC_Configuration+0x1ac>)
 800b228:	2109      	movs	r1, #9
 800b22a:	f002 f84e 	bl	800d2ca <ADC_InjectedChannelConfig>
  ADC_ExternalTrigInjectedConvConfig(ADC2, ADC_ExternalTrigInjecConv_None);//set sw injected channels
 800b22e:	484a      	ldr	r0, [pc, #296]	; (800b358 <ADC_Configuration+0x1ac>)
 800b230:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800b234:	f002 f82a 	bl	800d28c <ADC_ExternalTrigInjectedConvConfig>


  /* Set the analogue watchdog on the battery voltage conversion*/
  ADC_AnalogWatchdogCmd(ADC2,ADC_AnalogWatchdog_SingleInjecEnable);
 800b238:	4847      	ldr	r0, [pc, #284]	; (800b358 <ADC_Configuration+0x1ac>)
 800b23a:	4948      	ldr	r1, [pc, #288]	; (800b35c <ADC_Configuration+0x1b0>)
 800b23c:	f002 f893 	bl	800d366 <ADC_AnalogWatchdogCmd>
  ADC_AnalogWatchdogThresholdsConfig(ADC2,0xFFFF,(uint16_t)((float)SAMPLING_FACTOR*MINIMUM_VOLTAGE));//watchdog fires on low voltage
 800b240:	f240 7245 	movw	r2, #1861	; 0x745
 800b244:	4844      	ldr	r0, [pc, #272]	; (800b358 <ADC_Configuration+0x1ac>)
 800b246:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b24a:	f002 f895 	bl	800d378 <ADC_AnalogWatchdogThresholdsConfig>
  ADC_AnalogWatchdogSingleChannelConfig(ADC2, BATTERY_ADC_CHAN);//set the watchdog to the battery voltage channel
 800b24e:	4842      	ldr	r0, [pc, #264]	; (800b358 <ADC_Configuration+0x1ac>)
 800b250:	2109      	movs	r1, #9
 800b252:	f002 f894 	bl	800d37e <ADC_AnalogWatchdogSingleChannelConfig>
  ADC_ITConfig(ADC2, ADC_IT_AWD, ENABLE);//enable the analogue watchdog interrupt
 800b256:	4840      	ldr	r0, [pc, #256]	; (800b358 <ADC_Configuration+0x1ac>)
 800b258:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b25c:	4622      	mov	r2, r4
 800b25e:	f001 ff6c 	bl	800d13a <ADC_ITConfig>

  /* Enable the die temperature sensing and vref internal inputs to adc1*/
  //ADC_TempSensorVrefintCmd(ENABLE);

  /* Enable ADC2 */
  ADC_Cmd(ADC2, ENABLE);
 800b262:	483d      	ldr	r0, [pc, #244]	; (800b358 <ADC_Configuration+0x1ac>)
 800b264:	4621      	mov	r1, r4
 800b266:	f001 ff54 	bl	800d112 <ADC_Cmd>

  /* Enable ADC2 reset calibaration register */
  ADC_ResetCalibration(ADC2);
 800b26a:	483b      	ldr	r0, [pc, #236]	; (800b358 <ADC_Configuration+0x1ac>)
 800b26c:	f001 ff6f 	bl	800d14e <ADC_ResetCalibration>
  /* Check the end of ADC2 reset calibration register */
  while(ADC_GetResetCalibrationStatus(ADC2));
 800b270:	4839      	ldr	r0, [pc, #228]	; (800b358 <ADC_Configuration+0x1ac>)
 800b272:	f001 ff71 	bl	800d158 <ADC_GetResetCalibrationStatus>
 800b276:	2800      	cmp	r0, #0
 800b278:	d1fa      	bne.n	800b270 <ADC_Configuration+0xc4>
  /* Start ADC2 calibaration */
  ADC_StartCalibration(ADC2);
 800b27a:	4837      	ldr	r0, [pc, #220]	; (800b358 <ADC_Configuration+0x1ac>)
 800b27c:	f001 ff70 	bl	800d160 <ADC_StartCalibration>
  /* Check the end of ADC2 calibration */
  while(ADC_GetCalibrationStatus(ADC2));
 800b280:	4835      	ldr	r0, [pc, #212]	; (800b358 <ADC_Configuration+0x1ac>)
 800b282:	f001 ff72 	bl	800d16a <ADC_GetCalibrationStatus>
 800b286:	4606      	mov	r6, r0
 800b288:	2800      	cmp	r0, #0
 800b28a:	d1f9      	bne.n	800b280 <ADC_Configuration+0xd4>
  
  /* ADC2 is now set up - move the ADC1 using DMA*/
  /* DMA1 channel1(ADC1) configuration -------------------------------------------*/
  DMA_DeInit(DMA1_Channel1);
 800b28c:	4834      	ldr	r0, [pc, #208]	; (800b360 <ADC_Configuration+0x1b4>)
 800b28e:	f002 f92d 	bl	800d4ec <DMA_DeInit>
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800b292:	4c34      	ldr	r4, [pc, #208]	; (800b364 <ADC_Configuration+0x1b8>)
  while(ADC_GetCalibrationStatus(ADC2));
  
  /* ADC2 is now set up - move the ADC1 using DMA*/
  /* DMA1 channel1(ADC1) configuration -------------------------------------------*/
  DMA_DeInit(DMA1_Channel1);
  DMA_StructInit(&DMA_InitStructure);
 800b294:	4668      	mov	r0, sp
 800b296:	f002 f9c7 	bl	800d628 <DMA_StructInit>
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC1_Convertion_buff;
 800b29a:	682a      	ldr	r2, [r5, #0]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = ADC_BUFF_SIZE/2;//2bytes/sample
 800b29c:	2380      	movs	r3, #128	; 0x80
  
  /* ADC2 is now set up - move the ADC1 using DMA*/
  /* DMA1 channel1(ADC1) configuration -------------------------------------------*/
  DMA_DeInit(DMA1_Channel1);
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800b29e:	9400      	str	r4, [sp, #0]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC1_Convertion_buff;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = ADC_BUFF_SIZE/2;//2bytes/sample
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800b2a0:	f44f 7480 	mov.w	r4, #256	; 0x100
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800b2a4:	482e      	ldr	r0, [pc, #184]	; (800b360 <ADC_Configuration+0x1b4>)
 800b2a6:	4669      	mov	r1, sp
  /* ADC2 is now set up - move the ADC1 using DMA*/
  /* DMA1 channel1(ADC1) configuration -------------------------------------------*/
  DMA_DeInit(DMA1_Channel1);
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC1_Convertion_buff;
 800b2a8:	9201      	str	r2, [sp, #4]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = ADC_BUFF_SIZE/2;//2bytes/sample
 800b2aa:	9303      	str	r3, [sp, #12]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800b2ac:	2220      	movs	r2, #32
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC1_Convertion_buff;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = ADC_BUFF_SIZE/2;//2bytes/sample
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800b2ae:	9305      	str	r3, [sp, #20]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800b2b0:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800b2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800b2b6:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = ADC_BUFF_SIZE/2;//2bytes/sample
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800b2ba:	9307      	str	r3, [sp, #28]
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800b2bc:	9208      	str	r2, [sp, #32]
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800b2be:	9409      	str	r4, [sp, #36]	; 0x24
  /* DMA1 channel1(ADC1) configuration -------------------------------------------*/
  DMA_DeInit(DMA1_Channel1);
  DMA_StructInit(&DMA_InitStructure);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC1_Convertion_buff;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800b2c0:	9602      	str	r6, [sp, #8]
  DMA_InitStructure.DMA_BufferSize = ADC_BUFF_SIZE/2;//2bytes/sample
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800b2c2:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800b2c4:	960a      	str	r6, [sp, #40]	; 0x28
  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800b2c6:	f002 f98f 	bl	800d5e8 <DMA_Init>

  DMA_ITConfig(DMA1_Channel1, DMA_IT_TC | DMA_IT_HT, ENABLE);//interrupt on complete and half complete
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	2106      	movs	r1, #6
 800b2ce:	4824      	ldr	r0, [pc, #144]	; (800b360 <ADC_Configuration+0x1b4>)
 800b2d0:	f002 f9c1 	bl	800d656 <DMA_ITConfig>
  DMA_ClearFlag(DMA1_FLAG_TC1|DMA1_FLAG_HT1);  //make sure flags are clear
 800b2d4:	2006      	movs	r0, #6
 800b2d6:	f002 f9d9 	bl	800d68c <DMA_ClearFlag>

  /* Enable DMA1 channel1 */
  DMA_Cmd(DMA1_Channel1, ENABLE);
 800b2da:	4821      	ldr	r0, [pc, #132]	; (800b360 <ADC_Configuration+0x1b4>)
 800b2dc:	2101      	movs	r1, #1
 800b2de:	f002 f9b0 	bl	800d642 <DMA_Cmd>

  /* ADC1 configuration ------------------------------------------------------*/
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800b2e2:	2401      	movs	r4, #1
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800b2e4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfChannel = 1;
  ADC_Init(ADC1, &ADC_InitStructure);
 800b2e8:	481a      	ldr	r0, [pc, #104]	; (800b354 <ADC_Configuration+0x1a8>)
 800b2ea:	a90b      	add	r1, sp, #44	; 0x2c

  /* ADC1 configuration ------------------------------------------------------*/
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 800b2ec:	930d      	str	r3, [sp, #52]	; 0x34

  /* Enable DMA1 channel1 */
  DMA_Cmd(DMA1_Channel1, ENABLE);

  /* ADC1 configuration ------------------------------------------------------*/
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 800b2ee:	960b      	str	r6, [sp, #44]	; 0x2c
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 800b2f0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800b2f4:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800b2f8:	960e      	str	r6, [sp, #56]	; 0x38
  ADC_InitStructure.ADC_NbrOfChannel = 1;
 800b2fa:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  ADC_Init(ADC1, &ADC_InitStructure);
 800b2fe:	f001 fed9 	bl	800d0b4 <ADC_Init>

  /* ADC1 regular channel configuration */ 
  ADC_RegularChannelConfig(ADC1, CRT_PPG_ADC_CHAN, 1, ADC_SampleTime_239Cycles5);
 800b302:	4622      	mov	r2, r4
 800b304:	2307      	movs	r3, #7
 800b306:	4813      	ldr	r0, [pc, #76]	; (800b354 <ADC_Configuration+0x1a8>)
 800b308:	2108      	movs	r1, #8
 800b30a:	f001 ff52 	bl	800d1b2 <ADC_RegularChannelConfig>

  /* Enable ADC1 DMA */
  ADC_DMACmd(ADC1, ENABLE);
 800b30e:	4811      	ldr	r0, [pc, #68]	; (800b354 <ADC_Configuration+0x1a8>)
 800b310:	4621      	mov	r1, r4
 800b312:	f001 ff08 	bl	800d126 <ADC_DMACmd>
  
  /* Enable ADC1 */
  ADC_Cmd(ADC1, ENABLE);
 800b316:	480f      	ldr	r0, [pc, #60]	; (800b354 <ADC_Configuration+0x1a8>)
 800b318:	4621      	mov	r1, r4
 800b31a:	f001 fefa 	bl	800d112 <ADC_Cmd>

  /* Calibrate the ADC1*/
  ADC_ResetCalibration(ADC1);
 800b31e:	480d      	ldr	r0, [pc, #52]	; (800b354 <ADC_Configuration+0x1a8>)
 800b320:	f001 ff15 	bl	800d14e <ADC_ResetCalibration>
  while (ADC_GetResetCalibrationStatus(ADC1));
 800b324:	480b      	ldr	r0, [pc, #44]	; (800b354 <ADC_Configuration+0x1a8>)
 800b326:	f001 ff17 	bl	800d158 <ADC_GetResetCalibrationStatus>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d1fa      	bne.n	800b324 <ADC_Configuration+0x178>

  ADC_StartCalibration(ADC1);
 800b32e:	4809      	ldr	r0, [pc, #36]	; (800b354 <ADC_Configuration+0x1a8>)
 800b330:	f001 ff16 	bl	800d160 <ADC_StartCalibration>
  while (ADC_GetCalibrationStatus(ADC1));
 800b334:	4807      	ldr	r0, [pc, #28]	; (800b354 <ADC_Configuration+0x1a8>)
 800b336:	f001 ff18 	bl	800d16a <ADC_GetCalibrationStatus>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d1fa      	bne.n	800b334 <ADC_Configuration+0x188>

  ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 800b33e:	4805      	ldr	r0, [pc, #20]	; (800b354 <ADC_Configuration+0x1a8>)
 800b340:	2101      	movs	r1, #1
 800b342:	f001 ff16 	bl	800d172 <ADC_SoftwareStartConvCmd>

  /* Enable the NVIC interrupt */
  DMA_ISR_Config();
 800b346:	f000 fe11 	bl	800bf6c <DMA_ISR_Config>
}
 800b34a:	b010      	add	sp, #64	; 0x40
 800b34c:	bd70      	pop	{r4, r5, r6, pc}
 800b34e:	bf00      	nop
 800b350:	20000b04 	.word	0x20000b04
 800b354:	40012400 	.word	0x40012400
 800b358:	40012800 	.word	0x40012800
 800b35c:	00400200 	.word	0x00400200
 800b360:	40020008 	.word	0x40020008
 800b364:	4001244c 	.word	0x4001244c

0800b368 <readADC2>:
* @brief This function returns a conversion from ADC2 (blocking)
* @param Channel number to convert
* @retval unsigned 16 bit integer - adc is 12bit
*/
uint16_t readADC2(uint8_t channel)
{
 800b368:	4601      	mov	r1, r0
 800b36a:	b510      	push	{r4, lr}
  ADC_RegularChannelConfig(ADC2, channel, 1, ADC_SampleTime_239Cycles5);
 800b36c:	480b      	ldr	r0, [pc, #44]	; (800b39c <readADC2+0x34>)
 800b36e:	2201      	movs	r2, #1
 800b370:	2307      	movs	r3, #7
 800b372:	f001 ff1e 	bl	800d1b2 <ADC_RegularChannelConfig>
  // Start the conversion
  ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 800b376:	4809      	ldr	r0, [pc, #36]	; (800b39c <readADC2+0x34>)
 800b378:	2101      	movs	r1, #1
 800b37a:	f001 fefa 	bl	800d172 <ADC_SoftwareStartConvCmd>
  // Wait until conversion completion
  while(ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET);
 800b37e:	4807      	ldr	r0, [pc, #28]	; (800b39c <readADC2+0x34>)
 800b380:	2102      	movs	r1, #2
 800b382:	f002 f811 	bl	800d3a8 <ADC_GetFlagStatus>
 800b386:	2800      	cmp	r0, #0
 800b388:	d0f9      	beq.n	800b37e <readADC2+0x16>
  // Reset the flag
  ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
 800b38a:	4804      	ldr	r0, [pc, #16]	; (800b39c <readADC2+0x34>)
 800b38c:	2102      	movs	r1, #2
 800b38e:	f002 f811 	bl	800d3b4 <ADC_ClearFlag>
  // Get the conversion value
  return ADC_GetConversionValue(ADC2);
 800b392:	4802      	ldr	r0, [pc, #8]	; (800b39c <readADC2+0x34>)
}
 800b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Wait until conversion completion
  while(ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET);
  // Reset the flag
  ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
  // Get the conversion value
  return ADC_GetConversionValue(ADC2);
 800b398:	f001 bf5c 	b.w	800d254 <ADC_GetConversionValue>
 800b39c:	40012800 	.word	0x40012800

0800b3a0 <setADC2>:
* @brief This function sets up a conversion from ADC2 (non blocking)
* @param Channel number to convert
* @retval None
*/
void setADC2(uint8_t channel)
{
 800b3a0:	b510      	push	{r4, lr}
  ADC_RegularChannelConfig(ADC2, channel, 1, ADC_SampleTime_239Cycles5);
 800b3a2:	4c06      	ldr	r4, [pc, #24]	; (800b3bc <setADC2+0x1c>)
* @brief This function sets up a conversion from ADC2 (non blocking)
* @param Channel number to convert
* @retval None
*/
void setADC2(uint8_t channel)
{
 800b3a4:	4601      	mov	r1, r0
  ADC_RegularChannelConfig(ADC2, channel, 1, ADC_SampleTime_239Cycles5);
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	2307      	movs	r3, #7
 800b3ac:	f001 ff01 	bl	800d1b2 <ADC_RegularChannelConfig>
  // Start the conversion
  ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	2101      	movs	r1, #1
}
 800b3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
*/
void setADC2(uint8_t channel)
{
  ADC_RegularChannelConfig(ADC2, channel, 1, ADC_SampleTime_239Cycles5);
  // Start the conversion
  ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 800b3b8:	f001 bedb 	b.w	800d172 <ADC_SoftwareStartConvCmd>
 800b3bc:	40012800 	.word	0x40012800

0800b3c0 <getADC2>:
* @brief This function gets a conversion from ADC2 (non blocking)
* @param None
* @retval Read value (-1 means adc not ready)
*/
uint16_t getADC2(void)
{
 800b3c0:	b510      	push	{r4, lr}
  // Make sure we have conversion completion
  if(ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET)
 800b3c2:	4808      	ldr	r0, [pc, #32]	; (800b3e4 <getADC2+0x24>)
 800b3c4:	2102      	movs	r1, #2
 800b3c6:	f001 ffef 	bl	800d3a8 <ADC_GetFlagStatus>
 800b3ca:	b910      	cbnz	r0, 800b3d2 <getADC2+0x12>
    return -1;
  // Reset the flag
  ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
  // Get the conversion value
  return ADC_GetConversionValue(ADC2);
}
 800b3cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b3d0:	bd10      	pop	{r4, pc}
{
  // Make sure we have conversion completion
  if(ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET)
    return -1;
  // Reset the flag
  ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
 800b3d2:	4804      	ldr	r0, [pc, #16]	; (800b3e4 <getADC2+0x24>)
 800b3d4:	2102      	movs	r1, #2
 800b3d6:	f001 ffed 	bl	800d3b4 <ADC_ClearFlag>
  // Get the conversion value
  return ADC_GetConversionValue(ADC2);
 800b3da:	4802      	ldr	r0, [pc, #8]	; (800b3e4 <getADC2+0x24>)
}
 800b3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == RESET)
    return -1;
  // Reset the flag
  ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
  // Get the conversion value
  return ADC_GetConversionValue(ADC2);
 800b3e0:	f001 bf38 	b.w	800d254 <ADC_GetConversionValue>
 800b3e4:	40012800 	.word	0x40012800

0800b3e8 <setup_gpio>:
#include "Util/delay.h"

uint8_t bootsource;

void setup_gpio(void)
{
 800b3e8:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef	GPIO_InitStructure;
	//enable the clocks 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);//GPIO/AFIO clks
 800b3ea:	200d      	movs	r0, #13
#include "Util/delay.h"

uint8_t bootsource;

void setup_gpio(void)
{
 800b3ec:	b082      	sub	sp, #8
	GPIO_InitTypeDef	GPIO_InitStructure;
	//enable the clocks 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);//GPIO/AFIO clks
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	f002 fecc 	bl	800e18c <RCC_APB2PeriphClockCmd>
	setuppwr();				//configure power control
 800b3f4:	f001 fc00 	bl	800cbf8 <setuppwr>
	disable_pin();				//disable WKUP pin functionality
 800b3f8:	f001 fc10 	bl	800cc1c <disable_pin>
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
 800b3fc:	2204      	movs	r2, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 800b3fe:	2328      	movs	r3, #40	; 0x28
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
 800b400:	4862      	ldr	r0, [pc, #392]	; (800b58c <setup_gpio+0x1a4>)
 800b402:	a901      	add	r1, sp, #4
	//enable the clocks 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);//GPIO/AFIO clks
	setuppwr();				//configure power control
	disable_pin();				//disable WKUP pin functionality
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
 800b404:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 800b408:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
 800b40c:	f002 fa4b 	bl	800d8a6 <GPIO_Init>
 800b410:	f64f 74ff 	movw	r4, #65535	; 0xffff
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b414:	2104      	movs	r1, #4
 800b416:	485d      	ldr	r0, [pc, #372]	; (800b58c <setup_gpio+0x1a4>)
 800b418:	f002 fa99 	bl	800d94e <GPIO_ReadInputDataBit>
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b41c:	3c01      	subs	r4, #1
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b41e:	2104      	movs	r1, #4
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b420:	b2a4      	uxth	r4, r4
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b422:	b9f0      	cbnz	r0, 800b462 <setup_gpio+0x7a>
 800b424:	4859      	ldr	r0, [pc, #356]	; (800b58c <setup_gpio+0x1a4>)
 800b426:	f002 fa92 	bl	800d94e <GPIO_ReadInputDataBit>
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b42a:	1e63      	subs	r3, r4, #1
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b42c:	2104      	movs	r1, #4
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b42e:	b29c      	uxth	r4, r3
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b430:	b9b8      	cbnz	r0, 800b462 <setup_gpio+0x7a>
 800b432:	4856      	ldr	r0, [pc, #344]	; (800b58c <setup_gpio+0x1a4>)
 800b434:	f002 fa8b 	bl	800d94e <GPIO_ReadInputDataBit>
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b438:	3c01      	subs	r4, #1
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b43a:	2104      	movs	r1, #4
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b43c:	b2a4      	uxth	r4, r4
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b43e:	b980      	cbnz	r0, 800b462 <setup_gpio+0x7a>
 800b440:	4852      	ldr	r0, [pc, #328]	; (800b58c <setup_gpio+0x1a4>)
 800b442:	f002 fa84 	bl	800d94e <GPIO_ReadInputDataBit>
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b446:	1e63      	subs	r3, r4, #1
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b448:	2104      	movs	r1, #4
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b44a:	b29c      	uxth	r4, r3
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b44c:	b948      	cbnz	r0, 800b462 <setup_gpio+0x7a>
 800b44e:	484f      	ldr	r0, [pc, #316]	; (800b58c <setup_gpio+0x1a4>)
 800b450:	f002 fa7d 	bl	800d94e <GPIO_ReadInputDataBit>
			bootsource=USB_SOURCE;	//so we know for reference later
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
			CHRG_ON;		//default to charger enabled
			n=0;
			break;
 800b454:	1e61      	subs	r1, r4, #1
 800b456:	b28c      	uxth	r4, r1
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
 800b458:	b918      	cbnz	r0, 800b462 <setup_gpio+0x7a>
	disable_pin();				//disable WKUP pin functionality
	//Configure and read the Charger EN pin - this has a pullup to V_USB, so if it reads 1 we booted off usb so setup USB detatch isr
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
 800b45a:	2c00      	cmp	r4, #0
 800b45c:	d1da      	bne.n	800b414 <setup_gpio+0x2c>
 800b45e:	4c4c      	ldr	r4, [pc, #304]	; (800b590 <setup_gpio+0x1a8>)
 800b460:	e00e      	b.n	800b480 <setup_gpio+0x98>
		if(GET_CHRG_STATE) {		//We booted from USB
			bootsource=USB_SOURCE;	//so we know for reference later
 800b462:	4c4b      	ldr	r4, [pc, #300]	; (800b590 <setup_gpio+0x1a8>)
 800b464:	2501      	movs	r5, #1
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
 800b466:	a901      	add	r1, sp, #4
 800b468:	4848      	ldr	r0, [pc, #288]	; (800b58c <setup_gpio+0x1a4>)
	GPIO_InitStructure.GPIO_Pin = CHARGER_EN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pin 2 as input*/
	for(uint16_t n=1;n;n++) {		//USB insertion can be really messy, so loop to detect anything on chrg pin over a few milliseconds
		if(GET_CHRG_STATE) {		//We booted from USB
			bootsource=USB_SOURCE;	//so we know for reference later
 800b46a:	7025      	strb	r5, [r4, #0]
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;//reset the pin to an open drain output
 800b46c:	2614      	movs	r6, #20
 800b46e:	f88d 6007 	strb.w	r6, [sp, #7]
			GPIO_Init( GPIOB, &GPIO_InitStructure );//This enables the pin to be used to shutdown the charger in suspend mode
 800b472:	f002 fa18 	bl	800d8a6 <GPIO_Init>
			CHRG_ON;		//default to charger enabled
 800b476:	4845      	ldr	r0, [pc, #276]	; (800b58c <setup_gpio+0x1a4>)
 800b478:	2104      	movs	r1, #4
 800b47a:	462a      	mov	r2, r5
 800b47c:	f002 fa7d 	bl	800d97a <GPIO_WriteBit>
			break;
		}
	}
	//Configure the io pins
	//Pull up the SD CS pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 800b480:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure SDSEL pin as input pull up until the SD driver is intialised*/
 800b484:	4841      	ldr	r0, [pc, #260]	; (800b58c <setup_gpio+0x1a4>)
 800b486:	a901      	add	r1, sp, #4
		}
	}
	//Configure the io pins
	//Pull up the SD CS pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
 800b488:	2548      	movs	r5, #72	; 0x48
			break;
		}
	}
	//Configure the io pins
	//Pull up the SD CS pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 800b48a:	f8ad e004 	strh.w	lr, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
 800b48e:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure SDSEL pin as input pull up until the SD driver is intialised*/
 800b492:	f002 fa08 	bl	800d8a6 <GPIO_Init>
	//Pull up all the SD SPI lines until the bus is intialized - SD spec says MISO and MOSI should be pulled up at poweron
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 800b496:	23c0      	movs	r3, #192	; 0xc0
	GPIO_Init( GPIOA, &GPIO_InitStructure );
 800b498:	483e      	ldr	r0, [pc, #248]	; (800b594 <setup_gpio+0x1ac>)
 800b49a:	a901      	add	r1, sp, #4
	//Pull up the SD CS pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure SDSEL pin as input pull up until the SD driver is intialised*/
	//Pull up all the SD SPI lines until the bus is intialized - SD spec says MISO and MOSI should be pulled up at poweron
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 800b49c:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	//LEDS + test
	GPIO_InitStructure.GPIO_Pin = RED|GREEN|TST;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800b4a0:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure SDSEL pin as input pull up until the SD driver is intialised*/
	//Pull up all the SD SPI lines until the bus is intialized - SD spec says MISO and MOSI should be pulled up at poweron
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
 800b4a2:	f002 fa00 	bl	800d8a6 <GPIO_Init>
	//LEDS + test
	GPIO_InitStructure.GPIO_Pin = RED|GREEN|TST;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b4a6:	2203      	movs	r2, #3
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pins 11 and 12 as output*/
 800b4a8:	4838      	ldr	r0, [pc, #224]	; (800b58c <setup_gpio+0x1a4>)
 800b4aa:	a901      	add	r1, sp, #4
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure SDSEL pin as input pull up until the SD driver is intialised*/
	//Pull up all the SD SPI lines until the bus is intialized - SD spec says MISO and MOSI should be pulled up at poweron
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	//LEDS + test
	GPIO_InitStructure.GPIO_Pin = RED|GREEN|TST;
 800b4ac:	f44f 5cc8 	mov.w	ip, #6400	; 0x1900
 800b4b0:	f8ad c004 	strh.w	ip, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800b4b4:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b4b8:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pins 11 and 12 as output*/
 800b4bc:	f002 f9f3 	bl	800d8a6 <GPIO_Init>
	//Power button
	GPIO_InitStructure.GPIO_Pin = WKUP;
	if(USB_SOURCE==bootsource)		//Configure for turnoff on usb removal or pwr button
 800b4c0:	7820      	ldrb	r0, [r4, #0]
	GPIO_InitStructure.GPIO_Pin = RED|GREEN|TST;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pins 11 and 12 as output*/
	//Power button
	GPIO_InitStructure.GPIO_Pin = WKUP;
 800b4c2:	2101      	movs	r1, #1
	if(USB_SOURCE==bootsource)		//Configure for turnoff on usb removal or pwr button
 800b4c4:	2801      	cmp	r0, #1
	GPIO_InitStructure.GPIO_Pin = RED|GREEN|TST;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pins 11 and 12 as output*/
	//Power button
	GPIO_InitStructure.GPIO_Pin = WKUP;
 800b4c6:	f8ad 1004 	strh.w	r1, [sp, #4]
	if(USB_SOURCE==bootsource)		//Configure for turnoff on usb removal or pwr button
 800b4ca:	d05b      	beq.n	800b584 <setup_gpio+0x19c>
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
	else
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;//pulldown
 800b4cc:	2428      	movs	r4, #40	; 0x28
 800b4ce:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init( GPIOA, &GPIO_InitStructure );/* configure WKUP pin as input pull down/up for button*/
 800b4d2:	a901      	add	r1, sp, #4
 800b4d4:	482f      	ldr	r0, [pc, #188]	; (800b594 <setup_gpio+0x1ac>)
 800b4d6:	f002 f9e6 	bl	800d8a6 <GPIO_Init>
	//Power supply enable
	GPIO_InitStructure.GPIO_Pin = PWREN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//pushpull
 800b4da:	2410      	movs	r4, #16
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure WKUP pin as input pull up for button*/
 800b4dc:	a901      	add	r1, sp, #4
 800b4de:	482b      	ldr	r0, [pc, #172]	; (800b58c <setup_gpio+0x1a4>)
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
	else
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;//pulldown
	GPIO_Init( GPIOA, &GPIO_InitStructure );/* configure WKUP pin as input pull down/up for button*/
	//Power supply enable
	GPIO_InitStructure.GPIO_Pin = PWREN;
 800b4e0:	f248 0500 	movw	r5, #32768	; 0x8000
 800b4e4:	f8ad 5004 	strh.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//pushpull
 800b4e8:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure WKUP pin as input pull up for button*/
 800b4ec:	f002 f9db 	bl	800d8a6 <GPIO_Init>
	GPIO_WriteBit(GPIOB,PWREN,Bit_SET);	//Make sure power enabled
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	4826      	ldr	r0, [pc, #152]	; (800b58c <setup_gpio+0x1a4>)
 800b4f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b4f8:	f002 fa3f 	bl	800d97a <GPIO_WriteBit>
	//Configure the ADC inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 800b4fc:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Pin = PWREN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//pushpull
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure WKUP pin as input pull up for button*/
	GPIO_WriteBit(GPIOB,PWREN,Bit_SET);	//Make sure power enabled
	//Configure the ADC inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_4;
 800b4fe:	2212      	movs	r2, #18
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
 800b500:	a901      	add	r1, sp, #4
 800b502:	4824      	ldr	r0, [pc, #144]	; (800b594 <setup_gpio+0x1ac>)
	GPIO_InitStructure.GPIO_Pin = PWREN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//pushpull
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure WKUP pin as input pull up for button*/
	GPIO_WriteBit(GPIOB,PWREN,Bit_SET);	//Make sure power enabled
	//Configure the ADC inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_4;
 800b504:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
 800b508:	2603      	movs	r6, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//pushpull
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure WKUP pin as input pull up for button*/
	GPIO_WriteBit(GPIOB,PWREN,Bit_SET);	//Make sure power enabled
	//Configure the ADC inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 800b50a:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init( GPIOA, &GPIO_InitStructure );
 800b50e:	f002 f9ca 	bl	800d8a6 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b512:	a901      	add	r1, sp, #4
 800b514:	481d      	ldr	r0, [pc, #116]	; (800b58c <setup_gpio+0x1a4>)
	GPIO_WriteBit(GPIOB,PWREN,Bit_SET);	//Make sure power enabled
	//Configure the ADC inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
 800b516:	f8ad 6004 	strh.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 800b51a:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b51e:	f002 f9c2 	bl	800d8a6 <GPIO_Init>
	//Configure the PWM outputs
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;//reduced slew rate to reduce interference on the board
 800b522:	2302      	movs	r3, #2
	GPIO_PinRemapConfig( GPIO_FullRemap_TIM2, ENABLE );//to B.10
 800b524:	2101      	movs	r1, #1
 800b526:	481c      	ldr	r0, [pc, #112]	; (800b598 <setup_gpio+0x1b0>)
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
	//Configure the PWM outputs
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;//reduced slew rate to reduce interference on the board
 800b528:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_PinRemapConfig( GPIO_FullRemap_TIM2, ENABLE );//to B.10
	GPIO_InitStructure.GPIO_Pin = PWM0|PWM1|PWM2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800b52c:	2618      	movs	r6, #24
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
	//Configure the PWM outputs
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;//reduced slew rate to reduce interference on the board
	GPIO_PinRemapConfig( GPIO_FullRemap_TIM2, ENABLE );//to B.10
 800b52e:	f002 fa49 	bl	800d9c4 <GPIO_PinRemapConfig>
	GPIO_InitStructure.GPIO_Pin = PWM0|PWM1|PWM2;
 800b532:	f44f 62e0 	mov.w	r2, #1792	; 0x700
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b536:	a901      	add	r1, sp, #4
 800b538:	4814      	ldr	r0, [pc, #80]	; (800b58c <setup_gpio+0x1a4>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
	//Configure the PWM outputs
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;//reduced slew rate to reduce interference on the board
	GPIO_PinRemapConfig( GPIO_FullRemap_TIM2, ENABLE );//to B.10
	GPIO_InitStructure.GPIO_Pin = PWM0|PWM1|PWM2;
 800b53a:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800b53e:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b542:	f002 f9b0 	bl	800d8a6 <GPIO_Init>
	//Configure the pump Motor PWM
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;//faster slew rate for the motor so mosfet spends more time fully on/off
 800b546:	2301      	movs	r3, #1
	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR;
 800b548:	f44f 7c80 	mov.w	ip, #256	; 0x100
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
 800b54c:	a901      	add	r1, sp, #4
 800b54e:	4811      	ldr	r0, [pc, #68]	; (800b594 <setup_gpio+0x1ac>)
	GPIO_PinRemapConfig( GPIO_FullRemap_TIM2, ENABLE );//to B.10
	GPIO_InitStructure.GPIO_Pin = PWM0|PWM1|PWM2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
	//Configure the pump Motor PWM
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;//faster slew rate for the motor so mosfet spends more time fully on/off
 800b550:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR;
 800b554:	f8ad c004 	strh.w	ip, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800b558:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init( GPIOA, &GPIO_InitStructure );
 800b55c:	f002 f9a3 	bl	800d8a6 <GPIO_Init>
	//Configure Solenoid pin
	GPIO_InitStructure.GPIO_Pin = SOLENOID;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b560:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;//faster slew rate for the motor so mosfet spends more time fully on/off
	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	//Configure Solenoid pin
	GPIO_InitStructure.GPIO_Pin = SOLENOID;
 800b562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b566:	4809      	ldr	r0, [pc, #36]	; (800b58c <setup_gpio+0x1a4>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;//faster slew rate for the motor so mosfet spends more time fully on/off
	GPIO_InitStructure.GPIO_Pin = PWM_MOTOR;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	//Configure Solenoid pin
	GPIO_InitStructure.GPIO_Pin = SOLENOID;
 800b568:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800b56c:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800b570:	f002 f999 	bl	800d8a6 <GPIO_Init>
	GPIO_WriteBit(GPIOB,SOLENOID,Bit_RESET);//Make sure solenoid off
 800b574:	4805      	ldr	r0, [pc, #20]	; (800b58c <setup_gpio+0x1a4>)
 800b576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b57a:	462a      	mov	r2, r5
 800b57c:	f002 f9fd 	bl	800d97a <GPIO_WriteBit>
}
 800b580:	b002      	add	sp, #8
 800b582:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init( GPIOB, &GPIO_InitStructure );/* configure pins 11 and 12 as output*/
	//Power button
	GPIO_InitStructure.GPIO_Pin = WKUP;
	if(USB_SOURCE==bootsource)		//Configure for turnoff on usb removal or pwr button
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//pullup
 800b584:	f88d 5007 	strb.w	r5, [sp, #7]
 800b588:	e7a3      	b.n	800b4d2 <setup_gpio+0xea>
 800b58a:	bf00      	nop
 800b58c:	40010c00 	.word	0x40010c00
 800b590:	20000b08 	.word	0x20000b08
 800b594:	40010800 	.word	0x40010800
 800b598:	00180300 	.word	0x00180300

0800b59c <switch_leds_on>:
	GPIO_WriteBit(GPIOB,SOLENOID,Bit_RESET);//Make sure solenoid off
}

void switch_leds_on(void)
{
	if(USB_SOURCE==bootsource)
 800b59c:	4b07      	ldr	r3, [pc, #28]	; (800b5bc <switch_leds_on+0x20>)
 800b59e:	781a      	ldrb	r2, [r3, #0]
 800b5a0:	2a01      	cmp	r2, #1
 800b5a2:	d005      	beq.n	800b5b0 <switch_leds_on+0x14>
		GPIO_WriteBit(GPIOB,RED,Bit_SET);
	else
		GPIO_WriteBit(GPIOB,GREEN,Bit_SET);
 800b5a4:	4806      	ldr	r0, [pc, #24]	; (800b5c0 <switch_leds_on+0x24>)
 800b5a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f002 b9e5 	b.w	800d97a <GPIO_WriteBit>
}

void switch_leds_on(void)
{
	if(USB_SOURCE==bootsource)
		GPIO_WriteBit(GPIOB,RED,Bit_SET);
 800b5b0:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <switch_leds_on+0x24>)
 800b5b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5b6:	f002 b9e0 	b.w	800d97a <GPIO_WriteBit>
 800b5ba:	bf00      	nop
 800b5bc:	20000b08 	.word	0x20000b08
 800b5c0:	40010c00 	.word	0x40010c00

0800b5c4 <switch_leds_off>:
		GPIO_WriteBit(GPIOB,GREEN,Bit_SET);
}

void switch_leds_off(void)
{
	if(USB_SOURCE==bootsource)
 800b5c4:	4807      	ldr	r0, [pc, #28]	; (800b5e4 <switch_leds_off+0x20>)
 800b5c6:	7803      	ldrb	r3, [r0, #0]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d005      	beq.n	800b5d8 <switch_leds_off+0x14>
		GPIO_WriteBit(GPIOB,RED,Bit_RESET);
	else
		GPIO_WriteBit(GPIOB,GREEN,Bit_RESET);
 800b5cc:	4806      	ldr	r0, [pc, #24]	; (800b5e8 <switch_leds_off+0x24>)
 800b5ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f002 b9d1 	b.w	800d97a <GPIO_WriteBit>
}

void switch_leds_off(void)
{
	if(USB_SOURCE==bootsource)
		GPIO_WriteBit(GPIOB,RED,Bit_RESET);
 800b5d8:	4803      	ldr	r0, [pc, #12]	; (800b5e8 <switch_leds_off+0x24>)
 800b5da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f002 b9cb 	b.w	800d97a <GPIO_WriteBit>
 800b5e4:	20000b08 	.word	0x20000b08
 800b5e8:	40010c00 	.word	0x40010c00

0800b5ec <red_flash>:
	else
		GPIO_WriteBit(GPIOB,GREEN,Bit_RESET);
}

void red_flash(void)
{
 800b5ec:	b510      	push	{r4, lr}
	GPIO_WriteBit(GPIOB,RED,Bit_SET);
 800b5ee:	4c09      	ldr	r4, [pc, #36]	; (800b614 <red_flash+0x28>)
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f002 f9bf 	bl	800d97a <GPIO_WriteBit>
	Delay(400000);
 800b5fc:	4806      	ldr	r0, [pc, #24]	; (800b618 <red_flash+0x2c>)
 800b5fe:	f7f6 fc1f 	bl	8001e40 <Delay>
	GPIO_WriteBit(GPIOB,RED,Bit_RESET);
 800b602:	4620      	mov	r0, r4
 800b604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b608:	2200      	movs	r2, #0
}
 800b60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void red_flash(void)
{
	GPIO_WriteBit(GPIOB,RED,Bit_SET);
	Delay(400000);
	GPIO_WriteBit(GPIOB,RED,Bit_RESET);
 800b60e:	f002 b9b4 	b.w	800d97a <GPIO_WriteBit>
 800b612:	bf00      	nop
 800b614:	40010c00 	.word	0x40010c00
 800b618:	00061a80 	.word	0x00061a80

0800b61c <get_wkup>:
}

uint8_t get_wkup()
{
	return GPIO_ReadInputDataBit(GPIOA,WKUP);
 800b61c:	4801      	ldr	r0, [pc, #4]	; (800b624 <get_wkup+0x8>)
 800b61e:	2101      	movs	r1, #1
 800b620:	f002 b995 	b.w	800d94e <GPIO_ReadInputDataBit>
 800b624:	40010800 	.word	0x40010800

0800b628 <I2C1_EV_IRQHandler>:
/**
  * @brief  This function handles I2C1 Event interrupt request.
  * @param : None
  * @retval : None
  */
void I2C1_EV_IRQHandler(void) {
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint8_t subaddress_sent,final_stop;//flag to indicate if subaddess sent, flag to indicate final bus condition
	static int8_t index;		//index is signed -1==send the subaddress
	uint8_t SReg_1=I2C1->SR1;	//read the status register here
	if(!((Jobs>>job)&0x00000001)) {	//if the current job bit is not set
 800b62c:	4d95      	ldr	r5, [pc, #596]	; (800b884 <I2C1_EV_IRQHandler+0x25c>)
 800b62e:	4c96      	ldr	r4, [pc, #600]	; (800b888 <I2C1_EV_IRQHandler+0x260>)
  * @retval : None
  */
void I2C1_EV_IRQHandler(void) {
	static uint8_t subaddress_sent,final_stop;//flag to indicate if subaddess sent, flag to indicate final bus condition
	static int8_t index;		//index is signed -1==send the subaddress
	uint8_t SReg_1=I2C1->SR1;	//read the status register here
 800b630:	4e96      	ldr	r6, [pc, #600]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
/**
  * @brief  This function handles I2C1 Event interrupt request.
  * @param : None
  * @retval : None
  */
void I2C1_EV_IRQHandler(void) {
 800b632:	b085      	sub	sp, #20
	static uint8_t subaddress_sent,final_stop;//flag to indicate if subaddess sent, flag to indicate final bus condition
	static int8_t index;		//index is signed -1==send the subaddress
	uint8_t SReg_1=I2C1->SR1;	//read the status register here
 800b634:	8ab0      	ldrh	r0, [r6, #20]
	if(!((Jobs>>job)&0x00000001)) {	//if the current job bit is not set
 800b636:	682a      	ldr	r2, [r5, #0]
 800b638:	7821      	ldrb	r1, [r4, #0]
  * @retval : None
  */
void I2C1_EV_IRQHandler(void) {
	static uint8_t subaddress_sent,final_stop;//flag to indicate if subaddess sent, flag to indicate final bus condition
	static int8_t index;		//index is signed -1==send the subaddress
	uint8_t SReg_1=I2C1->SR1;	//read the status register here
 800b63a:	b2c0      	uxtb	r0, r0
	if(!((Jobs>>job)&0x00000001)) {	//if the current job bit is not set
 800b63c:	fa32 f301 	lsrs.w	r3, r2, r1
 800b640:	f013 0301 	ands.w	r3, r3, #1
 800b644:	d040      	beq.n	800b6c8 <I2C1_EV_IRQHandler+0xa0>
		for(job=0;!((Jobs>>job)&0x00000001) && job<I2C_NUMBER_JOBS;job++);//find the first uncompleted job, starting at current job zero
		subaddress_sent=0;
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
 800b646:	f010 0101 	ands.w	r1, r0, #1
 800b64a:	4f91      	ldr	r7, [pc, #580]	; (800b890 <I2C1_EV_IRQHandler+0x268>)
 800b64c:	d160      	bne.n	800b710 <I2C1_EV_IRQHandler+0xe8>
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Transmitter);//send the address and set hardware mode
			if(0xFF!=I2C_jobs[job].subaddress)//0xFF as subaddress means it will be ignored, in Tx or Rx mode
				index=-1;//send a subaddress
		}
	}
	else if(SReg_1&0x0002) {//we just sent the address - EV6 in ref manual
 800b64e:	f010 0302 	ands.w	r3, r0, #2
 800b652:	f000 8084 	beq.w	800b75e <I2C1_EV_IRQHandler+0x136>
		//Read SR1,2 to clear ADDR
		volatile uint8_t a;
		asm volatile ("dmb" ::: "memory");//memory fence to control hardware
 800b656:	f3bf 8f5f 	dmb	sy
		if(1==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//we are receiving 1 byte - EV6_3
 800b65a:	4e8e      	ldr	r6, [pc, #568]	; (800b894 <I2C1_EV_IRQHandler+0x26c>)
 800b65c:	7823      	ldrb	r3, [r4, #0]
 800b65e:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800b662:	f890 e002 	ldrb.w	lr, [r0, #2]
 800b666:	f1be 0f01 	cmp.w	lr, #1
 800b66a:	f000 814c 	beq.w	800b906 <I2C1_EV_IRQHandler+0x2de>
			I2C_GenerateSTOP(I2C1,ENABLE);//program the stop
			final_stop=1;
			I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);//allow us to have an EV7
		}
		else {//EV6 and EV6_1
			a=I2C1->SR2;	//clear the ADDR here
 800b66e:	4b87      	ldr	r3, [pc, #540]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b670:	8b1a      	ldrh	r2, [r3, #24]
 800b672:	f88d 200f 	strb.w	r2, [sp, #15]
			asm volatile ("dmb" ::: "memory");
 800b676:	f3bf 8f5f 	dmb	sy
			if(2==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) { //rx 2 bytes - EV6_1
 800b67a:	f894 c000 	ldrb.w	ip, [r4]
 800b67e:	eb06 0ecc 	add.w	lr, r6, ip, lsl #3
 800b682:	f89e 1002 	ldrb.w	r1, [lr, #2]
 800b686:	2902      	cmp	r1, #2
 800b688:	f000 8168 	beq.w	800b95c <I2C1_EV_IRQHandler+0x334>
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to fill
			}
			if(3==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent)//rx 3 bytes
 800b68c:	f894 e000 	ldrb.w	lr, [r4]
 800b690:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
 800b694:	f892 c002 	ldrb.w	ip, [r2, #2]
 800b698:	f1bc 0f03 	cmp.w	ip, #3
 800b69c:	f000 80d9 	beq.w	800b852 <I2C1_EV_IRQHandler+0x22a>
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//make sure RXNE disabled so we get a BTF in two bytes time
			else //receiving greater than three bytes, sending subaddress, or transmitting
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
 800b6a0:	487a      	ldr	r0, [pc, #488]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b6a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f002 fadb 	bl	800dc62 <I2C_ITConfig>
 800b6ac:	f997 3001 	ldrsb.w	r3, [r7, #1]
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
		}
	}
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
 800b6b0:	f894 c000 	ldrb.w	ip, [r4]
 800b6b4:	4974      	ldr	r1, [pc, #464]	; (800b888 <I2C1_EV_IRQHandler+0x260>)
 800b6b6:	eb06 06cc 	add.w	r6, r6, ip, lsl #3
 800b6ba:	78b2      	ldrb	r2, [r6, #2]
 800b6bc:	1c50      	adds	r0, r2, #1
 800b6be:	4298      	cmp	r0, r3
 800b6c0:	d05c      	beq.n	800b77c <I2C1_EV_IRQHandler+0x154>
			I2C_GenerateSTART(I2C1,ENABLE);//program the Start to kick start the new transfer
		}
		else if(final_stop)	//If there is a final stop and no more jobs, bus is inactive, disable interrupts to prevent BTF
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts while bus inactive
	}
}
 800b6c2:	b005      	add	sp, #20
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void I2C1_EV_IRQHandler(void) {
	static uint8_t subaddress_sent,final_stop;//flag to indicate if subaddess sent, flag to indicate final bus condition
	static int8_t index;		//index is signed -1==send the subaddress
	uint8_t SReg_1=I2C1->SR1;	//read the status register here
	if(!((Jobs>>job)&0x00000001)) {	//if the current job bit is not set
		for(job=0;!((Jobs>>job)&0x00000001) && job<I2C_NUMBER_JOBS;job++);//find the first uncompleted job, starting at current job zero
 800b6c8:	7023      	strb	r3, [r4, #0]
 800b6ca:	6829      	ldr	r1, [r5, #0]
 800b6cc:	7823      	ldrb	r3, [r4, #0]
 800b6ce:	fa31 f703 	lsrs.w	r7, r1, r3
 800b6d2:	f017 0f01 	tst.w	r7, #1
 800b6d6:	d115      	bne.n	800b704 <I2C1_EV_IRQHandler+0xdc>
 800b6d8:	f894 c000 	ldrb.w	ip, [r4]
 800b6dc:	f1bc 0f01 	cmp.w	ip, #1
 800b6e0:	d810      	bhi.n	800b704 <I2C1_EV_IRQHandler+0xdc>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	e004      	b.n	800b6f0 <I2C1_EV_IRQHandler+0xc8>
 800b6e6:	f891 c000 	ldrb.w	ip, [r1]
 800b6ea:	f1bc 0f01 	cmp.w	ip, #1
 800b6ee:	d809      	bhi.n	800b704 <I2C1_EV_IRQHandler+0xdc>
 800b6f0:	7822      	ldrb	r2, [r4, #0]
 800b6f2:	1c53      	adds	r3, r2, #1
 800b6f4:	7023      	strb	r3, [r4, #0]
 800b6f6:	682f      	ldr	r7, [r5, #0]
 800b6f8:	7826      	ldrb	r6, [r4, #0]
 800b6fa:	fa37 f206 	lsrs.w	r2, r7, r6
 800b6fe:	f012 0f01 	tst.w	r2, #1
 800b702:	d0f0      	beq.n	800b6e6 <I2C1_EV_IRQHandler+0xbe>
		subaddress_sent=0;
 800b704:	4f62      	ldr	r7, [pc, #392]	; (800b890 <I2C1_EV_IRQHandler+0x268>)
 800b706:	2100      	movs	r1, #0
 800b708:	7039      	strb	r1, [r7, #0]
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
 800b70a:	f010 0101 	ands.w	r1, r0, #1
 800b70e:	d09e      	beq.n	800b64e <I2C1_EV_IRQHandler+0x26>
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
 800b710:	485e      	ldr	r0, [pc, #376]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b712:	2101      	movs	r1, #1
 800b714:	f002 fa73 	bl	800dbfe <I2C_AcknowledgeConfig>
		index=0;		//reset the index
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
 800b718:	4e5e      	ldr	r6, [pc, #376]	; (800b894 <I2C1_EV_IRQHandler+0x26c>)
 800b71a:	f894 c000 	ldrb.w	ip, [r4]
		for(job=0;!((Jobs>>job)&0x00000001) && job<I2C_NUMBER_JOBS;job++);//find the first uncompleted job, starting at current job zero
		subaddress_sent=0;
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
		index=0;		//reset the index
 800b71e:	2300      	movs	r3, #0
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
 800b720:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 800b724:	7850      	ldrb	r0, [r2, #1]
		for(job=0;!((Jobs>>job)&0x00000001) && job<I2C_NUMBER_JOBS;job++);//find the first uncompleted job, starting at current job zero
		subaddress_sent=0;
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
		index=0;		//reset the index
 800b726:	707b      	strb	r3, [r7, #1]
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
 800b728:	2801      	cmp	r0, #1
 800b72a:	f000 80b7 	beq.w	800b89c <I2C1_EV_IRQHandler+0x274>
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Receiver);//send the address and set hardware mode
			if(2==I2C_jobs[job].bytes)
				I2C1->CR1|=0x0800;//set the POS bit so NACK applied to the final byte in the two byte read
		}
		else {			//direction is Tx, or we havent sent the sub and rep start
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Transmitter);//send the address and set hardware mode
 800b72e:	f894 e000 	ldrb.w	lr, [r4]
 800b732:	2200      	movs	r2, #0
 800b734:	4855      	ldr	r0, [pc, #340]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b736:	f816 103e 	ldrb.w	r1, [r6, lr, lsl #3]
 800b73a:	f002 faa2 	bl	800dc82 <I2C_Send7bitAddress>
			if(0xFF!=I2C_jobs[job].subaddress)//0xFF as subaddress means it will be ignored, in Tx or Rx mode
 800b73e:	7822      	ldrb	r2, [r4, #0]
 800b740:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 800b744:	78d8      	ldrb	r0, [r3, #3]
 800b746:	28ff      	cmp	r0, #255	; 0xff
 800b748:	d048      	beq.n	800b7dc <I2C1_EV_IRQHandler+0x1b4>
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
		}
	}
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
 800b74a:	4a4f      	ldr	r2, [pc, #316]	; (800b888 <I2C1_EV_IRQHandler+0x260>)
 800b74c:	4b51      	ldr	r3, [pc, #324]	; (800b894 <I2C1_EV_IRQHandler+0x26c>)
 800b74e:	f892 c000 	ldrb.w	ip, [r2]
				I2C1->CR1|=0x0800;//set the POS bit so NACK applied to the final byte in the two byte read
		}
		else {			//direction is Tx, or we havent sent the sub and rep start
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Transmitter);//send the address and set hardware mode
			if(0xFF!=I2C_jobs[job].subaddress)//0xFF as subaddress means it will be ignored, in Tx or Rx mode
				index=-1;//send a subaddress
 800b752:	20ff      	movs	r0, #255	; 0xff
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
		}
	}
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
 800b754:	eb03 01cc 	add.w	r1, r3, ip, lsl #3
				I2C1->CR1|=0x0800;//set the POS bit so NACK applied to the final byte in the two byte read
		}
		else {			//direction is Tx, or we havent sent the sub and rep start
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Transmitter);//send the address and set hardware mode
			if(0xFF!=I2C_jobs[job].subaddress)//0xFF as subaddress means it will be ignored, in Tx or Rx mode
				index=-1;//send a subaddress
 800b758:	7078      	strb	r0, [r7, #1]
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
		}
	}
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
 800b75a:	788b      	ldrb	r3, [r1, #2]
 800b75c:	e7b1      	b.n	800b6c2 <I2C1_EV_IRQHandler+0x9a>
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//make sure RXNE disabled so we get a BTF in two bytes time
			else //receiving greater than three bytes, sending subaddress, or transmitting
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
		}
	}
	else if(SReg_1&0x004) {//Byte transfer finished - EV7_2, EV7_3 or EV8_2
 800b75e:	f010 0804 	ands.w	r8, r0, #4
 800b762:	d149      	bne.n	800b7f8 <I2C1_EV_IRQHandler+0x1d0>
				subaddress_sent=1;//this is set back to zero upon completion of the current task
			}
		}
		while(I2C1->CR1&0x0100){;}//we must wait for the start to clear, otherwise we get constant BTF
	}
	else if(SReg_1&0x0040) {//Byte received - EV7
 800b764:	f010 0940 	ands.w	r9, r0, #64	; 0x40
 800b768:	f040 8118 	bne.w	800b99c <I2C1_EV_IRQHandler+0x374>
		if(I2C_jobs[job].bytes==(index+3))
			I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush so we can get an EV7_2
		if(I2C_jobs[job].bytes==index)//We have completed a final EV7
			index++;	//to show job is complete
	}
	else if(SReg_1&0x0080) {//Byte transmitted -EV8/EV8_1
 800b76c:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b770:	f040 8181 	bne.w	800ba76 <I2C1_EV_IRQHandler+0x44e>
 800b774:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800b778:	4e46      	ldr	r6, [pc, #280]	; (800b894 <I2C1_EV_IRQHandler+0x26c>)
 800b77a:	e799      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
	}
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
		//Completion Tasks go here

		//End of completion tasks
		Jobs&=~(0x00000001<<job);//tick off current job as complete
 800b77c:	780c      	ldrb	r4, [r1, #0]
 800b77e:	2201      	movs	r2, #1
 800b780:	fa12 f004 	lsls.w	r0, r2, r4
 800b784:	682c      	ldr	r4, [r5, #0]
		Completed_Jobs|=(0x00000001<<job);//These can be polled by other tasks to see if a job has been completed or is scheduled 
 800b786:	4b44      	ldr	r3, [pc, #272]	; (800b898 <I2C1_EV_IRQHandler+0x270>)
	}
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
		//Completion Tasks go here

		//End of completion tasks
		Jobs&=~(0x00000001<<job);//tick off current job as complete
 800b788:	ea24 0000 	bic.w	r0, r4, r0
 800b78c:	6028      	str	r0, [r5, #0]
		Completed_Jobs|=(0x00000001<<job);//These can be polled by other tasks to see if a job has been completed or is scheduled 
 800b78e:	7808      	ldrb	r0, [r1, #0]
 800b790:	6819      	ldr	r1, [r3, #0]
 800b792:	4082      	lsls	r2, r0
		subaddress_sent=0;	//reset this here
		I2C1->CR1&=~0x0800;	//reset the POS bit so NACK applied to the current byte
 800b794:	483d      	ldr	r0, [pc, #244]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
		//Completion Tasks go here

		//End of completion tasks
		Jobs&=~(0x00000001<<job);//tick off current job as complete
		Completed_Jobs|=(0x00000001<<job);//These can be polled by other tasks to see if a job has been completed or is scheduled 
 800b796:	430a      	orrs	r2, r1
		subaddress_sent=0;	//reset this here
 800b798:	2100      	movs	r1, #0
	if((I2C_jobs[job].bytes+1)==index) {//we have completed the current job
		//Completion Tasks go here

		//End of completion tasks
		Jobs&=~(0x00000001<<job);//tick off current job as complete
		Completed_Jobs|=(0x00000001<<job);//These can be polled by other tasks to see if a job has been completed or is scheduled 
 800b79a:	601a      	str	r2, [r3, #0]
		subaddress_sent=0;	//reset this here
 800b79c:	7039      	strb	r1, [r7, #0]
		I2C1->CR1&=~0x0800;	//reset the POS bit so NACK applied to the current byte
 800b79e:	f8b0 c000 	ldrh.w	ip, [r0]
		//Completion Tasks go here

		//End of completion tasks
		Jobs&=~(0x00000001<<job);//tick off current job as complete
		Completed_Jobs|=(0x00000001<<job);//These can be polled by other tasks to see if a job has been completed or is scheduled 
		subaddress_sent=0;	//reset this here
 800b7a2:	493b      	ldr	r1, [pc, #236]	; (800b890 <I2C1_EV_IRQHandler+0x268>)
		I2C1->CR1&=~0x0800;	//reset the POS bit so NACK applied to the current byte
 800b7a4:	f42c 6300 	bic.w	r3, ip, #2048	; 0x800
 800b7a8:	041a      	lsls	r2, r3, #16
 800b7aa:	0c13      	lsrs	r3, r2, #16
 800b7ac:	8003      	strh	r3, [r0, #0]
		if(Jobs && final_stop) {//there are still jobs left
 800b7ae:	682a      	ldr	r2, [r5, #0]
 800b7b0:	b1ba      	cbz	r2, 800b7e2 <I2C1_EV_IRQHandler+0x1ba>
 800b7b2:	788b      	ldrb	r3, [r1, #2]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d084      	beq.n	800b6c2 <I2C1_EV_IRQHandler+0x9a>
			while(I2C1->CR1&0x0200){;}//doesnt seem to be a better way to do this, must wait for stop to clear
 800b7b8:	f8b0 c000 	ldrh.w	ip, [r0]
 800b7bc:	f41c 7f00 	tst.w	ip, #512	; 0x200
 800b7c0:	d1fa      	bne.n	800b7b8 <I2C1_EV_IRQHandler+0x190>
			I2C_GenerateSTART(I2C1,ENABLE);//program the Start to kick start the new transfer
 800b7c2:	4832      	ldr	r0, [pc, #200]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b7c4:	2101      	movs	r1, #1
		}
		else if(final_stop)	//If there is a final stop and no more jobs, bus is inactive, disable interrupts to prevent BTF
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts while bus inactive
	}
}
 800b7c6:	b005      	add	sp, #20
 800b7c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Completed_Jobs|=(0x00000001<<job);//These can be polled by other tasks to see if a job has been completed or is scheduled 
		subaddress_sent=0;	//reset this here
		I2C1->CR1&=~0x0800;	//reset the POS bit so NACK applied to the current byte
		if(Jobs && final_stop) {//there are still jobs left
			while(I2C1->CR1&0x0200){;}//doesnt seem to be a better way to do this, must wait for stop to clear
			I2C_GenerateSTART(I2C1,ENABLE);//program the Start to kick start the new transfer
 800b7cc:	f002 b9fd 	b.w	800dbca <I2C_GenerateSTART>
		}		
		else {
			index++;
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
 800b7d0:	482e      	ldr	r0, [pc, #184]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b7d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f002 fa43 	bl	800dc62 <I2C_ITConfig>
 800b7dc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800b7e0:	e766      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
		I2C1->CR1&=~0x0800;	//reset the POS bit so NACK applied to the current byte
		if(Jobs && final_stop) {//there are still jobs left
			while(I2C1->CR1&0x0200){;}//doesnt seem to be a better way to do this, must wait for stop to clear
			I2C_GenerateSTART(I2C1,ENABLE);//program the Start to kick start the new transfer
		}
		else if(final_stop)	//If there is a final stop and no more jobs, bus is inactive, disable interrupts to prevent BTF
 800b7e2:	7889      	ldrb	r1, [r1, #2]
 800b7e4:	2900      	cmp	r1, #0
 800b7e6:	f43f af6c 	beq.w	800b6c2 <I2C1_EV_IRQHandler+0x9a>
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts while bus inactive
 800b7ea:	f44f 7140 	mov.w	r1, #768	; 0x300
	}
}
 800b7ee:	b005      	add	sp, #20
 800b7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(Jobs && final_stop) {//there are still jobs left
			while(I2C1->CR1&0x0200){;}//doesnt seem to be a better way to do this, must wait for stop to clear
			I2C_GenerateSTART(I2C1,ENABLE);//program the Start to kick start the new transfer
		}
		else if(final_stop)	//If there is a final stop and no more jobs, bus is inactive, disable interrupts to prevent BTF
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts while bus inactive
 800b7f4:	f002 ba35 	b.w	800dc62 <I2C_ITConfig>
			else //receiving greater than three bytes, sending subaddress, or transmitting
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
		}
	}
	else if(SReg_1&0x004) {//Byte transfer finished - EV7_2, EV7_3 or EV8_2
		if(Jobs&~(1<<job)) 	//check if there are other jobs requested other than the current one
 800b7f8:	7821      	ldrb	r1, [r4, #0]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	fa12 f601 	lsls.w	r6, r2, r1
 800b800:	6828      	ldr	r0, [r5, #0]
			final_stop=0;
		else
			final_stop=1;
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
 800b802:	f894 a000 	ldrb.w	sl, [r4]
			else //receiving greater than three bytes, sending subaddress, or transmitting
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
		}
	}
	else if(SReg_1&0x004) {//Byte transfer finished - EV7_2, EV7_3 or EV8_2
		if(Jobs&~(1<<job)) 	//check if there are other jobs requested other than the current one
 800b806:	43b0      	bics	r0, r6
			final_stop=0;
		else
			final_stop=1;
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
 800b808:	4e22      	ldr	r6, [pc, #136]	; (800b894 <I2C1_EV_IRQHandler+0x26c>)
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
		}
	}
	else if(SReg_1&0x004) {//Byte transfer finished - EV7_2, EV7_3 or EV8_2
		if(Jobs&~(1<<job)) 	//check if there are other jobs requested other than the current one
			final_stop=0;
 800b80a:	bf14      	ite	ne
 800b80c:	70bb      	strbne	r3, [r7, #2]
		else
			final_stop=1;
 800b80e:	70ba      	strbeq	r2, [r7, #2]
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
 800b810:	eb06 09ca 	add.w	r9, r6, sl, lsl #3
 800b814:	f899 a001 	ldrb.w	sl, [r9, #1]
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);
		}
	}
	else if(SReg_1&0x004) {//Byte transfer finished - EV7_2, EV7_3 or EV8_2
		if(Jobs&~(1<<job)) 	//check if there are other jobs requested other than the current one
			final_stop=0;
 800b818:	bf18      	it	ne
 800b81a:	461a      	movne	r2, r3
		else
			final_stop=1;
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
 800b81c:	f1ba 0f01 	cmp.w	sl, #1
 800b820:	4b19      	ldr	r3, [pc, #100]	; (800b888 <I2C1_EV_IRQHandler+0x260>)
 800b822:	46d1      	mov	r9, sl
 800b824:	f000 80ee 	beq.w	800ba04 <I2C1_EV_IRQHandler+0x3dc>
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N
				index++;//to show job completed
			}
		}
		else {//EV8_2, which may be due to a subaddress sent or a write completion
			if(subaddress_sent || (I2C_Direction_Transmitter==I2C_jobs[job].direction)) {
 800b828:	783b      	ldrb	r3, [r7, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d05c      	beq.n	800b8e8 <I2C1_EV_IRQHandler+0x2c0>
				if(final_stop)
 800b82e:	2a00      	cmp	r2, #0
 800b830:	f000 80af 	beq.w	800b992 <I2C1_EV_IRQHandler+0x36a>
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
 800b834:	4815      	ldr	r0, [pc, #84]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b836:	2101      	movs	r1, #1
 800b838:	f002 f9d4 	bl	800dbe4 <I2C_GenerateSTOP>
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
				index++;//to show that the job is complete
 800b83c:	7878      	ldrb	r0, [r7, #1]
 800b83e:	1c42      	adds	r2, r0, #1
 800b840:	707a      	strb	r2, [r7, #1]
			else {		//We need to send a subaddress
				I2C_GenerateSTART(I2C1,ENABLE);//program the repeated Start
				subaddress_sent=1;//this is set back to zero upon completion of the current task
			}
		}
		while(I2C1->CR1&0x0100){;}//we must wait for the start to clear, otherwise we get constant BTF
 800b842:	4a12      	ldr	r2, [pc, #72]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b844:	8811      	ldrh	r1, [r2, #0]
 800b846:	f411 7f80 	tst.w	r1, #256	; 0x100
 800b84a:	d1fb      	bne.n	800b844 <I2C1_EV_IRQHandler+0x21c>
		}		
		else {
			index++;
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
 800b84c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800b850:	e72e      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
			asm volatile ("dmb" ::: "memory");
			if(2==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) { //rx 2 bytes - EV6_1
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to fill
			}
			if(3==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent)//rx 3 bytes
 800b852:	4a0d      	ldr	r2, [pc, #52]	; (800b888 <I2C1_EV_IRQHandler+0x260>)
 800b854:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <I2C1_EV_IRQHandler+0x26c>)
 800b856:	f892 c000 	ldrb.w	ip, [r2]
 800b85a:	eb03 01cc 	add.w	r1, r3, ip, lsl #3
 800b85e:	7848      	ldrb	r0, [r1, #1]
 800b860:	2801      	cmp	r0, #1
 800b862:	f47f af1d 	bne.w	800b6a0 <I2C1_EV_IRQHandler+0x78>
 800b866:	7838      	ldrb	r0, [r7, #0]
 800b868:	2800      	cmp	r0, #0
 800b86a:	f43f af19 	beq.w	800b6a0 <I2C1_EV_IRQHandler+0x78>
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//make sure RXNE disabled so we get a BTF in two bytes time
 800b86e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b872:	4806      	ldr	r0, [pc, #24]	; (800b88c <I2C1_EV_IRQHandler+0x264>)
 800b874:	2200      	movs	r2, #0
 800b876:	f002 f9f4 	bl	800dc62 <I2C_ITConfig>
 800b87a:	4905      	ldr	r1, [pc, #20]	; (800b890 <I2C1_EV_IRQHandler+0x268>)
 800b87c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b880:	e716      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
 800b882:	bf00      	nop
 800b884:	20000b10 	.word	0x20000b10
 800b888:	20000b18 	.word	0x20000b18
 800b88c:	40005400 	.word	0x40005400
 800b890:	200007c0 	.word	0x200007c0
 800b894:	20000160 	.word	0x20000160
 800b898:	20000b14 	.word	0x20000b14
		subaddress_sent=0;
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
		index=0;		//reset the index
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
 800b89c:	48be      	ldr	r0, [pc, #760]	; (800bb98 <I2C1_EV_IRQHandler+0x570>)
 800b89e:	7801      	ldrb	r1, [r0, #0]
 800b8a0:	b949      	cbnz	r1, 800b8b6 <I2C1_EV_IRQHandler+0x28e>
 800b8a2:	49be      	ldr	r1, [pc, #760]	; (800bb9c <I2C1_EV_IRQHandler+0x574>)
 800b8a4:	780a      	ldrb	r2, [r1, #0]
 800b8a6:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 800b8aa:	f893 e003 	ldrb.w	lr, [r3, #3]
 800b8ae:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800b8b2:	f47f af3c 	bne.w	800b72e <I2C1_EV_IRQHandler+0x106>
			subaddress_sent=1;//make sure this is set in case of no subaddress, so following code runs correctly
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Receiver);//send the address and set hardware mode
 800b8b6:	f894 e000 	ldrb.w	lr, [r4]
 800b8ba:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 800bba0 <I2C1_EV_IRQHandler+0x578>
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
		index=0;		//reset the index
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
			subaddress_sent=1;//make sure this is set in case of no subaddress, so following code runs correctly
 800b8be:	2301      	movs	r3, #1
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Receiver);//send the address and set hardware mode
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4640      	mov	r0, r8
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
		index=0;		//reset the index
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
			subaddress_sent=1;//make sure this is set in case of no subaddress, so following code runs correctly
 800b8c4:	703b      	strb	r3, [r7, #0]
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Receiver);//send the address and set hardware mode
 800b8c6:	f816 103e 	ldrb.w	r1, [r6, lr, lsl #3]
 800b8ca:	f002 f9da 	bl	800dc82 <I2C_Send7bitAddress>
			if(2==I2C_jobs[job].bytes)
 800b8ce:	7823      	ldrb	r3, [r4, #0]
	}
	if(SReg_1&0x0001) {//we just sent a start - EV5 in ref manual
		I2C_AcknowledgeConfig(I2C1, ENABLE);//make sure ACK is on
		index=0;		//reset the index
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
			subaddress_sent=1;//make sure this is set in case of no subaddress, so following code runs correctly
 800b8d0:	4ab1      	ldr	r2, [pc, #708]	; (800bb98 <I2C1_EV_IRQHandler+0x570>)
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Receiver);//send the address and set hardware mode
			if(2==I2C_jobs[job].bytes)
 800b8d2:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800b8d6:	f890 c002 	ldrb.w	ip, [r0, #2]
 800b8da:	f1bc 0f02 	cmp.w	ip, #2
 800b8de:	f000 80f1 	beq.w	800bac4 <I2C1_EV_IRQHandler+0x49c>
 800b8e2:	f992 3001 	ldrsb.w	r3, [r2, #1]
 800b8e6:	e6e3      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N
				index++;//to show job completed
			}
		}
		else {//EV8_2, which may be due to a subaddress sent or a write completion
			if(subaddress_sent || (I2C_Direction_Transmitter==I2C_jobs[job].direction)) {
 800b8e8:	f894 e000 	ldrb.w	lr, [r4]
 800b8ec:	eb06 0cce 	add.w	ip, r6, lr, lsl #3
 800b8f0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d09a      	beq.n	800b82e <I2C1_EV_IRQHandler+0x206>
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
				index++;//to show that the job is complete
			}
			else {		//We need to send a subaddress
				I2C_GenerateSTART(I2C1,ENABLE);//program the repeated Start
 800b8f8:	48a9      	ldr	r0, [pc, #676]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	f002 f965 	bl	800dbca <I2C_GenerateSTART>
				subaddress_sent=1;//this is set back to zero upon completion of the current task
 800b900:	2301      	movs	r3, #1
 800b902:	703b      	strb	r3, [r7, #0]
 800b904:	e79d      	b.n	800b842 <I2C1_EV_IRQHandler+0x21a>
	}
	else if(SReg_1&0x0002) {//we just sent the address - EV6 in ref manual
		//Read SR1,2 to clear ADDR
		volatile uint8_t a;
		asm volatile ("dmb" ::: "memory");//memory fence to control hardware
		if(1==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//we are receiving 1 byte - EV6_3
 800b906:	4aa5      	ldr	r2, [pc, #660]	; (800bb9c <I2C1_EV_IRQHandler+0x574>)
 800b908:	f892 c000 	ldrb.w	ip, [r2]
 800b90c:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 800b910:	f898 8001 	ldrb.w	r8, [r8, #1]
 800b914:	f1b8 0f01 	cmp.w	r8, #1
 800b918:	f47f aea9 	bne.w	800b66e <I2C1_EV_IRQHandler+0x46>
 800b91c:	7838      	ldrb	r0, [r7, #0]
 800b91e:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800bb98 <I2C1_EV_IRQHandler+0x570>
 800b922:	2800      	cmp	r0, #0
 800b924:	f43f aea3 	beq.w	800b66e <I2C1_EV_IRQHandler+0x46>
			I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
 800b928:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bba0 <I2C1_EV_IRQHandler+0x578>
 800b92c:	4658      	mov	r0, fp
 800b92e:	f002 f966 	bl	800dbfe <I2C_AcknowledgeConfig>
			asm volatile ("dmb" ::: "memory");
 800b932:	f3bf 8f5f 	dmb	sy
			a=I2C1->SR2;	//clear ADDR after ACK is turned off
 800b936:	f8bb 3018 	ldrh.w	r3, [fp, #24]
			I2C_GenerateSTOP(I2C1,ENABLE);//program the stop
 800b93a:	4658      	mov	r0, fp
 800b93c:	4641      	mov	r1, r8
		volatile uint8_t a;
		asm volatile ("dmb" ::: "memory");//memory fence to control hardware
		if(1==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//we are receiving 1 byte - EV6_3
			I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
			asm volatile ("dmb" ::: "memory");
			a=I2C1->SR2;	//clear ADDR after ACK is turned off
 800b93e:	f88d 300f 	strb.w	r3, [sp, #15]
			I2C_GenerateSTOP(I2C1,ENABLE);//program the stop
 800b942:	f002 f94f 	bl	800dbe4 <I2C_GenerateSTOP>
			final_stop=1;
			I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);//allow us to have an EV7
 800b946:	4658      	mov	r0, fp
 800b948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b94c:	4642      	mov	r2, r8
		if(1==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//we are receiving 1 byte - EV6_3
			I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
			asm volatile ("dmb" ::: "memory");
			a=I2C1->SR2;	//clear ADDR after ACK is turned off
			I2C_GenerateSTOP(I2C1,ENABLE);//program the stop
			final_stop=1;
 800b94e:	f889 8002 	strb.w	r8, [r9, #2]
			I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);//allow us to have an EV7
 800b952:	f002 f986 	bl	800dc62 <I2C_ITConfig>
 800b956:	f999 3001 	ldrsb.w	r3, [r9, #1]
 800b95a:	e6a9      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
		}
		else {//EV6 and EV6_1
			a=I2C1->SR2;	//clear the ADDR here
			asm volatile ("dmb" ::: "memory");
			if(2==I2C_jobs[job].bytes && I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) { //rx 2 bytes - EV6_1
 800b95c:	488f      	ldr	r0, [pc, #572]	; (800bb9c <I2C1_EV_IRQHandler+0x574>)
 800b95e:	4a91      	ldr	r2, [pc, #580]	; (800bba4 <I2C1_EV_IRQHandler+0x57c>)
 800b960:	f890 e000 	ldrb.w	lr, [r0]
 800b964:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
 800b968:	7848      	ldrb	r0, [r1, #1]
 800b96a:	2801      	cmp	r0, #1
 800b96c:	f47f ae8e 	bne.w	800b68c <I2C1_EV_IRQHandler+0x64>
 800b970:	7839      	ldrb	r1, [r7, #0]
 800b972:	2900      	cmp	r1, #0
 800b974:	f43f ae8a 	beq.w	800b68c <I2C1_EV_IRQHandler+0x64>
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
 800b978:	2100      	movs	r1, #0
 800b97a:	4618      	mov	r0, r3
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	f002 f93e 	bl	800dbfe <I2C_AcknowledgeConfig>
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to fill
 800b982:	9b00      	ldr	r3, [sp, #0]
 800b984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b988:	4618      	mov	r0, r3
 800b98a:	2200      	movs	r2, #0
 800b98c:	f002 f969 	bl	800dc62 <I2C_ITConfig>
 800b990:	e67c      	b.n	800b68c <I2C1_EV_IRQHandler+0x64>
		else {//EV8_2, which may be due to a subaddress sent or a write completion
			if(subaddress_sent || (I2C_Direction_Transmitter==I2C_jobs[job].direction)) {
				if(final_stop)
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
 800b992:	4883      	ldr	r0, [pc, #524]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800b994:	2101      	movs	r1, #1
 800b996:	f002 f918 	bl	800dbca <I2C_GenerateSTART>
 800b99a:	e74f      	b.n	800b83c <I2C1_EV_IRQHandler+0x214>
			}
		}
		while(I2C1->CR1&0x0100){;}//we must wait for the start to clear, otherwise we get constant BTF
	}
	else if(SReg_1&0x0040) {//Byte received - EV7
		I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);		
 800b99c:	f894 e000 	ldrb.w	lr, [r4]
 800b9a0:	4e80      	ldr	r6, [pc, #512]	; (800bba4 <I2C1_EV_IRQHandler+0x57c>)
 800b9a2:	487f      	ldr	r0, [pc, #508]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800b9a4:	eb06 0ace 	add.w	sl, r6, lr, lsl #3
 800b9a8:	f897 9001 	ldrb.w	r9, [r7, #1]
 800b9ac:	f8da a004 	ldr.w	sl, [sl, #4]
 800b9b0:	f002 f964 	bl	800dc7c <I2C_ReceiveData>
 800b9b4:	fa4f fc89 	sxtb.w	ip, r9
 800b9b8:	f80a 000c 	strb.w	r0, [sl, ip]
		if(I2C_jobs[job].bytes==(index+3))
 800b9bc:	7821      	ldrb	r1, [r4, #0]
			}
		}
		while(I2C1->CR1&0x0100){;}//we must wait for the start to clear, otherwise we get constant BTF
	}
	else if(SReg_1&0x0040) {//Byte received - EV7
		I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);		
 800b9be:	f109 0201 	add.w	r2, r9, #1
 800b9c2:	b2d2      	uxtb	r2, r2
		if(I2C_jobs[job].bytes==(index+3))
 800b9c4:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
 800b9c8:	f893 c002 	ldrb.w	ip, [r3, #2]
 800b9cc:	b253      	sxtb	r3, r2
 800b9ce:	1cd8      	adds	r0, r3, #3
 800b9d0:	4584      	cmp	ip, r0
			}
		}
		while(I2C1->CR1&0x0100){;}//we must wait for the start to clear, otherwise we get constant BTF
	}
	else if(SReg_1&0x0040) {//Byte received - EV7
		I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);		
 800b9d2:	707a      	strb	r2, [r7, #1]
		if(I2C_jobs[job].bytes==(index+3))
 800b9d4:	d00c      	beq.n	800b9f0 <I2C1_EV_IRQHandler+0x3c8>
			I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush so we can get an EV7_2
		if(I2C_jobs[job].bytes==index)//We have completed a final EV7
 800b9d6:	f894 e000 	ldrb.w	lr, [r4]
 800b9da:	eb06 0cce 	add.w	ip, r6, lr, lsl #3
 800b9de:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800b9e2:	4299      	cmp	r1, r3
 800b9e4:	f47f ae64 	bne.w	800b6b0 <I2C1_EV_IRQHandler+0x88>
			index++;	//to show job is complete
 800b9e8:	1c53      	adds	r3, r2, #1
 800b9ea:	707b      	strb	r3, [r7, #1]
 800b9ec:	b25b      	sxtb	r3, r3
 800b9ee:	e65f      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
		while(I2C1->CR1&0x0100){;}//we must wait for the start to clear, otherwise we get constant BTF
	}
	else if(SReg_1&0x0040) {//Byte received - EV7
		I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);		
		if(I2C_jobs[job].bytes==(index+3))
			I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush so we can get an EV7_2
 800b9f0:	486b      	ldr	r0, [pc, #428]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800b9f2:	4642      	mov	r2, r8
 800b9f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b9f8:	f002 f933 	bl	800dc62 <I2C_ITConfig>
 800b9fc:	4866      	ldr	r0, [pc, #408]	; (800bb98 <I2C1_EV_IRQHandler+0x570>)
 800b9fe:	7842      	ldrb	r2, [r0, #1]
 800ba00:	b253      	sxtb	r3, r2
 800ba02:	e7e8      	b.n	800b9d6 <I2C1_EV_IRQHandler+0x3ae>
	else if(SReg_1&0x004) {//Byte transfer finished - EV7_2, EV7_3 or EV8_2
		if(Jobs&~(1<<job)) 	//check if there are other jobs requested other than the current one
			final_stop=0;
		else
			final_stop=1;
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
 800ba04:	7838      	ldrb	r0, [r7, #0]
 800ba06:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800bb98 <I2C1_EV_IRQHandler+0x570>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	f43f af6c 	beq.w	800b8e8 <I2C1_EV_IRQHandler+0x2c0>
			if(I2C_jobs[job].bytes>2) {//EV7_2
 800ba10:	7819      	ldrb	r1, [r3, #0]
 800ba12:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800ba16:	f89c e002 	ldrb.w	lr, [ip, #2]
 800ba1a:	f1be 0f02 	cmp.w	lr, #2
 800ba1e:	d87f      	bhi.n	800bb20 <I2C1_EV_IRQHandler+0x4f8>
				final_stop=1;//reuired to fix hardware
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);//enable TXE to allow the final EV7
			}
			else {		//EV7_3
				if(final_stop)
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	d078      	beq.n	800bb16 <I2C1_EV_IRQHandler+0x4ee>
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
 800ba24:	485e      	ldr	r0, [pc, #376]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800ba26:	4651      	mov	r1, sl
 800ba28:	f002 f8dc 	bl	800dbe4 <I2C_GenerateSTOP>
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
 800ba2c:	7820      	ldrb	r0, [r4, #0]
 800ba2e:	f897 8001 	ldrb.w	r8, [r7, #1]
 800ba32:	eb06 0ec0 	add.w	lr, r6, r0, lsl #3
 800ba36:	485a      	ldr	r0, [pc, #360]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800ba38:	f8de 9004 	ldr.w	r9, [lr, #4]
 800ba3c:	f002 f91e 	bl	800dc7c <I2C_ReceiveData>
 800ba40:	fa4f f188 	sxtb.w	r1, r8
 800ba44:	f809 0001 	strb.w	r0, [r9, r1]
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N
 800ba48:	7822      	ldrb	r2, [r4, #0]
			else {		//EV7_3
				if(final_stop)
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
 800ba4a:	f108 0a01 	add.w	sl, r8, #1
 800ba4e:	fa5f f88a 	uxtb.w	r8, sl
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N
 800ba52:	eb06 09c2 	add.w	r9, r6, r2, lsl #3
			else {		//EV7_3
				if(final_stop)
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
 800ba56:	f887 8001 	strb.w	r8, [r7, #1]
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N
 800ba5a:	4851      	ldr	r0, [pc, #324]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800ba5c:	f8d9 a004 	ldr.w	sl, [r9, #4]
 800ba60:	f002 f90c 	bl	800dc7c <I2C_ReceiveData>
 800ba64:	fa4f f988 	sxtb.w	r9, r8
				index++;//to show job completed
 800ba68:	f108 0802 	add.w	r8, r8, #2
				if(final_stop)
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N
 800ba6c:	f80a 0009 	strb.w	r0, [sl, r9]
				index++;//to show job completed
 800ba70:	f887 8001 	strb.w	r8, [r7, #1]
 800ba74:	e6e5      	b.n	800b842 <I2C1_EV_IRQHandler+0x21a>
			I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush so we can get an EV7_2
		if(I2C_jobs[job].bytes==index)//We have completed a final EV7
			index++;	//to show job is complete
	}
	else if(SReg_1&0x0080) {//Byte transmitted -EV8/EV8_1
		if(-1!=index) {		//we dont have a subaddress to send
 800ba76:	787a      	ldrb	r2, [r7, #1]
 800ba78:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800bb98 <I2C1_EV_IRQHandler+0x570>
 800ba7c:	b253      	sxtb	r3, r2
 800ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba82:	d02a      	beq.n	800bada <I2C1_EV_IRQHandler+0x4b2>
			I2C_SendData(I2C1,I2C_jobs[job].data_pointer[index++]);
 800ba84:	f894 e000 	ldrb.w	lr, [r4]
 800ba88:	4e46      	ldr	r6, [pc, #280]	; (800bba4 <I2C1_EV_IRQHandler+0x57c>)
 800ba8a:	3201      	adds	r2, #1
 800ba8c:	eb06 0cce 	add.w	ip, r6, lr, lsl #3
 800ba90:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ba94:	4842      	ldr	r0, [pc, #264]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800ba96:	5cc9      	ldrb	r1, [r1, r3]
 800ba98:	f888 2001 	strb.w	r2, [r8, #1]
 800ba9c:	f002 f8ec 	bl	800dc78 <I2C_SendData>
			if(I2C_jobs[job].bytes==index)//we have sent all the data
 800baa0:	7821      	ldrb	r1, [r4, #0]
 800baa2:	f998 3001 	ldrsb.w	r3, [r8, #1]
 800baa6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800baaa:	7882      	ldrb	r2, [r0, #2]
 800baac:	429a      	cmp	r2, r3
 800baae:	f47f adff 	bne.w	800b6b0 <I2C1_EV_IRQHandler+0x88>
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
 800bab2:	483b      	ldr	r0, [pc, #236]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bab8:	464a      	mov	r2, r9
 800baba:	f002 f8d2 	bl	800dc62 <I2C_ITConfig>
 800babe:	f998 3001 	ldrsb.w	r3, [r8, #1]
 800bac2:	e5f5      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
		index=0;		//reset the index
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && (subaddress_sent || 0xFF==I2C_jobs[job].subaddress)) {//we have sent the subaddr
			subaddress_sent=1;//make sure this is set in case of no subaddress, so following code runs correctly
			I2C_Send7bitAddress(I2C1,I2C_jobs[job].address,I2C_Direction_Receiver);//send the address and set hardware mode
			if(2==I2C_jobs[job].bytes)
				I2C1->CR1|=0x0800;//set the POS bit so NACK applied to the final byte in the two byte read
 800bac4:	f8b8 c000 	ldrh.w	ip, [r8]
 800bac8:	f992 3001 	ldrsb.w	r3, [r2, #1]
 800bacc:	fa1f f18c 	uxth.w	r1, ip
 800bad0:	f441 6200 	orr.w	r2, r1, #2048	; 0x800
 800bad4:	f8a8 2000 	strh.w	r2, [r8]
 800bad8:	e5ea      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
			if(I2C_jobs[job].bytes==index)//we have sent all the data
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
		}		
		else {
			index++;
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
 800bada:	f894 c000 	ldrb.w	ip, [r4]
 800bade:	4e31      	ldr	r6, [pc, #196]	; (800bba4 <I2C1_EV_IRQHandler+0x57c>)
 800bae0:	482f      	ldr	r0, [pc, #188]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bae2:	eb06 01cc 	add.w	r1, r6, ip, lsl #3
 800bae6:	78c9      	ldrb	r1, [r1, #3]
			I2C_SendData(I2C1,I2C_jobs[job].data_pointer[index++]);
			if(I2C_jobs[job].bytes==index)//we have sent all the data
				I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable TXE to allow the buffer to flush
		}		
		else {
			index++;
 800bae8:	f888 9001 	strb.w	r9, [r8, #1]
			I2C_SendData(I2C1,I2C_jobs[job].subaddress);//send the subaddress
 800baec:	f002 f8c4 	bl	800dc78 <I2C_SendData>
			if(I2C_Direction_Receiver==I2C_jobs[job].direction || !I2C_jobs[job].bytes)//if receiving or sending 0 bytes, flush now
 800baf0:	7822      	ldrb	r2, [r4, #0]
 800baf2:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800baf6:	7843      	ldrb	r3, [r0, #1]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	f43f ae69 	beq.w	800b7d0 <I2C1_EV_IRQHandler+0x1a8>
 800bafe:	4a27      	ldr	r2, [pc, #156]	; (800bb9c <I2C1_EV_IRQHandler+0x574>)
 800bb00:	7810      	ldrb	r0, [r2, #0]
 800bb02:	eb06 0ec0 	add.w	lr, r6, r0, lsl #3
 800bb06:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f43f ae60 	beq.w	800b7d0 <I2C1_EV_IRQHandler+0x1a8>
 800bb10:	f998 3001 	ldrsb.w	r3, [r8, #1]
 800bb14:	e5cc      	b.n	800b6b0 <I2C1_EV_IRQHandler+0x88>
			}
			else {		//EV7_3
				if(final_stop)
					I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				else
					I2C_GenerateSTART(I2C1,ENABLE);//program a rep start
 800bb16:	4822      	ldr	r0, [pc, #136]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bb18:	4651      	mov	r1, sl
 800bb1a:	f002 f856 	bl	800dbca <I2C_GenerateSTART>
 800bb1e:	e785      	b.n	800ba2c <I2C1_EV_IRQHandler+0x404>
			final_stop=0;
		else
			final_stop=1;
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
			if(I2C_jobs[job].bytes>2) {//EV7_2
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
 800bb20:	2100      	movs	r1, #0
 800bb22:	481f      	ldr	r0, [pc, #124]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	f002 f86a 	bl	800dbfe <I2C_AcknowledgeConfig>
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-2
 800bb2a:	9b00      	ldr	r3, [sp, #0]
 800bb2c:	f898 b001 	ldrb.w	fp, [r8, #1]
 800bb30:	f893 c000 	ldrb.w	ip, [r3]
 800bb34:	eb06 00cc 	add.w	r0, r6, ip, lsl #3
 800bb38:	6841      	ldr	r1, [r0, #4]
 800bb3a:	4819      	ldr	r0, [pc, #100]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bb3c:	9101      	str	r1, [sp, #4]
 800bb3e:	f002 f89d 	bl	800dc7c <I2C_ReceiveData>
 800bb42:	9a01      	ldr	r2, [sp, #4]
 800bb44:	fa4f fe8b 	sxtb.w	lr, fp
 800bb48:	f10b 0b01 	add.w	fp, fp, #1
 800bb4c:	f802 000e 	strb.w	r0, [r2, lr]
				I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
 800bb50:	4651      	mov	r1, sl
		else
			final_stop=1;
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
			if(I2C_jobs[job].bytes>2) {//EV7_2
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-2
 800bb52:	f888 b001 	strb.w	fp, [r8, #1]
				I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
 800bb56:	4812      	ldr	r0, [pc, #72]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bb58:	f002 f844 	bl	800dbe4 <I2C_GenerateSTOP>
				final_stop=1;//reuired to fix hardware
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
 800bb5c:	9b00      	ldr	r3, [sp, #0]
		if(I2C_Direction_Receiver==I2C_jobs[job].direction && subaddress_sent) {//EV7_2, EV7_3
			if(I2C_jobs[job].bytes>2) {//EV7_2
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-2
				I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				final_stop=1;//reuired to fix hardware
 800bb5e:	f888 a002 	strb.w	sl, [r8, #2]
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
 800bb62:	f893 c000 	ldrb.w	ip, [r3]
 800bb66:	f898 b001 	ldrb.w	fp, [r8, #1]
 800bb6a:	eb06 00cc 	add.w	r0, r6, ip, lsl #3
 800bb6e:	6841      	ldr	r1, [r0, #4]
 800bb70:	480b      	ldr	r0, [pc, #44]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bb72:	9100      	str	r1, [sp, #0]
 800bb74:	f002 f882 	bl	800dc7c <I2C_ReceiveData>
 800bb78:	9a00      	ldr	r2, [sp, #0]
 800bb7a:	fa4f fa8b 	sxtb.w	sl, fp
 800bb7e:	f10b 0301 	add.w	r3, fp, #1
 800bb82:	f802 000a 	strb.w	r0, [r2, sl]
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);//enable TXE to allow the final EV7
 800bb86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb8a:	4805      	ldr	r0, [pc, #20]	; (800bba0 <I2C1_EV_IRQHandler+0x578>)
 800bb8c:	464a      	mov	r2, r9
			if(I2C_jobs[job].bytes>2) {//EV7_2
				I2C_AcknowledgeConfig(I2C1, DISABLE);//turn off ACK
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-2
				I2C_GenerateSTOP(I2C1,ENABLE);//program the Stop
				final_stop=1;//reuired to fix hardware
				I2C_jobs[job].data_pointer[index++]=I2C_ReceiveData(I2C1);//read data N-1
 800bb8e:	f888 3001 	strb.w	r3, [r8, #1]
				I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE);//enable TXE to allow the final EV7
 800bb92:	f002 f866 	bl	800dc62 <I2C_ITConfig>
 800bb96:	e654      	b.n	800b842 <I2C1_EV_IRQHandler+0x21a>
 800bb98:	200007c0 	.word	0x200007c0
 800bb9c:	20000b18 	.word	0x20000b18
 800bba0:	40005400 	.word	0x40005400
 800bba4:	20000160 	.word	0x20000160

0800bba8 <I2C1_Request_Job>:
  * @brief  This function sets a job as requested on I2C1
  * @param : job number
  * @retval : None
  */
void I2C1_Request_Job(uint8_t job_) {
	if(job_<32) {			//sanity check
 800bba8:	281f      	cmp	r0, #31
/**
  * @brief  This function sets a job as requested on I2C1
  * @param : job number
  * @retval : None
  */
void I2C1_Request_Job(uint8_t job_) {
 800bbaa:	b510      	push	{r4, lr}
	if(job_<32) {			//sanity check
 800bbac:	d821      	bhi.n	800bbf2 <I2C1_Request_Job+0x4a>
		Jobs|=1<<job_;		//set the job bit, do it here and use interrupt flag to detect bus inactive in case of I2C interrupting here
 800bbae:	2201      	movs	r2, #1
 800bbb0:	fa12 f000 	lsls.w	r0, r2, r0
 800bbb4:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <I2C1_Request_Job+0x4c>)
		if(!(I2C1->CR2&I2C_IT_EVT)) {//if we are restarting the driver
 800bbb6:	4a10      	ldr	r2, [pc, #64]	; (800bbf8 <I2C1_Request_Job+0x50>)
  * @param : job number
  * @retval : None
  */
void I2C1_Request_Job(uint8_t job_) {
	if(job_<32) {			//sanity check
		Jobs|=1<<job_;		//set the job bit, do it here and use interrupt flag to detect bus inactive in case of I2C interrupting here
 800bbb8:	6819      	ldr	r1, [r3, #0]
 800bbba:	4308      	orrs	r0, r1
 800bbbc:	6018      	str	r0, [r3, #0]
		if(!(I2C1->CR2&I2C_IT_EVT)) {//if we are restarting the driver
 800bbbe:	8893      	ldrh	r3, [r2, #4]
 800bbc0:	f413 7f00 	tst.w	r3, #512	; 0x200
 800bbc4:	d115      	bne.n	800bbf2 <I2C1_Request_Job+0x4a>
			if(!(I2C1->CR1&0x0100)) {// ensure sending a start
 800bbc6:	f8b2 c000 	ldrh.w	ip, [r2]
 800bbca:	f41c 7f80 	tst.w	ip, #256	; 0x100
 800bbce:	d108      	bne.n	800bbe2 <I2C1_Request_Job+0x3a>
				while(I2C1->CR1&0x0200){;}//wait for any stop to finish sending
 800bbd0:	f8b2 e000 	ldrh.w	lr, [r2]
 800bbd4:	f41e 7f00 	tst.w	lr, #512	; 0x200
 800bbd8:	d1fa      	bne.n	800bbd0 <I2C1_Request_Job+0x28>
				I2C_GenerateSTART(I2C1,ENABLE);//send the start for the new job
 800bbda:	4807      	ldr	r0, [pc, #28]	; (800bbf8 <I2C1_Request_Job+0x50>)
 800bbdc:	2101      	movs	r1, #1
 800bbde:	f001 fff4 	bl	800dbca <I2C_GenerateSTART>
			}
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, ENABLE);//allow the interrupts to fire off again
 800bbe2:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <I2C1_Request_Job+0x50>)
 800bbe4:	f44f 7140 	mov.w	r1, #768	; 0x300
 800bbe8:	2201      	movs	r2, #1
		}
	}
}
 800bbea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(!(I2C1->CR2&I2C_IT_EVT)) {//if we are restarting the driver
			if(!(I2C1->CR1&0x0100)) {// ensure sending a start
				while(I2C1->CR1&0x0200){;}//wait for any stop to finish sending
				I2C_GenerateSTART(I2C1,ENABLE);//send the start for the new job
			}
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, ENABLE);//allow the interrupts to fire off again
 800bbee:	f002 b838 	b.w	800dc62 <I2C_ITConfig>
 800bbf2:	bd10      	pop	{r4, pc}
 800bbf4:	20000b10 	.word	0x20000b10
 800bbf8:	40005400 	.word	0x40005400

0800bbfc <I2C1_Setup_Job>:
  * @brief  This function sets the data pointer on a job
  * @param : job number, pointer to data
  * @retval : None
  */
void I2C1_Setup_Job(uint8_t job_, volatile uint8_t* data) {
	if(job_<I2C_NUMBER_JOBS)
 800bbfc:	2801      	cmp	r0, #1
 800bbfe:	d803      	bhi.n	800bc08 <I2C1_Setup_Job+0xc>
		I2C_jobs[job_].data_pointer=data;
 800bc00:	4b02      	ldr	r3, [pc, #8]	; (800bc0c <I2C1_Setup_Job+0x10>)
 800bc02:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bc06:	6041      	str	r1, [r0, #4]
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20000160 	.word	0x20000160

0800bc10 <I2C_Config>:
/**
  * @brief  Configures the I2C1 interface
  * @param  None
  * @retval None
  */
void I2C_Config() {			//Configure I2C1 for the sensor bus
 800bc10:	b530      	push	{r4, r5, lr}
	I2C_DeInit(I2C1);		//Deinit and reset the I2C to avoid it locking up
 800bc12:	485c      	ldr	r0, [pc, #368]	; (800bd84 <I2C_Config+0x174>)
/**
  * @brief  Configures the I2C1 interface
  * @param  None
  * @retval None
  */
void I2C_Config() {			//Configure I2C1 for the sensor bus
 800bc14:	b087      	sub	sp, #28
	I2C_DeInit(I2C1);		//Deinit and reset the I2C to avoid it locking up
 800bc16:	f001 ff21 	bl	800da5c <I2C_DeInit>
	/*Enable the I2C1 clk*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800bc1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bc1e:	2101      	movs	r1, #1
 800bc20:	f002 fac0 	bl	800e1a4 <RCC_APB1PeriphClockCmd>
	I2C_SoftwareResetCmd(I2C1, ENABLE);
 800bc24:	4857      	ldr	r0, [pc, #348]	; (800bd84 <I2C_Config+0x174>)
 800bc26:	2101      	movs	r1, #1
 800bc28:	f002 f83f 	bl	800dcaa <I2C_SoftwareResetCmd>
	I2C_SoftwareResetCmd(I2C1, DISABLE);
 800bc2c:	4855      	ldr	r0, [pc, #340]	; (800bd84 <I2C_Config+0x174>)
 800bc2e:	2100      	movs	r1, #0
 800bc30:	f002 f83b 	bl	800dcaa <I2C_SoftwareResetCmd>
	I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_OwnAddress1 = 0xAD;//0xAM --> ADAM
 800bc34:	25ad      	movs	r5, #173	; 0xad
	/*Enable the I2C1 clk*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	I2C_SoftwareResetCmd(I2C1, ENABLE);
	I2C_SoftwareResetCmd(I2C1, DISABLE);
	I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800bc36:	2200      	movs	r2, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800bc38:	f64b 73ff 	movw	r3, #49151	; 0xbfff
	/*Enable the I2C1 clk*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	I2C_SoftwareResetCmd(I2C1, ENABLE);
	I2C_SoftwareResetCmd(I2C1, DISABLE);
	I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800bc3c:	f8ad 2008 	strh.w	r2, [sp, #8]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800bc40:	f8ad 300a 	strh.w	r3, [sp, #10]
	I2C_InitStructure.I2C_OwnAddress1 = 0xAD;//0xAM --> ADAM
 800bc44:	f8ad 500c 	strh.w	r5, [sp, #12]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress= I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = 100000;
 800bc48:	4a4f      	ldr	r2, [pc, #316]	; (800bd88 <I2C_Config+0x178>)
  * @param : job number, pointer to data
  * @retval : None
  */
void I2C1_Setup_Job(uint8_t job_, volatile uint8_t* data) {
	if(job_<I2C_NUMBER_JOBS)
		I2C_jobs[job_].data_pointer=data;
 800bc4a:	4b50      	ldr	r3, [pc, #320]	; (800bd8c <I2C_Config+0x17c>)
 800bc4c:	4d50      	ldr	r5, [pc, #320]	; (800bd90 <I2C_Config+0x180>)
	I2C_SoftwareResetCmd(I2C1, DISABLE);
	I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_OwnAddress1 = 0xAD;//0xAM --> ADAM
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800bc4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
	I2C_InitStructure.I2C_AcknowledgedAddress= I2C_AcknowledgedAddress_7bit;
 800bc52:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  * @param : job number, pointer to data
  * @retval : None
  */
void I2C1_Setup_Job(uint8_t job_, volatile uint8_t* data) {
	if(job_<I2C_NUMBER_JOBS)
		I2C_jobs[job_].data_pointer=data;
 800bc56:	605d      	str	r5, [r3, #4]
	//Assert the bus
	GPIO_InitTypeDef	GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = I2C1_SCL|I2C1_SDA;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init( GPIOB, &GPIO_InitStructure );//Configure the pins as output open drain so we can clk them as GPIO
 800bc58:	484e      	ldr	r0, [pc, #312]	; (800bd94 <I2C_Config+0x184>)
	I2C1_Setup_Job(TMP102_READ, (volatile uint8_t*)&TMP102_Data_Buffer);//Temperature data buffer
	//Assert the bus
	GPIO_InitTypeDef	GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = I2C1_SCL|I2C1_SDA;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800bc5a:	2303      	movs	r3, #3
	GPIO_Init( GPIOB, &GPIO_InitStructure );//Configure the pins as output open drain so we can clk them as GPIO
 800bc5c:	a905      	add	r1, sp, #20
	I2C_SoftwareResetCmd(I2C1, DISABLE);
	I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_OwnAddress1 = 0xAD;//0xAM --> ADAM
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800bc5e:	f8ad 400e 	strh.w	r4, [sp, #14]
	I2C_InitStructure.I2C_AcknowledgedAddress= I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = 100000;
 800bc62:	9201      	str	r2, [sp, #4]
	//Setup the pointers to the read data
	I2C1_Setup_Job(TMP102_READ, (volatile uint8_t*)&TMP102_Data_Buffer);//Temperature data buffer
	//Assert the bus
	GPIO_InitTypeDef	GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = I2C1_SCL|I2C1_SDA;
 800bc64:	24c0      	movs	r4, #192	; 0xc0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800bc66:	2214      	movs	r2, #20
	I2C_InitTypeDef I2C_InitStructure;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_OwnAddress1 = 0xAD;//0xAM --> ADAM
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress= I2C_AcknowledgedAddress_7bit;
 800bc68:	f8ad c010 	strh.w	ip, [sp, #16]
	//Setup the pointers to the read data
	I2C1_Setup_Job(TMP102_READ, (volatile uint8_t*)&TMP102_Data_Buffer);//Temperature data buffer
	//Assert the bus
	GPIO_InitTypeDef	GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = I2C1_SCL|I2C1_SDA;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800bc6c:	f88d 2017 	strb.w	r2, [sp, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800bc70:	f88d 3016 	strb.w	r3, [sp, #22]
	I2C_InitStructure.I2C_ClockSpeed = 100000;
	//Setup the pointers to the read data
	I2C1_Setup_Job(TMP102_READ, (volatile uint8_t*)&TMP102_Data_Buffer);//Temperature data buffer
	//Assert the bus
	GPIO_InitTypeDef	GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = I2C1_SCL|I2C1_SDA;
 800bc74:	f8ad 4014 	strh.w	r4, [sp, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init( GPIOB, &GPIO_InitStructure );//Configure the pins as output open drain so we can clk them as GPIO
 800bc78:	f001 fe15 	bl	800d8a6 <GPIO_Init>
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
 800bc7c:	4845      	ldr	r0, [pc, #276]	; (800bd94 <I2C_Config+0x184>)
 800bc7e:	21c0      	movs	r1, #192	; 0xc0
 800bc80:	f001 fe77 	bl	800d972 <GPIO_SetBits>
 800bc84:	2508      	movs	r5, #8
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bc86:	2140      	movs	r1, #64	; 0x40
 800bc88:	4842      	ldr	r0, [pc, #264]	; (800bd94 <I2C_Config+0x184>)
 800bc8a:	f001 fe60 	bl	800d94e <GPIO_ReadInputDataBit>
/**
  * @brief  Configures the I2C1 interface
  * @param  None
  * @retval None
  */
void I2C_Config() {			//Configure I2C1 for the sensor bus
 800bc8e:	2400      	movs	r4, #0
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bc90:	3c01      	subs	r4, #1
 800bc92:	b2e4      	uxtb	r4, r4
 800bc94:	bb98      	cbnz	r0, 800bcfe <I2C_Config+0xee>
		        Delay(10);
 800bc96:	200a      	movs	r0, #10
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bc98:	b38c      	cbz	r4, 800bcfe <I2C_Config+0xee>
		        Delay(10);
 800bc9a:	f7f6 f8d1 	bl	8001e40 <Delay>
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bc9e:	2140      	movs	r1, #64	; 0x40
 800bca0:	483c      	ldr	r0, [pc, #240]	; (800bd94 <I2C_Config+0x184>)
 800bca2:	f001 fe54 	bl	800d94e <GPIO_ReadInputDataBit>
 800bca6:	1e61      	subs	r1, r4, #1
 800bca8:	b2cc      	uxtb	r4, r1
 800bcaa:	bb40      	cbnz	r0, 800bcfe <I2C_Config+0xee>
		        Delay(10);
 800bcac:	200a      	movs	r0, #10
 800bcae:	f7f6 f8c7 	bl	8001e40 <Delay>
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bcb2:	2140      	movs	r1, #64	; 0x40
 800bcb4:	4837      	ldr	r0, [pc, #220]	; (800bd94 <I2C_Config+0x184>)
 800bcb6:	f001 fe4a 	bl	800d94e <GPIO_ReadInputDataBit>
 800bcba:	1e62      	subs	r2, r4, #1
 800bcbc:	b2d4      	uxtb	r4, r2
 800bcbe:	b9f0      	cbnz	r0, 800bcfe <I2C_Config+0xee>
		        Delay(10);
 800bcc0:	200a      	movs	r0, #10
 800bcc2:	f7f6 f8bd 	bl	8001e40 <Delay>
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bcc6:	2140      	movs	r1, #64	; 0x40
 800bcc8:	4832      	ldr	r0, [pc, #200]	; (800bd94 <I2C_Config+0x184>)
 800bcca:	f001 fe40 	bl	800d94e <GPIO_ReadInputDataBit>
 800bcce:	1e61      	subs	r1, r4, #1
 800bcd0:	b2cc      	uxtb	r4, r1
 800bcd2:	b9a0      	cbnz	r0, 800bcfe <I2C_Config+0xee>
		        Delay(10);
 800bcd4:	200a      	movs	r0, #10
 800bcd6:	f7f6 f8b3 	bl	8001e40 <Delay>
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bcda:	2140      	movs	r1, #64	; 0x40
 800bcdc:	482d      	ldr	r0, [pc, #180]	; (800bd94 <I2C_Config+0x184>)
 800bcde:	f001 fe36 	bl	800d94e <GPIO_ReadInputDataBit>
 800bce2:	3c01      	subs	r4, #1
 800bce4:	b958      	cbnz	r0, 800bcfe <I2C_Config+0xee>
		        Delay(10);
 800bce6:	200a      	movs	r0, #10
 800bce8:	f7f6 f8aa 	bl	8001e40 <Delay>
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
        	/* Wait for any clock stretching to finish - this has a timeout of 2.55ms*/
		uint8_t count=255;
        	while (!GPIO_ReadInputDataBit(GPIOB,I2C1_SCL)&&count) {
 800bcec:	2140      	movs	r1, #64	; 0x40
 800bcee:	4829      	ldr	r0, [pc, #164]	; (800bd94 <I2C_Config+0x184>)
 800bcf0:	f001 fe2d 	bl	800d94e <GPIO_ReadInputDataBit>
 800bcf4:	b2e4      	uxtb	r4, r4
 800bcf6:	3c01      	subs	r4, #1
 800bcf8:	b2e4      	uxtb	r4, r4
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0cb      	beq.n	800bc96 <I2C_Config+0x86>
		        Delay(10);
			count--;
		}
		/* Pull low */
		GPIO_ResetBits(GPIOB,I2C1_SCL);//Set bus low
 800bcfe:	2140      	movs	r1, #64	; 0x40
 800bd00:	4824      	ldr	r0, [pc, #144]	; (800bd94 <I2C_Config+0x184>)
 800bd02:	f001 fe38 	bl	800d976 <GPIO_ResetBits>
		Delay(10);
 800bd06:	200a      	movs	r0, #10
 800bd08:	f7f6 f89a 	bl	8001e40 <Delay>
		/* Release high again */
		GPIO_SetBits(GPIOB,I2C1_SCL);//Set bus high
 800bd0c:	4821      	ldr	r0, [pc, #132]	; (800bd94 <I2C_Config+0x184>)
 800bd0e:	2140      	movs	r1, #64	; 0x40
 800bd10:	f001 fe2f 	bl	800d972 <GPIO_SetBits>
		Delay(10);
 800bd14:	200a      	movs	r0, #10
 800bd16:	f7f6 f893 	bl	8001e40 <Delay>
 800bd1a:	1e68      	subs	r0, r5, #1
 800bd1c:	b2c5      	uxtb	r5, r0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init( GPIOB, &GPIO_InitStructure );//Configure the pins as output open drain so we can clk them as GPIO
	GPIO_SetBits(GPIOB,I2C1_SDA|I2C1_SCL);//Set bus high
	//Make sure the bus is free by clocking it until any slaves release the line - 8 clocks
	for(uint8_t n=0;n<8;n++) {
 800bd1e:	2d00      	cmp	r5, #0
 800bd20:	d1b1      	bne.n	800bc86 <I2C_Config+0x76>
		/* Release high again */
		GPIO_SetBits(GPIOB,I2C1_SCL);//Set bus high
		Delay(10);
	}
	/* Generate a start then stop condition */
	GPIO_ResetBits(GPIOB,I2C1_SDA);//Set bus data low
 800bd22:	2180      	movs	r1, #128	; 0x80
 800bd24:	481b      	ldr	r0, [pc, #108]	; (800bd94 <I2C_Config+0x184>)
 800bd26:	f001 fe26 	bl	800d976 <GPIO_ResetBits>
	Delay(10);
 800bd2a:	200a      	movs	r0, #10
 800bd2c:	f7f6 f888 	bl	8001e40 <Delay>
 	GPIO_ResetBits(GPIOB,I2C1_SCL);//Set bus scl low
 800bd30:	2140      	movs	r1, #64	; 0x40
 800bd32:	4818      	ldr	r0, [pc, #96]	; (800bd94 <I2C_Config+0x184>)
 800bd34:	f001 fe1f 	bl	800d976 <GPIO_ResetBits>
	Delay(10);
 800bd38:	200a      	movs	r0, #10
 800bd3a:	f7f6 f881 	bl	8001e40 <Delay>
 	GPIO_SetBits(GPIOB,I2C1_SCL);//Set bus scl high
 800bd3e:	2140      	movs	r1, #64	; 0x40
 800bd40:	4814      	ldr	r0, [pc, #80]	; (800bd94 <I2C_Config+0x184>)
 800bd42:	f001 fe16 	bl	800d972 <GPIO_SetBits>
	Delay(10);
 800bd46:	200a      	movs	r0, #10
 800bd48:	f7f6 f87a 	bl	8001e40 <Delay>
 	GPIO_SetBits(GPIOB,I2C1_SDA);//Set bus sda high
 800bd4c:	2180      	movs	r1, #128	; 0x80
 800bd4e:	4811      	ldr	r0, [pc, #68]	; (800bd94 <I2C_Config+0x184>)
 800bd50:	f001 fe0f 	bl	800d972 <GPIO_SetBits>
	//Configure the hardware as alt function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800bd54:	231c      	movs	r3, #28
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800bd56:	a905      	add	r1, sp, #20
 800bd58:	480e      	ldr	r0, [pc, #56]	; (800bd94 <I2C_Config+0x184>)
	Delay(10);
 	GPIO_SetBits(GPIOB,I2C1_SCL);//Set bus scl high
	Delay(10);
 	GPIO_SetBits(GPIOB,I2C1_SDA);//Set bus sda high
	//Configure the hardware as alt function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800bd5a:	f88d 3017 	strb.w	r3, [sp, #23]
	GPIO_Init( GPIOB, &GPIO_InitStructure );
 800bd5e:	f001 fda2 	bl	800d8a6 <GPIO_Init>
	//Enable the hardware
	I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts - they are enabled by the first request
 800bd62:	462a      	mov	r2, r5
 800bd64:	4807      	ldr	r0, [pc, #28]	; (800bd84 <I2C_Config+0x174>)
 800bd66:	f44f 7140 	mov.w	r1, #768	; 0x300
 800bd6a:	f001 ff7a 	bl	800dc62 <I2C_ITConfig>
	I2C_Init( I2C1, &I2C_InitStructure );
 800bd6e:	a901      	add	r1, sp, #4
 800bd70:	4804      	ldr	r0, [pc, #16]	; (800bd84 <I2C_Config+0x174>)
 800bd72:	f001 fe8d 	bl	800da90 <I2C_Init>
	I2C_Cmd( I2C1, ENABLE );
 800bd76:	4803      	ldr	r0, [pc, #12]	; (800bd84 <I2C_Config+0x174>)
 800bd78:	2101      	movs	r1, #1
 800bd7a:	f001 feff 	bl	800db7c <I2C_Cmd>
}
 800bd7e:	b007      	add	sp, #28
 800bd80:	bd30      	pop	{r4, r5, pc}
 800bd82:	bf00      	nop
 800bd84:	40005400 	.word	0x40005400
 800bd88:	000186a0 	.word	0x000186a0
 800bd8c:	20000160 	.word	0x20000160
 800bd90:	20000a58 	.word	0x20000a58
 800bd94:	40010c00 	.word	0x40010c00

0800bd98 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval : None
  * Note: The error and event handlers must be in the same priority group. Other interrupts may be in the group, but must be lower priority
  * ER must have the highest priority in the group (but not necessarily on the device - Method2 from ref manual)
  */
void I2C1_ER_IRQHandler(void) {
 800bd98:	b530      	push	{r4, r5, lr}
	__IO uint32_t SR1Register, SR2Register;
	/* Read the I2C1 status register */
	SR1Register = I2C1->SR1;
 800bd9a:	4a3a      	ldr	r2, [pc, #232]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
  * @param  None
  * @retval : None
  * Note: The error and event handlers must be in the same priority group. Other interrupts may be in the group, but must be lower priority
  * ER must have the highest priority in the group (but not necessarily on the device - Method2 from ref manual)
  */
void I2C1_ER_IRQHandler(void) {
 800bd9c:	b083      	sub	sp, #12
	__IO uint32_t SR1Register, SR2Register;
	/* Read the I2C1 status register */
	SR1Register = I2C1->SR1;
 800bd9e:	8a91      	ldrh	r1, [r2, #20]
 800bda0:	b288      	uxth	r0, r1
 800bda2:	9001      	str	r0, [sp, #4]
	if(SR1Register & 0x0F00) {	//an error
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	f413 6f70 	tst.w	r3, #3840	; 0xf00
 800bdaa:	d009      	beq.n	800bdc0 <I2C1_ER_IRQHandler+0x28>
		I2C1error.error=((SR1Register&0x0F00)>>8);//save error
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	4b36      	ldr	r3, [pc, #216]	; (800be88 <I2C1_ER_IRQHandler+0xf0>)
 800bdb0:	f3c2 2103 	ubfx	r1, r2, #8, #4
		I2C1error.job=job;	//the task
 800bdb4:	4835      	ldr	r0, [pc, #212]	; (800be8c <I2C1_ER_IRQHandler+0xf4>)
void I2C1_ER_IRQHandler(void) {
	__IO uint32_t SR1Register, SR2Register;
	/* Read the I2C1 status register */
	SR1Register = I2C1->SR1;
	if(SR1Register & 0x0F00) {	//an error
		I2C1error.error=((SR1Register&0x0F00)>>8);//save error
 800bdb6:	7019      	strb	r1, [r3, #0]
		I2C1error.job=job;	//the task
 800bdb8:	f890 c000 	ldrb.w	ip, [r0]
 800bdbc:	f883 c001 	strb.w	ip, [r3, #1]
	}
	/* If AF, BERR or ARLO, abandon the current job and commence new if there are jobs*/
	if(SR1Register & 0x0700) {
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800bdc6:	d109      	bne.n	800bddc <I2C1_ER_IRQHandler+0x44>
				I2C_GenerateSTOP(I2C1,ENABLE);//stop to free up the bus
				I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts while bus inactive
			}
		}
	}
	I2C1->SR1 &=~0x0F00;		//reset all the error bits to clear the interrupt
 800bdc8:	492e      	ldr	r1, [pc, #184]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
 800bdca:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 800bdce:	f42c 6370 	bic.w	r3, ip, #3840	; 0xf00
 800bdd2:	041a      	lsls	r2, r3, #16
 800bdd4:	0c10      	lsrs	r0, r2, #16
 800bdd6:	8288      	strh	r0, [r1, #20]
}
 800bdd8:	b003      	add	sp, #12
 800bdda:	bd30      	pop	{r4, r5, pc}
		I2C1error.error=((SR1Register&0x0F00)>>8);//save error
		I2C1error.job=job;	//the task
	}
	/* If AF, BERR or ARLO, abandon the current job and commence new if there are jobs*/
	if(SR1Register & 0x0700) {
		SR2Register = I2C1->SR2;//read second status register to clear ADDR if it is set (note that BTF will not be set after a NACK)
 800bddc:	4c29      	ldr	r4, [pc, #164]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
		I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable the RXNE/TXE interrupt - prevent the ISR tailchaining onto the ER (hopefully)
 800bdde:	f44f 6180 	mov.w	r1, #1024	; 0x400
		I2C1error.error=((SR1Register&0x0F00)>>8);//save error
		I2C1error.job=job;	//the task
	}
	/* If AF, BERR or ARLO, abandon the current job and commence new if there are jobs*/
	if(SR1Register & 0x0700) {
		SR2Register = I2C1->SR2;//read second status register to clear ADDR if it is set (note that BTF will not be set after a NACK)
 800bde2:	f8b4 e018 	ldrh.w	lr, [r4, #24]
		I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable the RXNE/TXE interrupt - prevent the ISR tailchaining onto the ER (hopefully)
 800bde6:	4620      	mov	r0, r4
		I2C1error.error=((SR1Register&0x0F00)>>8);//save error
		I2C1error.job=job;	//the task
	}
	/* If AF, BERR or ARLO, abandon the current job and commence new if there are jobs*/
	if(SR1Register & 0x0700) {
		SR2Register = I2C1->SR2;//read second status register to clear ADDR if it is set (note that BTF will not be set after a NACK)
 800bde8:	fa1f f38e 	uxth.w	r3, lr
		I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable the RXNE/TXE interrupt - prevent the ISR tailchaining onto the ER (hopefully)
 800bdec:	2200      	movs	r2, #0
		I2C1error.error=((SR1Register&0x0F00)>>8);//save error
		I2C1error.job=job;	//the task
	}
	/* If AF, BERR or ARLO, abandon the current job and commence new if there are jobs*/
	if(SR1Register & 0x0700) {
		SR2Register = I2C1->SR2;//read second status register to clear ADDR if it is set (note that BTF will not be set after a NACK)
 800bdee:	9300      	str	r3, [sp, #0]
		I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable the RXNE/TXE interrupt - prevent the ISR tailchaining onto the ER (hopefully)
 800bdf0:	f001 ff37 	bl	800dc62 <I2C_ITConfig>
		Jobs&=~(0x00000001<<job);//cancel the current job - abandoned
 800bdf4:	4b25      	ldr	r3, [pc, #148]	; (800be8c <I2C1_ER_IRQHandler+0xf4>)
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	4b25      	ldr	r3, [pc, #148]	; (800be90 <I2C1_ER_IRQHandler+0xf8>)
 800bdfc:	fa11 f202 	lsls.w	r2, r1, r2
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	ea20 0202 	bic.w	r2, r0, r2
 800be06:	601a      	str	r2, [r3, #0]
		if(Jobs) {		//ensure start of a new job if there are still jobs left
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	b9e0      	cbnz	r0, 800be46 <I2C1_ER_IRQHandler+0xae>
				while(I2C1->CR1&0x0200);//wait for any stop to finish sending
				I2C_GenerateSTART(I2C1,ENABLE);//sets a start
			}
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, ENABLE);//Ensure EVT and ERR interrupts enabled 
		}
		else if(!(SR1Register & 0x0200) && !(I2C1->CR1&0x0200)) {//if we dont have an ARLO error, ensure sending of a stop
 800be0c:	9801      	ldr	r0, [sp, #4]
 800be0e:	f410 7f00 	tst.w	r0, #512	; 0x200
 800be12:	d1d9      	bne.n	800bdc8 <I2C1_ER_IRQHandler+0x30>
 800be14:	8822      	ldrh	r2, [r4, #0]
 800be16:	f412 7f00 	tst.w	r2, #512	; 0x200
 800be1a:	d1d5      	bne.n	800bdc8 <I2C1_ER_IRQHandler+0x30>
			if(I2C1->CR1&0x0100) {//We are currently trying to send a start, this is very bad as start,stop will hang the peripheral
 800be1c:	8825      	ldrh	r5, [r4, #0]
 800be1e:	f415 7580 	ands.w	r5, r5, #256	; 0x100
 800be22:	d024      	beq.n	800be6e <I2C1_ER_IRQHandler+0xd6>
				while(I2C1->CR1&0x0100);//wait for any start to finish sending
 800be24:	8823      	ldrh	r3, [r4, #0]
 800be26:	f413 7f80 	tst.w	r3, #256	; 0x100
 800be2a:	d1fb      	bne.n	800be24 <I2C1_ER_IRQHandler+0x8c>
				I2C_GenerateSTOP(I2C1,ENABLE);//send stop to finalise bus transaction
 800be2c:	4815      	ldr	r0, [pc, #84]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
 800be2e:	2101      	movs	r1, #1
 800be30:	f001 fed8 	bl	800dbe4 <I2C_GenerateSTOP>
				while(I2C1->CR1&0x0200);//wait for stop to finish sending
 800be34:	4a13      	ldr	r2, [pc, #76]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
 800be36:	f8b2 e000 	ldrh.w	lr, [r2]
 800be3a:	f41e 7f00 	tst.w	lr, #512	; 0x200
 800be3e:	d1fa      	bne.n	800be36 <I2C1_ER_IRQHandler+0x9e>
				I2C_Config();//reset and configure the hardware						
 800be40:	f7ff fee6 	bl	800bc10 <I2C_Config>
 800be44:	e7c0      	b.n	800bdc8 <I2C1_ER_IRQHandler+0x30>
	if(SR1Register & 0x0700) {
		SR2Register = I2C1->SR2;//read second status register to clear ADDR if it is set (note that BTF will not be set after a NACK)
		I2C_ITConfig(I2C1, I2C_IT_BUF, DISABLE);//disable the RXNE/TXE interrupt - prevent the ISR tailchaining onto the ER (hopefully)
		Jobs&=~(0x00000001<<job);//cancel the current job - abandoned
		if(Jobs) {		//ensure start of a new job if there are still jobs left
			if(!(I2C1->CR1&0x0100)) {//if we are not already sending a start
 800be46:	f8b4 c000 	ldrh.w	ip, [r4]
 800be4a:	f41c 7f80 	tst.w	ip, #256	; 0x100
 800be4e:	d107      	bne.n	800be60 <I2C1_ER_IRQHandler+0xc8>
				while(I2C1->CR1&0x0200);//wait for any stop to finish sending
 800be50:	8821      	ldrh	r1, [r4, #0]
 800be52:	f411 7f00 	tst.w	r1, #512	; 0x200
 800be56:	d1fb      	bne.n	800be50 <I2C1_ER_IRQHandler+0xb8>
				I2C_GenerateSTART(I2C1,ENABLE);//sets a start
 800be58:	480a      	ldr	r0, [pc, #40]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
 800be5a:	2101      	movs	r1, #1
 800be5c:	f001 feb5 	bl	800dbca <I2C_GenerateSTART>
			}
			I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, ENABLE);//Ensure EVT and ERR interrupts enabled 
 800be60:	4808      	ldr	r0, [pc, #32]	; (800be84 <I2C1_ER_IRQHandler+0xec>)
 800be62:	f44f 7140 	mov.w	r1, #768	; 0x300
 800be66:	2201      	movs	r2, #1
 800be68:	f001 fefb 	bl	800dc62 <I2C_ITConfig>
 800be6c:	e7ac      	b.n	800bdc8 <I2C1_ER_IRQHandler+0x30>
				I2C_GenerateSTOP(I2C1,ENABLE);//send stop to finalise bus transaction
				while(I2C1->CR1&0x0200);//wait for stop to finish sending
				I2C_Config();//reset and configure the hardware						
			}
			else {
				I2C_GenerateSTOP(I2C1,ENABLE);//stop to free up the bus
 800be6e:	4620      	mov	r0, r4
 800be70:	f001 feb8 	bl	800dbe4 <I2C_GenerateSTOP>
				I2C_ITConfig(I2C1, I2C_IT_EVT|I2C_IT_ERR, DISABLE);//Disable EVT and ERR interrupts while bus inactive
 800be74:	4620      	mov	r0, r4
 800be76:	f44f 7140 	mov.w	r1, #768	; 0x300
 800be7a:	462a      	mov	r2, r5
 800be7c:	f001 fef1 	bl	800dc62 <I2C_ITConfig>
 800be80:	e7a2      	b.n	800bdc8 <I2C1_ER_IRQHandler+0x30>
 800be82:	bf00      	nop
 800be84:	40005400 	.word	0x40005400
 800be88:	20000b0c 	.word	0x20000b0c
 800be8c:	20000b18 	.word	0x20000b18
 800be90:	20000b10 	.word	0x20000b10
 800be94:	00000000 	.word	0x00000000

0800be98 <ISR_Config>:
  * @brief  Configure all interrupts accept on/off pin
  * @param  None
  * @retval None
  * This initialiser function assumes the clocks and gpio have been configured
  */
void ISR_Config(void) {
 800be98:	b530      	push	{r4, r5, lr}
	NVIC_InitTypeDef   NVIC_InitStructure;
	/* Set the Vector Table base location at 0x08000000 */    
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);      
 800be9a:	2100      	movs	r1, #0
  * @brief  Configure all interrupts accept on/off pin
  * @param  None
  * @retval None
  * This initialiser function assumes the clocks and gpio have been configured
  */
void ISR_Config(void) {
 800be9c:	b083      	sub	sp, #12
	NVIC_InitTypeDef   NVIC_InitStructure;
	/* Set the Vector Table base location at 0x08000000 */    
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);      
 800be9e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800bea2:	f001 f8b7 	bl	800d014 <NVIC_SetVectorTable>
	//First we configure the systick ISR
	/* Configure one bit for preemption priority */   
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800bea6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800beaa:	f001 f879 	bl	800cfa0 <NVIC_PriorityGroupConfig>
	/* Enable and set SYSTICK Interrupt to the fifth priority */
	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;	//The 100hz timer triggered interrupt	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800beae:	2401      	movs	r4, #1
	/* Configure one bit for preemption priority */   
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	/* Enable and set SYSTICK Interrupt to the fifth priority */
	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;	//The 100hz timer triggered interrupt	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
 800beb0:	2105      	movs	r1, #5
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);      
	//First we configure the systick ISR
	/* Configure one bit for preemption priority */   
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	/* Enable and set SYSTICK Interrupt to the fifth priority */
	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;	//The 100hz timer triggered interrupt	
 800beb2:	22ff      	movs	r2, #255	; 0xff
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
 800beb4:	2500      	movs	r5, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800beb6:	a801      	add	r0, sp, #4
	/* Configure one bit for preemption priority */   
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	/* Enable and set SYSTICK Interrupt to the fifth priority */
	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;	//The 100hz timer triggered interrupt	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
 800beb8:	f88d 1006 	strb.w	r1, [sp, #6]
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);      
	//First we configure the systick ISR
	/* Configure one bit for preemption priority */   
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	/* Enable and set SYSTICK Interrupt to the fifth priority */
	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;	//The 100hz timer triggered interrupt	
 800bebc:	f88d 2004 	strb.w	r2, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
 800bec0:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bec4:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800bec8:	f001 f874 	bl	800cfb4 <NVIC_Init>
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;	//The 100hz timer triggered interrupt	
 800becc:	2312      	movs	r3, #18
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x06;	//6th subpriority
 800bece:	2206      	movs	r2, #6
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800bed0:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;	//The 100hz timer triggered interrupt	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;	//The 100hz timer triggered interrupt	
 800bed2:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x06;	//6th subpriority
 800bed6:	f88d 2006 	strb.w	r2, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;	//5th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;	//The 100hz timer triggered interrupt	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
 800beda:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x06;	//6th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bede:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800bee2:	f001 f867 	bl	800cfb4 <NVIC_Init>
	//Now we configure the I2C Event ISR
	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;	//The I2C1 triggered interrupt	
	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;	//Second to highest group priority
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800bee6:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x06;	//6th subpriority
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	//Now we configure the I2C Event ISR
	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;	//The I2C1 triggered interrupt	
 800bee8:	211f      	movs	r1, #31
 800beea:	f88d 1004 	strb.w	r1, [sp, #4]
	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;	//Second to highest group priority
 800beee:	f88d 4006 	strb.w	r4, [sp, #6]
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800bef2:	f001 f85f 	bl	800cfb4 <NVIC_Init>
	//Now we configure the I2C Error ISR
	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;	//The I2C1 triggered interrupt	
 800bef6:	2320      	movs	r3, #32
	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;	//Highest group priority
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800bef8:	a801      	add	r0, sp, #4
	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;	//Second to highest group priority
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	//Now we configure the I2C Error ISR
	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;	//The I2C1 triggered interrupt	
 800befa:	f88d 3004 	strb.w	r3, [sp, #4]
	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Low Pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;	//Highest group priority
 800befe:	f88d 5006 	strb.w	r5, [sp, #6]
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800bf02:	f001 f857 	bl	800cfb4 <NVIC_Init>
}
 800bf06:	b003      	add	sp, #12
 800bf08:	bd30      	pop	{r4, r5, pc}
 800bf0a:	bf00      	nop

0800bf0c <EXTI_ONOFF_EN>:
  * @brief  Configure on/off pin interrupt
  * @param  None
  * @retval None
  * This initialiser function assumes the clocks and gpio have been configured
  */
void EXTI_ONOFF_EN(void) {
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	b084      	sub	sp, #16
	EXTI_InitTypeDef   EXTI_InitStructure;
	NVIC_InitTypeDef   NVIC_InitStructure;
	EXTI_DeInit();
 800bf10:	f001 fbe4 	bl	800d6dc <EXTI_DeInit>
	/* Connect EXTI0 Line to PA.0 pin - WKUP*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 800bf14:	2000      	movs	r0, #0
 800bf16:	4601      	mov	r1, r0
 800bf18:	f001 fd80 	bl	800da1c <GPIO_EXTILineConfig>

	/* Configure EXTI0 line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	if(USB_SOURCE==bootsource)				//If we booted from USB, disconnect gives -ive pulse
 800bf1c:	4912      	ldr	r1, [pc, #72]	; (800bf68 <EXTI_ONOFF_EN+0x5c>)
	EXTI_DeInit();
	/* Connect EXTI0 Line to PA.0 pin - WKUP*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);

	/* Configure EXTI0 line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800bf1e:	2001      	movs	r0, #1
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	if(USB_SOURCE==bootsource)				//If we booted from USB, disconnect gives -ive pulse
 800bf20:	780b      	ldrb	r3, [r1, #0]
	/* Connect EXTI0 Line to PA.0 pin - WKUP*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);

	/* Configure EXTI0 line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800bf22:	2200      	movs	r2, #0
	if(USB_SOURCE==bootsource)				//If we booted from USB, disconnect gives -ive pulse
 800bf24:	2b01      	cmp	r3, #1
	EXTI_DeInit();
	/* Connect EXTI0 Line to PA.0 pin - WKUP*/
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);

	/* Configure EXTI0 line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800bf26:	9001      	str	r0, [sp, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800bf28:	f88d 2008 	strb.w	r2, [sp, #8]
	if(USB_SOURCE==bootsource)				//If we booted from USB, disconnect gives -ive pulse
 800bf2c:	d017      	beq.n	800bf5e <EXTI_ONOFF_EN+0x52>
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
	else
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800bf2e:	2308      	movs	r3, #8
 800bf30:	f88d 3009 	strb.w	r3, [sp, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800bf34:	2401      	movs	r4, #1
	EXTI_Init(&EXTI_InitStructure);
 800bf36:	a801      	add	r0, sp, #4
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	if(USB_SOURCE==bootsource)				//If we booted from USB, disconnect gives -ive pulse
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
	else
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800bf38:	f88d 400a 	strb.w	r4, [sp, #10]
	EXTI_Init(&EXTI_InitStructure);
 800bf3c:	f001 fbdc 	bl	800d6f8 <EXTI_Init>

	/* Enable and set EXTI0 Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;	//The WKUP triggered interrupt	
 800bf40:	2106      	movs	r1, #6
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Lower pre-emption priority
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x07;	//low group priority
 800bf42:	2207      	movs	r2, #7
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800bf44:	a803      	add	r0, sp, #12
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	/* Enable and set EXTI0 Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;	//The WKUP triggered interrupt	
 800bf46:	f88d 100c 	strb.w	r1, [sp, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//Lower pre-emption priority
 800bf4a:	f88d 400d 	strb.w	r4, [sp, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x07;	//low group priority
 800bf4e:	f88d 200e 	strb.w	r2, [sp, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bf52:	f88d 400f 	strb.w	r4, [sp, #15]
	NVIC_Init(&NVIC_InitStructure);
 800bf56:	f001 f82d 	bl	800cfb4 <NVIC_Init>
}
 800bf5a:	b004      	add	sp, #16
 800bf5c:	bd10      	pop	{r4, pc}

	/* Configure EXTI0 line */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	if(USB_SOURCE==bootsource)				//If we booted from USB, disconnect gives -ive pulse
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800bf5e:	240c      	movs	r4, #12
 800bf60:	f88d 4009 	strb.w	r4, [sp, #9]
 800bf64:	e7e6      	b.n	800bf34 <EXTI_ONOFF_EN+0x28>
 800bf66:	bf00      	nop
 800bf68:	20000b08 	.word	0x20000b08

0800bf6c <DMA_ISR_Config>:
  * @brief  Configure the DMA interrupt from ADC1 - do this before configuring the ADC+DMA?
  * @param  None
  * @retval None
  * This initialiser function assumes the clocks and gpio have been configured
  */
void DMA_ISR_Config(void) {
 800bf6c:	b500      	push	{lr}
	NVIC_InitTypeDef   NVIC_InitStructure;
	/* Enable and set DMA1 Interrupt to the sixth priority */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;//The DMA complete/half complete triggered interrupt	
 800bf6e:	230b      	movs	r3, #11
  * @brief  Configure the DMA interrupt from ADC1 - do this before configuring the ADC+DMA?
  * @param  None
  * @retval None
  * This initialiser function assumes the clocks and gpio have been configured
  */
void DMA_ISR_Config(void) {
 800bf70:	b083      	sub	sp, #12
	NVIC_InitTypeDef   NVIC_InitStructure;
	/* Enable and set DMA1 Interrupt to the sixth priority */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;//The DMA complete/half complete triggered interrupt	
 800bf72:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Higher pre-emption priority - can nest inside USB/SD
 800bf76:	2200      	movs	r2, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x06;	//6th subpriority
 800bf78:	2106      	movs	r1, #6
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bf7a:	2301      	movs	r3, #1
	NVIC_Init(&NVIC_InitStructure);
 800bf7c:	a801      	add	r0, sp, #4
  */
void DMA_ISR_Config(void) {
	NVIC_InitTypeDef   NVIC_InitStructure;
	/* Enable and set DMA1 Interrupt to the sixth priority */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;//The DMA complete/half complete triggered interrupt	
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;//Higher pre-emption priority - can nest inside USB/SD
 800bf7e:	f88d 2005 	strb.w	r2, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x06;	//6th subpriority
 800bf82:	f88d 1006 	strb.w	r1, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bf86:	f88d 3007 	strb.w	r3, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800bf8a:	f001 f813 	bl	800cfb4 <NVIC_Init>
}
 800bf8e:	b003      	add	sp, #12
 800bf90:	bd00      	pop	{pc}
 800bf92:	bf00      	nop

0800bf94 <SysTick_Configuration>:
  * @brief  This function configures the systick timer to 100hz overflow
  * @param  None
  * @retval None
  */
void SysTick_Configuration(void) {
	RCC_HCLKConfig(RCC_SYSCLK_Div1);			//CLK the periferal - configure the AHB clk
 800bf94:	2000      	movs	r0, #0
/**
  * @brief  This function configures the systick timer to 100hz overflow
  * @param  None
  * @retval None
  */
void SysTick_Configuration(void) {
 800bf96:	b510      	push	{r4, lr}
	RCC_HCLKConfig(RCC_SYSCLK_Div1);			//CLK the periferal - configure the AHB clk
 800bf98:	f002 f83c 	bl	800e014 <RCC_HCLKConfig>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
 800bf9c:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <SysTick_Configuration+0x2c>)
 800bf9e:	4909      	ldr	r1, [pc, #36]	; (800bfc4 <SysTick_Configuration+0x30>)
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 800bfa0:	4a09      	ldr	r2, [pc, #36]	; (800bfc8 <SysTick_Configuration+0x34>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
 800bfa2:	6059      	str	r1, [r3, #4]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 800bfa4:	21f0      	movs	r1, #240	; 0xf0
 800bfa6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	SysTick_Config(90000);					//SYSTICK at 100Hz - this function also enables the interrupt
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);   //SYSTICK AHB1/8
 800bfaa:	f06f 0004 	mvn.w	r0, #4
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
 800bfae:	2100      	movs	r1, #0
  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
 800bfb0:	2207      	movs	r2, #7
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
 800bfb2:	6099      	str	r1, [r3, #8]
  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
 800bfb4:	601a      	str	r2, [r3, #0]
}
 800bfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void SysTick_Configuration(void) {
	RCC_HCLKConfig(RCC_SYSCLK_Div1);			//CLK the periferal - configure the AHB clk
	SysTick_Config(90000);					//SYSTICK at 100Hz - this function also enables the interrupt
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);   //SYSTICK AHB1/8
 800bfba:	f001 b841 	b.w	800d040 <SysTick_CLKSourceConfig>
 800bfbe:	bf00      	nop
 800bfc0:	e000e010 	.word	0xe000e010
 800bfc4:	00015f8f 	.word	0x00015f8f
 800bfc8:	e000ed00 	.word	0xe000ed00

0800bfcc <EXTI0_IRQHandler>:
/**
  * @brief  This function handles External line 0 interrupt request.- WKUP ISR
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void) {
 800bfcc:	b510      	push	{r4, lr}
	if(EXTI_GetITStatus(EXTI_Line0) != RESET) {
 800bfce:	2001      	movs	r0, #1
 800bfd0:	f001 fbf4 	bl	800d7bc <EXTI_GetITStatus>
 800bfd4:	b900      	cbnz	r0, 800bfd8 <EXTI0_IRQHandler+0xc>
 800bfd6:	bd10      	pop	{r4, pc}
		/* Clear the  EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 800bfd8:	2001      	movs	r0, #1
 800bfda:	f001 fbfd 	bl	800d7d8 <EXTI_ClearITPendingBit>
		/*Called Code goes here*/
		Button_hold_tim=BUTTON_TURNOFF_TIME;
 800bfde:	4b18      	ldr	r3, [pc, #96]	; (800c040 <EXTI0_IRQHandler+0x74>)
 800bfe0:	2450      	movs	r4, #80	; 0x50
		RED_LED_ON;					//Red LED is used to indicate successful button press to the user
 800bfe2:	4818      	ldr	r0, [pc, #96]	; (800c044 <EXTI0_IRQHandler+0x78>)
 800bfe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bfe8:	2201      	movs	r2, #1
void EXTI0_IRQHandler(void) {
	if(EXTI_GetITStatus(EXTI_Line0) != RESET) {
		/* Clear the  EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
		/*Called Code goes here*/
		Button_hold_tim=BUTTON_TURNOFF_TIME;
 800bfea:	701c      	strb	r4, [r3, #0]
		RED_LED_ON;					//Red LED is used to indicate successful button press to the user
 800bfec:	f001 fcc5 	bl	800d97a <GPIO_WriteBit>
		if(GET_CHRG_STATE) {				//Interrupt due to USB insertion - reset to usb mode
 800bff0:	4814      	ldr	r0, [pc, #80]	; (800c044 <EXTI0_IRQHandler+0x78>)
 800bff2:	2104      	movs	r1, #4
 800bff4:	f001 fcab 	bl	800d94e <GPIO_ReadInputDataBit>
 800bff8:	b168      	cbz	r0, 800c016 <EXTI0_IRQHandler+0x4a>
			if(file_opened)
 800bffa:	4913      	ldr	r1, [pc, #76]	; (800c048 <EXTI0_IRQHandler+0x7c>)
 800bffc:	7808      	ldrb	r0, [r1, #0]
 800bffe:	b9d8      	cbnz	r0, 800c038 <EXTI0_IRQHandler+0x6c>
 *
 * Initialize a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = (NVIC_AIRCR_VECTKEY | (SCB->AIRCR & (0x700)) | (1<<NVIC_SYSRESETREQ)); /* Keep priority group unchanged */
 800c000:	4a12      	ldr	r2, [pc, #72]	; (800c04c <EXTI0_IRQHandler+0x80>)
 800c002:	4b13      	ldr	r3, [pc, #76]	; (800c050 <EXTI0_IRQHandler+0x84>)
 800c004:	68d0      	ldr	r0, [r2, #12]
 800c006:	f400 6ce0 	and.w	ip, r0, #1792	; 0x700
 800c00a:	ea4c 0403 	orr.w	r4, ip, r3
 800c00e:	60d4      	str	r4, [r2, #12]
static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	e7fe      	b.n	800c014 <EXTI0_IRQHandler+0x48>
				shutdown_filesystem();
			NVIC_SystemReset();			//Software reset of the system - USB inserted whilst running
		}
		if(USB_SOURCE==bootsource) {
 800c016:	490f      	ldr	r1, [pc, #60]	; (800c054 <EXTI0_IRQHandler+0x88>)
 800c018:	f891 e000 	ldrb.w	lr, [r1]
 800c01c:	f1be 0f01 	cmp.w	lr, #1
 800c020:	d1d9      	bne.n	800bfd6 <EXTI0_IRQHandler+0xa>
			if(file_opened) 
 800c022:	4b09      	ldr	r3, [pc, #36]	; (800c048 <EXTI0_IRQHandler+0x7c>)
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	b10a      	cbz	r2, 800c02c <EXTI0_IRQHandler+0x60>
				shutdown_filesystem();
 800c028:	f000 fdfc 	bl	800cc24 <shutdown_filesystem>
			red_flash();				//Flash red led - provides some debouncing on jack removal
 800c02c:	f7ff fade 	bl	800b5ec <red_flash>
			shutdown();				//Shuts down - only wakes up on power pin i.e. WKUP
		}
	}
}
 800c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		}
		if(USB_SOURCE==bootsource) {
			if(file_opened) 
				shutdown_filesystem();
			red_flash();				//Flash red led - provides some debouncing on jack removal
			shutdown();				//Shuts down - only wakes up on power pin i.e. WKUP
 800c034:	f000 bdea 	b.w	800cc0c <shutdown>
		/*Called Code goes here*/
		Button_hold_tim=BUTTON_TURNOFF_TIME;
		RED_LED_ON;					//Red LED is used to indicate successful button press to the user
		if(GET_CHRG_STATE) {				//Interrupt due to USB insertion - reset to usb mode
			if(file_opened)
				shutdown_filesystem();
 800c038:	f000 fdf4 	bl	800cc24 <shutdown_filesystem>
 800c03c:	e7e0      	b.n	800c000 <EXTI0_IRQHandler+0x34>
 800c03e:	bf00      	nop
 800c040:	20000b19 	.word	0x20000b19
 800c044:	40010c00 	.word	0x40010c00
 800c048:	20000a0c 	.word	0x20000a0c
 800c04c:	e000ed00 	.word	0xe000ed00
 800c050:	05fa0004 	.word	0x05fa0004
 800c054:	20000b08 	.word	0x20000b08

0800c058 <DMAChannel1_IRQHandler>:
/**
  * @brief  This function handles DMA channel interrupt request.- PPG adc data ISR
  * @param  None
  * @retval None
  */
void DMAChannel1_IRQHandler(void) {
 800c058:	b510      	push	{r4, lr}
	if ( DMA_GetITStatus(DMA1_IT_HT1) )			//Half transfer completed
 800c05a:	2004      	movs	r0, #4
 800c05c:	f001 fb22 	bl	800d6a4 <DMA_GetITStatus>
 800c060:	b948      	cbnz	r0, 800c076 <DMAChannel1_IRQHandler+0x1e>
		PPG_LO_Filter(ADC1_Convertion_buff);		//Process lower half
	else
		PPG_LO_Filter(&ADC1_Convertion_buff[ADC_BUFF_SIZE/4]);//Transfer complete, process upper half - indexed as 16bit words
 800c062:	4807      	ldr	r0, [pc, #28]	; (800c080 <DMAChannel1_IRQHandler+0x28>)
 800c064:	6800      	ldr	r0, [r0, #0]
 800c066:	3080      	adds	r0, #128	; 0x80
 800c068:	f7f4 f85a 	bl	8000120 <PPG_LO_Filter>
	DMA_ClearFlag(DMA1_FLAG_TC1|DMA1_FLAG_HT1);  		//make sure flags are clear
 800c06c:	2006      	movs	r0, #6
}
 800c06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void DMAChannel1_IRQHandler(void) {
	if ( DMA_GetITStatus(DMA1_IT_HT1) )			//Half transfer completed
		PPG_LO_Filter(ADC1_Convertion_buff);		//Process lower half
	else
		PPG_LO_Filter(&ADC1_Convertion_buff[ADC_BUFF_SIZE/4]);//Transfer complete, process upper half - indexed as 16bit words
	DMA_ClearFlag(DMA1_FLAG_TC1|DMA1_FLAG_HT1);  		//make sure flags are clear
 800c072:	f001 bb0b 	b.w	800d68c <DMA_ClearFlag>
  * @param  None
  * @retval None
  */
void DMAChannel1_IRQHandler(void) {
	if ( DMA_GetITStatus(DMA1_IT_HT1) )			//Half transfer completed
		PPG_LO_Filter(ADC1_Convertion_buff);		//Process lower half
 800c076:	4b02      	ldr	r3, [pc, #8]	; (800c080 <DMAChannel1_IRQHandler+0x28>)
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f7f4 f851 	bl	8000120 <PPG_LO_Filter>
 800c07e:	e7f5      	b.n	800c06c <DMAChannel1_IRQHandler+0x14>
 800c080:	20000b04 	.word	0x20000b04

0800c084 <ADC1_2_IRQHandler>:
/**
  * @brief  This function handles ADC1-2 interrupt requests.- Should only be from the analogu watchdog
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void) {
 800c084:	b510      	push	{r4, lr}
	if(ADC_GetITStatus(ADC2, ADC_IT_AWD)) {			//Analogue watchdog was triggered
 800c086:	481f      	ldr	r0, [pc, #124]	; (800c104 <ADC1_2_IRQHandler+0x80>)
/**
  * @brief  This function handles ADC1-2 interrupt requests.- Should only be from the analogu watchdog
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void) {
 800c088:	b086      	sub	sp, #24
	if(ADC_GetITStatus(ADC2, ADC_IT_AWD)) {			//Analogue watchdog was triggered
 800c08a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c08e:	f001 f994 	bl	800d3ba <ADC_GetITStatus>
 800c092:	b130      	cbz	r0, 800c0a2 <ADC1_2_IRQHandler+0x1e>
		if(file_opened) {
 800c094:	481c      	ldr	r0, [pc, #112]	; (800c108 <ADC1_2_IRQHandler+0x84>)
 800c096:	7803      	ldrb	r3, [r0, #0]
 800c098:	b9f3      	cbnz	r3, 800c0d8 <ADC1_2_IRQHandler+0x54>
			f_write(&FATFS_logfile,c,sizeof(c),&a);	//Write the error to the file
			f_sync(&FATFS_logfile);			//Flush buffers
			f_truncate(&FATFS_logfile);		//Truncate the lenght - fix pre allocation
			f_close(&FATFS_logfile);		//Close any opened file
		}
		red_flash();					//Flash red led
 800c09a:	f7ff faa7 	bl	800b5ec <red_flash>
		shutdown();					//Shutdown to save battery
 800c09e:	f000 fdb5 	bl	800cc0c <shutdown>
	}
	ADC_ClearITPendingBit(ADC2, ADC_IT_EOC);
 800c0a2:	4818      	ldr	r0, [pc, #96]	; (800c104 <ADC1_2_IRQHandler+0x80>)
 800c0a4:	f44f 7108 	mov.w	r1, #544	; 0x220
 800c0a8:	f001 f992 	bl	800d3d0 <ADC_ClearITPendingBit>
	ADC_ClearITPendingBit(ADC2, ADC_IT_JEOC);
 800c0ac:	4815      	ldr	r0, [pc, #84]	; (800c104 <ADC1_2_IRQHandler+0x80>)
 800c0ae:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800c0b2:	f001 f98d 	bl	800d3d0 <ADC_ClearITPendingBit>
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 800c0b6:	4815      	ldr	r0, [pc, #84]	; (800c10c <ADC1_2_IRQHandler+0x88>)
 800c0b8:	f44f 7108 	mov.w	r1, #544	; 0x220
 800c0bc:	f001 f988 	bl	800d3d0 <ADC_ClearITPendingBit>
	ADC_ClearITPendingBit(ADC1, ADC_IT_JEOC);		//None of these should ever happen, but best to be safe
 800c0c0:	4812      	ldr	r0, [pc, #72]	; (800c10c <ADC1_2_IRQHandler+0x88>)
 800c0c2:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800c0c6:	f001 f983 	bl	800d3d0 <ADC_ClearITPendingBit>
	ADC_ClearITPendingBit(ADC1, ADC_IT_AWD);		//make sure flags are clear
 800c0ca:	4810      	ldr	r0, [pc, #64]	; (800c10c <ADC1_2_IRQHandler+0x88>)
 800c0cc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0d0:	f001 f97e 	bl	800d3d0 <ADC_ClearITPendingBit>
}
 800c0d4:	b006      	add	sp, #24
 800c0d6:	bd10      	pop	{r4, pc}
  * @retval None
  */
void ADC1_2_IRQHandler(void) {
	if(ADC_GetITStatus(ADC2, ADC_IT_AWD)) {			//Analogue watchdog was triggered
		if(file_opened) {
			char c[]="\r\nLow Battery\r\n";
 800c0d8:	490d      	ldr	r1, [pc, #52]	; (800c110 <ADC1_2_IRQHandler+0x8c>)
 800c0da:	ac01      	add	r4, sp, #4
 800c0dc:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800c0de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			uint8_t a;
			f_write(&FATFS_logfile,c,sizeof(c),&a);	//Write the error to the file
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	2210      	movs	r2, #16
 800c0e6:	f10d 0317 	add.w	r3, sp, #23
 800c0ea:	480a      	ldr	r0, [pc, #40]	; (800c114 <ADC1_2_IRQHandler+0x90>)
 800c0ec:	f7fa f8c0 	bl	8006270 <f_write>
			f_sync(&FATFS_logfile);			//Flush buffers
 800c0f0:	4808      	ldr	r0, [pc, #32]	; (800c114 <ADC1_2_IRQHandler+0x90>)
 800c0f2:	f7fa fad7 	bl	80066a4 <f_sync>
			f_truncate(&FATFS_logfile);		//Truncate the lenght - fix pre allocation
 800c0f6:	4807      	ldr	r0, [pc, #28]	; (800c114 <ADC1_2_IRQHandler+0x90>)
 800c0f8:	f7fa fe74 	bl	8006de4 <f_truncate>
			f_close(&FATFS_logfile);		//Close any opened file
 800c0fc:	4805      	ldr	r0, [pc, #20]	; (800c114 <ADC1_2_IRQHandler+0x90>)
 800c0fe:	f7fa fbbd 	bl	800687c <f_close>
 800c102:	e7ca      	b.n	800c09a <ADC1_2_IRQHandler+0x16>
 800c104:	40012800 	.word	0x40012800
 800c108:	20000a0c 	.word	0x20000a0c
 800c10c:	40012400 	.word	0x40012400
 800c110:	0801b350 	.word	0x0801b350
 800c114:	20000c90 	.word	0x20000c90

0800c118 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint8_t System_state_counter;			//Holds the system state counter
	static uint8_t tmpindex;				//Temp sensor decimator
	//FatFS timer function
	disk_timerproc();
	//Incr the system uptime
	Millis+=10;
 800c11c:	4d88      	ldr	r5, [pc, #544]	; (800c340 <SysTickHandler+0x228>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 800c11e:	b083      	sub	sp, #12
	static uint16_t Enabled_iterations;			//Note, this is going to break if we spend long periods with +ive pressure set
	static uint32_t Last_Button_Press;			//Holds the timestamp for the previous button press
	static uint8_t System_state_counter;			//Holds the system state counter
	static uint8_t tmpindex;				//Temp sensor decimator
	//FatFS timer function
	disk_timerproc();
 800c120:	f7fd fc10 	bl	8009944 <disk_timerproc>
	//Incr the system uptime
	Millis+=10;
 800c124:	682b      	ldr	r3, [r5, #0]
	if(ADC_GetFlagStatus(ADC2, ADC_FLAG_JEOC)) {		//We have adc2 converted data from the injected channels
 800c126:	4887      	ldr	r0, [pc, #540]	; (800c344 <SysTickHandler+0x22c>)
	static uint8_t System_state_counter;			//Holds the system state counter
	static uint8_t tmpindex;				//Temp sensor decimator
	//FatFS timer function
	disk_timerproc();
	//Incr the system uptime
	Millis+=10;
 800c128:	330a      	adds	r3, #10
	if(ADC_GetFlagStatus(ADC2, ADC_FLAG_JEOC)) {		//We have adc2 converted data from the injected channels
 800c12a:	2104      	movs	r1, #4
	static uint8_t System_state_counter;			//Holds the system state counter
	static uint8_t tmpindex;				//Temp sensor decimator
	//FatFS timer function
	disk_timerproc();
	//Incr the system uptime
	Millis+=10;
 800c12c:	602b      	str	r3, [r5, #0]
	if(ADC_GetFlagStatus(ADC2, ADC_FLAG_JEOC)) {		//We have adc2 converted data from the injected channels
 800c12e:	f001 f93b 	bl	800d3a8 <ADC_GetFlagStatus>
 800c132:	2800      	cmp	r0, #0
 800c134:	d151      	bne.n	800c1da <SysTickHandler+0xc2>
 800c136:	4e84      	ldr	r6, [pc, #528]	; (800c348 <SysTickHandler+0x230>)
 800c138:	4c84      	ldr	r4, [pc, #528]	; (800c34c <SysTickHandler+0x234>)
		//Check the die temperature - not possible on adc1 :-(
		//Device_Temperature=convert_die_temp(ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_3));//The on die temperature sensor
		//Could process some more sensor data here
		old_pressure=reported_pressure;			//Set the old pressure record here for use in the D term
	}
	ADC_SoftwareStartInjectedConvCmd(ADC2, ENABLE);		//Trigger the injected channel group
 800c13a:	2101      	movs	r1, #1
 800c13c:	4881      	ldr	r0, [pc, #516]	; (800c344 <SysTickHandler+0x22c>)
 800c13e:	f001 f8b6 	bl	800d2ae <ADC_SoftwareStartInjectedConvCmd>
	//Read any I2C bus sensors here (100Hz)
	if(Sensors&(1<<TEMPERATURE_SENSOR)) {
 800c142:	7836      	ldrb	r6, [r6, #0]
 800c144:	f016 0f02 	tst.w	r6, #2
 800c148:	d130      	bne.n	800c1ac <SysTickHandler+0x94>
			tmpindex=3;
			I2C1_Request_Job(TMP102_READ);		//Request a TMP102 read if there is one present
		}
	}
	//Now process the control button functions
	if(Button_hold_tim ) {					//If a button press generated timer has been triggered
 800c14a:	4e81      	ldr	r6, [pc, #516]	; (800c350 <SysTickHandler+0x238>)
 800c14c:	7830      	ldrb	r0, [r6, #0]
 800c14e:	b9c8      	cbnz	r0, 800c184 <SysTickHandler+0x6c>
		if(GPIO_ReadInputDataBit(GPIOA,WKUP)) {		//Button hold turns off the device
			if(!--Button_hold_tim) {
				shutdown_filesystem();
				shutdown();			//Turn off the logger after closing any open files
 800c150:	6923      	ldr	r3, [r4, #16]
					System_state_counter=0;//The system can only have a limited number of states
			}
			Button_hold_tim=0;			//Reset the timer here
		}
	}
	if(Last_Button_Press&&(Millis-Last_Button_Press>BUTTON_MULTIPRESS_TIMEOUT)&&!Button_hold_tim) {//Last press timed out and button is not pressed
 800c152:	b1a3      	cbz	r3, 800c17e <SysTickHandler+0x66>
 800c154:	682a      	ldr	r2, [r5, #0]
 800c156:	ebc3 0e02 	rsb	lr, r3, r2
 800c15a:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800c15e:	d90e      	bls.n	800c17e <SysTickHandler+0x66>
 800c160:	7833      	ldrb	r3, [r6, #0]
 800c162:	b963      	cbnz	r3, 800c17e <SysTickHandler+0x66>
		if(!(System_state_Global&0x80))			//The main code has unlocked the global using the bit flag - as it has processed
 800c164:	4b7b      	ldr	r3, [pc, #492]	; (800c354 <SysTickHandler+0x23c>)
 800c166:	f893 c000 	ldrb.w	ip, [r3]
 800c16a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c16e:	d103      	bne.n	800c178 <SysTickHandler+0x60>
			System_state_Global=0x80|System_state_counter;//The previous state update
 800c170:	7d21      	ldrb	r1, [r4, #20]
 800c172:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800c176:	7018      	strb	r0, [r3, #0]
		System_state_counter=0;				//Reset state counter here
 800c178:	2200      	movs	r2, #0
 800c17a:	7522      	strb	r2, [r4, #20]
		Last_Button_Press=0;				//Reset the last button press timestamp, as the is no button press in play
 800c17c:	6122      	str	r2, [r4, #16]
	}
}
 800c17e:	b003      	add	sp, #12
 800c180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			I2C1_Request_Job(TMP102_READ);		//Request a TMP102 read if there is one present
		}
	}
	//Now process the control button functions
	if(Button_hold_tim ) {					//If a button press generated timer has been triggered
		if(GPIO_ReadInputDataBit(GPIOA,WKUP)) {		//Button hold turns off the device
 800c184:	4874      	ldr	r0, [pc, #464]	; (800c358 <SysTickHandler+0x240>)
 800c186:	2101      	movs	r1, #1
 800c188:	f001 fbe1 	bl	800d94e <GPIO_ReadInputDataBit>
 800c18c:	4607      	mov	r7, r0
 800c18e:	2800      	cmp	r0, #0
 800c190:	f000 8081 	beq.w	800c296 <SysTickHandler+0x17e>
			if(!--Button_hold_tim) {
 800c194:	7832      	ldrb	r2, [r6, #0]
 800c196:	1e51      	subs	r1, r2, #1
 800c198:	7031      	strb	r1, [r6, #0]
 800c19a:	7833      	ldrb	r3, [r6, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1d7      	bne.n	800c150 <SysTickHandler+0x38>
				shutdown_filesystem();
 800c1a0:	f000 fd40 	bl	800cc24 <shutdown_filesystem>
				shutdown();			//Turn off the logger after closing any open files
 800c1a4:	f000 fd32 	bl	800cc0c <shutdown>
 800c1a8:	6923      	ldr	r3, [r4, #16]
 800c1aa:	e7d2      	b.n	800c152 <SysTickHandler+0x3a>
		old_pressure=reported_pressure;			//Set the old pressure record here for use in the D term
	}
	ADC_SoftwareStartInjectedConvCmd(ADC2, ENABLE);		//Trigger the injected channel group
	//Read any I2C bus sensors here (100Hz)
	if(Sensors&(1<<TEMPERATURE_SENSOR)) {
		float tmp=GET_TMP_TEMPERATURE;
 800c1ac:	496b      	ldr	r1, [pc, #428]	; (800c35c <SysTickHandler+0x244>)
 800c1ae:	f8b1 e000 	ldrh.w	lr, [r1]
 800c1b2:	fa1f f08e 	uxth.w	r0, lr
 800c1b6:	f7f4 fb69 	bl	800088c <convert_tmp102_temp>
 800c1ba:	9001      	str	r0, [sp, #4]
		Add_To_Buffer(*(uint32_t*)(&tmp),&Temperatures_Buffer);//Add data to the ring buffer
 800c1bc:	9801      	ldr	r0, [sp, #4]
 800c1be:	4968      	ldr	r1, [pc, #416]	; (800c360 <SysTickHandler+0x248>)
 800c1c0:	f7f5 fe02 	bl	8001dc8 <Add_To_Buffer>
		if(!tmpindex--) {				//Every 30ms
 800c1c4:	7b20      	ldrb	r0, [r4, #12]
 800c1c6:	1e43      	subs	r3, r0, #1
 800c1c8:	7323      	strb	r3, [r4, #12]
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d1bd      	bne.n	800c14a <SysTickHandler+0x32>
			tmpindex=3;
 800c1ce:	4e5f      	ldr	r6, [pc, #380]	; (800c34c <SysTickHandler+0x234>)
 800c1d0:	2203      	movs	r2, #3
 800c1d2:	7332      	strb	r2, [r6, #12]
			I2C1_Request_Job(TMP102_READ);		//Request a TMP102 read if there is one present
 800c1d4:	f7ff fce8 	bl	800bba8 <I2C1_Request_Job>
 800c1d8:	e7b7      	b.n	800c14a <SysTickHandler+0x32>
	//FatFS timer function
	disk_timerproc();
	//Incr the system uptime
	Millis+=10;
	if(ADC_GetFlagStatus(ADC2, ADC_FLAG_JEOC)) {		//We have adc2 converted data from the injected channels
		ADC_ClearFlag(ADC2, ADC_FLAG_JEOC);		//Clear the flag
 800c1da:	485a      	ldr	r0, [pc, #360]	; (800c344 <SysTickHandler+0x22c>)
 800c1dc:	2104      	movs	r1, #4
 800c1de:	f001 f8e9 	bl	800d3b4 <ADC_ClearFlag>
		if(pressure_offset) {				//Only run the filter when we are sure the sensor is calibrated
 800c1e2:	4860      	ldr	r0, [pc, #384]	; (800c364 <SysTickHandler+0x24c>)
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	6800      	ldr	r0, [r0, #0]
 800c1e8:	f006 ff50 	bl	801308c <__aeabi_fcmpeq>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d06a      	beq.n	800c2c6 <SysTickHandler+0x1ae>
 800c1f0:	4f5d      	ldr	r7, [pc, #372]	; (800c368 <SysTickHandler+0x250>)
 800c1f2:	4e55      	ldr	r6, [pc, #340]	; (800c348 <SysTickHandler+0x230>)
			reported_pressure=filterloop(conv_diff(ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1)));//convert injected channel 1
			if(Sensors&(1<<PRESSURE_HOSE))		//Only pass data once hose is connected
				Add_To_Buffer(reported_pressure,&Pressures_Buffer);//Pass the pressure data via a buffer to avoid issues with lag
		}
		//Now handle the pressure controller
		if(Pressure_control&0x7F) {//If active pressure control is enabled
 800c1f4:	4b5d      	ldr	r3, [pc, #372]	; (800c36c <SysTickHandler+0x254>)
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 800c1fc:	d041      	beq.n	800c282 <SysTickHandler+0x16a>
			//run a PI controller on the air pump motor
			if(pressure_setpoint>0) {		//A negative setpoint forces a dump of air
 800c1fe:	4c5c      	ldr	r4, [pc, #368]	; (800c370 <SysTickHandler+0x258>)
 800c200:	2100      	movs	r1, #0
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	f006 ff6a 	bl	80130dc <__aeabi_fcmpgt>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d072      	beq.n	800c2f2 <SysTickHandler+0x1da>
				float error=pressure_setpoint-reported_pressure;//pressure_setpoint is a global containing the target diff press
 800c20c:	6820      	ldr	r0, [r4, #0]
				if(Enabled_iterations++>I_HOLDOFF) {
 800c20e:	4c4f      	ldr	r4, [pc, #316]	; (800c34c <SysTickHandler+0x234>)
		}
		//Now handle the pressure controller
		if(Pressure_control&0x7F) {//If active pressure control is enabled
			//run a PI controller on the air pump motor
			if(pressure_setpoint>0) {		//A negative setpoint forces a dump of air
				float error=pressure_setpoint-reported_pressure;//pressure_setpoint is a global containing the target diff press
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	f006 fc9d 	bl	8012b50 <__aeabi_fsub>
				if(Enabled_iterations++>I_HOLDOFF) {
 800c216:	8823      	ldrh	r3, [r4, #0]
 800c218:	1c59      	adds	r1, r3, #1
 800c21a:	2b32      	cmp	r3, #50	; 0x32
 800c21c:	8021      	strh	r1, [r4, #0]
 800c21e:	f240 80b1 	bls.w	800c384 <SysTickHandler+0x26c>
					I+=error*PRESSURE_I_CONST;//Constants defined in main.h
 800c222:	f006 f90b 	bl	801243c <__aeabi_f2d>
 800c226:	4680      	mov	r8, r0
 800c228:	6860      	ldr	r0, [r4, #4]
 800c22a:	4689      	mov	r9, r1
 800c22c:	f006 f906 	bl	801243c <__aeabi_f2d>
 800c230:	a33b      	add	r3, pc, #236	; (adr r3, 800c320 <SysTickHandler+0x208>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	4682      	mov	sl, r0
 800c238:	468b      	mov	fp, r1
 800c23a:	4640      	mov	r0, r8
 800c23c:	4649      	mov	r1, r9
 800c23e:	f006 f951 	bl	80124e4 <__aeabi_dmul>
 800c242:	2200      	movs	r2, #0
 800c244:	4b4b      	ldr	r3, [pc, #300]	; (800c374 <SysTickHandler+0x25c>)
 800c246:	f006 f94d 	bl	80124e4 <__aeabi_dmul>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4650      	mov	r0, sl
 800c250:	4659      	mov	r1, fp
 800c252:	f005 ff95 	bl	8012180 <__adddf3>
 800c256:	f006 fc27 	bl	8012aa8 <__aeabi_d2f>
 800c25a:	6060      	str	r0, [r4, #4]
					if(I>PRESSURE_I_LIM)	//Enforce limits
 800c25c:	f006 f8ee 	bl	801243c <__aeabi_f2d>
 800c260:	a331      	add	r3, pc, #196	; (adr r3, 800c328 <SysTickHandler+0x210>)
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	4682      	mov	sl, r0
 800c268:	468b      	mov	fp, r1
 800c26a:	f006 fbcb 	bl	8012a04 <__aeabi_dcmpgt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	f000 80c1 	beq.w	800c3f6 <SysTickHandler+0x2de>
						I=PRESSURE_I_LIM;
 800c274:	4840      	ldr	r0, [pc, #256]	; (800c378 <SysTickHandler+0x260>)
 800c276:	f20f 0bb8 	addw	fp, pc, #184	; 0xb8
 800c27a:	e9db ab00 	ldrd	sl, fp, [fp]
 800c27e:	6060      	str	r0, [r4, #4]
 800c280:	e089      	b.n	800c396 <SysTickHandler+0x27e>
					Set_Motor(-1);		//Set a dump to rapidly drop to zero pressure
				else
					Set_Motor(0);
			}
		}			
		else if(!Pressure_control)			//If the most significant bit isnt set
 800c282:	7818      	ldrb	r0, [r3, #0]
 800c284:	2800      	cmp	r0, #0
 800c286:	f000 80b3 	beq.w	800c3f0 <SysTickHandler+0x2d8>
 800c28a:	4c30      	ldr	r4, [pc, #192]	; (800c34c <SysTickHandler+0x234>)
			Set_Motor(0);				//Sets the Rohm motor controller to idle (low current shutdown) state
		//Check the die temperature - not possible on adc1 :-(
		//Device_Temperature=convert_die_temp(ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_3));//The on die temperature sensor
		//Could process some more sensor data here
		old_pressure=reported_pressure;			//Set the old pressure record here for use in the D term
 800c28c:	f8d7 c000 	ldr.w	ip, [r7]
 800c290:	f8c4 c008 	str.w	ip, [r4, #8]
 800c294:	e751      	b.n	800c13a <SysTickHandler+0x22>
				shutdown_filesystem();
				shutdown();			//Turn off the logger after closing any open files
			}
		}
		else {						//Button released - this can only ever run once per press
			RED_LED_OFF;				//Turn off the red LED - used to indicate button press to user
 800c296:	4839      	ldr	r0, [pc, #228]	; (800c37c <SysTickHandler+0x264>)
 800c298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c29c:	463a      	mov	r2, r7
 800c29e:	f001 fb6c 	bl	800d97a <GPIO_WriteBit>
			if(Button_hold_tim<BUTTON_DEBOUNCE) {	//The button has to be held down for longer than the debounce period
 800c2a2:	f896 c000 	ldrb.w	ip, [r6]
 800c2a6:	f1bc 0f4a 	cmp.w	ip, #74	; 0x4a
 800c2aa:	f200 809d 	bhi.w	800c3e8 <SysTickHandler+0x2d0>
				Last_Button_Press=Millis;
				if(++System_state_counter>=SYSTEM_STATES)
 800c2ae:	7d22      	ldrb	r2, [r4, #20]
			}
		}
		else {						//Button released - this can only ever run once per press
			RED_LED_OFF;				//Turn off the red LED - used to indicate button press to user
			if(Button_hold_tim<BUTTON_DEBOUNCE) {	//The button has to be held down for longer than the debounce period
				Last_Button_Press=Millis;
 800c2b0:	682b      	ldr	r3, [r5, #0]
				if(++System_state_counter>=SYSTEM_STATES)
 800c2b2:	1c51      	adds	r1, r2, #1
 800c2b4:	b2c8      	uxtb	r0, r1
			}
		}
		else {						//Button released - this can only ever run once per press
			RED_LED_OFF;				//Turn off the red LED - used to indicate button press to user
			if(Button_hold_tim<BUTTON_DEBOUNCE) {	//The button has to be held down for longer than the debounce period
				Last_Button_Press=Millis;
 800c2b6:	6123      	str	r3, [r4, #16]
				if(++System_state_counter>=SYSTEM_STATES)
 800c2b8:	7520      	strb	r0, [r4, #20]
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	f000 8095 	beq.w	800c3ea <SysTickHandler+0x2d2>
					System_state_counter=0;//The system can only have a limited number of states
 800c2c0:	4822      	ldr	r0, [pc, #136]	; (800c34c <SysTickHandler+0x234>)
 800c2c2:	7507      	strb	r7, [r0, #20]
 800c2c4:	e091      	b.n	800c3ea <SysTickHandler+0x2d2>
	//Incr the system uptime
	Millis+=10;
	if(ADC_GetFlagStatus(ADC2, ADC_FLAG_JEOC)) {		//We have adc2 converted data from the injected channels
		ADC_ClearFlag(ADC2, ADC_FLAG_JEOC);		//Clear the flag
		if(pressure_offset) {				//Only run the filter when we are sure the sensor is calibrated
			reported_pressure=filterloop(conv_diff(ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1)));//convert injected channel 1
 800c2c6:	2114      	movs	r1, #20
 800c2c8:	481e      	ldr	r0, [pc, #120]	; (800c344 <SysTickHandler+0x22c>)
 800c2ca:	f001 f83f 	bl	800d34c <ADC_GetInjectedConversionValue>
 800c2ce:	f7f4 f9e5 	bl	800069c <conv_diff>
 800c2d2:	f7f4 f9fb 	bl	80006cc <filterloop>
 800c2d6:	4f24      	ldr	r7, [pc, #144]	; (800c368 <SysTickHandler+0x250>)
			if(Sensors&(1<<PRESSURE_HOSE))		//Only pass data once hose is connected
 800c2d8:	4e1b      	ldr	r6, [pc, #108]	; (800c348 <SysTickHandler+0x230>)
	//Incr the system uptime
	Millis+=10;
	if(ADC_GetFlagStatus(ADC2, ADC_FLAG_JEOC)) {		//We have adc2 converted data from the injected channels
		ADC_ClearFlag(ADC2, ADC_FLAG_JEOC);		//Clear the flag
		if(pressure_offset) {				//Only run the filter when we are sure the sensor is calibrated
			reported_pressure=filterloop(conv_diff(ADC_GetInjectedConversionValue(ADC2, ADC_InjectedChannel_1)));//convert injected channel 1
 800c2da:	6038      	str	r0, [r7, #0]
			if(Sensors&(1<<PRESSURE_HOSE))		//Only pass data once hose is connected
 800c2dc:	7831      	ldrb	r1, [r6, #0]
 800c2de:	f011 0f01 	tst.w	r1, #1
 800c2e2:	d087      	beq.n	800c1f4 <SysTickHandler+0xdc>
				Add_To_Buffer(reported_pressure,&Pressures_Buffer);//Pass the pressure data via a buffer to avoid issues with lag
 800c2e4:	6838      	ldr	r0, [r7, #0]
 800c2e6:	f006 ff29 	bl	801313c <__aeabi_f2uiz>
 800c2ea:	4925      	ldr	r1, [pc, #148]	; (800c380 <SysTickHandler+0x268>)
 800c2ec:	f7f5 fd6c 	bl	8001dc8 <Add_To_Buffer>
 800c2f0:	e780      	b.n	800c1f4 <SysTickHandler+0xdc>
				int16_t a=PRESSURE_P_CONST*error+I+PRESSURE_D_CONST*(reported_pressure-old_pressure);
				if(a>0)				//Make sure we are actually turning the motor on
					Set_Motor((int16_t)a);	//Set the motor gpio dir & pwm duty
			}
			else {
				Enabled_iterations=0;		//Make sure this is reset
 800c2f2:	4c16      	ldr	r4, [pc, #88]	; (800c34c <SysTickHandler+0x234>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	8023      	strh	r3, [r4, #0]
				if(abs(reported_pressure)>PRESSURE_MARGIN)
 800c2f8:	6838      	ldr	r0, [r7, #0]
 800c2fa:	f006 fef9 	bl	80130f0 <__aeabi_f2iz>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	bfb8      	it	lt
 800c302:	4240      	neglt	r0, r0
 800c304:	f006 f888 	bl	8012418 <__aeabi_i2d>
 800c308:	a30b      	add	r3, pc, #44	; (adr r3, 800c338 <SysTickHandler+0x220>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	f006 fb79 	bl	8012a04 <__aeabi_dcmpgt>
 800c312:	2800      	cmp	r0, #0
 800c314:	d065      	beq.n	800c3e2 <SysTickHandler+0x2ca>
					Set_Motor(-1);		//Set a dump to rapidly drop to zero pressure
 800c316:	f04f 30ff 	mov.w	r0, #4294967295
 800c31a:	f000 fd75 	bl	800ce08 <Set_Motor>
 800c31e:	e7b5      	b.n	800c28c <SysTickHandler+0x174>
 800c320:	9999999a 	.word	0x9999999a
 800c324:	3fa99999 	.word	0x3fa99999
 800c328:	cccccccd 	.word	0xcccccccd
 800c32c:	409330cc 	.word	0x409330cc
 800c330:	c0000000 	.word	0xc0000000
 800c334:	409330cc 	.word	0x409330cc
 800c338:	33333333 	.word	0x33333333
 800c33c:	3fd33333 	.word	0x3fd33333
 800c340:	20000b54 	.word	0x20000b54
 800c344:	40012800 	.word	0x40012800
 800c348:	20000b58 	.word	0x20000b58
 800c34c:	200007c4 	.word	0x200007c4
 800c350:	20000b19 	.word	0x20000b19
 800c354:	20000b50 	.word	0x20000b50
 800c358:	40010800 	.word	0x40010800
 800c35c:	20000a58 	.word	0x20000a58
 800c360:	20000b20 	.word	0x20000b20
 800c364:	20000a54 	.word	0x20000a54
 800c368:	20000c8c 	.word	0x20000c8c
 800c36c:	20000b1c 	.word	0x20000b1c
 800c370:	20000b2c 	.word	0x20000b2c
 800c374:	402e0000 	.word	0x402e0000
 800c378:	44998666 	.word	0x44998666
 800c37c:	40010c00 	.word	0x40010c00
 800c380:	20000b7c 	.word	0x20000b7c
		//Now handle the pressure controller
		if(Pressure_control&0x7F) {//If active pressure control is enabled
			//run a PI controller on the air pump motor
			if(pressure_setpoint>0) {		//A negative setpoint forces a dump of air
				float error=pressure_setpoint-reported_pressure;//pressure_setpoint is a global containing the target diff press
				if(Enabled_iterations++>I_HOLDOFF) {
 800c384:	f006 f85a 	bl	801243c <__aeabi_f2d>
 800c388:	4680      	mov	r8, r0
 800c38a:	6860      	ldr	r0, [r4, #4]
 800c38c:	4689      	mov	r9, r1
 800c38e:	f006 f855 	bl	801243c <__aeabi_f2d>
 800c392:	4682      	mov	sl, r0
 800c394:	468b      	mov	fp, r1
					if(I>PRESSURE_I_LIM)	//Enforce limits
						I=PRESSURE_I_LIM;
					if(I<-PRESSURE_I_LIM)
						I=-PRESSURE_I_LIM;
				}
				int16_t a=PRESSURE_P_CONST*error+I+PRESSURE_D_CONST*(reported_pressure-old_pressure);
 800c396:	a320      	add	r3, pc, #128	; (adr r3, 800c418 <SysTickHandler+0x300>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	4640      	mov	r0, r8
 800c39e:	4649      	mov	r1, r9
 800c3a0:	f006 f8a0 	bl	80124e4 <__aeabi_dmul>
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	465b      	mov	r3, fp
 800c3a8:	f005 feea 	bl	8012180 <__adddf3>
 800c3ac:	f8d7 8000 	ldr.w	r8, [r7]
 800c3b0:	4682      	mov	sl, r0
 800c3b2:	468b      	mov	fp, r1
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	68a1      	ldr	r1, [r4, #8]
 800c3b8:	f006 fbca 	bl	8012b50 <__aeabi_fsub>
 800c3bc:	f006 f83e 	bl	801243c <__aeabi_f2d>
 800c3c0:	a317      	add	r3, pc, #92	; (adr r3, 800c420 <SysTickHandler+0x308>)
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	f006 f88d 	bl	80124e4 <__aeabi_dmul>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	4659      	mov	r1, fp
 800c3d2:	f005 fed5 	bl	8012180 <__adddf3>
 800c3d6:	f006 fb1f 	bl	8012a18 <__aeabi_d2iz>
				if(a>0)				//Make sure we are actually turning the motor on
 800c3da:	b200      	sxth	r0, r0
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f77f af55 	ble.w	800c28c <SysTickHandler+0x174>
			else {
				Enabled_iterations=0;		//Make sure this is reset
				if(abs(reported_pressure)>PRESSURE_MARGIN)
					Set_Motor(-1);		//Set a dump to rapidly drop to zero pressure
				else
					Set_Motor(0);
 800c3e2:	f000 fd11 	bl	800ce08 <Set_Motor>
 800c3e6:	e751      	b.n	800c28c <SysTickHandler+0x174>
				shutdown();			//Turn off the logger after closing any open files
			}
		}
		else {						//Button released - this can only ever run once per press
			RED_LED_OFF;				//Turn off the red LED - used to indicate button press to user
			if(Button_hold_tim<BUTTON_DEBOUNCE) {	//The button has to be held down for longer than the debounce period
 800c3e8:	6923      	ldr	r3, [r4, #16]
				Last_Button_Press=Millis;
				if(++System_state_counter>=SYSTEM_STATES)
					System_state_counter=0;//The system can only have a limited number of states
			}
			Button_hold_tim=0;			//Reset the timer here
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	7031      	strb	r1, [r6, #0]
 800c3ee:	e6b0      	b.n	800c152 <SysTickHandler+0x3a>
				else
					Set_Motor(0);
			}
		}			
		else if(!Pressure_control)			//If the most significant bit isnt set
			Set_Motor(0);				//Sets the Rohm motor controller to idle (low current shutdown) state
 800c3f0:	f000 fd0a 	bl	800ce08 <Set_Motor>
 800c3f4:	e749      	b.n	800c28a <SysTickHandler+0x172>
				float error=pressure_setpoint-reported_pressure;//pressure_setpoint is a global containing the target diff press
				if(Enabled_iterations++>I_HOLDOFF) {
					I+=error*PRESSURE_I_CONST;//Constants defined in main.h
					if(I>PRESSURE_I_LIM)	//Enforce limits
						I=PRESSURE_I_LIM;
					if(I<-PRESSURE_I_LIM)
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	4659      	mov	r1, fp
 800c3fa:	a30b      	add	r3, pc, #44	; (adr r3, 800c428 <SysTickHandler+0x310>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	f006 fae2 	bl	80129c8 <__aeabi_dcmplt>
 800c404:	2800      	cmp	r0, #0
 800c406:	d0c6      	beq.n	800c396 <SysTickHandler+0x27e>
						I=-PRESSURE_I_LIM;
 800c408:	4a0b      	ldr	r2, [pc, #44]	; (800c438 <SysTickHandler+0x320>)
 800c40a:	f20f 0b24 	addw	fp, pc, #36	; 0x24
 800c40e:	e9db ab00 	ldrd	sl, fp, [fp]
 800c412:	6062      	str	r2, [r4, #4]
 800c414:	e7bf      	b.n	800c396 <SysTickHandler+0x27e>
 800c416:	bf00      	nop
 800c418:	e147ae14 	.word	0xe147ae14
 800c41c:	402eb47a 	.word	0x402eb47a
 800c420:	00000000 	.word	0x00000000
 800c424:	c0633000 	.word	0xc0633000
 800c428:	cccccccd 	.word	0xcccccccd
 800c42c:	c09330cc 	.word	0xc09330cc
 800c430:	c0000000 	.word	0xc0000000
 800c434:	c09330cc 	.word	0xc09330cc
 800c438:	c4998666 	.word	0xc4998666

0800c43c <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
  CTR_HP();
 800c43c:	f003 be64 	b.w	8010108 <CTR_HP>

0800c440 <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
  USB_Istr();
 800c440:	f7f5 b804 	b.w	800144c <USB_Istr>
 800c444:	f3af 8000 	nop.w

0800c448 <BusFault_Handler>:
 * @retval : None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c448:	e7fe      	b.n	800c448 <BusFault_Handler>
	...

0800c44c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c44c:	4b3b      	ldr	r3, [pc, #236]	; (800c53c <SystemInit+0xf0>)

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800c44e:	4a3c      	ldr	r2, [pc, #240]	; (800c540 <SystemInit+0xf4>)
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c450:	6818      	ldr	r0, [r3, #0]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800c452:	2100      	movs	r1, #0
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c454:	f040 0001 	orr.w	r0, r0, #1
 800c458:	6018      	str	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800c45a:	6858      	ldr	r0, [r3, #4]
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c45c:	b082      	sub	sp, #8
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800c45e:	4010      	ands	r0, r2
 800c460:	6058      	str	r0, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c462:	681a      	ldr	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800c464:	4618      	mov	r0, r3
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c466:	f022 7c84 	bic.w	ip, r2, #17301504	; 0x1080000
 800c46a:	f42c 3280 	bic.w	r2, ip, #65536	; 0x10000
 800c46e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c476:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800c478:	685a      	ldr	r2, [r3, #4]
 800c47a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800c47e:	605a      	str	r2, [r3, #4]

#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800c480:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800c484:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800c486:	9101      	str	r1, [sp, #4]
 800c488:	9100      	str	r1, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800c48a:	6819      	ldr	r1, [r3, #0]
 800c48c:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	e003      	b.n	800c49c <SystemInit+0x50>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 800c494:	9a01      	ldr	r2, [sp, #4]
 800c496:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800c49a:	d009      	beq.n	800c4b0 <SystemInit+0x64>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800c49c:	6801      	ldr	r1, [r0, #0]
 800c49e:	f401 3300 	and.w	r3, r1, #131072	; 0x20000
 800c4a2:	9300      	str	r3, [sp, #0]
    StartUpCounter++;  
 800c4a4:	9a01      	ldr	r2, [sp, #4]
 800c4a6:	1c51      	adds	r1, r2, #1
 800c4a8:	9101      	str	r1, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d0f1      	beq.n	800c494 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800c4b0:	4b22      	ldr	r3, [pc, #136]	; (800c53c <SystemInit+0xf0>)
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	f410 3300 	ands.w	r3, r0, #131072	; 0x20000
 800c4b8:	d005      	beq.n	800c4c6 <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	9100      	str	r1, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
 800c4be:	9a00      	ldr	r2, [sp, #0]
 800c4c0:	2a01      	cmp	r2, #1
 800c4c2:	d002      	beq.n	800c4ca <SystemInit+0x7e>
 800c4c4:	e7fe      	b.n	800c4c4 <SystemInit+0x78>
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	e7f9      	b.n	800c4be <SystemInit+0x72>
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800c4ca:	4a1e      	ldr	r2, [pc, #120]	; (800c544 <SystemInit+0xf8>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800c4cc:	4b1b      	ldr	r3, [pc, #108]	; (800c53c <SystemInit+0xf0>)
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800c4ce:	6810      	ldr	r0, [r2, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800c4d0:	4619      	mov	r1, r3
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800c4d2:	f040 0010 	orr.w	r0, r0, #16
 800c4d6:	6010      	str	r0, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800c4d8:	6810      	ldr	r0, [r2, #0]
 800c4da:	f020 0003 	bic.w	r0, r0, #3
 800c4de:	6010      	str	r0, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800c4e0:	6810      	ldr	r0, [r2, #0]
 800c4e2:	f040 0002 	orr.w	r0, r0, #2
 800c4e6:	6010      	str	r0, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800c4ec:	6858      	ldr	r0, [r3, #4]
 800c4ee:	6058      	str	r0, [r3, #4]
    
    /* PCLK1 = HCLK/2 */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800c4f0:	685a      	ldr	r2, [r3, #4]
 800c4f2:	f442 6080 	orr.w	r0, r2, #1024	; 0x400
 800c4f6:	6058      	str	r0, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else /* note changed for 12mhz external xtal */   
    /*  PLL configuration: PLLCLK = HSE * 6 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 800c4fe:	6058      	str	r0, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	f442 1088 	orr.w	r0, r2, #1114112	; 0x110000
 800c506:	6058      	str	r0, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 800c50e:	6018      	str	r0, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800c510:	680a      	ldr	r2, [r1, #0]
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <SystemInit+0xf0>)
 800c514:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800c518:	d0fa      	beq.n	800c510 <SystemInit+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800c51a:	685a      	ldr	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800c51c:	4619      	mov	r1, r3
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800c51e:	f022 0003 	bic.w	r0, r2, #3
 800c522:	6058      	str	r0, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	f042 0002 	orr.w	r0, r2, #2
 800c52a:	6058      	str	r0, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800c52c:	684b      	ldr	r3, [r1, #4]
 800c52e:	f003 0c0c 	and.w	ip, r3, #12
 800c532:	f1bc 0f08 	cmp.w	ip, #8
 800c536:	d1f9      	bne.n	800c52c <SystemInit+0xe0>
    
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();

}
 800c538:	b002      	add	sp, #8
 800c53a:	4770      	bx	lr
 800c53c:	40021000 	.word	0x40021000
 800c540:	f8ff0000 	.word	0xf8ff0000
 800c544:	40022000 	.word	0x40022000

0800c548 <__str_print_char>:
/**
  * @brief  Writes a char to string - use for better logfile performance
  * @param  Character to write
  * @retval None
  */
void __str_print_char(char c) {
 800c548:	b538      	push	{r3, r4, r5, lr}
	uint8_t a=strlen(print_string)%255;		//Make sure we cant overwrite ram
 800c54a:	4c08      	ldr	r4, [pc, #32]	; (800c56c <__str_print_char+0x24>)
/**
  * @brief  Writes a char to string - use for better logfile performance
  * @param  Character to write
  * @retval None
  */
void __str_print_char(char c) {
 800c54c:	4605      	mov	r5, r0
	uint8_t a=strlen(print_string)%255;		//Make sure we cant overwrite ram
 800c54e:	4620      	mov	r0, r4
 800c550:	f007 f900 	bl	8013754 <strlen>
 800c554:	4a06      	ldr	r2, [pc, #24]	; (800c570 <__str_print_char+0x28>)
 800c556:	fba2 2c00 	umull	r2, ip, r2, r0
 800c55a:	eb00 11dc 	add.w	r1, r0, ip, lsr #7
	print_string[a]=c;				//Append string
 800c55e:	f001 00ff 	and.w	r0, r1, #255	; 0xff
	print_string[a+1]=0x00;				//Null terminate
 800c562:	1823      	adds	r3, r4, r0
 800c564:	2200      	movs	r2, #0
  * @param  Character to write
  * @retval None
  */
void __str_print_char(char c) {
	uint8_t a=strlen(print_string)%255;		//Make sure we cant overwrite ram
	print_string[a]=c;				//Append string
 800c566:	5425      	strb	r5, [r4, r0]
	print_string[a+1]=0x00;				//Null terminate
 800c568:	705a      	strb	r2, [r3, #1]
}
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20000b88 	.word	0x20000b88
 800c570:	80808081 	.word	0x80808081

0800c574 <__fat_print_char>:
/**
  * @brief  Writes a char to logfile
  * @param  Character to write
  * @retval None
  */
void __fat_print_char(char c) {
 800c574:	b500      	push	{lr}
 800c576:	b083      	sub	sp, #12
 800c578:	a902      	add	r1, sp, #8
 800c57a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	f_write(&FATFS_logfile,&c,1,&a);
 800c57e:	2201      	movs	r2, #1
 800c580:	4b02      	ldr	r3, [pc, #8]	; (800c58c <__fat_print_char+0x18>)
 800c582:	4803      	ldr	r0, [pc, #12]	; (800c590 <__fat_print_char+0x1c>)
 800c584:	f7f9 fe74 	bl	8006270 <f_write>
}
 800c588:	b003      	add	sp, #12
 800c58a:	bd00      	pop	{pc}
 800c58c:	20000c88 	.word	0x20000c88
 800c590:	20000c90 	.word	0x20000c90

0800c594 <main>:
FIL FATFS_logfile;
FILINFO FATFS_info;
volatile int bar[3] __attribute__ ((section (".noinit"))) ;//= 0xaa

int main(void)
{
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	printf("%d",bar);
 800c598:	4985      	ldr	r1, [pc, #532]	; (800c7b0 <main+0x21c>)
FIL FATFS_logfile;
FILINFO FATFS_info;
volatile int bar[3] __attribute__ ((section (".noinit"))) ;//= 0xaa

int main(void)
{
 800c59a:	b08d      	sub	sp, #52	; 0x34
	printf("%d",bar);
 800c59c:	4885      	ldr	r0, [pc, #532]	; (800c7b4 <main+0x220>)
 800c59e:	f7fd fedb 	bl	800a358 <rprintf2RamRom>
	uint8_t a=0;
	uint32_t ppg[2];				//two PPG channels
	uint32_t data_counter;				//used as data timestamp
	float sensor_data;				//used for handling data passed back from sensors
	RTC_t RTC_time;
	SystemInit();					//Sets up the clk
 800c5a2:	f7ff ff53 	bl	800c44c <SystemInit>
	setup_gpio();					//Initialised pins, and detects boot source
 800c5a6:	f7fe ff1f 	bl	800b3e8 <setup_gpio>
	DBGMCU_Config(DBGMCU_IWDG_STOP, ENABLE);	//Watchdog stopped during JTAG halt
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c5b0:	f000 ff90 	bl	800d4d4 <DBGMCU_Config>
	Watchdog_Config(WATCHDOG_TIMEOUT);		//Set the watchdog
 800c5b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c5b8:	f000 fcd2 	bl	800cf60 <Watchdog_Config>
	SysTick_Configuration();			//Start up system timer at 100Hz for uSD card functionality
 800c5bc:	f7ff fcea 	bl	800bf94 <SysTick_Configuration>
	rtc_init();					//Real time clock initialise - (keeps time unchanged if set)
 800c5c0:	f7fc f9b4 	bl	800892c <rtc_init>
	Usarts_Init();
 800c5c4:	f000 fc44 	bl	800ce50 <Usarts_Init>
	setup_pwm();					//Enable the PWM outputs on all three channels
 800c5c8:	f000 fb4e 	bl	800cc68 <setup_pwm>
	ISR_Config();
 800c5cc:	f7ff fc64 	bl	800be98 <ISR_Config>
	rprintfInit(__usart_send_char);			//Printf over the bluetooth
 800c5d0:	4879      	ldr	r0, [pc, #484]	; (800c7b8 <main+0x224>)
 800c5d2:	f7fd f9d5 	bl	8009980 <rprintfInit>
	if(USB_SOURCE==bootsource) {
 800c5d6:	4879      	ldr	r0, [pc, #484]	; (800c7bc <main+0x228>)
 800c5d8:	7803      	ldrb	r3, [r0, #0]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	f000 8087 	beq.w	800c6ee <main+0x15a>
				switch_leds_off();
			Watchdog_Reset();
		}
	}
	else {
		if(!GET_PWR_STATE)			//Check here to make sure the power button is still pressed, if not, sleep
 800c5e0:	4877      	ldr	r0, [pc, #476]	; (800c7c0 <main+0x22c>)
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	f001 f9b3 	bl	800d94e <GPIO_ReadInputDataBit>
 800c5e8:	b908      	cbnz	r0, 800c5ee <main+0x5a>
			shutdown();			//This means a glitch on the supply line, or a power glitch results in sleep
 800c5ea:	f000 fb0f 	bl	800cc0c <shutdown>
		a=Set_System();				//This actually just inits the storage layer - returns 0 for success
 800c5ee:	f7f4 f967 	bl	80008c0 <Set_System>
		//a|=init_function();			//Other init functions
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
 800c5f2:	4974      	ldr	r1, [pc, #464]	; (800c7c4 <main+0x230>)
		}
	}
	else {
		if(!GET_PWR_STATE)			//Check here to make sure the power button is still pressed, if not, sleep
			shutdown();			//This means a glitch on the supply line, or a power glitch results in sleep
		a=Set_System();				//This actually just inits the storage layer - returns 0 for success
 800c5f4:	fa5f f880 	uxtb.w	r8, r0
		//a|=init_function();			//Other init functions
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	f7f9 f9ff 	bl	80059fc <f_mount>
 800c5fe:	4d72      	ldr	r5, [pc, #456]	; (800c7c8 <main+0x234>)
 800c600:	7028      	strb	r0, [r5, #0]
 800c602:	2800      	cmp	r0, #0
 800c604:	d052      	beq.n	800c6ac <main+0x118>
 800c606:	4871      	ldr	r0, [pc, #452]	; (800c7cc <main+0x238>)
 800c608:	f000 fc86 	bl	800cf18 <Usart_Send_Str>
 800c60c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800c7c4 <main+0x230>
 800c610:	ac06      	add	r4, sp, #24
					f_close(&FATFS_logfile);//Close the already opened file on error
				else
					file_opened=1;	//So we know to close the file properly on shutdown
			}
		}
		a|=f_err_code;
 800c612:	782d      	ldrb	r5, [r5, #0]
		if(a) {					//There was an init error
 800c614:	ea58 0305 	orrs.w	r3, r8, r5
 800c618:	d00a      	beq.n	800c630 <main+0x9c>
			RED_LED_ON;
 800c61a:	486d      	ldr	r0, [pc, #436]	; (800c7d0 <main+0x23c>)
 800c61c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c620:	2201      	movs	r2, #1
 800c622:	f001 f9aa 	bl	800d97a <GPIO_WriteBit>
			Delay(400000);
 800c626:	486b      	ldr	r0, [pc, #428]	; (800c7d4 <main+0x240>)
 800c628:	f7f5 fc0a 	bl	8001e40 <Delay>
			shutdown();			//Abort after a single red flash
 800c62c:	f000 faee 	bl	800cc0c <shutdown>
		}
		init_buffer(&(Buff[0]),PPG_BUFFER_SIZE);//Enough for ~0.25S of data
 800c630:	4869      	ldr	r0, [pc, #420]	; (800c7d8 <main+0x244>)
 800c632:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c636:	f7f5 fbf9 	bl	8001e2c <init_buffer>
		init_buffer(&(Buff[1]),PPG_BUFFER_SIZE);
 800c63a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c63e:	4867      	ldr	r0, [pc, #412]	; (800c7dc <main+0x248>)
 800c640:	f7f5 fbf4 	bl	8001e2c <init_buffer>
  * @brief  Detects which sensors are plugged in, inits buffers for attached peripheral sensors
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
 800c644:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800c800 <main+0x26c>
			shutdown();			//Abort after a single red flash
		}
		init_buffer(&(Buff[0]),PPG_BUFFER_SIZE);//Enough for ~0.25S of data
		init_buffer(&(Buff[1]),PPG_BUFFER_SIZE);
	}
	Delay(100000);					//Sensor+inst amplifier takes about 100ms to stabilise after power on
 800c648:	4865      	ldr	r0, [pc, #404]	; (800c7e0 <main+0x24c>)
 800c64a:	f7f5 fbf9 	bl	8001e40 <Delay>
	ADC_Configuration();				//We leave this a bit later to allow stabilisation
 800c64e:	f7fe fdad 	bl	800b1ac <ADC_Configuration>
	calibrate_sensor();				//Calibrate the offset on the diff pressure sensor
 800c652:	f7f3 ffe1 	bl	8000618 <calibrate_sensor>
	EXTI_ONOFF_EN();				//Enable the off interrupt - allow some time for debouncing
 800c656:	f7ff fc59 	bl	800bf0c <EXTI_ONOFF_EN>
	I2C_Config();					//Setup the I2C bus
 800c65a:	f7ff fad9 	bl	800bc10 <I2C_Config>
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800c65e:	2001      	movs	r0, #1
  * @brief  Detects which sensors are plugged in, inits buffers for attached peripheral sensors
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
 800c660:	f8d8 b000 	ldr.w	fp, [r8]
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800c664:	f7ff faa0 	bl	800bba8 <I2C1_Request_Job>
 800c668:	4b5e      	ldr	r3, [pc, #376]	; (800c7e4 <main+0x250>)
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
 800c66a:	4d5f      	ldr	r5, [pc, #380]	; (800c7e8 <main+0x254>)
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800c66c:	681e      	ldr	r6, [r3, #0]
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
 800c66e:	f240 20ff 	movw	r0, #767	; 0x2ff
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800c672:	601e      	str	r6, [r3, #0]
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
 800c674:	782a      	ldrb	r2, [r5, #0]
 800c676:	4e5d      	ldr	r6, [pc, #372]	; (800c7ec <main+0x258>)
 800c678:	f042 0c80 	orr.w	ip, r2, #128	; 0x80
 800c67c:	f885 c000 	strb.w	ip, [r5]
 800c680:	f50b 7996 	add.w	r9, fp, #300	; 0x12c
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
 800c684:	f000 fbc0 	bl	800ce08 <Set_Motor>
 800c688:	e00a      	b.n	800c6a0 <main+0x10c>
	while(Millis<(millis+300)) {			//Wait 300ms
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
 800c68a:	6830      	ldr	r0, [r6, #0]
 800c68c:	f005 fed6 	bl	801243c <__aeabi_f2d>
 800c690:	a345      	add	r3, pc, #276	; (adr r3, 800c7a8 <main+0x214>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	f006 f9b5 	bl	8012a04 <__aeabi_dcmpgt>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f040 80bc 	bne.w	800c818 <main+0x284>
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
	while(Millis<(millis+300)) {			//Wait 300ms
 800c6a0:	f8d8 1000 	ldr.w	r1, [r8]
 800c6a4:	4589      	cmp	r9, r1
 800c6a6:	d8f0      	bhi.n	800c68a <main+0xf6>
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
 800c6a8:	2600      	movs	r6, #0
 800c6aa:	e0bd      	b.n	800c828 <main+0x294>
			shutdown();			//This means a glitch on the supply line, or a power glitch results in sleep
		a=Set_System();				//This actually just inits the storage layer - returns 0 for success
		//a|=init_function();			//Other init functions
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
 800c6ac:	4850      	ldr	r0, [pc, #320]	; (800c7f0 <main+0x25c>)
 800c6ae:	4951      	ldr	r1, [pc, #324]	; (800c7f4 <main+0x260>)
 800c6b0:	2203      	movs	r2, #3
 800c6b2:	f7f9 f9b3 	bl	8005a1c <f_open>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f000 81b4 	beq.w	800ca24 <main+0x490>
 800c6bc:	ac06      	add	r4, sp, #24
						RTC_time.hour,RTC_time.min,RTC_time.sec);
					}				
				}
				f_close(&FATFS_logfile);//Close the time.txt file
			}
			if((f_err_code=f_open(&FATFS_logfile,"logfile.txt",FA_CREATE_ALWAYS | FA_WRITE))) {//Present
 800c6be:	4e4c      	ldr	r6, [pc, #304]	; (800c7f0 <main+0x25c>)
 800c6c0:	494d      	ldr	r1, [pc, #308]	; (800c7f8 <main+0x264>)
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	f7f9 f9a9 	bl	8005a1c <f_open>
 800c6ca:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800c7c8 <main+0x234>
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	7028      	strb	r0, [r5, #0]
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d04d      	beq.n	800c772 <main+0x1de>
				printf("FatFs drive error %d\r\n",f_err_code);
 800c6d6:	4849      	ldr	r0, [pc, #292]	; (800c7fc <main+0x268>)
 800c6d8:	f7fd fe3e 	bl	800a358 <rprintf2RamRom>
				if(f_err_code==FR_DISK_ERR || f_err_code==FR_NOT_READY)
 800c6dc:	f899 3000 	ldrb.w	r3, [r9]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d042      	beq.n	800c76a <main+0x1d6>
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	d040      	beq.n	800c76a <main+0x1d6>
 800c6e8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c7c4 <main+0x230>
 800c6ec:	e791      	b.n	800c612 <main+0x7e>
	Usarts_Init();
	setup_pwm();					//Enable the PWM outputs on all three channels
	ISR_Config();
	rprintfInit(__usart_send_char);			//Printf over the bluetooth
	if(USB_SOURCE==bootsource) {
		Set_System();				//This actually just inits the storage layer
 800c6ee:	f7f4 f8e7 	bl	80008c0 <Set_System>
 800c6f2:	4c43      	ldr	r4, [pc, #268]	; (800c800 <main+0x26c>)
		Set_USBClock();
 800c6f4:	f7f4 f8e8 	bl	80008c8 <Set_USBClock>
 800c6f8:	4e42      	ldr	r6, [pc, #264]	; (800c804 <main+0x270>)
		USB_Interrupts_Config();
 800c6fa:	f7f4 f907 	bl	800090c <USB_Interrupts_Config>
		USB_Init();
		while (bDeviceState != CONFIGURED) {	//Wait for USB config - timeout causes shutdown
			if(Millis>10000 || !GET_CHRG_STATE)//No USB cable - shutdown (Charger pin will be set to open drain, cant be disabled without usb)
 800c6fe:	f242 7510 	movw	r5, #10000	; 0x2710
	rprintfInit(__usart_send_char);			//Printf over the bluetooth
	if(USB_SOURCE==bootsource) {
		Set_System();				//This actually just inits the storage layer
		Set_USBClock();
		USB_Interrupts_Config();
		USB_Init();
 800c702:	f003 fc01 	bl	800ff08 <USB_Init>
		while (bDeviceState != CONFIGURED) {	//Wait for USB config - timeout causes shutdown
 800c706:	6837      	ldr	r7, [r6, #0]
			if(Millis>10000 || !GET_CHRG_STATE)//No USB cable - shutdown (Charger pin will be set to open drain, cant be disabled without usb)
 800c708:	2104      	movs	r1, #4
	if(USB_SOURCE==bootsource) {
		Set_System();				//This actually just inits the storage layer
		Set_USBClock();
		USB_Interrupts_Config();
		USB_Init();
		while (bDeviceState != CONFIGURED) {	//Wait for USB config - timeout causes shutdown
 800c70a:	2f05      	cmp	r7, #5
			if(Millis>10000 || !GET_CHRG_STATE)//No USB cable - shutdown (Charger pin will be set to open drain, cant be disabled without usb)
 800c70c:	4830      	ldr	r0, [pc, #192]	; (800c7d0 <main+0x23c>)
	if(USB_SOURCE==bootsource) {
		Set_System();				//This actually just inits the storage layer
		Set_USBClock();
		USB_Interrupts_Config();
		USB_Init();
		while (bDeviceState != CONFIGURED) {	//Wait for USB config - timeout causes shutdown
 800c70e:	d00a      	beq.n	800c726 <main+0x192>
			if(Millis>10000 || !GET_CHRG_STATE)//No USB cable - shutdown (Charger pin will be set to open drain, cant be disabled without usb)
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	42aa      	cmp	r2, r5
 800c714:	d802      	bhi.n	800c71c <main+0x188>
 800c716:	f001 f91a 	bl	800d94e <GPIO_ReadInputDataBit>
 800c71a:	b908      	cbnz	r0, 800c720 <main+0x18c>
				shutdown();
 800c71c:	f000 fa76 	bl	800cc0c <shutdown>
			Watchdog_Reset();		//Reset watchdog here, if we are stalled here the Millis timeout should catch us
 800c720:	f001 fb88 	bl	800de34 <IWDG_ReloadCounter>
 800c724:	e7ef      	b.n	800c706 <main+0x172>
		}
		USB_Configured_LED();
 800c726:	f7f4 f923 	bl	8000970 <USB_Configured_LED>
		EXTI_ONOFF_EN();			//Enable the off interrupt - allow some time for debouncing
		while(1) {				//If running off USB (mounted as mass storage), stay in this loop - dont turn on anything
			if(Millis%1000>500)		//1Hz on/off flashing
 800c72a:	4e37      	ldr	r6, [pc, #220]	; (800c808 <main+0x274>)
			if(Millis>10000 || !GET_CHRG_STATE)//No USB cable - shutdown (Charger pin will be set to open drain, cant be disabled without usb)
				shutdown();
			Watchdog_Reset();		//Reset watchdog here, if we are stalled here the Millis timeout should catch us
		}
		USB_Configured_LED();
		EXTI_ONOFF_EN();			//Enable the off interrupt - allow some time for debouncing
 800c72c:	f7ff fbee 	bl	800bf0c <EXTI_ONOFF_EN>
		while(1) {				//If running off USB (mounted as mass storage), stay in this loop - dont turn on anything
			if(Millis%1000>500)		//1Hz on/off flashing
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800c736:	fba6 1203 	umull	r1, r2, r6, r3
 800c73a:	0990      	lsrs	r0, r2, #6
 800c73c:	fb05 3110 	mls	r1, r5, r0, r3
 800c740:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800c744:	d90c      	bls.n	800c760 <main+0x1cc>
				switch_leds_on();	//Flash the LED(s)
 800c746:	f7fe ff29 	bl	800b59c <switch_leds_on>
			else
				switch_leds_off();
			Watchdog_Reset();
 800c74a:	f001 fb73 	bl	800de34 <IWDG_ReloadCounter>
			Watchdog_Reset();		//Reset watchdog here, if we are stalled here the Millis timeout should catch us
		}
		USB_Configured_LED();
		EXTI_ONOFF_EN();			//Enable the off interrupt - allow some time for debouncing
		while(1) {				//If running off USB (mounted as mass storage), stay in this loop - dont turn on anything
			if(Millis%1000>500)		//1Hz on/off flashing
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	fba6 1203 	umull	r1, r2, r6, r3
 800c754:	0990      	lsrs	r0, r2, #6
 800c756:	fb05 3110 	mls	r1, r5, r0, r3
 800c75a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800c75e:	d8f2      	bhi.n	800c746 <main+0x1b2>
				switch_leds_on();	//Flash the LED(s)
			else
				switch_leds_off();
 800c760:	f7fe ff30 	bl	800b5c4 <switch_leds_off>
			Watchdog_Reset();
 800c764:	f001 fb66 	bl	800de34 <IWDG_ReloadCounter>
 800c768:	e7f1      	b.n	800c74e <main+0x1ba>
				f_close(&FATFS_logfile);//Close the time.txt file
			}
			if((f_err_code=f_open(&FATFS_logfile,"logfile.txt",FA_CREATE_ALWAYS | FA_WRITE))) {//Present
				printf("FatFs drive error %d\r\n",f_err_code);
				if(f_err_code==FR_DISK_ERR || f_err_code==FR_NOT_READY)
					Usart_Send_Str((char*)"No uSD card inserted?\r\n");
 800c76a:	4828      	ldr	r0, [pc, #160]	; (800c80c <main+0x278>)
 800c76c:	f000 fbd4 	bl	800cf18 <Usart_Send_Str>
 800c770:	e7ba      	b.n	800c6e8 <main+0x154>
			}
			else {				//We have a mounted card
				f_err_code=f_lseek(&FATFS_logfile, PRE_SIZE);// Pre-allocate clusters
 800c772:	4927      	ldr	r1, [pc, #156]	; (800c810 <main+0x27c>)
 800c774:	4630      	mov	r0, r6
 800c776:	f7fa f889 	bl	800688c <f_lseek>
 800c77a:	4601      	mov	r1, r0
 800c77c:	f889 0000 	strb.w	r0, [r9]
				if (f_err_code || f_tell(&FATFS_logfile) != PRE_SIZE)// Check if the file size has been increased correctly
 800c780:	b920      	cbnz	r0, 800c78c <main+0x1f8>
 800c782:	68b0      	ldr	r0, [r6, #8]
 800c784:	4b22      	ldr	r3, [pc, #136]	; (800c810 <main+0x27c>)
 800c786:	4298      	cmp	r0, r3
 800c788:	f000 815f 	beq.w	800ca4a <main+0x4b6>
					Usart_Send_Str((char*)"Pre-Allocation error\r\n");
 800c78c:	4821      	ldr	r0, [pc, #132]	; (800c814 <main+0x280>)
 800c78e:	f000 fbc3 	bl	800cf18 <Usart_Send_Str>
					if((f_err_code=f_lseek(&FATFS_logfile, 0)))//Seek back to start of file to start writing
						Usart_Send_Str((char*)"Seek error\r\n");
					else
						rprintfInit(__str_print_char);//Printf to the logfile
				}
				if(f_err_code)
 800c792:	782e      	ldrb	r6, [r5, #0]
 800c794:	2e00      	cmp	r6, #0
 800c796:	f040 8152 	bne.w	800ca3e <main+0x4aa>
					f_close(&FATFS_logfile);//Close the already opened file on error
				else
					file_opened=1;	//So we know to close the file properly on shutdown
 800c79a:	f8df a028 	ldr.w	sl, [pc, #40]	; 800c7c4 <main+0x230>
 800c79e:	2101      	movs	r1, #1
 800c7a0:	f88a 1230 	strb.w	r1, [sl, #560]	; 0x230
 800c7a4:	e735      	b.n	800c612 <main+0x7e>
 800c7a6:	bf00      	nop
 800c7a8:	33333333 	.word	0x33333333
 800c7ac:	3fd33333 	.word	0x3fd33333
 800c7b0:	20000ef8 	.word	0x20000ef8
 800c7b4:	0801b374 	.word	0x0801b374
 800c7b8:	0800cf45 	.word	0x0800cf45
 800c7bc:	20000b08 	.word	0x20000b08
 800c7c0:	40010800 	.word	0x40010800
 800c7c4:	200007dc 	.word	0x200007dc
 800c7c8:	20000b30 	.word	0x20000b30
 800c7cc:	0801b378 	.word	0x0801b378
 800c7d0:	40010c00 	.word	0x40010c00
 800c7d4:	00061a80 	.word	0x00061a80
 800c7d8:	20000b38 	.word	0x20000b38
 800c7dc:	20000b44 	.word	0x20000b44
 800c7e0:	000186a0 	.word	0x000186a0
 800c7e4:	20000b10 	.word	0x20000b10
 800c7e8:	20000b1c 	.word	0x20000b1c
 800c7ec:	20000c8c 	.word	0x20000c8c
 800c7f0:	20000c90 	.word	0x20000c90
 800c7f4:	0801b38c 	.word	0x0801b38c
 800c7f8:	0801b3b8 	.word	0x0801b3b8
 800c7fc:	0801b3c4 	.word	0x0801b3c4
 800c800:	20000b54 	.word	0x20000b54
 800c804:	20000720 	.word	0x20000720
 800c808:	10624dd3 	.word	0x10624dd3
 800c80c:	0801b3dc 	.word	0x0801b3dc
 800c810:	000f4240 	.word	0x000f4240
 800c814:	0801b3f4 	.word	0x0801b3f4
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
	while(Millis<(millis+300)) {			//Wait 300ms
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
			sensors|=(1<<PRESSURE_HOSE);
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
 800c818:	48b2      	ldr	r0, [pc, #712]	; (800cae4 <main+0x550>)
 800c81a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c81e:	f7f5 fb05 	bl	8001e2c <init_buffer>
			Pressure_control=0;
 800c822:	2000      	movs	r0, #0
 800c824:	7028      	strb	r0, [r5, #0]
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
	while(Millis<(millis+300)) {			//Wait 300ms
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
			sensors|=(1<<PRESSURE_HOSE);
 800c826:	2601      	movs	r6, #1
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
			Pressure_control=0;
			break;				//Exit loop at this point
		}
	}
	Pressure_control=0;
 800c828:	2100      	movs	r1, #0
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
 800c82a:	4608      	mov	r0, r1
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
			Pressure_control=0;
			break;				//Exit loop at this point
		}
	}
	Pressure_control=0;
 800c82c:	7029      	strb	r1, [r5, #0]
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
 800c82e:	f000 faeb 	bl	800ce08 <Set_Motor>
	//Detect if there is a temperature sensor connected
	if(Completed_Jobs&(1<<TMP102_CONFIG))
 800c832:	48ad      	ldr	r0, [pc, #692]	; (800cae8 <main+0x554>)
	Delay(100000);					//Sensor+inst amplifier takes about 100ms to stabilise after power on
	ADC_Configuration();				//We leave this a bit later to allow stabilisation
	calibrate_sensor();				//Calibrate the offset on the diff pressure sensor
	EXTI_ONOFF_EN();				//Enable the off interrupt - allow some time for debouncing
	I2C_Config();					//Setup the I2C bus
	Sensors=detect_sensors();			//Search for connected sensors
 800c834:	f8df 9308 	ldr.w	r9, [pc, #776]	; 800cb40 <main+0x5ac>
		}
	}
	Pressure_control=0;
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
	//Detect if there is a temperature sensor connected
	if(Completed_Jobs&(1<<TMP102_CONFIG))
 800c838:	6803      	ldr	r3, [r0, #0]
		sensors|=(1<<TEMPERATURE_SENSOR);	//The I2C job completion means the sensor must be working
	init_buffer(&Temperatures_Buffer,TMP102_BUFFER_SIZE);
 800c83a:	f44f 7180 	mov.w	r1, #256	; 0x100
		}
	}
	Pressure_control=0;
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
	//Detect if there is a temperature sensor connected
	if(Completed_Jobs&(1<<TMP102_CONFIG))
 800c83e:	f013 0f02 	tst.w	r3, #2
		sensors|=(1<<TEMPERATURE_SENSOR);	//The I2C job completion means the sensor must be working
 800c842:	bf18      	it	ne
 800c844:	f046 0602 	orrne.w	r6, r6, #2
	init_buffer(&Temperatures_Buffer,TMP102_BUFFER_SIZE);
 800c848:	48a8      	ldr	r0, [pc, #672]	; (800caec <main+0x558>)
	calibrate_sensor();				//Calibrate the offset on the diff pressure sensor
	EXTI_ONOFF_EN();				//Enable the off interrupt - allow some time for debouncing
	I2C_Config();					//Setup the I2C bus
	Sensors=detect_sensors();			//Search for connected sensors
	Pressure_control=Sensors&PRESSURE_HOSE;		//Enable active pressure control if a hose is connected
	pressure_setpoint=0;				//Not applied pressure, should cause motor and solenoid to go to idle state
 800c84a:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 800cb44 <main+0x5b0>
	Pressure_control=0;
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
	//Detect if there is a temperature sensor connected
	if(Completed_Jobs&(1<<TMP102_CONFIG))
		sensors|=(1<<TEMPERATURE_SENSOR);	//The I2C job completion means the sensor must be working
	init_buffer(&Temperatures_Buffer,TMP102_BUFFER_SIZE);
 800c84e:	f7f5 faed 	bl	8001e2c <init_buffer>
	Delay(100000);					//Sensor+inst amplifier takes about 100ms to stabilise after power on
	ADC_Configuration();				//We leave this a bit later to allow stabilisation
	calibrate_sensor();				//Calibrate the offset on the diff pressure sensor
	EXTI_ONOFF_EN();				//Enable the off interrupt - allow some time for debouncing
	I2C_Config();					//Setup the I2C bus
	Sensors=detect_sensors();			//Search for connected sensors
 800c852:	f889 6000 	strb.w	r6, [r9]
	Pressure_control=Sensors&PRESSURE_HOSE;		//Enable active pressure control if a hose is connected
	pressure_setpoint=0;				//Not applied pressure, should cause motor and solenoid to go to idle state
 800c856:	2200      	movs	r2, #0
	ADC_Configuration();				//We leave this a bit later to allow stabilisation
	calibrate_sensor();				//Calibrate the offset on the diff pressure sensor
	EXTI_ONOFF_EN();				//Enable the off interrupt - allow some time for debouncing
	I2C_Config();					//Setup the I2C bus
	Sensors=detect_sensors();			//Search for connected sensors
	Pressure_control=Sensors&PRESSURE_HOSE;		//Enable active pressure control if a hose is connected
 800c858:	2600      	movs	r6, #0
 800c85a:	f899 3000 	ldrb.w	r3, [r9]
 800c85e:	702e      	strb	r6, [r5, #0]
	pressure_setpoint=0;				//Not applied pressure, should cause motor and solenoid to go to idle state
 800c860:	f8cb 2000 	str.w	r2, [fp]
	PPG_Automatic_Brightness_Control();		//Run the automatic brightness setting on power on
 800c864:	f7f3 fdb6 	bl	80003d4 <PPG_Automatic_Brightness_Control>
	rtc_gettime(&RTC_time);				//Get the RTC time and put a timestamp on the start of the file
 800c868:	4620      	mov	r0, r4
 800c86a:	f7fb fe73 	bl	8008554 <rtc_gettime>
	printf("%d-%d-%dT%d:%d:%d\n",RTC_time.year,RTC_time.month,RTC_time.mday,RTC_time.hour,RTC_time.min,RTC_time.sec);//ISO 8601 timestamp header
 800c86e:	f89d 401f 	ldrb.w	r4, [sp, #31]
 800c872:	f89d 501d 	ldrb.w	r5, [sp, #29]
 800c876:	f89d e01e 	ldrb.w	lr, [sp, #30]
 800c87a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800c87e:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800c882:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c886:	489a      	ldr	r0, [pc, #616]	; (800caf0 <main+0x55c>)
 800c888:	9402      	str	r4, [sp, #8]
 800c88a:	9500      	str	r5, [sp, #0]
 800c88c:	f8cd e004 	str.w	lr, [sp, #4]
 800c890:	f7fd fd62 	bl	800a358 <rprintf2RamRom>
	if(file_opened) {
 800c894:	f89a 4230 	ldrb.w	r4, [sl, #560]	; 0x230
 800c898:	2c00      	cmp	r4, #0
 800c89a:	f040 80ba 	bne.w	800ca12 <main+0x47e>
 800c89e:	4e95      	ldr	r6, [pc, #596]	; (800caf4 <main+0x560>)
 800c8a0:	9605      	str	r6, [sp, #20]
		f_puts(print_string,&FATFS_logfile);
		print_string[0]=0x00;			//Set string length to 0
	}
	Millis=0;					//Reset system uptime, we have 50 days before overflow
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	4c94      	ldr	r4, [pc, #592]	; (800caf8 <main+0x564>)
 800c8a6:	4e8f      	ldr	r6, [pc, #572]	; (800cae4 <main+0x550>)
 800c8a8:	4d90      	ldr	r5, [pc, #576]	; (800caec <main+0x558>)
 800c8aa:	f8c8 2000 	str.w	r2, [r8]
	while (1) {
		Watchdog_Reset();			//Reset the watchdog each main loop iteration
 800c8ae:	f001 fac1 	bl	800de34 <IWDG_ReloadCounter>
		while(!bytes_in_buff(&(Buff[0])));	//Wait for some PPG data
 800c8b2:	8820      	ldrh	r0, [r4, #0]
 800c8b4:	8863      	ldrh	r3, [r4, #2]
 800c8b6:	fa1f fc80 	uxth.w	ip, r0
 800c8ba:	fa1f fe83 	uxth.w	lr, r3
 800c8be:	45f4      	cmp	ip, lr
 800c8c0:	d0f7      	beq.n	800c8b2 <main+0x31e>
		Get_From_Buffer(&(ppg[0]),&(Buff[0]));	//Retrive one sample of PPG
 800c8c2:	498d      	ldr	r1, [pc, #564]	; (800caf8 <main+0x564>)
 800c8c4:	a809      	add	r0, sp, #36	; 0x24
 800c8c6:	f7f5 fa99 	bl	8001dfc <Get_From_Buffer>
		Get_From_Buffer(&(ppg[1]),&(Buff[1]));	
 800c8ca:	aa09      	add	r2, sp, #36	; 0x24
 800c8cc:	1d10      	adds	r0, r2, #4
 800c8ce:	498b      	ldr	r1, [pc, #556]	; (800cafc <main+0x568>)
 800c8d0:	f7f5 fa94 	bl	8001dfc <Get_From_Buffer>
		printf("%3f,%lu,%lu",(float)(data_counter++)/PPG_SAMPLE_RATE,ppg[0],ppg[1]);//Print data after a time stamp (not Millis)
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	f006 f9ed 	bl	8012cb4 <__aeabi_ui2f>
 800c8da:	4989      	ldr	r1, [pc, #548]	; (800cb00 <main+0x56c>)
 800c8dc:	f006 faf6 	bl	8012ecc <__aeabi_fdiv>
 800c8e0:	f005 fdac 	bl	801243c <__aeabi_f2d>
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	9100      	str	r1, [sp, #0]
 800c8ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c8ee:	4885      	ldr	r0, [pc, #532]	; (800cb04 <main+0x570>)
 800c8f0:	9101      	str	r1, [sp, #4]
 800c8f2:	f7fd fd31 	bl	800a358 <rprintf2RamRom>
		if(Sensors&(1<<PRESSURE_HOSE)) {	//Air hose connected
 800c8f6:	f899 1000 	ldrb.w	r1, [r9]
 800c8fa:	f011 0f01 	tst.w	r1, #1
 800c8fe:	d136      	bne.n	800c96e <main+0x3da>
			do {
				Get_From_Buffer(&sensor_data,&Pressures_Buffer);
			} while(bytes_in_buff(&Pressures_Buffer));//The aquisition will often be running faster than this loop, so dump the unused data
			printf(",%2f",sensor_data);	//print the retreived data
		}
		if(Sensors&(1<<TEMPERATURE_SENSOR)) {	//If there is a temperature sensor present
 800c900:	f899 e000 	ldrb.w	lr, [r9]
 800c904:	f01e 0f02 	tst.w	lr, #2
 800c908:	d149      	bne.n	800c99e <main+0x40a>
				Get_From_Buffer(&sensor_data,&Temperatures_Buffer);
			} while(bytes_in_buff(&Temperatures_Buffer));//The aquisition will often be running faster than this loop, so dump the unused data
			printf(",%2f",sensor_data);	//print the retreived data
		}
		//Other sensors etc can go here
		printf("\n");				//Terminating newline
 800c90a:	487f      	ldr	r0, [pc, #508]	; (800cb08 <main+0x574>)
 800c90c:	f7fd fd24 	bl	800a358 <rprintf2RamRom>
		if(file_opened) {
 800c910:	f89a 1230 	ldrb.w	r1, [sl, #560]	; 0x230
 800c914:	2900      	cmp	r1, #0
 800c916:	d15c      	bne.n	800c9d2 <main+0x43e>
			f_puts(print_string,&FATFS_logfile);
			print_string[0]=0x00;		//Set string length to 0
		}
		if(Millis%1000>500)			//1Hz on/off flashing
 800c918:	f8d8 0000 	ldr.w	r0, [r8]
 800c91c:	4b7b      	ldr	r3, [pc, #492]	; (800cb0c <main+0x578>)
 800c91e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800c922:	fba3 1200 	umull	r1, r2, r3, r0
 800c926:	0991      	lsrs	r1, r2, #6
 800c928:	fb0c 0e11 	mls	lr, ip, r1, r0
 800c92c:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 800c930:	d963      	bls.n	800c9fa <main+0x466>
			switch_leds_on();		//Flash the LED(s)
 800c932:	f7fe fe33 	bl	800b59c <switch_leds_on>
		else
			switch_leds_off();
		if(Millis%15000>4000)			//15 second cycle of pressure control - 11s dump, 4s pump to 3psi
 800c936:	f8d8 3000 	ldr.w	r3, [r8]
 800c93a:	4875      	ldr	r0, [pc, #468]	; (800cb10 <main+0x57c>)
 800c93c:	f643 2c98 	movw	ip, #15000	; 0x3a98
 800c940:	fba0 1203 	umull	r1, r2, r0, r3
 800c944:	0b10      	lsrs	r0, r2, #12
 800c946:	fb0c 3110 	mls	r1, ip, r0, r3
 800c94a:	f5b1 6f7a 	cmp.w	r1, #4000	; 0xfa0
			pressure_setpoint=-1;
 800c94e:	bf8a      	itet	hi
 800c950:	4970      	ldrhi	r1, [pc, #448]	; (800cb14 <main+0x580>)
		else
			pressure_setpoint=3;
 800c952:	4871      	ldrls	r0, [pc, #452]	; (800cb18 <main+0x584>)
		if(Millis%1000>500)			//1Hz on/off flashing
			switch_leds_on();		//Flash the LED(s)
		else
			switch_leds_off();
		if(Millis%15000>4000)			//15 second cycle of pressure control - 11s dump, 4s pump to 3psi
			pressure_setpoint=-1;
 800c954:	f8cb 1000 	strhi.w	r1, [fp]
		else
			pressure_setpoint=3;
		if(System_state_Global&0x80) {		//A "control" button press
 800c958:	4970      	ldr	r1, [pc, #448]	; (800cb1c <main+0x588>)
		else
			switch_leds_off();
		if(Millis%15000>4000)			//15 second cycle of pressure control - 11s dump, 4s pump to 3psi
			pressure_setpoint=-1;
		else
			pressure_setpoint=3;
 800c95a:	bf98      	it	ls
 800c95c:	f8cb 0000 	strls.w	r0, [fp]
		if(System_state_Global&0x80) {		//A "control" button press
 800c960:	f891 e000 	ldrb.w	lr, [r1]
 800c964:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800c968:	d14a      	bne.n	800ca00 <main+0x46c>
	while (1) {
		Watchdog_Reset();			//Reset the watchdog each main loop iteration
		while(!bytes_in_buff(&(Buff[0])));	//Wait for some PPG data
		Get_From_Buffer(&(ppg[0]),&(Buff[0]));	//Retrive one sample of PPG
		Get_From_Buffer(&(ppg[1]),&(Buff[1]));	
		printf("%3f,%lu,%lu",(float)(data_counter++)/PPG_SAMPLE_RATE,ppg[0],ppg[1]);//Print data after a time stamp (not Millis)
 800c96a:	3701      	adds	r7, #1
 800c96c:	e79f      	b.n	800c8ae <main+0x31a>
		if(Sensors&(1<<PRESSURE_HOSE)) {	//Air hose connected
			do {
				Get_From_Buffer(&sensor_data,&Pressures_Buffer);
 800c96e:	495d      	ldr	r1, [pc, #372]	; (800cae4 <main+0x550>)
 800c970:	a80b      	add	r0, sp, #44	; 0x2c
 800c972:	f7f5 fa43 	bl	8001dfc <Get_From_Buffer>
			} while(bytes_in_buff(&Pressures_Buffer));//The aquisition will often be running faster than this loop, so dump the unused data
 800c976:	8831      	ldrh	r1, [r6, #0]
 800c978:	8870      	ldrh	r0, [r6, #2]
 800c97a:	fa1f fc81 	uxth.w	ip, r1
 800c97e:	b283      	uxth	r3, r0
 800c980:	459c      	cmp	ip, r3
 800c982:	d1f4      	bne.n	800c96e <main+0x3da>
			printf(",%2f",sensor_data);	//print the retreived data
 800c984:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c986:	f005 fd59 	bl	801243c <__aeabi_f2d>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4864      	ldr	r0, [pc, #400]	; (800cb20 <main+0x58c>)
 800c990:	f7fd fce2 	bl	800a358 <rprintf2RamRom>
		}
		if(Sensors&(1<<TEMPERATURE_SENSOR)) {	//If there is a temperature sensor present
 800c994:	f899 e000 	ldrb.w	lr, [r9]
 800c998:	f01e 0f02 	tst.w	lr, #2
 800c99c:	d0b5      	beq.n	800c90a <main+0x376>
			do {
				Get_From_Buffer(&sensor_data,&Temperatures_Buffer);
 800c99e:	a80b      	add	r0, sp, #44	; 0x2c
 800c9a0:	4952      	ldr	r1, [pc, #328]	; (800caec <main+0x558>)
 800c9a2:	f7f5 fa2b 	bl	8001dfc <Get_From_Buffer>
			} while(bytes_in_buff(&Temperatures_Buffer));//The aquisition will often be running faster than this loop, so dump the unused data
 800c9a6:	8828      	ldrh	r0, [r5, #0]
 800c9a8:	886b      	ldrh	r3, [r5, #2]
 800c9aa:	b282      	uxth	r2, r0
 800c9ac:	fa1f fc83 	uxth.w	ip, r3
 800c9b0:	4562      	cmp	r2, ip
 800c9b2:	d1f4      	bne.n	800c99e <main+0x40a>
			printf(",%2f",sensor_data);	//print the retreived data
 800c9b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c9b6:	f005 fd41 	bl	801243c <__aeabi_f2d>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4858      	ldr	r0, [pc, #352]	; (800cb20 <main+0x58c>)
 800c9c0:	f7fd fcca 	bl	800a358 <rprintf2RamRom>
		}
		//Other sensors etc can go here
		printf("\n");				//Terminating newline
 800c9c4:	4850      	ldr	r0, [pc, #320]	; (800cb08 <main+0x574>)
 800c9c6:	f7fd fcc7 	bl	800a358 <rprintf2RamRom>
		if(file_opened) {
 800c9ca:	f89a 1230 	ldrb.w	r1, [sl, #560]	; 0x230
 800c9ce:	2900      	cmp	r1, #0
 800c9d0:	d0a2      	beq.n	800c918 <main+0x384>
			f_puts(print_string,&FATFS_logfile);
 800c9d2:	4954      	ldr	r1, [pc, #336]	; (800cb24 <main+0x590>)
 800c9d4:	4847      	ldr	r0, [pc, #284]	; (800caf4 <main+0x560>)
 800c9d6:	f7fa ffbb 	bl	8007950 <f_puts>
			print_string[0]=0x00;		//Set string length to 0
 800c9da:	9a05      	ldr	r2, [sp, #20]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	7013      	strb	r3, [r2, #0]
		}
		if(Millis%1000>500)			//1Hz on/off flashing
 800c9e0:	f8d8 0000 	ldr.w	r0, [r8]
 800c9e4:	4b49      	ldr	r3, [pc, #292]	; (800cb0c <main+0x578>)
 800c9e6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800c9ea:	fba3 1200 	umull	r1, r2, r3, r0
 800c9ee:	0991      	lsrs	r1, r2, #6
 800c9f0:	fb0c 0e11 	mls	lr, ip, r1, r0
 800c9f4:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 800c9f8:	d89b      	bhi.n	800c932 <main+0x39e>
			switch_leds_on();		//Flash the LED(s)
		else
			switch_leds_off();
 800c9fa:	f7fe fde3 	bl	800b5c4 <switch_leds_off>
 800c9fe:	e79a      	b.n	800c936 <main+0x3a2>
		if(Millis%15000>4000)			//15 second cycle of pressure control - 11s dump, 4s pump to 3psi
			pressure_setpoint=-1;
		else
			pressure_setpoint=3;
		if(System_state_Global&0x80) {		//A "control" button press
			System_state_Global&=~0x80;	//Wipe the flag bit to show this has been processed
 800ca00:	780b      	ldrb	r3, [r1, #0]
	while (1) {
		Watchdog_Reset();			//Reset the watchdog each main loop iteration
		while(!bytes_in_buff(&(Buff[0])));	//Wait for some PPG data
		Get_From_Buffer(&(ppg[0]),&(Buff[0]));	//Retrive one sample of PPG
		Get_From_Buffer(&(ppg[1]),&(Buff[1]));	
		printf("%3f,%lu,%lu",(float)(data_counter++)/PPG_SAMPLE_RATE,ppg[0],ppg[1]);//Print data after a time stamp (not Millis)
 800ca02:	3701      	adds	r7, #1
		if(Millis%15000>4000)			//15 second cycle of pressure control - 11s dump, 4s pump to 3psi
			pressure_setpoint=-1;
		else
			pressure_setpoint=3;
		if(System_state_Global&0x80) {		//A "control" button press
			System_state_Global&=~0x80;	//Wipe the flag bit to show this has been processed
 800ca04:	f003 0e7f 	and.w	lr, r3, #127	; 0x7f
 800ca08:	f881 e000 	strb.w	lr, [r1]
			PPG_Automatic_Brightness_Control();//At the moment this is the only function implimented
 800ca0c:	f7f3 fce2 	bl	80003d4 <PPG_Automatic_Brightness_Control>
 800ca10:	e74d      	b.n	800c8ae <main+0x31a>
	pressure_setpoint=0;				//Not applied pressure, should cause motor and solenoid to go to idle state
	PPG_Automatic_Brightness_Control();		//Run the automatic brightness setting on power on
	rtc_gettime(&RTC_time);				//Get the RTC time and put a timestamp on the start of the file
	printf("%d-%d-%dT%d:%d:%d\n",RTC_time.year,RTC_time.month,RTC_time.mday,RTC_time.hour,RTC_time.min,RTC_time.sec);//ISO 8601 timestamp header
	if(file_opened) {
		f_puts(print_string,&FATFS_logfile);
 800ca12:	4d38      	ldr	r5, [pc, #224]	; (800caf4 <main+0x560>)
 800ca14:	4943      	ldr	r1, [pc, #268]	; (800cb24 <main+0x590>)
 800ca16:	4628      	mov	r0, r5
 800ca18:	9505      	str	r5, [sp, #20]
 800ca1a:	f7fa ff99 	bl	8007950 <f_puts>
		print_string[0]=0x00;			//Set string length to 0
 800ca1e:	9c05      	ldr	r4, [sp, #20]
 800ca20:	7026      	strb	r6, [r4, #0]
 800ca22:	e73e      	b.n	800c8a2 <main+0x30e>
		a=Set_System();				//This actually just inits the storage layer - returns 0 for success
		//a|=init_function();			//Other init functions
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
 800ca24:	4c40      	ldr	r4, [pc, #256]	; (800cb28 <main+0x594>)
 800ca26:	4841      	ldr	r0, [pc, #260]	; (800cb2c <main+0x598>)
 800ca28:	4621      	mov	r1, r4
 800ca2a:	f7fa f885 	bl	8006b38 <f_stat>
 800ca2e:	b908      	cbnz	r0, 800ca34 <main+0x4a0>
					if(!FATFS_info.fsize) {//Empty file
 800ca30:	6826      	ldr	r6, [r4, #0]
 800ca32:	b1ae      	cbz	r6, 800ca60 <main+0x4cc>
 800ca34:	ac06      	add	r4, sp, #24
						rprintfInit(__fat_print_char);//printf to the open file
						printf("RTC set to %d/%d/%d %d:%d:%d\n",RTC_time.mday,RTC_time.month,RTC_time.year,\
						RTC_time.hour,RTC_time.min,RTC_time.sec);
					}				
				}
				f_close(&FATFS_logfile);//Close the time.txt file
 800ca36:	483b      	ldr	r0, [pc, #236]	; (800cb24 <main+0x590>)
 800ca38:	f7f9 ff20 	bl	800687c <f_close>
 800ca3c:	e63f      	b.n	800c6be <main+0x12a>
						Usart_Send_Str((char*)"Seek error\r\n");
					else
						rprintfInit(__str_print_char);//Printf to the logfile
				}
				if(f_err_code)
					f_close(&FATFS_logfile);//Close the already opened file on error
 800ca3e:	4839      	ldr	r0, [pc, #228]	; (800cb24 <main+0x590>)
 800ca40:	f7f9 ff1c 	bl	800687c <f_close>
 800ca44:	f8df a100 	ldr.w	sl, [pc, #256]	; 800cb48 <main+0x5b4>
 800ca48:	e5e3      	b.n	800c612 <main+0x7e>
			else {				//We have a mounted card
				f_err_code=f_lseek(&FATFS_logfile, PRE_SIZE);// Pre-allocate clusters
				if (f_err_code || f_tell(&FATFS_logfile) != PRE_SIZE)// Check if the file size has been increased correctly
					Usart_Send_Str((char*)"Pre-Allocation error\r\n");
				else {
					if((f_err_code=f_lseek(&FATFS_logfile, 0)))//Seek back to start of file to start writing
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7f9 ff1e 	bl	800688c <f_lseek>
 800ca50:	f889 0000 	strb.w	r0, [r9]
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d040      	beq.n	800cada <main+0x546>
						Usart_Send_Str((char*)"Seek error\r\n");
 800ca58:	4835      	ldr	r0, [pc, #212]	; (800cb30 <main+0x59c>)
 800ca5a:	f000 fa5d 	bl	800cf18 <Usart_Send_Str>
 800ca5e:	e698      	b.n	800c792 <main+0x1fe>
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
 800ca60:	f8b4 e004 	ldrh.w	lr, [r4, #4]
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
						RTC_time.mday=FATFS_info.fdate&0x001F;
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
 800ca64:	88e2      	ldrh	r2, [r4, #6]
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
 800ca66:	ea4f 245e 	mov.w	r4, lr, lsr #9
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
						RTC_time.mday=FATFS_info.fdate&0x001F;
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
						RTC_time.min=(FATFS_info.ftime>>5)&0x003F;
 800ca6a:	0951      	lsrs	r1, r2, #5
						RTC_time.sec=(FATFS_info.ftime<<1)&0x003E;
 800ca6c:	0050      	lsls	r0, r2, #1
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
 800ca6e:	ea4f 195e 	mov.w	r9, lr, lsr #5
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
 800ca72:	f504 63f6 	add.w	r3, r4, #1968	; 0x7b0
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
						RTC_time.mday=FATFS_info.fdate&0x001F;
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
						RTC_time.min=(FATFS_info.ftime>>5)&0x003F;
						RTC_time.sec=(FATFS_info.ftime<<1)&0x003E;
						rtc_settime(&RTC_time);
 800ca76:	ac06      	add	r4, sp, #24
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
						RTC_time.mday=FATFS_info.fdate&0x001F;
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
 800ca78:	0ad6      	lsrs	r6, r2, #11
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
 800ca7a:	330c      	adds	r3, #12
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
 800ca7c:	f009 0c0f 	and.w	ip, r9, #15
						RTC_time.mday=FATFS_info.fdate&0x001F;
 800ca80:	f00e 0b1f 	and.w	fp, lr, #31
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
						RTC_time.min=(FATFS_info.ftime>>5)&0x003F;
 800ca84:	f001 0a3f 	and.w	sl, r1, #63	; 0x3f
						RTC_time.sec=(FATFS_info.ftime<<1)&0x003E;
 800ca88:	f000 093e 	and.w	r9, r0, #62	; 0x3e
						rtc_settime(&RTC_time);
 800ca8c:	4620      	mov	r0, r4
		if((f_err_code = f_mount(0, &FATFS_Obj)))Usart_Send_Str((char*)"FatFs mount error\r\n");//This should only error if internal error
		else {					//FATFS initialised ok, try init the card, this also sets up the SPI1
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
 800ca8e:	f8ad 3018 	strh.w	r3, [sp, #24]
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
 800ca92:	f88d c01a 	strb.w	ip, [sp, #26]
						RTC_time.mday=FATFS_info.fdate&0x001F;
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
 800ca96:	f88d 601d 	strb.w	r6, [sp, #29]
			if(!f_open(&FATFS_logfile,"time.txt",FA_OPEN_EXISTING | FA_READ | FA_WRITE)) {//Try and open a time file to get the system time
				if(!f_stat((const TCHAR *)"time.txt",&FATFS_info)) {//Get file info
					if(!FATFS_info.fsize) {//Empty file
						RTC_time.year=(FATFS_info.fdate>>9)+1980;//populate the time struct (FAT start==1980, RTC.year==0)
						RTC_time.month=(FATFS_info.fdate>>5)&0x000F;
						RTC_time.mday=FATFS_info.fdate&0x001F;
 800ca9a:	f88d b01b 	strb.w	fp, [sp, #27]
						RTC_time.hour=(FATFS_info.ftime>>11)&0x001F;
						RTC_time.min=(FATFS_info.ftime>>5)&0x003F;
 800ca9e:	f88d a01e 	strb.w	sl, [sp, #30]
						RTC_time.sec=(FATFS_info.ftime<<1)&0x003E;
 800caa2:	f88d 901f 	strb.w	r9, [sp, #31]
						rtc_settime(&RTC_time);
 800caa6:	f7fb fe27 	bl	80086f8 <rtc_settime>
						rprintfInit(__fat_print_char);//printf to the open file
 800caaa:	4822      	ldr	r0, [pc, #136]	; (800cb34 <main+0x5a0>)
 800caac:	f7fc ff68 	bl	8009980 <rprintfInit>
						printf("RTC set to %d/%d/%d %d:%d:%d\n",RTC_time.mday,RTC_time.month,RTC_time.year,\
 800cab0:	f89d c01d 	ldrb.w	ip, [sp, #29]
 800cab4:	f89d e01e 	ldrb.w	lr, [sp, #30]
 800cab8:	f89d 601f 	ldrb.w	r6, [sp, #31]
 800cabc:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800cac0:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800cac4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800cac8:	481b      	ldr	r0, [pc, #108]	; (800cb38 <main+0x5a4>)
 800caca:	f8cd c000 	str.w	ip, [sp]
 800cace:	f8cd e004 	str.w	lr, [sp, #4]
 800cad2:	9602      	str	r6, [sp, #8]
 800cad4:	f7fd fc40 	bl	800a358 <rprintf2RamRom>
 800cad8:	e7ad      	b.n	800ca36 <main+0x4a2>
					Usart_Send_Str((char*)"Pre-Allocation error\r\n");
				else {
					if((f_err_code=f_lseek(&FATFS_logfile, 0)))//Seek back to start of file to start writing
						Usart_Send_Str((char*)"Seek error\r\n");
					else
						rprintfInit(__str_print_char);//Printf to the logfile
 800cada:	4818      	ldr	r0, [pc, #96]	; (800cb3c <main+0x5a8>)
 800cadc:	f7fc ff50 	bl	8009980 <rprintfInit>
 800cae0:	e657      	b.n	800c792 <main+0x1fe>
 800cae2:	bf00      	nop
 800cae4:	20000b7c 	.word	0x20000b7c
 800cae8:	20000b14 	.word	0x20000b14
 800caec:	20000b20 	.word	0x20000b20
 800caf0:	0801b41c 	.word	0x0801b41c
 800caf4:	20000b88 	.word	0x20000b88
 800caf8:	20000b38 	.word	0x20000b38
 800cafc:	20000b44 	.word	0x20000b44
 800cb00:	42780419 	.word	0x42780419
 800cb04:	0801b430 	.word	0x0801b430
 800cb08:	0801b458 	.word	0x0801b458
 800cb0c:	10624dd3 	.word	0x10624dd3
 800cb10:	45e7b273 	.word	0x45e7b273
 800cb14:	bf800000 	.word	0xbf800000
 800cb18:	40400000 	.word	0x40400000
 800cb1c:	20000b50 	.word	0x20000b50
 800cb20:	0801b43c 	.word	0x0801b43c
 800cb24:	20000c90 	.word	0x20000c90
 800cb28:	20000b5c 	.word	0x20000b5c
 800cb2c:	0801b38c 	.word	0x0801b38c
 800cb30:	0801b40c 	.word	0x0801b40c
 800cb34:	0800c575 	.word	0x0800c575
 800cb38:	0801b398 	.word	0x0801b398
 800cb3c:	0800c549 	.word	0x0800c549
 800cb40:	20000b58 	.word	0x20000b58
 800cb44:	20000b2c 	.word	0x20000b2c
 800cb48:	200007dc 	.word	0x200007dc

0800cb4c <detect_sensors>:
/**
  * @brief  Detects which sensors are plugged in, inits buffers for attached peripheral sensors
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800cb4e:	4e22      	ldr	r6, [pc, #136]	; (800cbd8 <detect_sensors+0x8c>)
  * @brief  Detects which sensors are plugged in, inits buffers for attached peripheral sensors
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
 800cb50:	4c22      	ldr	r4, [pc, #136]	; (800cbdc <detect_sensors+0x90>)
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800cb52:	2001      	movs	r0, #1
  * @brief  Detects which sensors are plugged in, inits buffers for attached peripheral sensors
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
 800cb54:	6825      	ldr	r5, [r4, #0]
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800cb56:	f7ff f827 	bl	800bba8 <I2C1_Request_Job>
 800cb5a:	6832      	ldr	r2, [r6, #0]
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
 800cb5c:	4f20      	ldr	r7, [pc, #128]	; (800cbe0 <detect_sensors+0x94>)
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
 800cb5e:	6032      	str	r2, [r6, #0]
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
 800cb60:	7839      	ldrb	r1, [r7, #0]
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
 800cb62:	f240 20ff 	movw	r0, #767	; 0x2ff
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
 800cb66:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800cb6a:	703b      	strb	r3, [r7, #0]
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
 800cb6c:	f505 7596 	add.w	r5, r5, #300	; 0x12c
	while(Millis<(millis+300)) {			//Wait 300ms
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
 800cb70:	4e1c      	ldr	r6, [pc, #112]	; (800cbe4 <detect_sensors+0x98>)
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
 800cb72:	f000 f949 	bl	800ce08 <Set_Motor>
	while(Millis<(millis+300)) {			//Wait 300ms
 800cb76:	e008      	b.n	800cb8a <detect_sensors+0x3e>
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
 800cb78:	6830      	ldr	r0, [r6, #0]
 800cb7a:	f005 fc5f 	bl	801243c <__aeabi_f2d>
 800cb7e:	a314      	add	r3, pc, #80	; (adr r3, 800cbd0 <detect_sensors+0x84>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f005 ff3e 	bl	8012a04 <__aeabi_dcmpgt>
 800cb88:	b9b0      	cbnz	r0, 800cbb8 <detect_sensors+0x6c>
	uint8_t sensors=0;
	SCHEDULE_CONFIG;				//Run the I2C devices config
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
	while(Millis<(millis+300)) {			//Wait 300ms
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	42ab      	cmp	r3, r5
 800cb8e:	d3f3      	bcc.n	800cb78 <detect_sensors+0x2c>
  * @param  None
  * @retval Bitmask of detected sensors
  */
uint8_t detect_sensors(void) {
	uint32_t millis=Millis;				//Store the time on entry
	uint8_t sensors=0;
 800cb90:	2400      	movs	r4, #0
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
			Pressure_control=0;
			break;				//Exit loop at this point
		}
	}
	Pressure_control=0;
 800cb92:	2300      	movs	r3, #0
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
 800cb94:	4618      	mov	r0, r3
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
			Pressure_control=0;
			break;				//Exit loop at this point
		}
	}
	Pressure_control=0;
 800cb96:	703b      	strb	r3, [r7, #0]
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
 800cb98:	f000 f936 	bl	800ce08 <Set_Motor>
	//Detect if there is a temperature sensor connected
	if(Completed_Jobs&(1<<TMP102_CONFIG))
 800cb9c:	4a12      	ldr	r2, [pc, #72]	; (800cbe8 <detect_sensors+0x9c>)
		sensors|=(1<<TEMPERATURE_SENSOR);	//The I2C job completion means the sensor must be working
	init_buffer(&Temperatures_Buffer,TMP102_BUFFER_SIZE);
 800cb9e:	4813      	ldr	r0, [pc, #76]	; (800cbec <detect_sensors+0xa0>)
		}
	}
	Pressure_control=0;
	Set_Motor((int16_t)0);				//Set the motor and solenoid off
	//Detect if there is a temperature sensor connected
	if(Completed_Jobs&(1<<TMP102_CONFIG))
 800cba0:	6811      	ldr	r1, [r2, #0]
 800cba2:	f011 0f02 	tst.w	r1, #2
		sensors|=(1<<TEMPERATURE_SENSOR);	//The I2C job completion means the sensor must be working
 800cba6:	bf18      	it	ne
 800cba8:	f044 0402 	orrne.w	r4, r4, #2
	init_buffer(&Temperatures_Buffer,TMP102_BUFFER_SIZE);
 800cbac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbb0:	f7f5 f93c 	bl	8001e2c <init_buffer>
	//Other sensors, e.g. Temperature sensor/sensors on the I2C bus go here
	return sensors;
}
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
	while(Millis<(millis+300)) {			//Wait 300ms
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
			sensors|=(1<<PRESSURE_HOSE);
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
 800cbb8:	480d      	ldr	r0, [pc, #52]	; (800cbf0 <detect_sensors+0xa4>)
 800cbba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbbe:	f7f5 f935 	bl	8001e2c <init_buffer>
			Pressure_control=0;
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	7038      	strb	r0, [r7, #0]
	//Detect if there is an air hose connected
	Pressure_control|=0x80;				//Set msb - indicates motor is free to run
	Set_Motor((int16_t)(MAX_DUTY)/2);		//Set the motor to 50% max duty cycle
	while(Millis<(millis+300)) {			//Wait 300ms
		if(reported_pressure>PRESSURE_MARGIN) {	//We got some sane pressure increase
			sensors|=(1<<PRESSURE_HOSE);
 800cbc6:	2401      	movs	r4, #1
			init_buffer(&Pressures_Buffer,TMP102_BUFFER_SIZE);//reuse the TMP102 buffer size - as we want the same amount of buffering
			Pressure_control=0;
			break;				//Exit loop at this point
 800cbc8:	e7e3      	b.n	800cb92 <detect_sensors+0x46>
 800cbca:	bf00      	nop
 800cbcc:	f3af 8000 	nop.w
 800cbd0:	33333333 	.word	0x33333333
 800cbd4:	3fd33333 	.word	0x3fd33333
 800cbd8:	20000b10 	.word	0x20000b10
 800cbdc:	20000b54 	.word	0x20000b54
 800cbe0:	20000b1c 	.word	0x20000b1c
 800cbe4:	20000c8c 	.word	0x20000c8c
 800cbe8:	20000b14 	.word	0x20000b14
 800cbec:	20000b20 	.word	0x20000b20
 800cbf0:	20000b7c 	.word	0x20000b7c
 800cbf4:	f3af 8000 	nop.w

0800cbf8 <setuppwr>:
#include "pwr.h"

void setuppwr() {
 800cbf8:	b510      	push	{r4, lr}
	PWR_DeInit();
 800cbfa:	f001 f937 	bl	800de6c <PWR_DeInit>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR,ENABLE);//clk to the pwr control
 800cbfe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800cc02:	2101      	movs	r1, #1
}
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "pwr.h"

void setuppwr() {
	PWR_DeInit();
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR,ENABLE);//clk to the pwr control
 800cc08:	f001 bacc 	b.w	800e1a4 <RCC_APB1PeriphClockCmd>

0800cc0c <shutdown>:
}

void shutdown() {
 800cc0c:	b510      	push	{r4, lr}
	PWR_WakeUpPinCmd(ENABLE);			//enable the pin
 800cc0e:	2001      	movs	r0, #1
 800cc10:	f001 f94e 	bl	800deb0 <PWR_WakeUpPinCmd>
	PWR_EnterSTANDBYMode();				//only wakes on RTC signals or WKUP pin
}
 800cc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR,ENABLE);//clk to the pwr control
}

void shutdown() {
	PWR_WakeUpPinCmd(ENABLE);			//enable the pin
	PWR_EnterSTANDBYMode();				//only wakes on RTC signals or WKUP pin
 800cc18:	f001 b966 	b.w	800dee8 <PWR_EnterSTANDBYMode>

0800cc1c <disable_pin>:
}

void disable_pin() {
	PWR_WakeUpPinCmd(DISABLE);			//disable the pin
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	f001 b947 	b.w	800deb0 <PWR_WakeUpPinCmd>
 800cc22:	bf00      	nop

0800cc24 <shutdown_filesystem>:
}

void shutdown_filesystem() {
 800cc24:	b570      	push	{r4, r5, r6, lr}
	char c[]="\r\nLogger turned off\r\n";
 800cc26:	4c0e      	ldr	r4, [pc, #56]	; (800cc60 <shutdown_filesystem+0x3c>)

void disable_pin() {
	PWR_WakeUpPinCmd(DISABLE);			//disable the pin
}

void shutdown_filesystem() {
 800cc28:	b086      	sub	sp, #24
	char c[]="\r\nLogger turned off\r\n";
 800cc2a:	466e      	mov	r6, sp
 800cc2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cc30:	e894 0003 	ldmia.w	r4, {r0, r1}
	uint8_t a;
	f_write(&FATFS_logfile,c,sizeof(c),&a);		//Write the error to the file
 800cc34:	4c0b      	ldr	r4, [pc, #44]	; (800cc64 <shutdown_filesystem+0x40>)
 800cc36:	2216      	movs	r2, #22
 800cc38:	f10d 0317 	add.w	r3, sp, #23
void disable_pin() {
	PWR_WakeUpPinCmd(DISABLE);			//disable the pin
}

void shutdown_filesystem() {
	char c[]="\r\nLogger turned off\r\n";
 800cc3c:	6030      	str	r0, [r6, #0]
 800cc3e:	f8ad 1014 	strh.w	r1, [sp, #20]
	uint8_t a;
	f_write(&FATFS_logfile,c,sizeof(c),&a);		//Write the error to the file
 800cc42:	4620      	mov	r0, r4
 800cc44:	4669      	mov	r1, sp
 800cc46:	f7f9 fb13 	bl	8006270 <f_write>
	f_sync(&FATFS_logfile);				//Flush buffers
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7f9 fd2a 	bl	80066a4 <f_sync>
	f_truncate(&FATFS_logfile);			//Truncate the lenght - fix pre allocation
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7fa f8c7 	bl	8006de4 <f_truncate>
	f_close(&FATFS_logfile);			//Close any opened file
 800cc56:	4620      	mov	r0, r4
 800cc58:	f7f9 fe10 	bl	800687c <f_close>
}
 800cc5c:	b006      	add	sp, #24
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
 800cc60:	0801b444 	.word	0x0801b444
 800cc64:	20000c90 	.word	0x20000c90

0800cc68 <setup_pwm>:
  * @brief  Configure the timer channels for PWM out on CRT board
  * @param  None
  * @retval None
  * This initialiser function assumes the clocks and gpio have been configured
  */
void setup_pwm(void) {
 800cc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6a:	b089      	sub	sp, #36	; 0x24
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
 800cc6c:	a801      	add	r0, sp, #4
                                                  = 4.5 MHz / 378
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
 800cc6e:	2400      	movs	r4, #0
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
 800cc70:	1d06      	adds	r6, r0, #4
                                                  = 4.5 MHz / 378
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
 800cc72:	a905      	add	r1, sp, #20
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
 800cc74:	f846 4b04 	str.w	r4, [r6], #4
                                                  = 4.5 MHz / 378
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
 800cc78:	1d0f      	adds	r7, r1, #4
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
  /*Enable the Tim2 clk*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800cc7a:	2001      	movs	r0, #1
                                                  = 4.5 MHz / 378
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
 800cc7c:	f847 4b04 	str.w	r4, [r7], #4
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
 800cc80:	f846 4b04 	str.w	r4, [r6], #4
  /*Enable the Tim2 clk*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800cc84:	4601      	mov	r1, r0
                                                  = 4.5 MHz / 378
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
 800cc86:	803c      	strh	r4, [r7, #0]
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
 800cc88:	6034      	str	r4, [r6, #0]
  /*Enable the Tim4 clk*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  /*Enable the Tim1 clk*/
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

  TIM_DeInit(TIM1);
 800cc8a:	4d47      	ldr	r5, [pc, #284]	; (800cda8 <setup_pwm+0x140>)
                                                  = 4.5 MHz / 378
    (with 239.5clk adc sampling -> 252adc clk/sample, and 12mhz adc clk this gives quadrature
    sampling)

  ----------------------------------------------------------------------- */
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure={};
 800cc8c:	9405      	str	r4, [sp, #20]
  TIM_OCInitTypeDef  TIM_OCInitStructure={};
 800cc8e:	9401      	str	r4, [sp, #4]
  /*Enable the Tim2 clk*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800cc90:	f001 fa88 	bl	800e1a4 <RCC_APB1PeriphClockCmd>
  /*Enable the Tim4 clk*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800cc94:	2004      	movs	r0, #4
 800cc96:	2101      	movs	r1, #1
 800cc98:	f001 fa84 	bl	800e1a4 <RCC_APB1PeriphClockCmd>
  /*Enable the Tim1 clk*/
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cca2:	f001 fa73 	bl	800e18c <RCC_APB2PeriphClockCmd>

  TIM_DeInit(TIM1);
  TIM_DeInit(TIM2);
  TIM_DeInit(TIM4);
 800cca6:	4f41      	ldr	r7, [pc, #260]	; (800cdac <setup_pwm+0x144>)
  /*Enable the Tim4 clk*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  /*Enable the Tim1 clk*/
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

  TIM_DeInit(TIM1);
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f001 fd40 	bl	800e72e <TIM_DeInit>
  TIM_DeInit(TIM2);
 800ccae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ccb2:	f001 fd3c 	bl	800e72e <TIM_DeInit>
  TIM_DeInit(TIM4);
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	f001 fd39 	bl	800e72e <TIM_DeInit>
  /* Prescaler of 16 times*/
  uint16_t PrescalerValue = 15;
  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = PWM_PERIOD;
 800ccbc:	f240 1c79 	movw	ip, #377	; 0x179
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800ccc0:	230f      	movs	r3, #15
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  /*setup 4*/
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	a905      	add	r1, sp, #20
  TIM_DeInit(TIM2);
  TIM_DeInit(TIM4);
  /* Prescaler of 16 times*/
  uint16_t PrescalerValue = 15;
  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = PWM_PERIOD;
 800ccc6:	f8ad c018 	strh.w	ip, [sp, #24]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  /*setup 4*/
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

  /*Setup the initstructure*/
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800ccca:	2601      	movs	r6, #1
  TIM_DeInit(TIM4);
  /* Prescaler of 16 times*/
  uint16_t PrescalerValue = 15;
  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = PWM_PERIOD;
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800cccc:	f8ad 3014 	strh.w	r3, [sp, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800ccd0:	f8ad 401a 	strh.w	r4, [sp, #26]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800ccd4:	f8ad 4016 	strh.w	r4, [sp, #22]
  /*setup 4*/
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800ccd8:	f001 fd8e 	bl	800e7f8 <TIM_TimeBaseInit>

  /*Setup the initstructure*/
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 4;
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 
 800ccdc:	2360      	movs	r3, #96	; 0x60
  /*setup 4*/
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

  /*Setup the initstructure*/
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 4;
 800ccde:	2204      	movs	r2, #4
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 

  /* PWM1 Mode configuration: Channel3 */
  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800cce0:	a901      	add	r1, sp, #4
 800cce2:	4638      	mov	r0, r7
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

  /*Setup the initstructure*/
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 4;
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 
 800cce4:	f8ad 3004 	strh.w	r3, [sp, #4]
  /*setup 4*/
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

  /*Setup the initstructure*/
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 4;
 800cce8:	f8ad 200a 	strh.w	r2, [sp, #10]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  /*setup 4*/
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

  /*Setup the initstructure*/
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800ccec:	f8ad 6006 	strh.w	r6, [sp, #6]
  TIM_OCInitStructure.TIM_Pulse = 4;
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 

  /* PWM1 Mode configuration: Channel3 */
  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800ccf0:	f001 fe24 	bl	800e93c <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	2108      	movs	r1, #8
 800ccf8:	f001 ffe9 	bl	800ecce <TIM_OC3PreloadConfig>

  /* PWM1 Mode configuration: Channel4 */
  TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	a901      	add	r1, sp, #4
 800cd00:	f001 fe5e 	bl	800e9c0 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800cd04:	4638      	mov	r0, r7
 800cd06:	2108      	movs	r1, #8
 800cd08:	f001 ffea 	bl	800ece0 <TIM_OC4PreloadConfig>

  /* TIM4 enable counter */
  TIM_ARRPreloadConfig(TIM4, ENABLE);
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	4631      	mov	r1, r6
 800cd10:	f001 ff97 	bl	800ec42 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM4, ENABLE);
 800cd14:	4638      	mov	r0, r7
 800cd16:	4631      	mov	r1, r6
 800cd18:	f001 feb9 	bl	800ea8e <TIM_Cmd>


  /*Now setup timer2 as PWM0*/
  TIM_TimeBaseStructure.TIM_Period = PWM_PERIOD2;
 800cd1c:	f240 127b 	movw	r2, #379	; 0x17b
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);//same as timer4
 800cd20:	a905      	add	r1, sp, #20
 800cd22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_ARRPreloadConfig(TIM4, ENABLE);
  TIM_Cmd(TIM4, ENABLE);


  /*Now setup timer2 as PWM0*/
  TIM_TimeBaseStructure.TIM_Period = PWM_PERIOD2;
 800cd26:	f8ad 2018 	strh.w	r2, [sp, #24]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);//same as timer4
 800cd2a:	f001 fd65 	bl	800e7f8 <TIM_TimeBaseInit>
  /* PWM1 Mode configuration: Channel3 */
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 800cd2e:	a901      	add	r1, sp, #4
 800cd30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cd34:	f001 fe02 	bl	800e93c <TIM_OC3Init>

  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800cd38:	2108      	movs	r1, #8
 800cd3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cd3e:	f001 ffc6 	bl	800ecce <TIM_OC3PreloadConfig>

  /* TIM2 enable counter */
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 800cd42:	4631      	mov	r1, r6
 800cd44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cd48:	f001 ff7b 	bl	800ec42 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cd52:	f001 fe9c 	bl	800ea8e <TIM_Cmd>

  /*Now setup timer1 as motor control */
  PrescalerValue = 0;//no prescaler
  TIM_TimeBaseStructure.TIM_Period = 2047;//gives a slower frequency - 35KHz, meeting Rohm BD6231F spec, and giving 11 bits of res each way
 800cd56:	f240 73ff 	movw	r3, #2047	; 0x7ff
  TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;//These settings need to be applied on timers 1 and 8                 
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; 
  TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);//same as timer4 
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	a905      	add	r1, sp, #20
  TIM_ARRPreloadConfig(TIM2, ENABLE);
  TIM_Cmd(TIM2, ENABLE);

  /*Now setup timer1 as motor control */
  PrescalerValue = 0;//no prescaler
  TIM_TimeBaseStructure.TIM_Period = 2047;//gives a slower frequency - 35KHz, meeting Rohm BD6231F spec, and giving 11 bits of res each way
 800cd5e:	f8ad 3018 	strh.w	r3, [sp, #24]
  TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;//These settings need to be applied on timers 1 and 8                 
 800cd62:	f8ad 4008 	strh.w	r4, [sp, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; 
 800cd66:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 800cd6a:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);//same as timer4 
 800cd6e:	f001 fd43 	bl	800e7f8 <TIM_TimeBaseInit>
  /* PWM1 Mode configuration: Channel1 */
  TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 800cd72:	4628      	mov	r0, r5
 800cd74:	a901      	add	r1, sp, #4
 800cd76:	f001 fd5d 	bl	800e834 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	2108      	movs	r1, #8
 800cd7e:	f001 ff94 	bl	800ecaa <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, ENABLE);	//Needs to be applied on 1 and 8
 800cd82:	4628      	mov	r0, r5
 800cd84:	4631      	mov	r1, r6
 800cd86:	f001 fe8f 	bl	800eaa8 <TIM_CtrlPWMOutputs>
  /* TIM1 enable counter */
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	f001 ff58 	bl	800ec42 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM1, ENABLE); 
 800cd92:	4628      	mov	r0, r5
 800cd94:	4631      	mov	r1, r6
 800cd96:	f001 fe7a 	bl	800ea8e <TIM_Cmd>
  Set_PWM_Motor(0);			//Make sure motor off
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	f002 f8ca 	bl	800ef36 <TIM_SetCompare1>
}
 800cda2:	b009      	add	sp, #36	; 0x24
 800cda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda6:	bf00      	nop
 800cda8:	40012c00 	.word	0x40012c00
 800cdac:	40000800 	.word	0x40000800

0800cdb0 <Tryfudge>:
  * @retval none
  * Note: this could be improved, atm it just uses some macros and is hardcoded for timer3 only
  * (need to use different timers for each output) 
  */
void Tryfudge(uint32_t* Fudgemask) {
	if((*Fudgemask)&(uint32_t)1 /*&& TIM2->CNT<PWM_FUDGE3*/) {//If the first bit is set, adjust the first timer in the list if it is safe to do so
 800cdb0:	6803      	ldr	r3, [r0, #0]
  * @param Pointer to unsigned 32 bit integer bitmask for the timers to be corrected
  * @retval none
  * Note: this could be improved, atm it just uses some macros and is hardcoded for timer3 only
  * (need to use different timers for each output) 
  */
void Tryfudge(uint32_t* Fudgemask) {
 800cdb2:	b510      	push	{r4, lr}
	if((*Fudgemask)&(uint32_t)1 /*&& TIM2->CNT<PWM_FUDGE3*/) {//If the first bit is set, adjust the first timer in the list if it is safe to do so
 800cdb4:	f013 0f01 	tst.w	r3, #1
  * @param Pointer to unsigned 32 bit integer bitmask for the timers to be corrected
  * @retval none
  * Note: this could be improved, atm it just uses some macros and is hardcoded for timer3 only
  * (need to use different timers for each output) 
  */
void Tryfudge(uint32_t* Fudgemask) {
 800cdb8:	4604      	mov	r4, r0
	if((*Fudgemask)&(uint32_t)1 /*&& TIM2->CNT<PWM_FUDGE3*/) {//If the first bit is set, adjust the first timer in the list if it is safe to do so
 800cdba:	d023      	beq.n	800ce04 <Tryfudge+0x54>
		while(TIM2->CNT>=(PWM_FUDGE2-1));
 800cdbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cdc0:	f240 1275 	movw	r2, #373	; 0x175
 800cdc4:	f8b1 c024 	ldrh.w	ip, [r1, #36]	; 0x24
 800cdc8:	fa1f f08c 	uxth.w	r0, ip
 800cdcc:	4290      	cmp	r0, r2
 800cdce:	d8f9      	bhi.n	800cdc4 <Tryfudge+0x14>
		TIM_ARRPreloadConfig(TIM2, DISABLE);//Disable reload buffering so we can load directly
 800cdd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	f001 ff34 	bl	800ec42 <TIM_ARRPreloadConfig>
		TIM_SetAutoreload(TIM2, PWM_FUDGE2);//Load reload register directly
 800cdda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cdde:	f240 1177 	movw	r1, #375	; 0x177
 800cde2:	f002 f8a6 	bl	800ef32 <TIM_SetAutoreload>
		TIM_ARRPreloadConfig(TIM2, ENABLE);//Enable buffering so we load buffered register
 800cde6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cdea:	2101      	movs	r1, #1
 800cdec:	f001 ff29 	bl	800ec42 <TIM_ARRPreloadConfig>
		TIM_SetAutoreload(TIM2, PWM_PERIOD2);//Load the buffer, so the pwm period returns to normal after 1 period
 800cdf0:	f240 117b 	movw	r1, #379	; 0x17b
 800cdf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cdf8:	f002 f89b 	bl	800ef32 <TIM_SetAutoreload>
		*Fudgemask&=~(uint32_t)1;//Clear the bit
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	f022 0101 	bic.w	r1, r2, #1
 800ce02:	6021      	str	r1, [r4, #0]
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	bf00      	nop

0800ce08 <Set_Motor>:
  * @brief  Configure the timer channel for PWM out to pump motor, -ive duty turns on valve
  * @param  None
  * @retval None
  * setting duty=0 gives idle state
  */
void Set_Motor(int16_t duty) {
 800ce08:	b510      	push	{r4, lr}
	duty=(duty>MAX_DUTY)?MAX_DUTY:duty;	//enforce limits on range
 800ce0a:	f240 54ff 	movw	r4, #1535	; 0x5ff
 800ce0e:	42a0      	cmp	r0, r4
 800ce10:	bfb8      	it	lt
 800ce12:	4604      	movlt	r4, r0
	if(duty<0) {//We are dumping with the solenoid valve
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	db0b      	blt.n	800ce30 <Set_Motor+0x28>
		SET_SOLENOID(1);
		Set_PWM_Motor(0);
	}
	else {//We are driving the pump
		SET_SOLENOID(0);
 800ce18:	480b      	ldr	r0, [pc, #44]	; (800ce48 <Set_Motor+0x40>)
 800ce1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f000 fdab 	bl	800d97a <GPIO_WriteBit>
		Set_PWM_Motor(duty);
 800ce24:	4809      	ldr	r0, [pc, #36]	; (800ce4c <Set_Motor+0x44>)
 800ce26:	b2a1      	uxth	r1, r4
	}
}
 800ce28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		SET_SOLENOID(1);
		Set_PWM_Motor(0);
	}
	else {//We are driving the pump
		SET_SOLENOID(0);
		Set_PWM_Motor(duty);
 800ce2c:	f002 b883 	b.w	800ef36 <TIM_SetCompare1>
  * setting duty=0 gives idle state
  */
void Set_Motor(int16_t duty) {
	duty=(duty>MAX_DUTY)?MAX_DUTY:duty;	//enforce limits on range
	if(duty<0) {//We are dumping with the solenoid valve
		SET_SOLENOID(1);
 800ce30:	4805      	ldr	r0, [pc, #20]	; (800ce48 <Set_Motor+0x40>)
 800ce32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce36:	2201      	movs	r2, #1
 800ce38:	f000 fd9f 	bl	800d97a <GPIO_WriteBit>
		Set_PWM_Motor(0);
 800ce3c:	4803      	ldr	r0, [pc, #12]	; (800ce4c <Set_Motor+0x44>)
 800ce3e:	2100      	movs	r1, #0
	}
	else {//We are driving the pump
		SET_SOLENOID(0);
		Set_PWM_Motor(duty);
	}
}
 800ce40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void Set_Motor(int16_t duty) {
	duty=(duty>MAX_DUTY)?MAX_DUTY:duty;	//enforce limits on range
	if(duty<0) {//We are dumping with the solenoid valve
		SET_SOLENOID(1);
		Set_PWM_Motor(0);
 800ce44:	f002 b877 	b.w	800ef36 <TIM_SetCompare1>
 800ce48:	40010c00 	.word	0x40010c00
 800ce4c:	40012c00 	.word	0x40012c00

0800ce50 <Usarts_Init>:
/**
  * @brief  Configured the USART1 and 2 periferals, including clocks
  * @param  None
  * @retval None
  */
void Usarts_Init() {
 800ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef    GPIO_InitStructure;
    USART_InitTypeDef   USART_InitStructure;
    
    // Enable clock to GPIO and USART1 and USART2 peripherals - on different APBs
    RCC_APB2PeriphClockCmd(USART1_RCC_GPIO | USART1_RCC_USART, ENABLE);
 800ce52:	2101      	movs	r1, #1
/**
  * @brief  Configured the USART1 and 2 periferals, including clocks
  * @param  None
  * @retval None
  */
void Usarts_Init() {
 800ce54:	b087      	sub	sp, #28

    // Configure Tx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_TX | USART2_TX;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
 800ce56:	4e26      	ldr	r6, [pc, #152]	; (800cef0 <Usarts_Init+0xa0>)
void Usarts_Init() {
    GPIO_InitTypeDef    GPIO_InitStructure;
    USART_InitTypeDef   USART_InitStructure;
    
    // Enable clock to GPIO and USART1 and USART2 peripherals - on different APBs
    RCC_APB2PeriphClockCmd(USART1_RCC_GPIO | USART1_RCC_USART, ENABLE);
 800ce58:	f244 0004 	movw	r0, #16388	; 0x4004
 800ce5c:	f001 f996 	bl	800e18c <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(USART2_RCC_USART,ENABLE );
 800ce60:	2101      	movs	r1, #1
 800ce62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ce66:	f001 f99d 	bl	800e1a4 <RCC_APB1PeriphClockCmd>

    // Configure Tx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_TX | USART2_TX;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
 800ce6a:	2703      	movs	r7, #3
    // Enable clock to GPIO and USART1 and USART2 peripherals - on different APBs
    RCC_APB2PeriphClockCmd(USART1_RCC_GPIO | USART1_RCC_USART, ENABLE);
    RCC_APB1PeriphClockCmd(USART2_RCC_USART,ENABLE );

    // Configure Tx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_TX | USART2_TX;
 800ce6c:	f44f 7c01 	mov.w	ip, #516	; 0x204
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
 800ce70:	2318      	movs	r3, #24
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
 800ce72:	4630      	mov	r0, r6
 800ce74:	a905      	add	r1, sp, #20
    // Enable clock to GPIO and USART1 and USART2 peripherals - on different APBs
    RCC_APB2PeriphClockCmd(USART1_RCC_GPIO | USART1_RCC_USART, ENABLE);
    RCC_APB1PeriphClockCmd(USART2_RCC_USART,ENABLE );

    // Configure Tx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_TX | USART2_TX;
 800ce76:	f8ad c014 	strh.w	ip, [sp, #20]
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
    
    // Configure USART1 peripheral
    USART_InitStructure.USART_BaudRate  = USART1_BAUD;
    Default_Usart_Config(&USART_InitStructure);
    USART_Init(USART1_USART, &USART_InitStructure );
 800ce7a:	4d1e      	ldr	r5, [pc, #120]	; (800cef4 <Usarts_Init+0xa4>)
    RCC_APB1PeriphClockCmd(USART2_RCC_USART,ENABLE );

    // Configure Tx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_TX | USART2_TX;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
 800ce7c:	f88d 3017 	strb.w	r3, [sp, #23]
    RCC_APB2PeriphClockCmd(USART1_RCC_GPIO | USART1_RCC_USART, ENABLE);
    RCC_APB1PeriphClockCmd(USART2_RCC_USART,ENABLE );

    // Configure Tx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_TX | USART2_TX;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
 800ce80:	f88d 7016 	strb.w	r7, [sp, #22]
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
 800ce84:	f000 fd0f 	bl	800d8a6 <GPIO_Init>
    
    // Configure Rx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_RX | USART2_RX;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IN_FLOATING;
 800ce88:	2304      	movs	r3, #4
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	a905      	add	r1, sp, #20
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
    
    // Configure Rx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_RX | USART2_RX;
 800ce8e:	f44f 6281 	mov.w	r2, #1032	; 0x408
    USART_InitStructure.USART_BaudRate  = USART1_BAUD;
    Default_Usart_Config(&USART_InitStructure);
    USART_Init(USART1_USART, &USART_InitStructure );
    // Configure USART2 peripheral - only buadrate is changed
    USART_InitStructure.USART_BaudRate = USART2_BAUD;
    USART_Init(USART2_USART, &USART_InitStructure );
 800ce92:	4c19      	ldr	r4, [pc, #100]	; (800cef8 <Usarts_Init+0xa8>)
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
    
    // Configure Rx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_RX | USART2_RX;
 800ce94:	f8ad 2014 	strh.w	r2, [sp, #20]
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IN_FLOATING;
 800ce98:	f88d 3017 	strb.w	r3, [sp, #23]
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
    
    // Configure Rx pins
    GPIO_InitStructure.GPIO_Pin     = USART1_RX | USART2_RX;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
 800ce9c:	f88d 7016 	strb.w	r7, [sp, #22]
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IN_FLOATING;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
 800cea0:	f000 fd01 	bl	800d8a6 <GPIO_Init>
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
    init->USART_StopBits = USART_StopBits_1;
 800cea4:	2300      	movs	r3, #0
  * @brief  Setup the default USART config stuff
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
 800cea6:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    init->USART_StopBits = USART_StopBits_1;
    init->USART_Parity = USART_Parity_Even;
 800ceaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IN_FLOATING;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
    
    // Configure USART1 peripheral
    USART_InitStructure.USART_BaudRate  = USART1_BAUD;
 800ceae:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
    Default_Usart_Config(&USART_InitStructure);
    USART_Init(USART1_USART, &USART_InitStructure );
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	a901      	add	r1, sp, #4
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
    init->USART_StopBits = USART_StopBits_1;
 800ceb6:	f8ad 300a 	strh.w	r3, [sp, #10]
    init->USART_Parity = USART_Parity_Even;
    init->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800ceba:	f8ad 3010 	strh.w	r3, [sp, #16]
    init->USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800cebe:	230c      	movs	r3, #12
  * @brief  Setup the default USART config stuff
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
 800cec0:	f8ad c008 	strh.w	ip, [sp, #8]
    init->USART_StopBits = USART_StopBits_1;
    init->USART_Parity = USART_Parity_Even;
 800cec4:	f8ad 200c 	strh.w	r2, [sp, #12]
    init->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    init->USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800cec8:	f8ad 300e 	strh.w	r3, [sp, #14]
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IN_FLOATING;
    GPIO_Init(USART_GPIO, &GPIO_InitStructure);
    
    // Configure USART1 peripheral
    USART_InitStructure.USART_BaudRate  = USART1_BAUD;
 800cecc:	9601      	str	r6, [sp, #4]
    Default_Usart_Config(&USART_InitStructure);
    USART_Init(USART1_USART, &USART_InitStructure );
 800cece:	f002 f983 	bl	800f1d8 <USART_Init>
    // Configure USART2 peripheral - only buadrate is changed
    USART_InitStructure.USART_BaudRate = USART2_BAUD;
    USART_Init(USART2_USART, &USART_InitStructure );
 800ced2:	a901      	add	r1, sp, #4
 800ced4:	4620      	mov	r0, r4
    // Configure USART1 peripheral
    USART_InitStructure.USART_BaudRate  = USART1_BAUD;
    Default_Usart_Config(&USART_InitStructure);
    USART_Init(USART1_USART, &USART_InitStructure );
    // Configure USART2 peripheral - only buadrate is changed
    USART_InitStructure.USART_BaudRate = USART2_BAUD;
 800ced6:	9601      	str	r6, [sp, #4]
    USART_Init(USART2_USART, &USART_InitStructure );
 800ced8:	f002 f97e 	bl	800f1d8 <USART_Init>

    /* Enable USART2 DMA Rx request */
    //USART_DMACmd(USART2_USART, USART_DMAReq_Rx , ENABLE);

    /* Enable the USART1 */
    USART_Cmd(USART1_USART, ENABLE);
 800cedc:	4628      	mov	r0, r5
 800cede:	2101      	movs	r1, #1
 800cee0:	f002 f9e6 	bl	800f2b0 <USART_Cmd>
    /* Enable the USART2 */
    USART_Cmd(USART2_USART, ENABLE);
 800cee4:	4620      	mov	r0, r4
 800cee6:	2101      	movs	r1, #1
 800cee8:	f002 f9e2 	bl	800f2b0 <USART_Cmd>
}
 800ceec:	b007      	add	sp, #28
 800ceee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef0:	40010800 	.word	0x40010800
 800cef4:	40013800 	.word	0x40013800
 800cef8:	40004400 	.word	0x40004400

0800cefc <Default_Usart_Config>:
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
    init->USART_StopBits = USART_StopBits_1;
 800cefc:	2100      	movs	r1, #0
  * @brief  Setup the default USART config stuff
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
 800cefe:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    init->USART_StopBits = USART_StopBits_1;
    init->USART_Parity = USART_Parity_Even;
 800cf02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    init->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    init->USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800cf06:	230c      	movs	r3, #12
  * @brief  Setup the default USART config stuff
  * @param  Init type pointer
  * @retval None
  */
void Default_Usart_Config(USART_InitTypeDef* init) {
    init->USART_WordLength = USART_WordLength_9b;
 800cf08:	f8a0 c004 	strh.w	ip, [r0, #4]
    init->USART_StopBits = USART_StopBits_1;
 800cf0c:	80c1      	strh	r1, [r0, #6]
    init->USART_Parity = USART_Parity_Even;
 800cf0e:	8102      	strh	r2, [r0, #8]
    init->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800cf10:	8181      	strh	r1, [r0, #12]
    init->USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800cf12:	8143      	strh	r3, [r0, #10]
}
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop

0800cf18 <Usart_Send_Str>:
/**
  * @brief  Writes a string to USART1
  * @param  String pointer - null terminated
  * @retval None
  */
void Usart_Send_Str(char* str) {
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4605      	mov	r5, r0
	unsigned short int i = 0;
 800cf1c:	2400      	movs	r4, #0
	while(str[i] != 0x00)
 800cf1e:	5d29      	ldrb	r1, [r5, r4]
 800cf20:	b169      	cbz	r1, 800cf3e <Usart_Send_Str+0x26>
		__usart_send_char(str[i++]);
 800cf22:	3401      	adds	r4, #1
#endif


//Private functions
void __usart_send_char(char data) {
    USART_SendData(USART1_USART, data);
 800cf24:	4806      	ldr	r0, [pc, #24]	; (800cf40 <Usart_Send_Str+0x28>)
  * @retval None
  */
void Usart_Send_Str(char* str) {
	unsigned short int i = 0;
	while(str[i] != 0x00)
		__usart_send_char(str[i++]);
 800cf26:	b2a4      	uxth	r4, r4
#endif


//Private functions
void __usart_send_char(char data) {
    USART_SendData(USART1_USART, data);
 800cf28:	f002 fa33 	bl	800f392 <USART_SendData>
    while(USART_GetFlagStatus(USART1_USART, USART_FLAG_TXE) == RESET) {}
 800cf2c:	4804      	ldr	r0, [pc, #16]	; (800cf40 <Usart_Send_Str+0x28>)
 800cf2e:	2180      	movs	r1, #128	; 0x80
 800cf30:	f002 fa90 	bl	800f454 <USART_GetFlagStatus>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d0f9      	beq.n	800cf2c <Usart_Send_Str+0x14>
  * @param  String pointer - null terminated
  * @retval None
  */
void Usart_Send_Str(char* str) {
	unsigned short int i = 0;
	while(str[i] != 0x00)
 800cf38:	5d29      	ldrb	r1, [r5, r4]
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	d1f1      	bne.n	800cf22 <Usart_Send_Str+0xa>
		__usart_send_char(str[i++]);
}
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	40013800 	.word	0x40013800

0800cf44 <__usart_send_char>:

#endif


//Private functions
void __usart_send_char(char data) {
 800cf44:	4601      	mov	r1, r0
 800cf46:	b508      	push	{r3, lr}
    USART_SendData(USART1_USART, data);
 800cf48:	4804      	ldr	r0, [pc, #16]	; (800cf5c <__usart_send_char+0x18>)
 800cf4a:	f002 fa22 	bl	800f392 <USART_SendData>
    while(USART_GetFlagStatus(USART1_USART, USART_FLAG_TXE) == RESET) {}
 800cf4e:	4803      	ldr	r0, [pc, #12]	; (800cf5c <__usart_send_char+0x18>)
 800cf50:	2180      	movs	r1, #128	; 0x80
 800cf52:	f002 fa7f 	bl	800f454 <USART_GetFlagStatus>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0f9      	beq.n	800cf4e <__usart_send_char+0xa>
}
 800cf5a:	bd08      	pop	{r3, pc}
 800cf5c:	40013800 	.word	0x40013800

0800cf60 <Watchdog_Config>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	4604      	mov	r4, r0
 800cf64:	f245 5055 	movw	r0, #21845	; 0x5555
 800cf68:	f000 ff52 	bl	800de10 <IWDG_WriteAccessCmd>
 800cf6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800cf70:	2003      	movs	r0, #3
 800cf72:	f000 ff53 	bl	800de1c <IWDG_SetPrescaler>
 800cf76:	f3c4 008f 	ubfx	r0, r4, #2, #16
 800cf7a:	f000 ff55 	bl	800de28 <IWDG_SetReload>
 800cf7e:	f000 ff59 	bl	800de34 <IWDG_ReloadCounter>
 800cf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf86:	f000 bf5d 	b.w	800de44 <IWDG_Enable>
 800cf8a:	bf00      	nop

0800cf8c <Watchdog_Reset_Detect>:
 800cf8c:	b508      	push	{r3, lr}
 800cf8e:	207d      	movs	r0, #125	; 0x7d
 800cf90:	f001 f93e 	bl	800e210 <RCC_GetFlagStatus>
 800cf94:	b110      	cbz	r0, 800cf9c <Watchdog_Reset_Detect+0x10>
 800cf96:	f001 f965 	bl	800e264 <RCC_ClearFlag>
 800cf9a:	2001      	movs	r0, #1
 800cf9c:	bd08      	pop	{r3, pc}
 800cf9e:	bf00      	nop

0800cfa0 <NVIC_PriorityGroupConfig>:
 800cfa0:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 800cfa4:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <NVIC_PriorityGroupConfig+0x10>)
 800cfa6:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 800cfaa:	60d8      	str	r0, [r3, #12]
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	e000ed00 	.word	0xe000ed00

0800cfb4 <NVIC_Init>:
 800cfb4:	78c3      	ldrb	r3, [r0, #3]
 800cfb6:	b510      	push	{r4, lr}
 800cfb8:	b1e3      	cbz	r3, 800cff4 <NVIC_Init+0x40>
 800cfba:	4b14      	ldr	r3, [pc, #80]	; (800d00c <NVIC_Init+0x58>)
 800cfbc:	7841      	ldrb	r1, [r0, #1]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	7884      	ldrb	r4, [r0, #2]
 800cfc2:	43db      	mvns	r3, r3
 800cfc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cfc8:	0a1b      	lsrs	r3, r3, #8
 800cfca:	f1c3 0204 	rsb	r2, r3, #4
 800cfce:	4091      	lsls	r1, r2
 800cfd0:	220f      	movs	r2, #15
 800cfd2:	40da      	lsrs	r2, r3
 800cfd4:	4022      	ands	r2, r4
 800cfd6:	430a      	orrs	r2, r1
 800cfd8:	4b0d      	ldr	r3, [pc, #52]	; (800d010 <NVIC_Init+0x5c>)
 800cfda:	7801      	ldrb	r1, [r0, #0]
 800cfdc:	0112      	lsls	r2, r2, #4
 800cfde:	18cb      	adds	r3, r1, r3
 800cfe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800cfe4:	7803      	ldrb	r3, [r0, #0]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	0959      	lsrs	r1, r3, #5
 800cfea:	f003 031f 	and.w	r3, r3, #31
 800cfee:	fa12 f303 	lsls.w	r3, r2, r3
 800cff2:	e007      	b.n	800d004 <NVIC_Init+0x50>
 800cff4:	7803      	ldrb	r3, [r0, #0]
 800cff6:	2201      	movs	r2, #1
 800cff8:	0959      	lsrs	r1, r3, #5
 800cffa:	f003 031f 	and.w	r3, r3, #31
 800cffe:	fa12 f303 	lsls.w	r3, r2, r3
 800d002:	3120      	adds	r1, #32
 800d004:	4a02      	ldr	r2, [pc, #8]	; (800d010 <NVIC_Init+0x5c>)
 800d006:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d00a:	bd10      	pop	{r4, pc}
 800d00c:	e000ed00 	.word	0xe000ed00
 800d010:	e000e100 	.word	0xe000e100

0800d014 <NVIC_SetVectorTable>:
 800d014:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800d018:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800d01c:	4b01      	ldr	r3, [pc, #4]	; (800d024 <NVIC_SetVectorTable+0x10>)
 800d01e:	4301      	orrs	r1, r0
 800d020:	6099      	str	r1, [r3, #8]
 800d022:	4770      	bx	lr
 800d024:	e000ed00 	.word	0xe000ed00

0800d028 <NVIC_SystemLPConfig>:
 800d028:	4b04      	ldr	r3, [pc, #16]	; (800d03c <NVIC_SystemLPConfig+0x14>)
 800d02a:	b111      	cbz	r1, 800d032 <NVIC_SystemLPConfig+0xa>
 800d02c:	691a      	ldr	r2, [r3, #16]
 800d02e:	4310      	orrs	r0, r2
 800d030:	e002      	b.n	800d038 <NVIC_SystemLPConfig+0x10>
 800d032:	691a      	ldr	r2, [r3, #16]
 800d034:	ea22 0000 	bic.w	r0, r2, r0
 800d038:	6118      	str	r0, [r3, #16]
 800d03a:	4770      	bx	lr
 800d03c:	e000ed00 	.word	0xe000ed00

0800d040 <SysTick_CLKSourceConfig>:
 800d040:	4b04      	ldr	r3, [pc, #16]	; (800d054 <SysTick_CLKSourceConfig+0x14>)
 800d042:	2804      	cmp	r0, #4
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	bf0c      	ite	eq
 800d048:	f042 0204 	orreq.w	r2, r2, #4
 800d04c:	f022 0204 	bicne.w	r2, r2, #4
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	4770      	bx	lr
 800d054:	e000e010 	.word	0xe000e010

0800d058 <ADC_DeInit>:
 800d058:	4b13      	ldr	r3, [pc, #76]	; (800d0a8 <ADC_DeInit+0x50>)
 800d05a:	b510      	push	{r4, lr}
 800d05c:	4298      	cmp	r0, r3
 800d05e:	d107      	bne.n	800d070 <ADC_DeInit+0x18>
 800d060:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d064:	2101      	movs	r1, #1
 800d066:	f001 f8a9 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d06a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d06e:	e014      	b.n	800d09a <ADC_DeInit+0x42>
 800d070:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <ADC_DeInit+0x54>)
 800d072:	4298      	cmp	r0, r3
 800d074:	d107      	bne.n	800d086 <ADC_DeInit+0x2e>
 800d076:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d07a:	2101      	movs	r1, #1
 800d07c:	f001 f89e 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d080:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d084:	e009      	b.n	800d09a <ADC_DeInit+0x42>
 800d086:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <ADC_DeInit+0x58>)
 800d088:	4298      	cmp	r0, r3
 800d08a:	d10b      	bne.n	800d0a4 <ADC_DeInit+0x4c>
 800d08c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d090:	2101      	movs	r1, #1
 800d092:	f001 f893 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d096:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d09a:	2100      	movs	r1, #0
 800d09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0a0:	f001 b88c 	b.w	800e1bc <RCC_APB2PeriphResetCmd>
 800d0a4:	bd10      	pop	{r4, pc}
 800d0a6:	bf00      	nop
 800d0a8:	40012400 	.word	0x40012400
 800d0ac:	40012800 	.word	0x40012800
 800d0b0:	40013c00 	.word	0x40013c00

0800d0b4 <ADC_Init>:
 800d0b4:	6843      	ldr	r3, [r0, #4]
 800d0b6:	680a      	ldr	r2, [r1, #0]
 800d0b8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	790a      	ldrb	r2, [r1, #4]
 800d0c4:	b510      	push	{r4, lr}
 800d0c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d0ca:	6043      	str	r3, [r0, #4]
 800d0cc:	68cb      	ldr	r3, [r1, #12]
 800d0ce:	688a      	ldr	r2, [r1, #8]
 800d0d0:	6884      	ldr	r4, [r0, #8]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <ADC_Init+0x48>)
 800d0d6:	ea04 0303 	and.w	r3, r4, r3
 800d0da:	ea42 0303 	orr.w	r3, r2, r3
 800d0de:	794a      	ldrb	r2, [r1, #5]
 800d0e0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800d0e4:	6083      	str	r3, [r0, #8]
 800d0e6:	7c0b      	ldrb	r3, [r1, #16]
 800d0e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 800d0f6:	62c3      	str	r3, [r0, #44]	; 0x2c
 800d0f8:	bd10      	pop	{r4, pc}
 800d0fa:	bf00      	nop
 800d0fc:	fff1f7fd 	.word	0xfff1f7fd

0800d100 <ADC_StructInit>:
 800d100:	2300      	movs	r3, #0
 800d102:	6003      	str	r3, [r0, #0]
 800d104:	7103      	strb	r3, [r0, #4]
 800d106:	7143      	strb	r3, [r0, #5]
 800d108:	6083      	str	r3, [r0, #8]
 800d10a:	60c3      	str	r3, [r0, #12]
 800d10c:	3301      	adds	r3, #1
 800d10e:	7403      	strb	r3, [r0, #16]
 800d110:	4770      	bx	lr

0800d112 <ADC_Cmd>:
 800d112:	b119      	cbz	r1, 800d11c <ADC_Cmd+0xa>
 800d114:	6883      	ldr	r3, [r0, #8]
 800d116:	f043 0301 	orr.w	r3, r3, #1
 800d11a:	e002      	b.n	800d122 <ADC_Cmd+0x10>
 800d11c:	6883      	ldr	r3, [r0, #8]
 800d11e:	f023 0301 	bic.w	r3, r3, #1
 800d122:	6083      	str	r3, [r0, #8]
 800d124:	4770      	bx	lr

0800d126 <ADC_DMACmd>:
 800d126:	b119      	cbz	r1, 800d130 <ADC_DMACmd+0xa>
 800d128:	6883      	ldr	r3, [r0, #8]
 800d12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d12e:	e002      	b.n	800d136 <ADC_DMACmd+0x10>
 800d130:	6883      	ldr	r3, [r0, #8]
 800d132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d136:	6083      	str	r3, [r0, #8]
 800d138:	4770      	bx	lr

0800d13a <ADC_ITConfig>:
 800d13a:	b2c9      	uxtb	r1, r1
 800d13c:	b112      	cbz	r2, 800d144 <ADC_ITConfig+0xa>
 800d13e:	6843      	ldr	r3, [r0, #4]
 800d140:	4319      	orrs	r1, r3
 800d142:	e002      	b.n	800d14a <ADC_ITConfig+0x10>
 800d144:	6843      	ldr	r3, [r0, #4]
 800d146:	ea23 0101 	bic.w	r1, r3, r1
 800d14a:	6041      	str	r1, [r0, #4]
 800d14c:	4770      	bx	lr

0800d14e <ADC_ResetCalibration>:
 800d14e:	6883      	ldr	r3, [r0, #8]
 800d150:	f043 0308 	orr.w	r3, r3, #8
 800d154:	6083      	str	r3, [r0, #8]
 800d156:	4770      	bx	lr

0800d158 <ADC_GetResetCalibrationStatus>:
 800d158:	6880      	ldr	r0, [r0, #8]
 800d15a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800d15e:	4770      	bx	lr

0800d160 <ADC_StartCalibration>:
 800d160:	6883      	ldr	r3, [r0, #8]
 800d162:	f043 0304 	orr.w	r3, r3, #4
 800d166:	6083      	str	r3, [r0, #8]
 800d168:	4770      	bx	lr

0800d16a <ADC_GetCalibrationStatus>:
 800d16a:	6880      	ldr	r0, [r0, #8]
 800d16c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800d170:	4770      	bx	lr

0800d172 <ADC_SoftwareStartConvCmd>:
 800d172:	b119      	cbz	r1, 800d17c <ADC_SoftwareStartConvCmd+0xa>
 800d174:	6883      	ldr	r3, [r0, #8]
 800d176:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800d17a:	e002      	b.n	800d182 <ADC_SoftwareStartConvCmd+0x10>
 800d17c:	6883      	ldr	r3, [r0, #8]
 800d17e:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 800d182:	6083      	str	r3, [r0, #8]
 800d184:	4770      	bx	lr

0800d186 <ADC_GetSoftwareStartConvStatus>:
 800d186:	6880      	ldr	r0, [r0, #8]
 800d188:	f3c0 5080 	ubfx	r0, r0, #22, #1
 800d18c:	4770      	bx	lr

0800d18e <ADC_DiscModeChannelCountConfig>:
 800d18e:	6843      	ldr	r3, [r0, #4]
 800d190:	3901      	subs	r1, #1
 800d192:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d196:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 800d19a:	6043      	str	r3, [r0, #4]
 800d19c:	4770      	bx	lr

0800d19e <ADC_DiscModeCmd>:
 800d19e:	b119      	cbz	r1, 800d1a8 <ADC_DiscModeCmd+0xa>
 800d1a0:	6843      	ldr	r3, [r0, #4]
 800d1a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d1a6:	e002      	b.n	800d1ae <ADC_DiscModeCmd+0x10>
 800d1a8:	6843      	ldr	r3, [r0, #4]
 800d1aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1ae:	6043      	str	r3, [r0, #4]
 800d1b0:	4770      	bx	lr

0800d1b2 <ADC_RegularChannelConfig>:
 800d1b2:	2909      	cmp	r1, #9
 800d1b4:	b570      	push	{r4, r5, r6, lr}
 800d1b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d1ba:	d90b      	bls.n	800d1d4 <ADC_RegularChannelConfig+0x22>
 800d1bc:	1864      	adds	r4, r4, r1
 800d1be:	3c1e      	subs	r4, #30
 800d1c0:	2507      	movs	r5, #7
 800d1c2:	40a5      	lsls	r5, r4
 800d1c4:	40a3      	lsls	r3, r4
 800d1c6:	68c6      	ldr	r6, [r0, #12]
 800d1c8:	ea26 0505 	bic.w	r5, r6, r5
 800d1cc:	ea45 0403 	orr.w	r4, r5, r3
 800d1d0:	60c4      	str	r4, [r0, #12]
 800d1d2:	e00a      	b.n	800d1ea <ADC_RegularChannelConfig+0x38>
 800d1d4:	1864      	adds	r4, r4, r1
 800d1d6:	2507      	movs	r5, #7
 800d1d8:	40a5      	lsls	r5, r4
 800d1da:	fa13 f404 	lsls.w	r4, r3, r4
 800d1de:	6906      	ldr	r6, [r0, #16]
 800d1e0:	ea26 0505 	bic.w	r5, r6, r5
 800d1e4:	ea45 0304 	orr.w	r3, r5, r4
 800d1e8:	6103      	str	r3, [r0, #16]
 800d1ea:	2a06      	cmp	r2, #6
 800d1ec:	d80c      	bhi.n	800d208 <ADC_RegularChannelConfig+0x56>
 800d1ee:	3a01      	subs	r2, #1
 800d1f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d1f4:	231f      	movs	r3, #31
 800d1f6:	4093      	lsls	r3, r2
 800d1f8:	4091      	lsls	r1, r2
 800d1fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d1fc:	ea24 0303 	bic.w	r3, r4, r3
 800d200:	ea43 0201 	orr.w	r2, r3, r1
 800d204:	6342      	str	r2, [r0, #52]	; 0x34
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	2a0c      	cmp	r2, #12
 800d20a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800d20e:	d80b      	bhi.n	800d228 <ADC_RegularChannelConfig+0x76>
 800d210:	189a      	adds	r2, r3, r2
 800d212:	3a23      	subs	r2, #35	; 0x23
 800d214:	231f      	movs	r3, #31
 800d216:	4093      	lsls	r3, r2
 800d218:	4091      	lsls	r1, r2
 800d21a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d21c:	ea24 0303 	bic.w	r3, r4, r3
 800d220:	ea43 0201 	orr.w	r2, r3, r1
 800d224:	6302      	str	r2, [r0, #48]	; 0x30
 800d226:	bd70      	pop	{r4, r5, r6, pc}
 800d228:	189a      	adds	r2, r3, r2
 800d22a:	3a41      	subs	r2, #65	; 0x41
 800d22c:	231f      	movs	r3, #31
 800d22e:	4093      	lsls	r3, r2
 800d230:	4091      	lsls	r1, r2
 800d232:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d234:	ea24 0303 	bic.w	r3, r4, r3
 800d238:	ea43 0201 	orr.w	r2, r3, r1
 800d23c:	62c2      	str	r2, [r0, #44]	; 0x2c
 800d23e:	bd70      	pop	{r4, r5, r6, pc}

0800d240 <ADC_ExternalTrigConvCmd>:
 800d240:	b119      	cbz	r1, 800d24a <ADC_ExternalTrigConvCmd+0xa>
 800d242:	6883      	ldr	r3, [r0, #8]
 800d244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d248:	e002      	b.n	800d250 <ADC_ExternalTrigConvCmd+0x10>
 800d24a:	6883      	ldr	r3, [r0, #8]
 800d24c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d250:	6083      	str	r3, [r0, #8]
 800d252:	4770      	bx	lr

0800d254 <ADC_GetConversionValue>:
 800d254:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d256:	b280      	uxth	r0, r0
 800d258:	4770      	bx	lr

0800d25a <ADC_GetDualModeConversionValue>:
 800d25a:	4b01      	ldr	r3, [pc, #4]	; (800d260 <ADC_GetDualModeConversionValue+0x6>)
 800d25c:	6818      	ldr	r0, [r3, #0]
 800d25e:	4770      	bx	lr
 800d260:	4001244c 	.word	0x4001244c

0800d264 <ADC_AutoInjectedConvCmd>:
 800d264:	b119      	cbz	r1, 800d26e <ADC_AutoInjectedConvCmd+0xa>
 800d266:	6843      	ldr	r3, [r0, #4]
 800d268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d26c:	e002      	b.n	800d274 <ADC_AutoInjectedConvCmd+0x10>
 800d26e:	6843      	ldr	r3, [r0, #4]
 800d270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d274:	6043      	str	r3, [r0, #4]
 800d276:	4770      	bx	lr

0800d278 <ADC_InjectedDiscModeCmd>:
 800d278:	b119      	cbz	r1, 800d282 <ADC_InjectedDiscModeCmd+0xa>
 800d27a:	6843      	ldr	r3, [r0, #4]
 800d27c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d280:	e002      	b.n	800d288 <ADC_InjectedDiscModeCmd+0x10>
 800d282:	6843      	ldr	r3, [r0, #4]
 800d284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d288:	6043      	str	r3, [r0, #4]
 800d28a:	4770      	bx	lr

0800d28c <ADC_ExternalTrigInjectedConvConfig>:
 800d28c:	6883      	ldr	r3, [r0, #8]
 800d28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d292:	ea41 0303 	orr.w	r3, r1, r3
 800d296:	6083      	str	r3, [r0, #8]
 800d298:	4770      	bx	lr

0800d29a <ADC_ExternalTrigInjectedConvCmd>:
 800d29a:	b119      	cbz	r1, 800d2a4 <ADC_ExternalTrigInjectedConvCmd+0xa>
 800d29c:	6883      	ldr	r3, [r0, #8]
 800d29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2a2:	e002      	b.n	800d2aa <ADC_ExternalTrigInjectedConvCmd+0x10>
 800d2a4:	6883      	ldr	r3, [r0, #8]
 800d2a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2aa:	6083      	str	r3, [r0, #8]
 800d2ac:	4770      	bx	lr

0800d2ae <ADC_SoftwareStartInjectedConvCmd>:
 800d2ae:	b119      	cbz	r1, 800d2b8 <ADC_SoftwareStartInjectedConvCmd+0xa>
 800d2b0:	6883      	ldr	r3, [r0, #8]
 800d2b2:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 800d2b6:	e002      	b.n	800d2be <ADC_SoftwareStartInjectedConvCmd+0x10>
 800d2b8:	6883      	ldr	r3, [r0, #8]
 800d2ba:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 800d2be:	6083      	str	r3, [r0, #8]
 800d2c0:	4770      	bx	lr

0800d2c2 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
 800d2c2:	6880      	ldr	r0, [r0, #8]
 800d2c4:	f3c0 5040 	ubfx	r0, r0, #21, #1
 800d2c8:	4770      	bx	lr

0800d2ca <ADC_InjectedChannelConfig>:
 800d2ca:	2909      	cmp	r1, #9
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d2d2:	d90b      	bls.n	800d2ec <ADC_InjectedChannelConfig+0x22>
 800d2d4:	1864      	adds	r4, r4, r1
 800d2d6:	3c1e      	subs	r4, #30
 800d2d8:	2507      	movs	r5, #7
 800d2da:	40a5      	lsls	r5, r4
 800d2dc:	40a3      	lsls	r3, r4
 800d2de:	68c6      	ldr	r6, [r0, #12]
 800d2e0:	ea26 0505 	bic.w	r5, r6, r5
 800d2e4:	ea45 0403 	orr.w	r4, r5, r3
 800d2e8:	60c4      	str	r4, [r0, #12]
 800d2ea:	e00a      	b.n	800d302 <ADC_InjectedChannelConfig+0x38>
 800d2ec:	1864      	adds	r4, r4, r1
 800d2ee:	2507      	movs	r5, #7
 800d2f0:	40a5      	lsls	r5, r4
 800d2f2:	fa13 f404 	lsls.w	r4, r3, r4
 800d2f6:	6906      	ldr	r6, [r0, #16]
 800d2f8:	ea26 0505 	bic.w	r5, r6, r5
 800d2fc:	ea45 0304 	orr.w	r3, r5, r4
 800d300:	6103      	str	r3, [r0, #16]
 800d302:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d304:	f403 1440 	and.w	r4, r3, #3145728	; 0x300000
 800d308:	ea6f 5414 	mvn.w	r4, r4, lsr #20
 800d30c:	1912      	adds	r2, r2, r4
 800d30e:	3203      	adds	r2, #3
 800d310:	b2d2      	uxtb	r2, r2
 800d312:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d316:	241f      	movs	r4, #31
 800d318:	4094      	lsls	r4, r2
 800d31a:	4091      	lsls	r1, r2
 800d31c:	ea23 0304 	bic.w	r3, r3, r4
 800d320:	430b      	orrs	r3, r1
 800d322:	6383      	str	r3, [r0, #56]	; 0x38
 800d324:	bd70      	pop	{r4, r5, r6, pc}

0800d326 <ADC_InjectedSequencerLengthConfig>:
 800d326:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d328:	3901      	subs	r1, #1
 800d32a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d32e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800d332:	6383      	str	r3, [r0, #56]	; 0x38
 800d334:	4770      	bx	lr

0800d336 <ADC_SetInjectedOffset>:
 800d336:	b082      	sub	sp, #8
 800d338:	2300      	movs	r3, #0
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	9001      	str	r0, [sp, #4]
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	18cb      	adds	r3, r1, r3
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	b002      	add	sp, #8
 800d34a:	4770      	bx	lr

0800d34c <ADC_GetInjectedConversionValue>:
 800d34c:	b082      	sub	sp, #8
 800d34e:	2300      	movs	r3, #0
 800d350:	9301      	str	r3, [sp, #4]
 800d352:	9001      	str	r0, [sp, #4]
 800d354:	9b01      	ldr	r3, [sp, #4]
 800d356:	3328      	adds	r3, #40	; 0x28
 800d358:	185b      	adds	r3, r3, r1
 800d35a:	9301      	str	r3, [sp, #4]
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	6818      	ldr	r0, [r3, #0]
 800d360:	b280      	uxth	r0, r0
 800d362:	b002      	add	sp, #8
 800d364:	4770      	bx	lr

0800d366 <ADC_AnalogWatchdogCmd>:
 800d366:	6843      	ldr	r3, [r0, #4]
 800d368:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800d36c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d370:	ea41 0303 	orr.w	r3, r1, r3
 800d374:	6043      	str	r3, [r0, #4]
 800d376:	4770      	bx	lr

0800d378 <ADC_AnalogWatchdogThresholdsConfig>:
 800d378:	6241      	str	r1, [r0, #36]	; 0x24
 800d37a:	6282      	str	r2, [r0, #40]	; 0x28
 800d37c:	4770      	bx	lr

0800d37e <ADC_AnalogWatchdogSingleChannelConfig>:
 800d37e:	6843      	ldr	r3, [r0, #4]
 800d380:	f023 031f 	bic.w	r3, r3, #31
 800d384:	ea41 0303 	orr.w	r3, r1, r3
 800d388:	6043      	str	r3, [r0, #4]
 800d38a:	4770      	bx	lr

0800d38c <ADC_TempSensorVrefintCmd>:
 800d38c:	4b05      	ldr	r3, [pc, #20]	; (800d3a4 <ADC_TempSensorVrefintCmd+0x18>)
 800d38e:	b118      	cbz	r0, 800d398 <ADC_TempSensorVrefintCmd+0xc>
 800d390:	689a      	ldr	r2, [r3, #8]
 800d392:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d396:	e002      	b.n	800d39e <ADC_TempSensorVrefintCmd+0x12>
 800d398:	689a      	ldr	r2, [r3, #8]
 800d39a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d39e:	609a      	str	r2, [r3, #8]
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	40012400 	.word	0x40012400

0800d3a8 <ADC_GetFlagStatus>:
 800d3a8:	6803      	ldr	r3, [r0, #0]
 800d3aa:	4219      	tst	r1, r3
 800d3ac:	bf0c      	ite	eq
 800d3ae:	2000      	moveq	r0, #0
 800d3b0:	2001      	movne	r0, #1
 800d3b2:	4770      	bx	lr

0800d3b4 <ADC_ClearFlag>:
 800d3b4:	43c9      	mvns	r1, r1
 800d3b6:	6001      	str	r1, [r0, #0]
 800d3b8:	4770      	bx	lr

0800d3ba <ADC_GetITStatus>:
 800d3ba:	6843      	ldr	r3, [r0, #4]
 800d3bc:	6800      	ldr	r0, [r0, #0]
 800d3be:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 800d3c2:	d004      	beq.n	800d3ce <ADC_GetITStatus+0x14>
 800d3c4:	b2c9      	uxtb	r1, r1
 800d3c6:	4219      	tst	r1, r3
 800d3c8:	bf0c      	ite	eq
 800d3ca:	2000      	moveq	r0, #0
 800d3cc:	2001      	movne	r0, #1
 800d3ce:	4770      	bx	lr

0800d3d0 <ADC_ClearITPendingBit>:
 800d3d0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 800d3d4:	6001      	str	r1, [r0, #0]
 800d3d6:	4770      	bx	lr

0800d3d8 <BKP_DeInit>:
 800d3d8:	2001      	movs	r0, #1
 800d3da:	b510      	push	{r4, lr}
 800d3dc:	f000 ff06 	bl	800e1ec <RCC_BackupResetCmd>
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e6:	f000 bf01 	b.w	800e1ec <RCC_BackupResetCmd>

0800d3ea <BKP_TamperPinLevelConfig>:
 800d3ea:	4b01      	ldr	r3, [pc, #4]	; (800d3f0 <BKP_TamperPinLevelConfig+0x6>)
 800d3ec:	6018      	str	r0, [r3, #0]
 800d3ee:	4770      	bx	lr
 800d3f0:	420d8604 	.word	0x420d8604

0800d3f4 <BKP_TamperPinCmd>:
 800d3f4:	4b01      	ldr	r3, [pc, #4]	; (800d3fc <BKP_TamperPinCmd+0x8>)
 800d3f6:	6018      	str	r0, [r3, #0]
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	420d8600 	.word	0x420d8600

0800d400 <BKP_ITConfig>:
 800d400:	4b01      	ldr	r3, [pc, #4]	; (800d408 <BKP_ITConfig+0x8>)
 800d402:	6018      	str	r0, [r3, #0]
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	420d8688 	.word	0x420d8688

0800d40c <BKP_RTCOutputConfig>:
 800d40c:	4a04      	ldr	r2, [pc, #16]	; (800d420 <BKP_RTCOutputConfig+0x14>)
 800d40e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800d410:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800d414:	041b      	lsls	r3, r3, #16
 800d416:	0c1b      	lsrs	r3, r3, #16
 800d418:	ea40 0303 	orr.w	r3, r0, r3
 800d41c:	8593      	strh	r3, [r2, #44]	; 0x2c
 800d41e:	4770      	bx	lr
 800d420:	40006c00 	.word	0x40006c00

0800d424 <BKP_SetRTCCalibrationValue>:
 800d424:	4a04      	ldr	r2, [pc, #16]	; (800d438 <BKP_SetRTCCalibrationValue+0x14>)
 800d426:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800d428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d42c:	041b      	lsls	r3, r3, #16
 800d42e:	0c1b      	lsrs	r3, r3, #16
 800d430:	ea40 0303 	orr.w	r3, r0, r3
 800d434:	8593      	strh	r3, [r2, #44]	; 0x2c
 800d436:	4770      	bx	lr
 800d438:	40006c00 	.word	0x40006c00

0800d43c <BKP_WriteBackupRegister>:
 800d43c:	b082      	sub	sp, #8
 800d43e:	2300      	movs	r3, #0
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	4b04      	ldr	r3, [pc, #16]	; (800d454 <BKP_WriteBackupRegister+0x18>)
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	9b01      	ldr	r3, [sp, #4]
 800d448:	18c3      	adds	r3, r0, r3
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	9b01      	ldr	r3, [sp, #4]
 800d44e:	6019      	str	r1, [r3, #0]
 800d450:	b002      	add	sp, #8
 800d452:	4770      	bx	lr
 800d454:	40006c00 	.word	0x40006c00

0800d458 <BKP_ReadBackupRegister>:
 800d458:	b082      	sub	sp, #8
 800d45a:	2300      	movs	r3, #0
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	4b05      	ldr	r3, [pc, #20]	; (800d474 <BKP_ReadBackupRegister+0x1c>)
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	18c3      	adds	r3, r0, r3
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	9b01      	ldr	r3, [sp, #4]
 800d46a:	8818      	ldrh	r0, [r3, #0]
 800d46c:	b280      	uxth	r0, r0
 800d46e:	b002      	add	sp, #8
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	40006c00 	.word	0x40006c00

0800d478 <BKP_GetFlagStatus>:
 800d478:	4b01      	ldr	r3, [pc, #4]	; (800d480 <BKP_GetFlagStatus+0x8>)
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	b2c0      	uxtb	r0, r0
 800d47e:	4770      	bx	lr
 800d480:	420d86a0 	.word	0x420d86a0

0800d484 <BKP_ClearFlag>:
 800d484:	4b03      	ldr	r3, [pc, #12]	; (800d494 <BKP_ClearFlag+0x10>)
 800d486:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800d488:	b292      	uxth	r2, r2
 800d48a:	f042 0201 	orr.w	r2, r2, #1
 800d48e:	869a      	strh	r2, [r3, #52]	; 0x34
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	40006c00 	.word	0x40006c00

0800d498 <BKP_GetITStatus>:
 800d498:	4b01      	ldr	r3, [pc, #4]	; (800d4a0 <BKP_GetITStatus+0x8>)
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	b2c0      	uxtb	r0, r0
 800d49e:	4770      	bx	lr
 800d4a0:	420d86a4 	.word	0x420d86a4

0800d4a4 <BKP_ClearITPendingBit>:
 800d4a4:	4b03      	ldr	r3, [pc, #12]	; (800d4b4 <BKP_ClearITPendingBit+0x10>)
 800d4a6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800d4a8:	b292      	uxth	r2, r2
 800d4aa:	f042 0202 	orr.w	r2, r2, #2
 800d4ae:	869a      	strh	r2, [r3, #52]	; 0x34
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	40006c00 	.word	0x40006c00

0800d4b8 <DBGMCU_GetREVID>:
 800d4b8:	4b01      	ldr	r3, [pc, #4]	; (800d4c0 <DBGMCU_GetREVID+0x8>)
 800d4ba:	6818      	ldr	r0, [r3, #0]
 800d4bc:	0c00      	lsrs	r0, r0, #16
 800d4be:	4770      	bx	lr
 800d4c0:	e0042000 	.word	0xe0042000

0800d4c4 <DBGMCU_GetDEVID>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <DBGMCU_GetDEVID+0xc>)
 800d4c6:	6818      	ldr	r0, [r3, #0]
 800d4c8:	0500      	lsls	r0, r0, #20
 800d4ca:	0d00      	lsrs	r0, r0, #20
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	e0042000 	.word	0xe0042000

0800d4d4 <DBGMCU_Config>:
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <DBGMCU_Config+0x14>)
 800d4d6:	b111      	cbz	r1, 800d4de <DBGMCU_Config+0xa>
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	4310      	orrs	r0, r2
 800d4dc:	e002      	b.n	800d4e4 <DBGMCU_Config+0x10>
 800d4de:	685a      	ldr	r2, [r3, #4]
 800d4e0:	ea22 0000 	bic.w	r0, r2, r0
 800d4e4:	6058      	str	r0, [r3, #4]
 800d4e6:	4770      	bx	lr
 800d4e8:	e0042000 	.word	0xe0042000

0800d4ec <DMA_DeInit>:
 800d4ec:	6803      	ldr	r3, [r0, #0]
 800d4ee:	f023 0301 	bic.w	r3, r3, #1
 800d4f2:	6003      	str	r3, [r0, #0]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	6003      	str	r3, [r0, #0]
 800d4f8:	6043      	str	r3, [r0, #4]
 800d4fa:	6083      	str	r3, [r0, #8]
 800d4fc:	60c3      	str	r3, [r0, #12]
 800d4fe:	4b2e      	ldr	r3, [pc, #184]	; (800d5b8 <DMA_DeInit+0xcc>)
 800d500:	4298      	cmp	r0, r3
 800d502:	d029      	beq.n	800d558 <DMA_DeInit+0x6c>
 800d504:	4b2d      	ldr	r3, [pc, #180]	; (800d5bc <DMA_DeInit+0xd0>)
 800d506:	4298      	cmp	r0, r3
 800d508:	d030      	beq.n	800d56c <DMA_DeInit+0x80>
 800d50a:	4b2d      	ldr	r3, [pc, #180]	; (800d5c0 <DMA_DeInit+0xd4>)
 800d50c:	4298      	cmp	r0, r3
 800d50e:	d037      	beq.n	800d580 <DMA_DeInit+0x94>
 800d510:	4b2c      	ldr	r3, [pc, #176]	; (800d5c4 <DMA_DeInit+0xd8>)
 800d512:	4298      	cmp	r0, r3
 800d514:	d03e      	beq.n	800d594 <DMA_DeInit+0xa8>
 800d516:	4b2c      	ldr	r3, [pc, #176]	; (800d5c8 <DMA_DeInit+0xdc>)
 800d518:	4298      	cmp	r0, r3
 800d51a:	d106      	bne.n	800d52a <DMA_DeInit+0x3e>
 800d51c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800d520:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 800d524:	f843 2c54 	str.w	r2, [r3, #-84]
 800d528:	4770      	bx	lr
 800d52a:	4b28      	ldr	r3, [pc, #160]	; (800d5cc <DMA_DeInit+0xe0>)
 800d52c:	4298      	cmp	r0, r3
 800d52e:	d106      	bne.n	800d53e <DMA_DeInit+0x52>
 800d530:	f853 2c68 	ldr.w	r2, [r3, #-104]
 800d534:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800d538:	f843 2c68 	str.w	r2, [r3, #-104]
 800d53c:	4770      	bx	lr
 800d53e:	4b24      	ldr	r3, [pc, #144]	; (800d5d0 <DMA_DeInit+0xe4>)
 800d540:	4298      	cmp	r0, r3
 800d542:	d106      	bne.n	800d552 <DMA_DeInit+0x66>
 800d544:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 800d548:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 800d54c:	f843 2c7c 	str.w	r2, [r3, #-124]
 800d550:	4770      	bx	lr
 800d552:	4b20      	ldr	r3, [pc, #128]	; (800d5d4 <DMA_DeInit+0xe8>)
 800d554:	4298      	cmp	r0, r3
 800d556:	d106      	bne.n	800d566 <DMA_DeInit+0x7a>
 800d558:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d55c:	f042 020f 	orr.w	r2, r2, #15
 800d560:	f843 2c04 	str.w	r2, [r3, #-4]
 800d564:	4770      	bx	lr
 800d566:	4b1c      	ldr	r3, [pc, #112]	; (800d5d8 <DMA_DeInit+0xec>)
 800d568:	4298      	cmp	r0, r3
 800d56a:	d106      	bne.n	800d57a <DMA_DeInit+0x8e>
 800d56c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800d570:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800d574:	f843 2c18 	str.w	r2, [r3, #-24]
 800d578:	4770      	bx	lr
 800d57a:	4b18      	ldr	r3, [pc, #96]	; (800d5dc <DMA_DeInit+0xf0>)
 800d57c:	4298      	cmp	r0, r3
 800d57e:	d106      	bne.n	800d58e <DMA_DeInit+0xa2>
 800d580:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800d584:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 800d588:	f843 2c2c 	str.w	r2, [r3, #-44]
 800d58c:	4770      	bx	lr
 800d58e:	4b14      	ldr	r3, [pc, #80]	; (800d5e0 <DMA_DeInit+0xf4>)
 800d590:	4298      	cmp	r0, r3
 800d592:	d106      	bne.n	800d5a2 <DMA_DeInit+0xb6>
 800d594:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800d598:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 800d59c:	f843 2c40 	str.w	r2, [r3, #-64]
 800d5a0:	4770      	bx	lr
 800d5a2:	4b10      	ldr	r3, [pc, #64]	; (800d5e4 <DMA_DeInit+0xf8>)
 800d5a4:	4298      	cmp	r0, r3
 800d5a6:	d105      	bne.n	800d5b4 <DMA_DeInit+0xc8>
 800d5a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800d5ac:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 800d5b0:	f843 2c54 	str.w	r2, [r3, #-84]
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	40020008 	.word	0x40020008
 800d5bc:	4002001c 	.word	0x4002001c
 800d5c0:	40020030 	.word	0x40020030
 800d5c4:	40020044 	.word	0x40020044
 800d5c8:	40020058 	.word	0x40020058
 800d5cc:	4002006c 	.word	0x4002006c
 800d5d0:	40020080 	.word	0x40020080
 800d5d4:	40020408 	.word	0x40020408
 800d5d8:	4002041c 	.word	0x4002041c
 800d5dc:	40020430 	.word	0x40020430
 800d5e0:	40020444 	.word	0x40020444
 800d5e4:	40020458 	.word	0x40020458

0800d5e8 <DMA_Init>:
 800d5e8:	688a      	ldr	r2, [r1, #8]
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	6a0c      	ldr	r4, [r1, #32]
 800d5ee:	6803      	ldr	r3, [r0, #0]
 800d5f0:	ea44 0202 	orr.w	r2, r4, r2
 800d5f4:	690c      	ldr	r4, [r1, #16]
 800d5f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d5fa:	4322      	orrs	r2, r4
 800d5fc:	694c      	ldr	r4, [r1, #20]
 800d5fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d602:	4322      	orrs	r2, r4
 800d604:	698c      	ldr	r4, [r1, #24]
 800d606:	4322      	orrs	r2, r4
 800d608:	69cc      	ldr	r4, [r1, #28]
 800d60a:	4322      	orrs	r2, r4
 800d60c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800d60e:	4322      	orrs	r2, r4
 800d610:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800d612:	4322      	orrs	r2, r4
 800d614:	ea42 0303 	orr.w	r3, r2, r3
 800d618:	6003      	str	r3, [r0, #0]
 800d61a:	68cb      	ldr	r3, [r1, #12]
 800d61c:	6043      	str	r3, [r0, #4]
 800d61e:	680b      	ldr	r3, [r1, #0]
 800d620:	6083      	str	r3, [r0, #8]
 800d622:	684b      	ldr	r3, [r1, #4]
 800d624:	60c3      	str	r3, [r0, #12]
 800d626:	bd10      	pop	{r4, pc}

0800d628 <DMA_StructInit>:
 800d628:	2300      	movs	r3, #0
 800d62a:	6003      	str	r3, [r0, #0]
 800d62c:	6043      	str	r3, [r0, #4]
 800d62e:	6083      	str	r3, [r0, #8]
 800d630:	60c3      	str	r3, [r0, #12]
 800d632:	6103      	str	r3, [r0, #16]
 800d634:	6143      	str	r3, [r0, #20]
 800d636:	6183      	str	r3, [r0, #24]
 800d638:	61c3      	str	r3, [r0, #28]
 800d63a:	6203      	str	r3, [r0, #32]
 800d63c:	6243      	str	r3, [r0, #36]	; 0x24
 800d63e:	6283      	str	r3, [r0, #40]	; 0x28
 800d640:	4770      	bx	lr

0800d642 <DMA_Cmd>:
 800d642:	b119      	cbz	r1, 800d64c <DMA_Cmd+0xa>
 800d644:	6803      	ldr	r3, [r0, #0]
 800d646:	f043 0301 	orr.w	r3, r3, #1
 800d64a:	e002      	b.n	800d652 <DMA_Cmd+0x10>
 800d64c:	6803      	ldr	r3, [r0, #0]
 800d64e:	f023 0301 	bic.w	r3, r3, #1
 800d652:	6003      	str	r3, [r0, #0]
 800d654:	4770      	bx	lr

0800d656 <DMA_ITConfig>:
 800d656:	b112      	cbz	r2, 800d65e <DMA_ITConfig+0x8>
 800d658:	6803      	ldr	r3, [r0, #0]
 800d65a:	4319      	orrs	r1, r3
 800d65c:	e002      	b.n	800d664 <DMA_ITConfig+0xe>
 800d65e:	6803      	ldr	r3, [r0, #0]
 800d660:	ea23 0101 	bic.w	r1, r3, r1
 800d664:	6001      	str	r1, [r0, #0]
 800d666:	4770      	bx	lr

0800d668 <DMA_GetCurrDataCounter>:
 800d668:	6840      	ldr	r0, [r0, #4]
 800d66a:	b280      	uxth	r0, r0
 800d66c:	4770      	bx	lr

0800d66e <DMA_GetFlagStatus>:
 800d66e:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800d672:	bf14      	ite	ne
 800d674:	4b03      	ldrne	r3, [pc, #12]	; (800d684 <DMA_GetFlagStatus+0x16>)
 800d676:	4b04      	ldreq	r3, [pc, #16]	; (800d688 <DMA_GetFlagStatus+0x1a>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4203      	tst	r3, r0
 800d67c:	bf0c      	ite	eq
 800d67e:	2000      	moveq	r0, #0
 800d680:	2001      	movne	r0, #1
 800d682:	4770      	bx	lr
 800d684:	40020400 	.word	0x40020400
 800d688:	40020000 	.word	0x40020000

0800d68c <DMA_ClearFlag>:
 800d68c:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800d690:	bf14      	ite	ne
 800d692:	4b02      	ldrne	r3, [pc, #8]	; (800d69c <DMA_ClearFlag+0x10>)
 800d694:	4b02      	ldreq	r3, [pc, #8]	; (800d6a0 <DMA_ClearFlag+0x14>)
 800d696:	6058      	str	r0, [r3, #4]
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	40020400 	.word	0x40020400
 800d6a0:	40020000 	.word	0x40020000

0800d6a4 <DMA_GetITStatus>:
 800d6a4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800d6a8:	bf14      	ite	ne
 800d6aa:	4b04      	ldrne	r3, [pc, #16]	; (800d6bc <DMA_GetITStatus+0x18>)
 800d6ac:	4b04      	ldreq	r3, [pc, #16]	; (800d6c0 <DMA_GetITStatus+0x1c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4203      	tst	r3, r0
 800d6b2:	bf0c      	ite	eq
 800d6b4:	2000      	moveq	r0, #0
 800d6b6:	2001      	movne	r0, #1
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	40020400 	.word	0x40020400
 800d6c0:	40020000 	.word	0x40020000

0800d6c4 <DMA_ClearITPendingBit>:
 800d6c4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800d6c8:	bf14      	ite	ne
 800d6ca:	4b02      	ldrne	r3, [pc, #8]	; (800d6d4 <DMA_ClearITPendingBit+0x10>)
 800d6cc:	4b02      	ldreq	r3, [pc, #8]	; (800d6d8 <DMA_ClearITPendingBit+0x14>)
 800d6ce:	6058      	str	r0, [r3, #4]
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	40020400 	.word	0x40020400
 800d6d8:	40020000 	.word	0x40020000

0800d6dc <EXTI_DeInit>:
 800d6dc:	4b04      	ldr	r3, [pc, #16]	; (800d6f0 <EXTI_DeInit+0x14>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	605a      	str	r2, [r3, #4]
 800d6e4:	609a      	str	r2, [r3, #8]
 800d6e6:	60da      	str	r2, [r3, #12]
 800d6e8:	4a02      	ldr	r2, [pc, #8]	; (800d6f4 <EXTI_DeInit+0x18>)
 800d6ea:	615a      	str	r2, [r3, #20]
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	40010400 	.word	0x40010400
 800d6f4:	000fffff 	.word	0x000fffff

0800d6f8 <EXTI_Init>:
 800d6f8:	7983      	ldrb	r3, [r0, #6]
 800d6fa:	b510      	push	{r4, lr}
 800d6fc:	6802      	ldr	r2, [r0, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d030      	beq.n	800d764 <EXTI_Init+0x6c>
 800d702:	4b1d      	ldr	r3, [pc, #116]	; (800d778 <EXTI_Init+0x80>)
 800d704:	6819      	ldr	r1, [r3, #0]
 800d706:	ea21 0202 	bic.w	r2, r1, r2
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	685a      	ldr	r2, [r3, #4]
 800d70e:	6801      	ldr	r1, [r0, #0]
 800d710:	ea22 0201 	bic.w	r2, r2, r1
 800d714:	605a      	str	r2, [r3, #4]
 800d716:	7902      	ldrb	r2, [r0, #4]
 800d718:	6801      	ldr	r1, [r0, #0]
 800d71a:	18d2      	adds	r2, r2, r3
 800d71c:	6814      	ldr	r4, [r2, #0]
 800d71e:	ea44 0101 	orr.w	r1, r4, r1
 800d722:	6011      	str	r1, [r2, #0]
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	6801      	ldr	r1, [r0, #0]
 800d728:	ea22 0201 	bic.w	r2, r2, r1
 800d72c:	609a      	str	r2, [r3, #8]
 800d72e:	6801      	ldr	r1, [r0, #0]
 800d730:	68da      	ldr	r2, [r3, #12]
 800d732:	ea22 0201 	bic.w	r2, r2, r1
 800d736:	60da      	str	r2, [r3, #12]
 800d738:	7941      	ldrb	r1, [r0, #5]
 800d73a:	6802      	ldr	r2, [r0, #0]
 800d73c:	2910      	cmp	r1, #16
 800d73e:	d109      	bne.n	800d754 <EXTI_Init+0x5c>
 800d740:	6899      	ldr	r1, [r3, #8]
 800d742:	ea41 0202 	orr.w	r2, r1, r2
 800d746:	609a      	str	r2, [r3, #8]
 800d748:	68d9      	ldr	r1, [r3, #12]
 800d74a:	6802      	ldr	r2, [r0, #0]
 800d74c:	ea41 0202 	orr.w	r2, r1, r2
 800d750:	60da      	str	r2, [r3, #12]
 800d752:	bd10      	pop	{r4, pc}
 800d754:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800d758:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 800d75c:	6819      	ldr	r1, [r3, #0]
 800d75e:	ea41 0202 	orr.w	r2, r1, r2
 800d762:	e007      	b.n	800d774 <EXTI_Init+0x7c>
 800d764:	7903      	ldrb	r3, [r0, #4]
 800d766:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d76a:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 800d76e:	6819      	ldr	r1, [r3, #0]
 800d770:	ea21 0202 	bic.w	r2, r1, r2
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	bd10      	pop	{r4, pc}
 800d778:	40010400 	.word	0x40010400

0800d77c <EXTI_StructInit>:
 800d77c:	2300      	movs	r3, #0
 800d77e:	220c      	movs	r2, #12
 800d780:	6003      	str	r3, [r0, #0]
 800d782:	7103      	strb	r3, [r0, #4]
 800d784:	7142      	strb	r2, [r0, #5]
 800d786:	7183      	strb	r3, [r0, #6]
 800d788:	4770      	bx	lr

0800d78a <EXTI_GenerateSWInterrupt>:
 800d78a:	4b03      	ldr	r3, [pc, #12]	; (800d798 <EXTI_GenerateSWInterrupt+0xe>)
 800d78c:	691a      	ldr	r2, [r3, #16]
 800d78e:	ea40 0202 	orr.w	r2, r0, r2
 800d792:	611a      	str	r2, [r3, #16]
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	40010400 	.word	0x40010400

0800d79c <EXTI_GetFlagStatus>:
 800d79c:	4b03      	ldr	r3, [pc, #12]	; (800d7ac <EXTI_GetFlagStatus+0x10>)
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	4218      	tst	r0, r3
 800d7a2:	bf0c      	ite	eq
 800d7a4:	2000      	moveq	r0, #0
 800d7a6:	2001      	movne	r0, #1
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	40010400 	.word	0x40010400

0800d7b0 <EXTI_ClearFlag>:
 800d7b0:	4b01      	ldr	r3, [pc, #4]	; (800d7b8 <EXTI_ClearFlag+0x8>)
 800d7b2:	6158      	str	r0, [r3, #20]
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	40010400 	.word	0x40010400

0800d7bc <EXTI_GetITStatus>:
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <EXTI_GetITStatus+0x18>)
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	4003      	ands	r3, r0
 800d7c4:	d004      	beq.n	800d7d0 <EXTI_GetITStatus+0x14>
 800d7c6:	4210      	tst	r0, r2
 800d7c8:	bf0c      	ite	eq
 800d7ca:	2000      	moveq	r0, #0
 800d7cc:	2001      	movne	r0, #1
 800d7ce:	4770      	bx	lr
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	4770      	bx	lr
 800d7d4:	40010400 	.word	0x40010400

0800d7d8 <EXTI_ClearITPendingBit>:
 800d7d8:	4b01      	ldr	r3, [pc, #4]	; (800d7e0 <EXTI_ClearITPendingBit+0x8>)
 800d7da:	6158      	str	r0, [r3, #20]
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	40010400 	.word	0x40010400

0800d7e4 <GPIO_DeInit>:
 800d7e4:	4b23      	ldr	r3, [pc, #140]	; (800d874 <GPIO_DeInit+0x90>)
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	4298      	cmp	r0, r3
 800d7ea:	d105      	bne.n	800d7f8 <GPIO_DeInit+0x14>
 800d7ec:	2004      	movs	r0, #4
 800d7ee:	2101      	movs	r1, #1
 800d7f0:	f000 fce4 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d7f4:	2004      	movs	r0, #4
 800d7f6:	e036      	b.n	800d866 <GPIO_DeInit+0x82>
 800d7f8:	4b1f      	ldr	r3, [pc, #124]	; (800d878 <GPIO_DeInit+0x94>)
 800d7fa:	4298      	cmp	r0, r3
 800d7fc:	d105      	bne.n	800d80a <GPIO_DeInit+0x26>
 800d7fe:	2008      	movs	r0, #8
 800d800:	2101      	movs	r1, #1
 800d802:	f000 fcdb 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d806:	2008      	movs	r0, #8
 800d808:	e02d      	b.n	800d866 <GPIO_DeInit+0x82>
 800d80a:	4b1c      	ldr	r3, [pc, #112]	; (800d87c <GPIO_DeInit+0x98>)
 800d80c:	4298      	cmp	r0, r3
 800d80e:	d105      	bne.n	800d81c <GPIO_DeInit+0x38>
 800d810:	2010      	movs	r0, #16
 800d812:	2101      	movs	r1, #1
 800d814:	f000 fcd2 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d818:	2010      	movs	r0, #16
 800d81a:	e024      	b.n	800d866 <GPIO_DeInit+0x82>
 800d81c:	4b18      	ldr	r3, [pc, #96]	; (800d880 <GPIO_DeInit+0x9c>)
 800d81e:	4298      	cmp	r0, r3
 800d820:	d105      	bne.n	800d82e <GPIO_DeInit+0x4a>
 800d822:	2020      	movs	r0, #32
 800d824:	2101      	movs	r1, #1
 800d826:	f000 fcc9 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d82a:	2020      	movs	r0, #32
 800d82c:	e01b      	b.n	800d866 <GPIO_DeInit+0x82>
 800d82e:	4b15      	ldr	r3, [pc, #84]	; (800d884 <GPIO_DeInit+0xa0>)
 800d830:	4298      	cmp	r0, r3
 800d832:	d105      	bne.n	800d840 <GPIO_DeInit+0x5c>
 800d834:	2040      	movs	r0, #64	; 0x40
 800d836:	2101      	movs	r1, #1
 800d838:	f000 fcc0 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d83c:	2040      	movs	r0, #64	; 0x40
 800d83e:	e012      	b.n	800d866 <GPIO_DeInit+0x82>
 800d840:	4b11      	ldr	r3, [pc, #68]	; (800d888 <GPIO_DeInit+0xa4>)
 800d842:	4298      	cmp	r0, r3
 800d844:	d105      	bne.n	800d852 <GPIO_DeInit+0x6e>
 800d846:	2080      	movs	r0, #128	; 0x80
 800d848:	2101      	movs	r1, #1
 800d84a:	f000 fcb7 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d84e:	2080      	movs	r0, #128	; 0x80
 800d850:	e009      	b.n	800d866 <GPIO_DeInit+0x82>
 800d852:	4b0e      	ldr	r3, [pc, #56]	; (800d88c <GPIO_DeInit+0xa8>)
 800d854:	4298      	cmp	r0, r3
 800d856:	d10b      	bne.n	800d870 <GPIO_DeInit+0x8c>
 800d858:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d85c:	2101      	movs	r1, #1
 800d85e:	f000 fcad 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d862:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d866:	2100      	movs	r1, #0
 800d868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d86c:	f000 bca6 	b.w	800e1bc <RCC_APB2PeriphResetCmd>
 800d870:	bd10      	pop	{r4, pc}
 800d872:	bf00      	nop
 800d874:	40010800 	.word	0x40010800
 800d878:	40010c00 	.word	0x40010c00
 800d87c:	40011000 	.word	0x40011000
 800d880:	40011400 	.word	0x40011400
 800d884:	40011800 	.word	0x40011800
 800d888:	40011c00 	.word	0x40011c00
 800d88c:	40012000 	.word	0x40012000

0800d890 <GPIO_AFIODeInit>:
 800d890:	2001      	movs	r0, #1
 800d892:	4601      	mov	r1, r0
 800d894:	b510      	push	{r4, lr}
 800d896:	f000 fc91 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800d89a:	2001      	movs	r0, #1
 800d89c:	2100      	movs	r1, #0
 800d89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8a2:	f000 bc8b 	b.w	800e1bc <RCC_APB2PeriphResetCmd>

0800d8a6 <GPIO_Init>:
 800d8a6:	78cb      	ldrb	r3, [r1, #3]
 800d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8aa:	f013 0f10 	tst.w	r3, #16
 800d8ae:	f003 020f 	and.w	r2, r3, #15
 800d8b2:	bf1c      	itt	ne
 800d8b4:	788b      	ldrbne	r3, [r1, #2]
 800d8b6:	431a      	orrne	r2, r3
 800d8b8:	780b      	ldrb	r3, [r1, #0]
 800d8ba:	b1e3      	cbz	r3, 800d8f6 <GPIO_Init+0x50>
 800d8bc:	6804      	ldr	r4, [r0, #0]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2601      	movs	r6, #1
 800d8c2:	409e      	lsls	r6, r3
 800d8c4:	880d      	ldrh	r5, [r1, #0]
 800d8c6:	ea06 0505 	and.w	r5, r6, r5
 800d8ca:	42b5      	cmp	r5, r6
 800d8cc:	d10f      	bne.n	800d8ee <GPIO_Init+0x48>
 800d8ce:	009e      	lsls	r6, r3, #2
 800d8d0:	270f      	movs	r7, #15
 800d8d2:	40b7      	lsls	r7, r6
 800d8d4:	fa12 f606 	lsls.w	r6, r2, r6
 800d8d8:	ea24 0407 	bic.w	r4, r4, r7
 800d8dc:	4334      	orrs	r4, r6
 800d8de:	78ce      	ldrb	r6, [r1, #3]
 800d8e0:	2e28      	cmp	r6, #40	; 0x28
 800d8e2:	d101      	bne.n	800d8e8 <GPIO_Init+0x42>
 800d8e4:	6145      	str	r5, [r0, #20]
 800d8e6:	e002      	b.n	800d8ee <GPIO_Init+0x48>
 800d8e8:	2e48      	cmp	r6, #72	; 0x48
 800d8ea:	bf08      	it	eq
 800d8ec:	6105      	streq	r5, [r0, #16]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	2b08      	cmp	r3, #8
 800d8f2:	d1e5      	bne.n	800d8c0 <GPIO_Init+0x1a>
 800d8f4:	6004      	str	r4, [r0, #0]
 800d8f6:	880b      	ldrh	r3, [r1, #0]
 800d8f8:	2bff      	cmp	r3, #255	; 0xff
 800d8fa:	d91f      	bls.n	800d93c <GPIO_Init+0x96>
 800d8fc:	6845      	ldr	r5, [r0, #4]
 800d8fe:	2300      	movs	r3, #0
 800d900:	2601      	movs	r6, #1
 800d902:	f103 0408 	add.w	r4, r3, #8
 800d906:	fa16 f404 	lsls.w	r4, r6, r4
 800d90a:	880e      	ldrh	r6, [r1, #0]
 800d90c:	ea04 0606 	and.w	r6, r4, r6
 800d910:	42a6      	cmp	r6, r4
 800d912:	d10f      	bne.n	800d934 <GPIO_Init+0x8e>
 800d914:	009e      	lsls	r6, r3, #2
 800d916:	270f      	movs	r7, #15
 800d918:	40b7      	lsls	r7, r6
 800d91a:	fa12 f606 	lsls.w	r6, r2, r6
 800d91e:	ea25 0507 	bic.w	r5, r5, r7
 800d922:	4335      	orrs	r5, r6
 800d924:	78ce      	ldrb	r6, [r1, #3]
 800d926:	2e28      	cmp	r6, #40	; 0x28
 800d928:	bf08      	it	eq
 800d92a:	6144      	streq	r4, [r0, #20]
 800d92c:	78ce      	ldrb	r6, [r1, #3]
 800d92e:	2e48      	cmp	r6, #72	; 0x48
 800d930:	bf08      	it	eq
 800d932:	6104      	streq	r4, [r0, #16]
 800d934:	3301      	adds	r3, #1
 800d936:	2b08      	cmp	r3, #8
 800d938:	d1e2      	bne.n	800d900 <GPIO_Init+0x5a>
 800d93a:	6045      	str	r5, [r0, #4]
 800d93c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d93e <GPIO_StructInit>:
 800d93e:	f04f 33ff 	mov.w	r3, #4294967295
 800d942:	8003      	strh	r3, [r0, #0]
 800d944:	2302      	movs	r3, #2
 800d946:	7083      	strb	r3, [r0, #2]
 800d948:	18db      	adds	r3, r3, r3
 800d94a:	70c3      	strb	r3, [r0, #3]
 800d94c:	4770      	bx	lr

0800d94e <GPIO_ReadInputDataBit>:
 800d94e:	6883      	ldr	r3, [r0, #8]
 800d950:	4219      	tst	r1, r3
 800d952:	bf0c      	ite	eq
 800d954:	2000      	moveq	r0, #0
 800d956:	2001      	movne	r0, #1
 800d958:	4770      	bx	lr

0800d95a <GPIO_ReadInputData>:
 800d95a:	6880      	ldr	r0, [r0, #8]
 800d95c:	b280      	uxth	r0, r0
 800d95e:	4770      	bx	lr

0800d960 <GPIO_ReadOutputDataBit>:
 800d960:	68c3      	ldr	r3, [r0, #12]
 800d962:	4219      	tst	r1, r3
 800d964:	bf0c      	ite	eq
 800d966:	2000      	moveq	r0, #0
 800d968:	2001      	movne	r0, #1
 800d96a:	4770      	bx	lr

0800d96c <GPIO_ReadOutputData>:
 800d96c:	68c0      	ldr	r0, [r0, #12]
 800d96e:	b280      	uxth	r0, r0
 800d970:	4770      	bx	lr

0800d972 <GPIO_SetBits>:
 800d972:	6101      	str	r1, [r0, #16]
 800d974:	4770      	bx	lr

0800d976 <GPIO_ResetBits>:
 800d976:	6141      	str	r1, [r0, #20]
 800d978:	4770      	bx	lr

0800d97a <GPIO_WriteBit>:
 800d97a:	b10a      	cbz	r2, 800d980 <GPIO_WriteBit+0x6>
 800d97c:	6101      	str	r1, [r0, #16]
 800d97e:	4770      	bx	lr
 800d980:	6141      	str	r1, [r0, #20]
 800d982:	4770      	bx	lr

0800d984 <GPIO_Write>:
 800d984:	60c1      	str	r1, [r0, #12]
 800d986:	4770      	bx	lr

0800d988 <GPIO_PinLockConfig>:
 800d988:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 800d98c:	6183      	str	r3, [r0, #24]
 800d98e:	6181      	str	r1, [r0, #24]
 800d990:	6183      	str	r3, [r0, #24]
 800d992:	6983      	ldr	r3, [r0, #24]
 800d994:	6983      	ldr	r3, [r0, #24]
 800d996:	4770      	bx	lr

0800d998 <GPIO_EventOutputConfig>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	4a06      	ldr	r2, [pc, #24]	; (800d9b4 <GPIO_EventOutputConfig+0x1c>)
 800d99c:	f64f 7380 	movw	r3, #65408	; 0xff80
 800d9a0:	6814      	ldr	r4, [r2, #0]
 800d9a2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800d9a6:	ea04 0303 	and.w	r3, r4, r3
 800d9aa:	ea41 0303 	orr.w	r3, r1, r3
 800d9ae:	6013      	str	r3, [r2, #0]
 800d9b0:	bd10      	pop	{r4, pc}
 800d9b2:	bf00      	nop
 800d9b4:	40010000 	.word	0x40010000

0800d9b8 <GPIO_EventOutputCmd>:
 800d9b8:	4b01      	ldr	r3, [pc, #4]	; (800d9c0 <GPIO_EventOutputCmd+0x8>)
 800d9ba:	6018      	str	r0, [r3, #0]
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	4220001c 	.word	0x4220001c

0800d9c4 <GPIO_PinRemapConfig>:
 800d9c4:	b530      	push	{r4, r5, lr}
 800d9c6:	4a14      	ldr	r2, [pc, #80]	; (800da18 <GPIO_PinRemapConfig+0x54>)
 800d9c8:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 800d9cc:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 800d9d0:	6853      	ldr	r3, [r2, #4]
 800d9d2:	b284      	uxth	r4, r0
 800d9d4:	d106      	bne.n	800d9e4 <GPIO_PinRemapConfig+0x20>
 800d9d6:	6855      	ldr	r5, [r2, #4]
 800d9d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800d9dc:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 800d9e0:	6055      	str	r5, [r2, #4]
 800d9e2:	e011      	b.n	800da08 <GPIO_PinRemapConfig+0x44>
 800d9e4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d9e8:	d006      	beq.n	800d9f8 <GPIO_PinRemapConfig+0x34>
 800d9ea:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 800d9ee:	0c12      	lsrs	r2, r2, #16
 800d9f0:	2503      	movs	r5, #3
 800d9f2:	fa15 f202 	lsls.w	r2, r5, r2
 800d9f6:	e003      	b.n	800da00 <GPIO_PinRemapConfig+0x3c>
 800d9f8:	0d42      	lsrs	r2, r0, #21
 800d9fa:	0112      	lsls	r2, r2, #4
 800d9fc:	fa14 f202 	lsls.w	r2, r4, r2
 800da00:	ea23 0302 	bic.w	r3, r3, r2
 800da04:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800da08:	b119      	cbz	r1, 800da12 <GPIO_PinRemapConfig+0x4e>
 800da0a:	0d40      	lsrs	r0, r0, #21
 800da0c:	0100      	lsls	r0, r0, #4
 800da0e:	4084      	lsls	r4, r0
 800da10:	4323      	orrs	r3, r4
 800da12:	4a01      	ldr	r2, [pc, #4]	; (800da18 <GPIO_PinRemapConfig+0x54>)
 800da14:	6053      	str	r3, [r2, #4]
 800da16:	bd30      	pop	{r4, r5, pc}
 800da18:	40010000 	.word	0x40010000

0800da1c <GPIO_EXTILineConfig>:
 800da1c:	f001 0203 	and.w	r2, r1, #3
 800da20:	b530      	push	{r4, r5, lr}
 800da22:	0092      	lsls	r2, r2, #2
 800da24:	240f      	movs	r4, #15
 800da26:	4094      	lsls	r4, r2
 800da28:	fa10 f202 	lsls.w	r2, r0, r2
 800da2c:	4b07      	ldr	r3, [pc, #28]	; (800da4c <GPIO_EXTILineConfig+0x30>)
 800da2e:	0889      	lsrs	r1, r1, #2
 800da30:	3102      	adds	r1, #2
 800da32:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 800da36:	ea25 0404 	bic.w	r4, r5, r4
 800da3a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 800da3e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800da42:	ea42 0404 	orr.w	r4, r2, r4
 800da46:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 800da4a:	bd30      	pop	{r4, r5, pc}
 800da4c:	40010000 	.word	0x40010000

0800da50 <GPIO_ETH_MediaInterfaceConfig>:
 800da50:	4b01      	ldr	r3, [pc, #4]	; (800da58 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 800da52:	6018      	str	r0, [r3, #0]
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	422000dc 	.word	0x422000dc

0800da5c <I2C_DeInit>:
 800da5c:	4b0b      	ldr	r3, [pc, #44]	; (800da8c <I2C_DeInit+0x30>)
 800da5e:	b510      	push	{r4, lr}
 800da60:	4298      	cmp	r0, r3
 800da62:	d107      	bne.n	800da74 <I2C_DeInit+0x18>
 800da64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800da68:	2101      	movs	r1, #1
 800da6a:	f000 fbb3 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800da6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800da72:	e006      	b.n	800da82 <I2C_DeInit+0x26>
 800da74:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800da78:	2101      	movs	r1, #1
 800da7a:	f000 fbab 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800da7e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800da82:	2100      	movs	r1, #0
 800da84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da88:	f000 bba4 	b.w	800e1d4 <RCC_APB1PeriphResetCmd>
 800da8c:	40005400 	.word	0x40005400

0800da90 <I2C_Init>:
 800da90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da92:	b087      	sub	sp, #28
 800da94:	4604      	mov	r4, r0
 800da96:	8886      	ldrh	r6, [r0, #4]
 800da98:	a801      	add	r0, sp, #4
 800da9a:	460d      	mov	r5, r1
 800da9c:	4f2e      	ldr	r7, [pc, #184]	; (800db58 <I2C_Init+0xc8>)
 800da9e:	f000 fb17 	bl	800e0d0 <RCC_GetClocksFreq>
 800daa2:	9803      	ldr	r0, [sp, #12]
 800daa4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800daa8:	0436      	lsls	r6, r6, #16
 800daaa:	fbb0 f7f7 	udiv	r7, r0, r7
 800daae:	0c36      	lsrs	r6, r6, #16
 800dab0:	b2bf      	uxth	r7, r7
 800dab2:	ea47 0606 	orr.w	r6, r7, r6
 800dab6:	80a6      	strh	r6, [r4, #4]
 800dab8:	8821      	ldrh	r1, [r4, #0]
 800daba:	4b28      	ldr	r3, [pc, #160]	; (800db5c <I2C_Init+0xcc>)
 800dabc:	f021 0101 	bic.w	r1, r1, #1
 800dac0:	0409      	lsls	r1, r1, #16
 800dac2:	0c09      	lsrs	r1, r1, #16
 800dac4:	8021      	strh	r1, [r4, #0]
 800dac6:	682a      	ldr	r2, [r5, #0]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d809      	bhi.n	800dae0 <I2C_Init+0x50>
 800dacc:	0053      	lsls	r3, r2, #1
 800dace:	fbb0 f3f3 	udiv	r3, r0, r3
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	3701      	adds	r7, #1
 800dad6:	8427      	strh	r7, [r4, #32]
 800dad8:	2b03      	cmp	r3, #3
 800dada:	bf98      	it	ls
 800dadc:	2304      	movls	r3, #4
 800dade:	e021      	b.n	800db24 <I2C_Init+0x94>
 800dae0:	88e9      	ldrh	r1, [r5, #6]
 800dae2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800dae6:	4299      	cmp	r1, r3
 800dae8:	d105      	bne.n	800daf6 <I2C_Init+0x66>
 800daea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800daee:	fbb0 f3f2 	udiv	r3, r0, r2
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	e006      	b.n	800db04 <I2C_Init+0x74>
 800daf6:	2319      	movs	r3, #25
 800daf8:	4353      	muls	r3, r2
 800dafa:	fbb0 f3f3 	udiv	r3, r0, r3
 800dafe:	b29b      	uxth	r3, r3
 800db00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db04:	051a      	lsls	r2, r3, #20
 800db06:	0d12      	lsrs	r2, r2, #20
 800db08:	b90a      	cbnz	r2, 800db0e <I2C_Init+0x7e>
 800db0a:	f043 0301 	orr.w	r3, r3, #1
 800db0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800db12:	4357      	muls	r7, r2
 800db14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db18:	fb97 f7f2 	sdiv	r7, r7, r2
 800db1c:	3701      	adds	r7, #1
 800db1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db22:	8427      	strh	r7, [r4, #32]
 800db24:	83a3      	strh	r3, [r4, #28]
 800db26:	8823      	ldrh	r3, [r4, #0]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	f043 0301 	orr.w	r3, r3, #1
 800db2e:	8023      	strh	r3, [r4, #0]
 800db30:	8823      	ldrh	r3, [r4, #0]
 800db32:	8969      	ldrh	r1, [r5, #10]
 800db34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db38:	88aa      	ldrh	r2, [r5, #4]
 800db3a:	f023 030a 	bic.w	r3, r3, #10
 800db3e:	041b      	lsls	r3, r3, #16
 800db40:	ea41 0202 	orr.w	r2, r1, r2
 800db44:	0c1b      	lsrs	r3, r3, #16
 800db46:	4313      	orrs	r3, r2
 800db48:	8023      	strh	r3, [r4, #0]
 800db4a:	892a      	ldrh	r2, [r5, #8]
 800db4c:	89ab      	ldrh	r3, [r5, #12]
 800db4e:	ea42 0303 	orr.w	r3, r2, r3
 800db52:	8123      	strh	r3, [r4, #8]
 800db54:	b007      	add	sp, #28
 800db56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db58:	000f4240 	.word	0x000f4240
 800db5c:	000186a0 	.word	0x000186a0

0800db60 <I2C_StructInit>:
 800db60:	f241 3388 	movw	r3, #5000	; 0x1388
 800db64:	6003      	str	r3, [r0, #0]
 800db66:	2300      	movs	r3, #0
 800db68:	8083      	strh	r3, [r0, #4]
 800db6a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800db6e:	8103      	strh	r3, [r0, #8]
 800db70:	8143      	strh	r3, [r0, #10]
 800db72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800db76:	80c2      	strh	r2, [r0, #6]
 800db78:	8183      	strh	r3, [r0, #12]
 800db7a:	4770      	bx	lr

0800db7c <I2C_Cmd>:
 800db7c:	b121      	cbz	r1, 800db88 <I2C_Cmd+0xc>
 800db7e:	8803      	ldrh	r3, [r0, #0]
 800db80:	b29b      	uxth	r3, r3
 800db82:	f043 0301 	orr.w	r3, r3, #1
 800db86:	e004      	b.n	800db92 <I2C_Cmd+0x16>
 800db88:	8803      	ldrh	r3, [r0, #0]
 800db8a:	f023 0301 	bic.w	r3, r3, #1
 800db8e:	041b      	lsls	r3, r3, #16
 800db90:	0c1b      	lsrs	r3, r3, #16
 800db92:	8003      	strh	r3, [r0, #0]
 800db94:	4770      	bx	lr

0800db96 <I2C_DMACmd>:
 800db96:	b121      	cbz	r1, 800dba2 <I2C_DMACmd+0xc>
 800db98:	8883      	ldrh	r3, [r0, #4]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dba0:	e004      	b.n	800dbac <I2C_DMACmd+0x16>
 800dba2:	8883      	ldrh	r3, [r0, #4]
 800dba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dba8:	041b      	lsls	r3, r3, #16
 800dbaa:	0c1b      	lsrs	r3, r3, #16
 800dbac:	8083      	strh	r3, [r0, #4]
 800dbae:	4770      	bx	lr

0800dbb0 <I2C_DMALastTransferCmd>:
 800dbb0:	b121      	cbz	r1, 800dbbc <I2C_DMALastTransferCmd+0xc>
 800dbb2:	8883      	ldrh	r3, [r0, #4]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbba:	e004      	b.n	800dbc6 <I2C_DMALastTransferCmd+0x16>
 800dbbc:	8883      	ldrh	r3, [r0, #4]
 800dbbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbc2:	041b      	lsls	r3, r3, #16
 800dbc4:	0c1b      	lsrs	r3, r3, #16
 800dbc6:	8083      	strh	r3, [r0, #4]
 800dbc8:	4770      	bx	lr

0800dbca <I2C_GenerateSTART>:
 800dbca:	b121      	cbz	r1, 800dbd6 <I2C_GenerateSTART+0xc>
 800dbcc:	8803      	ldrh	r3, [r0, #0]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbd4:	e004      	b.n	800dbe0 <I2C_GenerateSTART+0x16>
 800dbd6:	8803      	ldrh	r3, [r0, #0]
 800dbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbdc:	041b      	lsls	r3, r3, #16
 800dbde:	0c1b      	lsrs	r3, r3, #16
 800dbe0:	8003      	strh	r3, [r0, #0]
 800dbe2:	4770      	bx	lr

0800dbe4 <I2C_GenerateSTOP>:
 800dbe4:	b121      	cbz	r1, 800dbf0 <I2C_GenerateSTOP+0xc>
 800dbe6:	8803      	ldrh	r3, [r0, #0]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbee:	e004      	b.n	800dbfa <I2C_GenerateSTOP+0x16>
 800dbf0:	8803      	ldrh	r3, [r0, #0]
 800dbf2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbf6:	041b      	lsls	r3, r3, #16
 800dbf8:	0c1b      	lsrs	r3, r3, #16
 800dbfa:	8003      	strh	r3, [r0, #0]
 800dbfc:	4770      	bx	lr

0800dbfe <I2C_AcknowledgeConfig>:
 800dbfe:	b121      	cbz	r1, 800dc0a <I2C_AcknowledgeConfig+0xc>
 800dc00:	8803      	ldrh	r3, [r0, #0]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc08:	e004      	b.n	800dc14 <I2C_AcknowledgeConfig+0x16>
 800dc0a:	8803      	ldrh	r3, [r0, #0]
 800dc0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc10:	041b      	lsls	r3, r3, #16
 800dc12:	0c1b      	lsrs	r3, r3, #16
 800dc14:	8003      	strh	r3, [r0, #0]
 800dc16:	4770      	bx	lr

0800dc18 <I2C_OwnAddress2Config>:
 800dc18:	8983      	ldrh	r3, [r0, #12]
 800dc1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800dc1e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800dc22:	041b      	lsls	r3, r3, #16
 800dc24:	0c1b      	lsrs	r3, r3, #16
 800dc26:	ea41 0303 	orr.w	r3, r1, r3
 800dc2a:	8183      	strh	r3, [r0, #12]
 800dc2c:	4770      	bx	lr

0800dc2e <I2C_DualAddressCmd>:
 800dc2e:	b121      	cbz	r1, 800dc3a <I2C_DualAddressCmd+0xc>
 800dc30:	8983      	ldrh	r3, [r0, #12]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	f043 0301 	orr.w	r3, r3, #1
 800dc38:	e004      	b.n	800dc44 <I2C_DualAddressCmd+0x16>
 800dc3a:	8983      	ldrh	r3, [r0, #12]
 800dc3c:	f023 0301 	bic.w	r3, r3, #1
 800dc40:	041b      	lsls	r3, r3, #16
 800dc42:	0c1b      	lsrs	r3, r3, #16
 800dc44:	8183      	strh	r3, [r0, #12]
 800dc46:	4770      	bx	lr

0800dc48 <I2C_GeneralCallCmd>:
 800dc48:	b121      	cbz	r1, 800dc54 <I2C_GeneralCallCmd+0xc>
 800dc4a:	8803      	ldrh	r3, [r0, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc52:	e004      	b.n	800dc5e <I2C_GeneralCallCmd+0x16>
 800dc54:	8803      	ldrh	r3, [r0, #0]
 800dc56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc5a:	041b      	lsls	r3, r3, #16
 800dc5c:	0c1b      	lsrs	r3, r3, #16
 800dc5e:	8003      	strh	r3, [r0, #0]
 800dc60:	4770      	bx	lr

0800dc62 <I2C_ITConfig>:
 800dc62:	b11a      	cbz	r2, 800dc6c <I2C_ITConfig+0xa>
 800dc64:	8883      	ldrh	r3, [r0, #4]
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	4319      	orrs	r1, r3
 800dc6a:	e003      	b.n	800dc74 <I2C_ITConfig+0x12>
 800dc6c:	8883      	ldrh	r3, [r0, #4]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	ea23 0101 	bic.w	r1, r3, r1
 800dc74:	8081      	strh	r1, [r0, #4]
 800dc76:	4770      	bx	lr

0800dc78 <I2C_SendData>:
 800dc78:	8201      	strh	r1, [r0, #16]
 800dc7a:	4770      	bx	lr

0800dc7c <I2C_ReceiveData>:
 800dc7c:	8a00      	ldrh	r0, [r0, #16]
 800dc7e:	b2c0      	uxtb	r0, r0
 800dc80:	4770      	bx	lr

0800dc82 <I2C_Send7bitAddress>:
 800dc82:	b112      	cbz	r2, 800dc8a <I2C_Send7bitAddress+0x8>
 800dc84:	f041 0101 	orr.w	r1, r1, #1
 800dc88:	e001      	b.n	800dc8e <I2C_Send7bitAddress+0xc>
 800dc8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800dc8e:	8201      	strh	r1, [r0, #16]
 800dc90:	4770      	bx	lr

0800dc92 <I2C_ReadRegister>:
 800dc92:	b082      	sub	sp, #8
 800dc94:	2300      	movs	r3, #0
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	9001      	str	r0, [sp, #4]
 800dc9a:	9b01      	ldr	r3, [sp, #4]
 800dc9c:	18cb      	adds	r3, r1, r3
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	9b01      	ldr	r3, [sp, #4]
 800dca2:	8818      	ldrh	r0, [r3, #0]
 800dca4:	b280      	uxth	r0, r0
 800dca6:	b002      	add	sp, #8
 800dca8:	4770      	bx	lr

0800dcaa <I2C_SoftwareResetCmd>:
 800dcaa:	b129      	cbz	r1, 800dcb8 <I2C_SoftwareResetCmd+0xe>
 800dcac:	8803      	ldrh	r3, [r0, #0]
 800dcae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcb6:	e002      	b.n	800dcbe <I2C_SoftwareResetCmd+0x14>
 800dcb8:	8803      	ldrh	r3, [r0, #0]
 800dcba:	045b      	lsls	r3, r3, #17
 800dcbc:	0c5b      	lsrs	r3, r3, #17
 800dcbe:	8003      	strh	r3, [r0, #0]
 800dcc0:	4770      	bx	lr

0800dcc2 <I2C_SMBusAlertConfig>:
 800dcc2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800dcc6:	d104      	bne.n	800dcd2 <I2C_SMBusAlertConfig+0x10>
 800dcc8:	8803      	ldrh	r3, [r0, #0]
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dcd0:	e004      	b.n	800dcdc <I2C_SMBusAlertConfig+0x1a>
 800dcd2:	8803      	ldrh	r3, [r0, #0]
 800dcd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcd8:	041b      	lsls	r3, r3, #16
 800dcda:	0c1b      	lsrs	r3, r3, #16
 800dcdc:	8003      	strh	r3, [r0, #0]
 800dcde:	4770      	bx	lr

0800dce0 <I2C_TransmitPEC>:
 800dce0:	b121      	cbz	r1, 800dcec <I2C_TransmitPEC+0xc>
 800dce2:	8803      	ldrh	r3, [r0, #0]
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dcea:	e004      	b.n	800dcf6 <I2C_TransmitPEC+0x16>
 800dcec:	8803      	ldrh	r3, [r0, #0]
 800dcee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcf2:	041b      	lsls	r3, r3, #16
 800dcf4:	0c1b      	lsrs	r3, r3, #16
 800dcf6:	8003      	strh	r3, [r0, #0]
 800dcf8:	4770      	bx	lr

0800dcfa <I2C_PECPositionConfig>:
 800dcfa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800dcfe:	d104      	bne.n	800dd0a <I2C_PECPositionConfig+0x10>
 800dd00:	8803      	ldrh	r3, [r0, #0]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd08:	e004      	b.n	800dd14 <I2C_PECPositionConfig+0x1a>
 800dd0a:	8803      	ldrh	r3, [r0, #0]
 800dd0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd10:	041b      	lsls	r3, r3, #16
 800dd12:	0c1b      	lsrs	r3, r3, #16
 800dd14:	8003      	strh	r3, [r0, #0]
 800dd16:	4770      	bx	lr

0800dd18 <I2C_CalculatePEC>:
 800dd18:	b121      	cbz	r1, 800dd24 <I2C_CalculatePEC+0xc>
 800dd1a:	8803      	ldrh	r3, [r0, #0]
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	f043 0320 	orr.w	r3, r3, #32
 800dd22:	e004      	b.n	800dd2e <I2C_CalculatePEC+0x16>
 800dd24:	8803      	ldrh	r3, [r0, #0]
 800dd26:	f023 0320 	bic.w	r3, r3, #32
 800dd2a:	041b      	lsls	r3, r3, #16
 800dd2c:	0c1b      	lsrs	r3, r3, #16
 800dd2e:	8003      	strh	r3, [r0, #0]
 800dd30:	4770      	bx	lr

0800dd32 <I2C_GetPEC>:
 800dd32:	8b00      	ldrh	r0, [r0, #24]
 800dd34:	b280      	uxth	r0, r0
 800dd36:	0a00      	lsrs	r0, r0, #8
 800dd38:	4770      	bx	lr

0800dd3a <I2C_ARPCmd>:
 800dd3a:	b121      	cbz	r1, 800dd46 <I2C_ARPCmd+0xc>
 800dd3c:	8803      	ldrh	r3, [r0, #0]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	f043 0310 	orr.w	r3, r3, #16
 800dd44:	e004      	b.n	800dd50 <I2C_ARPCmd+0x16>
 800dd46:	8803      	ldrh	r3, [r0, #0]
 800dd48:	f023 0310 	bic.w	r3, r3, #16
 800dd4c:	041b      	lsls	r3, r3, #16
 800dd4e:	0c1b      	lsrs	r3, r3, #16
 800dd50:	8003      	strh	r3, [r0, #0]
 800dd52:	4770      	bx	lr

0800dd54 <I2C_StretchClockCmd>:
 800dd54:	b921      	cbnz	r1, 800dd60 <I2C_StretchClockCmd+0xc>
 800dd56:	8803      	ldrh	r3, [r0, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd5e:	e004      	b.n	800dd6a <I2C_StretchClockCmd+0x16>
 800dd60:	8803      	ldrh	r3, [r0, #0]
 800dd62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd66:	041b      	lsls	r3, r3, #16
 800dd68:	0c1b      	lsrs	r3, r3, #16
 800dd6a:	8003      	strh	r3, [r0, #0]
 800dd6c:	4770      	bx	lr

0800dd6e <I2C_FastModeDutyCycleConfig>:
 800dd6e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800dd72:	d005      	beq.n	800dd80 <I2C_FastModeDutyCycleConfig+0x12>
 800dd74:	8b83      	ldrh	r3, [r0, #28]
 800dd76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd7a:	041b      	lsls	r3, r3, #16
 800dd7c:	0c1b      	lsrs	r3, r3, #16
 800dd7e:	e003      	b.n	800dd88 <I2C_FastModeDutyCycleConfig+0x1a>
 800dd80:	8b83      	ldrh	r3, [r0, #28]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd88:	8383      	strh	r3, [r0, #28]
 800dd8a:	4770      	bx	lr

0800dd8c <I2C_GetLastEvent>:
 800dd8c:	8a83      	ldrh	r3, [r0, #20]
 800dd8e:	8b00      	ldrh	r0, [r0, #24]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800dd96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800dd9a:	4770      	bx	lr

0800dd9c <I2C_CheckEvent>:
 800dd9c:	8a83      	ldrh	r3, [r0, #20]
 800dd9e:	8b00      	ldrh	r0, [r0, #24]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800dda6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ddaa:	1a43      	subs	r3, r0, r1
 800ddac:	4258      	negs	r0, r3
 800ddae:	eb40 0003 	adc.w	r0, r0, r3
 800ddb2:	4770      	bx	lr

0800ddb4 <I2C_GetFlagStatus>:
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	0f0b      	lsrs	r3, r1, #28
 800ddbe:	9000      	str	r0, [sp, #0]
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	9b01      	ldr	r3, [sp, #4]
 800ddc4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800ddc8:	b113      	cbz	r3, 800ddd0 <I2C_GetFlagStatus+0x1c>
 800ddca:	9b00      	ldr	r3, [sp, #0]
 800ddcc:	3314      	adds	r3, #20
 800ddce:	e002      	b.n	800ddd6 <I2C_GetFlagStatus+0x22>
 800ddd0:	9b00      	ldr	r3, [sp, #0]
 800ddd2:	0c09      	lsrs	r1, r1, #16
 800ddd4:	3318      	adds	r3, #24
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	9b00      	ldr	r3, [sp, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4219      	tst	r1, r3
 800ddde:	bf0c      	ite	eq
 800dde0:	2000      	moveq	r0, #0
 800dde2:	2001      	movne	r0, #1
 800dde4:	b002      	add	sp, #8
 800dde6:	4770      	bx	lr

0800dde8 <I2C_ClearFlag>:
 800dde8:	43c9      	mvns	r1, r1
 800ddea:	8281      	strh	r1, [r0, #20]
 800ddec:	4770      	bx	lr

0800ddee <I2C_GetITStatus>:
 800ddee:	8883      	ldrh	r3, [r0, #4]
 800ddf0:	8a80      	ldrh	r0, [r0, #20]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	b280      	uxth	r0, r0
 800ddf6:	4008      	ands	r0, r1
 800ddf8:	d006      	beq.n	800de08 <I2C_GetITStatus+0x1a>
 800ddfa:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
 800ddfe:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
 800de02:	bf0c      	ite	eq
 800de04:	2000      	moveq	r0, #0
 800de06:	2001      	movne	r0, #1
 800de08:	4770      	bx	lr

0800de0a <I2C_ClearITPendingBit>:
 800de0a:	43c9      	mvns	r1, r1
 800de0c:	8281      	strh	r1, [r0, #20]
 800de0e:	4770      	bx	lr

0800de10 <IWDG_WriteAccessCmd>:
 800de10:	4b01      	ldr	r3, [pc, #4]	; (800de18 <IWDG_WriteAccessCmd+0x8>)
 800de12:	6018      	str	r0, [r3, #0]
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	40003000 	.word	0x40003000

0800de1c <IWDG_SetPrescaler>:
 800de1c:	4b01      	ldr	r3, [pc, #4]	; (800de24 <IWDG_SetPrescaler+0x8>)
 800de1e:	6058      	str	r0, [r3, #4]
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	40003000 	.word	0x40003000

0800de28 <IWDG_SetReload>:
 800de28:	4b01      	ldr	r3, [pc, #4]	; (800de30 <IWDG_SetReload+0x8>)
 800de2a:	6098      	str	r0, [r3, #8]
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	40003000 	.word	0x40003000

0800de34 <IWDG_ReloadCounter>:
 800de34:	4b02      	ldr	r3, [pc, #8]	; (800de40 <IWDG_ReloadCounter+0xc>)
 800de36:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	40003000 	.word	0x40003000

0800de44 <IWDG_Enable>:
 800de44:	4b02      	ldr	r3, [pc, #8]	; (800de50 <IWDG_Enable+0xc>)
 800de46:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800de4a:	601a      	str	r2, [r3, #0]
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	40003000 	.word	0x40003000

0800de54 <IWDG_GetFlagStatus>:
 800de54:	4b03      	ldr	r3, [pc, #12]	; (800de64 <IWDG_GetFlagStatus+0x10>)
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	4218      	tst	r0, r3
 800de5a:	bf0c      	ite	eq
 800de5c:	2000      	moveq	r0, #0
 800de5e:	2001      	movne	r0, #1
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	40003000 	.word	0x40003000

0800de68 <__WFI>:
 800de68:	bf30      	wfi
 800de6a:	4770      	bx	lr

0800de6c <PWR_DeInit>:
 800de6c:	2101      	movs	r1, #1
 800de6e:	b510      	push	{r4, lr}
 800de70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800de74:	f000 f9ae 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800de78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800de7c:	2100      	movs	r1, #0
 800de7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de82:	f000 b9a7 	b.w	800e1d4 <RCC_APB1PeriphResetCmd>

0800de86 <PWR_BackupAccessCmd>:
 800de86:	4b01      	ldr	r3, [pc, #4]	; (800de8c <PWR_BackupAccessCmd+0x6>)
 800de88:	6018      	str	r0, [r3, #0]
 800de8a:	4770      	bx	lr
 800de8c:	420e0020 	.word	0x420e0020

0800de90 <PWR_PVDCmd>:
 800de90:	4b01      	ldr	r3, [pc, #4]	; (800de98 <PWR_PVDCmd+0x8>)
 800de92:	6018      	str	r0, [r3, #0]
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	420e0010 	.word	0x420e0010

0800de9c <PWR_PVDLevelConfig>:
 800de9c:	4b03      	ldr	r3, [pc, #12]	; (800deac <PWR_PVDLevelConfig+0x10>)
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dea4:	ea40 0202 	orr.w	r2, r0, r2
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	4770      	bx	lr
 800deac:	40007000 	.word	0x40007000

0800deb0 <PWR_WakeUpPinCmd>:
 800deb0:	4b01      	ldr	r3, [pc, #4]	; (800deb8 <PWR_WakeUpPinCmd+0x8>)
 800deb2:	6018      	str	r0, [r3, #0]
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	420e00a0 	.word	0x420e00a0

0800debc <PWR_EnterSTOPMode>:
 800debc:	4b08      	ldr	r3, [pc, #32]	; (800dee0 <PWR_EnterSTOPMode+0x24>)
 800debe:	2901      	cmp	r1, #1
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	f022 0203 	bic.w	r2, r2, #3
 800dec6:	ea40 0202 	orr.w	r2, r0, r2
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <PWR_EnterSTOPMode+0x28>)
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	f042 0204 	orr.w	r2, r2, #4
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	d100      	bne.n	800deda <PWR_EnterSTOPMode+0x1e>
 800ded8:	e7c6      	b.n	800de68 <__WFI>
 800deda:	bf20      	wfe
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	40007000 	.word	0x40007000
 800dee4:	e000ed10 	.word	0xe000ed10

0800dee8 <PWR_EnterSTANDBYMode>:
 800dee8:	4b07      	ldr	r3, [pc, #28]	; (800df08 <PWR_EnterSTANDBYMode+0x20>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	f042 0204 	orr.w	r2, r2, #4
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	f042 0202 	orr.w	r2, r2, #2
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	4b04      	ldr	r3, [pc, #16]	; (800df0c <PWR_EnterSTANDBYMode+0x24>)
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	f042 0204 	orr.w	r2, r2, #4
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	e7b0      	b.n	800de68 <__WFI>
 800df06:	bf00      	nop
 800df08:	40007000 	.word	0x40007000
 800df0c:	e000ed10 	.word	0xe000ed10

0800df10 <PWR_GetFlagStatus>:
 800df10:	4b03      	ldr	r3, [pc, #12]	; (800df20 <PWR_GetFlagStatus+0x10>)
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	4218      	tst	r0, r3
 800df16:	bf0c      	ite	eq
 800df18:	2000      	moveq	r0, #0
 800df1a:	2001      	movne	r0, #1
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	40007000 	.word	0x40007000

0800df24 <PWR_ClearFlag>:
 800df24:	4b02      	ldr	r3, [pc, #8]	; (800df30 <PWR_ClearFlag+0xc>)
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	4770      	bx	lr
 800df30:	40007000 	.word	0x40007000

0800df34 <RCC_DeInit>:
 800df34:	4b0d      	ldr	r3, [pc, #52]	; (800df6c <RCC_DeInit+0x38>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	f042 0201 	orr.w	r2, r2, #1
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	6859      	ldr	r1, [r3, #4]
 800df40:	4a0b      	ldr	r2, [pc, #44]	; (800df70 <RCC_DeInit+0x3c>)
 800df42:	ea01 0202 	and.w	r2, r1, r2
 800df46:	605a      	str	r2, [r3, #4]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800df4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800df62:	605a      	str	r2, [r3, #4]
 800df64:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800df68:	609a      	str	r2, [r3, #8]
 800df6a:	4770      	bx	lr
 800df6c:	40021000 	.word	0x40021000
 800df70:	f8ff0000 	.word	0xf8ff0000

0800df74 <RCC_HSEConfig>:
 800df74:	4b0c      	ldr	r3, [pc, #48]	; (800dfa8 <RCC_HSEConfig+0x34>)
 800df76:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	d003      	beq.n	800df94 <RCC_HSEConfig+0x20>
 800df8c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800df90:	d109      	bne.n	800dfa6 <RCC_HSEConfig+0x32>
 800df92:	e004      	b.n	800df9e <RCC_HSEConfig+0x2a>
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800df9a:	601a      	str	r2, [r3, #0]
 800df9c:	4770      	bx	lr
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	4770      	bx	lr
 800dfa8:	40021000 	.word	0x40021000

0800dfac <RCC_AdjustHSICalibrationValue>:
 800dfac:	4b03      	ldr	r3, [pc, #12]	; (800dfbc <RCC_AdjustHSICalibrationValue+0x10>)
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800dfb4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	4770      	bx	lr
 800dfbc:	40021000 	.word	0x40021000

0800dfc0 <RCC_HSICmd>:
 800dfc0:	4b01      	ldr	r3, [pc, #4]	; (800dfc8 <RCC_HSICmd+0x8>)
 800dfc2:	6018      	str	r0, [r3, #0]
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	42420000 	.word	0x42420000

0800dfcc <RCC_PLLConfig>:
 800dfcc:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <RCC_PLLConfig+0x14>)
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800dfd4:	ea40 0202 	orr.w	r2, r0, r2
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	605a      	str	r2, [r3, #4]
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	40021000 	.word	0x40021000

0800dfe4 <RCC_PLLCmd>:
 800dfe4:	4b01      	ldr	r3, [pc, #4]	; (800dfec <RCC_PLLCmd+0x8>)
 800dfe6:	6018      	str	r0, [r3, #0]
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	42420060 	.word	0x42420060

0800dff0 <RCC_SYSCLKConfig>:
 800dff0:	4b03      	ldr	r3, [pc, #12]	; (800e000 <RCC_SYSCLKConfig+0x10>)
 800dff2:	685a      	ldr	r2, [r3, #4]
 800dff4:	f022 0203 	bic.w	r2, r2, #3
 800dff8:	ea40 0202 	orr.w	r2, r0, r2
 800dffc:	605a      	str	r2, [r3, #4]
 800dffe:	4770      	bx	lr
 800e000:	40021000 	.word	0x40021000

0800e004 <RCC_GetSYSCLKSource>:
 800e004:	4b02      	ldr	r3, [pc, #8]	; (800e010 <RCC_GetSYSCLKSource+0xc>)
 800e006:	6858      	ldr	r0, [r3, #4]
 800e008:	f000 000c 	and.w	r0, r0, #12
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	40021000 	.word	0x40021000

0800e014 <RCC_HCLKConfig>:
 800e014:	4b03      	ldr	r3, [pc, #12]	; (800e024 <RCC_HCLKConfig+0x10>)
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800e01c:	ea40 0202 	orr.w	r2, r0, r2
 800e020:	605a      	str	r2, [r3, #4]
 800e022:	4770      	bx	lr
 800e024:	40021000 	.word	0x40021000

0800e028 <RCC_PCLK1Config>:
 800e028:	4b03      	ldr	r3, [pc, #12]	; (800e038 <RCC_PCLK1Config+0x10>)
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e030:	ea40 0202 	orr.w	r2, r0, r2
 800e034:	605a      	str	r2, [r3, #4]
 800e036:	4770      	bx	lr
 800e038:	40021000 	.word	0x40021000

0800e03c <RCC_PCLK2Config>:
 800e03c:	4b03      	ldr	r3, [pc, #12]	; (800e04c <RCC_PCLK2Config+0x10>)
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800e044:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800e048:	605a      	str	r2, [r3, #4]
 800e04a:	4770      	bx	lr
 800e04c:	40021000 	.word	0x40021000

0800e050 <RCC_ITConfig>:
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <RCC_ITConfig+0x14>)
 800e052:	b111      	cbz	r1, 800e05a <RCC_ITConfig+0xa>
 800e054:	781a      	ldrb	r2, [r3, #0]
 800e056:	4310      	orrs	r0, r2
 800e058:	e002      	b.n	800e060 <RCC_ITConfig+0x10>
 800e05a:	781a      	ldrb	r2, [r3, #0]
 800e05c:	ea22 0000 	bic.w	r0, r2, r0
 800e060:	7018      	strb	r0, [r3, #0]
 800e062:	4770      	bx	lr
 800e064:	40021009 	.word	0x40021009

0800e068 <RCC_USBCLKConfig>:
 800e068:	4b01      	ldr	r3, [pc, #4]	; (800e070 <RCC_USBCLKConfig+0x8>)
 800e06a:	6018      	str	r0, [r3, #0]
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	424200d8 	.word	0x424200d8

0800e074 <RCC_ADCCLKConfig>:
 800e074:	4b03      	ldr	r3, [pc, #12]	; (800e084 <RCC_ADCCLKConfig+0x10>)
 800e076:	685a      	ldr	r2, [r3, #4]
 800e078:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e07c:	ea40 0202 	orr.w	r2, r0, r2
 800e080:	605a      	str	r2, [r3, #4]
 800e082:	4770      	bx	lr
 800e084:	40021000 	.word	0x40021000

0800e088 <RCC_LSEConfig>:
 800e088:	4b06      	ldr	r3, [pc, #24]	; (800e0a4 <RCC_LSEConfig+0x1c>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	2801      	cmp	r0, #1
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	701a      	strb	r2, [r3, #0]
 800e092:	d002      	beq.n	800e09a <RCC_LSEConfig+0x12>
 800e094:	2804      	cmp	r0, #4
 800e096:	d104      	bne.n	800e0a2 <RCC_LSEConfig+0x1a>
 800e098:	e001      	b.n	800e09e <RCC_LSEConfig+0x16>
 800e09a:	7018      	strb	r0, [r3, #0]
 800e09c:	4770      	bx	lr
 800e09e:	2205      	movs	r2, #5
 800e0a0:	701a      	strb	r2, [r3, #0]
 800e0a2:	4770      	bx	lr
 800e0a4:	40021020 	.word	0x40021020

0800e0a8 <RCC_LSICmd>:
 800e0a8:	4b01      	ldr	r3, [pc, #4]	; (800e0b0 <RCC_LSICmd+0x8>)
 800e0aa:	6018      	str	r0, [r3, #0]
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	42420480 	.word	0x42420480

0800e0b4 <RCC_RTCCLKConfig>:
 800e0b4:	4b02      	ldr	r3, [pc, #8]	; (800e0c0 <RCC_RTCCLKConfig+0xc>)
 800e0b6:	6a1a      	ldr	r2, [r3, #32]
 800e0b8:	ea40 0202 	orr.w	r2, r0, r2
 800e0bc:	621a      	str	r2, [r3, #32]
 800e0be:	4770      	bx	lr
 800e0c0:	40021000 	.word	0x40021000

0800e0c4 <RCC_RTCCLKCmd>:
 800e0c4:	4b01      	ldr	r3, [pc, #4]	; (800e0cc <RCC_RTCCLKCmd+0x8>)
 800e0c6:	6018      	str	r0, [r3, #0]
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	4242043c 	.word	0x4242043c

0800e0d0 <RCC_GetClocksFreq>:
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	4b22      	ldr	r3, [pc, #136]	; (800e15c <RCC_GetClocksFreq+0x8c>)
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	f002 020c 	and.w	r2, r2, #12
 800e0da:	2a04      	cmp	r2, #4
 800e0dc:	d003      	beq.n	800e0e6 <RCC_GetClocksFreq+0x16>
 800e0de:	2a08      	cmp	r2, #8
 800e0e0:	d004      	beq.n	800e0ec <RCC_GetClocksFreq+0x1c>
 800e0e2:	4b1f      	ldr	r3, [pc, #124]	; (800e160 <RCC_GetClocksFreq+0x90>)
 800e0e4:	e000      	b.n	800e0e8 <RCC_GetClocksFreq+0x18>
 800e0e6:	4b1f      	ldr	r3, [pc, #124]	; (800e164 <RCC_GetClocksFreq+0x94>)
 800e0e8:	6003      	str	r3, [r0, #0]
 800e0ea:	e012      	b.n	800e112 <RCC_GetClocksFreq+0x42>
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	6859      	ldr	r1, [r3, #4]
 800e0f0:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800e0f4:	0c92      	lsrs	r2, r2, #18
 800e0f6:	3202      	adds	r2, #2
 800e0f8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800e0fc:	d101      	bne.n	800e102 <RCC_GetClocksFreq+0x32>
 800e0fe:	4b1a      	ldr	r3, [pc, #104]	; (800e168 <RCC_GetClocksFreq+0x98>)
 800e100:	e005      	b.n	800e10e <RCC_GetClocksFreq+0x3e>
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e108:	bf14      	ite	ne
 800e10a:	4b18      	ldrne	r3, [pc, #96]	; (800e16c <RCC_GetClocksFreq+0x9c>)
 800e10c:	4b15      	ldreq	r3, [pc, #84]	; (800e164 <RCC_GetClocksFreq+0x94>)
 800e10e:	435a      	muls	r2, r3
 800e110:	6002      	str	r2, [r0, #0]
 800e112:	4a12      	ldr	r2, [pc, #72]	; (800e15c <RCC_GetClocksFreq+0x8c>)
 800e114:	4b16      	ldr	r3, [pc, #88]	; (800e170 <RCC_GetClocksFreq+0xa0>)
 800e116:	6851      	ldr	r1, [r2, #4]
 800e118:	6804      	ldr	r4, [r0, #0]
 800e11a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800e11e:	0909      	lsrs	r1, r1, #4
 800e120:	5c59      	ldrb	r1, [r3, r1]
 800e122:	fa34 f101 	lsrs.w	r1, r4, r1
 800e126:	6041      	str	r1, [r0, #4]
 800e128:	6854      	ldr	r4, [r2, #4]
 800e12a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 800e12e:	0a24      	lsrs	r4, r4, #8
 800e130:	5d1c      	ldrb	r4, [r3, r4]
 800e132:	fa31 f404 	lsrs.w	r4, r1, r4
 800e136:	6084      	str	r4, [r0, #8]
 800e138:	6854      	ldr	r4, [r2, #4]
 800e13a:	f404 5460 	and.w	r4, r4, #14336	; 0x3800
 800e13e:	0ae4      	lsrs	r4, r4, #11
 800e140:	5d1c      	ldrb	r4, [r3, r4]
 800e142:	40e1      	lsrs	r1, r4
 800e144:	60c1      	str	r1, [r0, #12]
 800e146:	6852      	ldr	r2, [r2, #4]
 800e148:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800e14c:	eb03 3392 	add.w	r3, r3, r2, lsr #14
 800e150:	7c1b      	ldrb	r3, [r3, #16]
 800e152:	fbb1 f1f3 	udiv	r1, r1, r3
 800e156:	6101      	str	r1, [r0, #16]
 800e158:	bd10      	pop	{r4, pc}
 800e15a:	bf00      	nop
 800e15c:	40021000 	.word	0x40021000
 800e160:	007a1200 	.word	0x007a1200
 800e164:	00b71b00 	.word	0x00b71b00
 800e168:	003d0900 	.word	0x003d0900
 800e16c:	005b8d80 	.word	0x005b8d80
 800e170:	20000170 	.word	0x20000170

0800e174 <RCC_AHBPeriphClockCmd>:
 800e174:	4b04      	ldr	r3, [pc, #16]	; (800e188 <RCC_AHBPeriphClockCmd+0x14>)
 800e176:	b111      	cbz	r1, 800e17e <RCC_AHBPeriphClockCmd+0xa>
 800e178:	695a      	ldr	r2, [r3, #20]
 800e17a:	4310      	orrs	r0, r2
 800e17c:	e002      	b.n	800e184 <RCC_AHBPeriphClockCmd+0x10>
 800e17e:	695a      	ldr	r2, [r3, #20]
 800e180:	ea22 0000 	bic.w	r0, r2, r0
 800e184:	6158      	str	r0, [r3, #20]
 800e186:	4770      	bx	lr
 800e188:	40021000 	.word	0x40021000

0800e18c <RCC_APB2PeriphClockCmd>:
 800e18c:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <RCC_APB2PeriphClockCmd+0x14>)
 800e18e:	b111      	cbz	r1, 800e196 <RCC_APB2PeriphClockCmd+0xa>
 800e190:	699a      	ldr	r2, [r3, #24]
 800e192:	4310      	orrs	r0, r2
 800e194:	e002      	b.n	800e19c <RCC_APB2PeriphClockCmd+0x10>
 800e196:	699a      	ldr	r2, [r3, #24]
 800e198:	ea22 0000 	bic.w	r0, r2, r0
 800e19c:	6198      	str	r0, [r3, #24]
 800e19e:	4770      	bx	lr
 800e1a0:	40021000 	.word	0x40021000

0800e1a4 <RCC_APB1PeriphClockCmd>:
 800e1a4:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <RCC_APB1PeriphClockCmd+0x14>)
 800e1a6:	b111      	cbz	r1, 800e1ae <RCC_APB1PeriphClockCmd+0xa>
 800e1a8:	69da      	ldr	r2, [r3, #28]
 800e1aa:	4310      	orrs	r0, r2
 800e1ac:	e002      	b.n	800e1b4 <RCC_APB1PeriphClockCmd+0x10>
 800e1ae:	69da      	ldr	r2, [r3, #28]
 800e1b0:	ea22 0000 	bic.w	r0, r2, r0
 800e1b4:	61d8      	str	r0, [r3, #28]
 800e1b6:	4770      	bx	lr
 800e1b8:	40021000 	.word	0x40021000

0800e1bc <RCC_APB2PeriphResetCmd>:
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <RCC_APB2PeriphResetCmd+0x14>)
 800e1be:	b111      	cbz	r1, 800e1c6 <RCC_APB2PeriphResetCmd+0xa>
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	4310      	orrs	r0, r2
 800e1c4:	e002      	b.n	800e1cc <RCC_APB2PeriphResetCmd+0x10>
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	ea22 0000 	bic.w	r0, r2, r0
 800e1cc:	60d8      	str	r0, [r3, #12]
 800e1ce:	4770      	bx	lr
 800e1d0:	40021000 	.word	0x40021000

0800e1d4 <RCC_APB1PeriphResetCmd>:
 800e1d4:	4b04      	ldr	r3, [pc, #16]	; (800e1e8 <RCC_APB1PeriphResetCmd+0x14>)
 800e1d6:	b111      	cbz	r1, 800e1de <RCC_APB1PeriphResetCmd+0xa>
 800e1d8:	691a      	ldr	r2, [r3, #16]
 800e1da:	4310      	orrs	r0, r2
 800e1dc:	e002      	b.n	800e1e4 <RCC_APB1PeriphResetCmd+0x10>
 800e1de:	691a      	ldr	r2, [r3, #16]
 800e1e0:	ea22 0000 	bic.w	r0, r2, r0
 800e1e4:	6118      	str	r0, [r3, #16]
 800e1e6:	4770      	bx	lr
 800e1e8:	40021000 	.word	0x40021000

0800e1ec <RCC_BackupResetCmd>:
 800e1ec:	4b01      	ldr	r3, [pc, #4]	; (800e1f4 <RCC_BackupResetCmd+0x8>)
 800e1ee:	6018      	str	r0, [r3, #0]
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	42420440 	.word	0x42420440

0800e1f8 <RCC_ClockSecuritySystemCmd>:
 800e1f8:	4b01      	ldr	r3, [pc, #4]	; (800e200 <RCC_ClockSecuritySystemCmd+0x8>)
 800e1fa:	6018      	str	r0, [r3, #0]
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	4242004c 	.word	0x4242004c

0800e204 <RCC_MCOConfig>:
 800e204:	4b01      	ldr	r3, [pc, #4]	; (800e20c <RCC_MCOConfig+0x8>)
 800e206:	7018      	strb	r0, [r3, #0]
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	40021007 	.word	0x40021007

0800e210 <RCC_GetFlagStatus>:
 800e210:	0943      	lsrs	r3, r0, #5
 800e212:	2b01      	cmp	r3, #1
 800e214:	4a07      	ldr	r2, [pc, #28]	; (800e234 <RCC_GetFlagStatus+0x24>)
 800e216:	d101      	bne.n	800e21c <RCC_GetFlagStatus+0xc>
 800e218:	6813      	ldr	r3, [r2, #0]
 800e21a:	e003      	b.n	800e224 <RCC_GetFlagStatus+0x14>
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	bf0c      	ite	eq
 800e220:	6a13      	ldreq	r3, [r2, #32]
 800e222:	6a53      	ldrne	r3, [r2, #36]	; 0x24
 800e224:	f000 001f 	and.w	r0, r0, #31
 800e228:	fa33 f000 	lsrs.w	r0, r3, r0
 800e22c:	f000 0001 	and.w	r0, r0, #1
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	40021000 	.word	0x40021000

0800e238 <RCC_WaitForHSEStartUp>:
 800e238:	b507      	push	{r0, r1, r2, lr}
 800e23a:	2300      	movs	r3, #0
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	2031      	movs	r0, #49	; 0x31
 800e240:	f7ff ffe6 	bl	800e210 <RCC_GetFlagStatus>
 800e244:	9b01      	ldr	r3, [sp, #4]
 800e246:	3301      	adds	r3, #1
 800e248:	9301      	str	r3, [sp, #4]
 800e24a:	9b01      	ldr	r3, [sp, #4]
 800e24c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e250:	d001      	beq.n	800e256 <RCC_WaitForHSEStartUp+0x1e>
 800e252:	2800      	cmp	r0, #0
 800e254:	d0f3      	beq.n	800e23e <RCC_WaitForHSEStartUp+0x6>
 800e256:	2031      	movs	r0, #49	; 0x31
 800e258:	f7ff ffda 	bl	800e210 <RCC_GetFlagStatus>
 800e25c:	3800      	subs	r0, #0
 800e25e:	bf18      	it	ne
 800e260:	2001      	movne	r0, #1
 800e262:	bd0e      	pop	{r1, r2, r3, pc}

0800e264 <RCC_ClearFlag>:
 800e264:	4b02      	ldr	r3, [pc, #8]	; (800e270 <RCC_ClearFlag+0xc>)
 800e266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e268:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800e26c:	625a      	str	r2, [r3, #36]	; 0x24
 800e26e:	4770      	bx	lr
 800e270:	40021000 	.word	0x40021000

0800e274 <RCC_GetITStatus>:
 800e274:	4b03      	ldr	r3, [pc, #12]	; (800e284 <RCC_GetITStatus+0x10>)
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	4218      	tst	r0, r3
 800e27a:	bf0c      	ite	eq
 800e27c:	2000      	moveq	r0, #0
 800e27e:	2001      	movne	r0, #1
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	40021000 	.word	0x40021000

0800e288 <RCC_ClearITPendingBit>:
 800e288:	4b01      	ldr	r3, [pc, #4]	; (800e290 <RCC_ClearITPendingBit+0x8>)
 800e28a:	7018      	strb	r0, [r3, #0]
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	4002100a 	.word	0x4002100a

0800e294 <RTC_ITConfig>:
 800e294:	4b05      	ldr	r3, [pc, #20]	; (800e2ac <RTC_ITConfig+0x18>)
 800e296:	b119      	cbz	r1, 800e2a0 <RTC_ITConfig+0xc>
 800e298:	881a      	ldrh	r2, [r3, #0]
 800e29a:	b292      	uxth	r2, r2
 800e29c:	4310      	orrs	r0, r2
 800e29e:	e003      	b.n	800e2a8 <RTC_ITConfig+0x14>
 800e2a0:	881a      	ldrh	r2, [r3, #0]
 800e2a2:	b292      	uxth	r2, r2
 800e2a4:	ea22 0000 	bic.w	r0, r2, r0
 800e2a8:	8018      	strh	r0, [r3, #0]
 800e2aa:	4770      	bx	lr
 800e2ac:	40002800 	.word	0x40002800

0800e2b0 <RTC_EnterConfigMode>:
 800e2b0:	4b03      	ldr	r3, [pc, #12]	; (800e2c0 <RTC_EnterConfigMode+0x10>)
 800e2b2:	889a      	ldrh	r2, [r3, #4]
 800e2b4:	b292      	uxth	r2, r2
 800e2b6:	f042 0210 	orr.w	r2, r2, #16
 800e2ba:	809a      	strh	r2, [r3, #4]
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	40002800 	.word	0x40002800

0800e2c4 <RTC_ExitConfigMode>:
 800e2c4:	4a03      	ldr	r2, [pc, #12]	; (800e2d4 <RTC_ExitConfigMode+0x10>)
 800e2c6:	8893      	ldrh	r3, [r2, #4]
 800e2c8:	f023 0310 	bic.w	r3, r3, #16
 800e2cc:	041b      	lsls	r3, r3, #16
 800e2ce:	0c1b      	lsrs	r3, r3, #16
 800e2d0:	8093      	strh	r3, [r2, #4]
 800e2d2:	4770      	bx	lr
 800e2d4:	40002800 	.word	0x40002800

0800e2d8 <RTC_GetCounter>:
 800e2d8:	4b03      	ldr	r3, [pc, #12]	; (800e2e8 <RTC_GetCounter+0x10>)
 800e2da:	8b9a      	ldrh	r2, [r3, #28]
 800e2dc:	8b18      	ldrh	r0, [r3, #24]
 800e2de:	b292      	uxth	r2, r2
 800e2e0:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	40002800 	.word	0x40002800

0800e2ec <RTC_SetCounter>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	f7ff ffde 	bl	800e2b0 <RTC_EnterConfigMode>
 800e2f4:	4b03      	ldr	r3, [pc, #12]	; (800e304 <RTC_SetCounter+0x18>)
 800e2f6:	0c22      	lsrs	r2, r4, #16
 800e2f8:	831a      	strh	r2, [r3, #24]
 800e2fa:	839c      	strh	r4, [r3, #28]
 800e2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e300:	e7e0      	b.n	800e2c4 <RTC_ExitConfigMode>
 800e302:	bf00      	nop
 800e304:	40002800 	.word	0x40002800

0800e308 <RTC_SetPrescaler>:
 800e308:	b510      	push	{r4, lr}
 800e30a:	4604      	mov	r4, r0
 800e30c:	f7ff ffd0 	bl	800e2b0 <RTC_EnterConfigMode>
 800e310:	4b04      	ldr	r3, [pc, #16]	; (800e324 <RTC_SetPrescaler+0x1c>)
 800e312:	f404 2270 	and.w	r2, r4, #983040	; 0xf0000
 800e316:	0c12      	lsrs	r2, r2, #16
 800e318:	811a      	strh	r2, [r3, #8]
 800e31a:	819c      	strh	r4, [r3, #12]
 800e31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e320:	e7d0      	b.n	800e2c4 <RTC_ExitConfigMode>
 800e322:	bf00      	nop
 800e324:	40002800 	.word	0x40002800

0800e328 <RTC_SetAlarm>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	4604      	mov	r4, r0
 800e32c:	f7ff ffc0 	bl	800e2b0 <RTC_EnterConfigMode>
 800e330:	4b03      	ldr	r3, [pc, #12]	; (800e340 <RTC_SetAlarm+0x18>)
 800e332:	0c22      	lsrs	r2, r4, #16
 800e334:	841a      	strh	r2, [r3, #32]
 800e336:	849c      	strh	r4, [r3, #36]	; 0x24
 800e338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e33c:	e7c2      	b.n	800e2c4 <RTC_ExitConfigMode>
 800e33e:	bf00      	nop
 800e340:	40002800 	.word	0x40002800

0800e344 <RTC_GetDivider>:
 800e344:	4b04      	ldr	r3, [pc, #16]	; (800e358 <RTC_GetDivider+0x14>)
 800e346:	8a18      	ldrh	r0, [r3, #16]
 800e348:	8a9b      	ldrh	r3, [r3, #20]
 800e34a:	f000 000f 	and.w	r0, r0, #15
 800e34e:	b29b      	uxth	r3, r3
 800e350:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	40002800 	.word	0x40002800

0800e35c <RTC_WaitForLastTask>:
 800e35c:	4b02      	ldr	r3, [pc, #8]	; (800e368 <RTC_WaitForLastTask+0xc>)
 800e35e:	889b      	ldrh	r3, [r3, #4]
 800e360:	f013 0f20 	tst.w	r3, #32
 800e364:	d0fa      	beq.n	800e35c <RTC_WaitForLastTask>
 800e366:	4770      	bx	lr
 800e368:	40002800 	.word	0x40002800

0800e36c <RTC_WaitForSynchro>:
 800e36c:	4a06      	ldr	r2, [pc, #24]	; (800e388 <RTC_WaitForSynchro+0x1c>)
 800e36e:	8893      	ldrh	r3, [r2, #4]
 800e370:	f023 0308 	bic.w	r3, r3, #8
 800e374:	041b      	lsls	r3, r3, #16
 800e376:	0c1b      	lsrs	r3, r3, #16
 800e378:	8093      	strh	r3, [r2, #4]
 800e37a:	4b03      	ldr	r3, [pc, #12]	; (800e388 <RTC_WaitForSynchro+0x1c>)
 800e37c:	889b      	ldrh	r3, [r3, #4]
 800e37e:	f013 0f08 	tst.w	r3, #8
 800e382:	d0fa      	beq.n	800e37a <RTC_WaitForSynchro+0xe>
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	40002800 	.word	0x40002800

0800e38c <RTC_GetFlagStatus>:
 800e38c:	4b03      	ldr	r3, [pc, #12]	; (800e39c <RTC_GetFlagStatus+0x10>)
 800e38e:	889b      	ldrh	r3, [r3, #4]
 800e390:	4218      	tst	r0, r3
 800e392:	bf0c      	ite	eq
 800e394:	2000      	moveq	r0, #0
 800e396:	2001      	movne	r0, #1
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	40002800 	.word	0x40002800

0800e3a0 <RTC_ClearFlag>:
 800e3a0:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <RTC_ClearFlag+0x10>)
 800e3a2:	889a      	ldrh	r2, [r3, #4]
 800e3a4:	b292      	uxth	r2, r2
 800e3a6:	ea22 0200 	bic.w	r2, r2, r0
 800e3aa:	809a      	strh	r2, [r3, #4]
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	40002800 	.word	0x40002800

0800e3b4 <RTC_GetITStatus>:
 800e3b4:	4b07      	ldr	r3, [pc, #28]	; (800e3d4 <RTC_GetITStatus+0x20>)
 800e3b6:	889a      	ldrh	r2, [r3, #4]
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	b292      	uxth	r2, r2
 800e3bc:	4003      	ands	r3, r0
 800e3be:	d006      	beq.n	800e3ce <RTC_GetITStatus+0x1a>
 800e3c0:	4010      	ands	r0, r2
 800e3c2:	f010 0fff 	tst.w	r0, #255	; 0xff
 800e3c6:	bf0c      	ite	eq
 800e3c8:	2000      	moveq	r0, #0
 800e3ca:	2001      	movne	r0, #1
 800e3cc:	4770      	bx	lr
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	40002800 	.word	0x40002800

0800e3d8 <RTC_ClearITPendingBit>:
 800e3d8:	4b03      	ldr	r3, [pc, #12]	; (800e3e8 <RTC_ClearITPendingBit+0x10>)
 800e3da:	889a      	ldrh	r2, [r3, #4]
 800e3dc:	b292      	uxth	r2, r2
 800e3de:	ea22 0200 	bic.w	r2, r2, r0
 800e3e2:	809a      	strh	r2, [r3, #4]
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	40002800 	.word	0x40002800

0800e3ec <SPI_I2S_DeInit>:
 800e3ec:	4b15      	ldr	r3, [pc, #84]	; (800e444 <SPI_I2S_DeInit+0x58>)
 800e3ee:	b510      	push	{r4, lr}
 800e3f0:	4298      	cmp	r0, r3
 800e3f2:	d10b      	bne.n	800e40c <SPI_I2S_DeInit+0x20>
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e3fa:	f7ff fedf 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800e3fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e402:	2100      	movs	r1, #0
 800e404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e408:	f7ff bed8 	b.w	800e1bc <RCC_APB2PeriphResetCmd>
 800e40c:	4b0e      	ldr	r3, [pc, #56]	; (800e448 <SPI_I2S_DeInit+0x5c>)
 800e40e:	4298      	cmp	r0, r3
 800e410:	d107      	bne.n	800e422 <SPI_I2S_DeInit+0x36>
 800e412:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e416:	2101      	movs	r1, #1
 800e418:	f7ff fedc 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e41c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e420:	e009      	b.n	800e436 <SPI_I2S_DeInit+0x4a>
 800e422:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <SPI_I2S_DeInit+0x60>)
 800e424:	4298      	cmp	r0, r3
 800e426:	d10b      	bne.n	800e440 <SPI_I2S_DeInit+0x54>
 800e428:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e42c:	2101      	movs	r1, #1
 800e42e:	f7ff fed1 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e432:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e436:	2100      	movs	r1, #0
 800e438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e43c:	f7ff beca 	b.w	800e1d4 <RCC_APB1PeriphResetCmd>
 800e440:	bd10      	pop	{r4, pc}
 800e442:	bf00      	nop
 800e444:	40013000 	.word	0x40013000
 800e448:	40003800 	.word	0x40003800
 800e44c:	40003c00 	.word	0x40003c00

0800e450 <SPI_Init>:
 800e450:	880b      	ldrh	r3, [r1, #0]
 800e452:	b510      	push	{r4, lr}
 800e454:	884c      	ldrh	r4, [r1, #2]
 800e456:	8802      	ldrh	r2, [r0, #0]
 800e458:	ea44 0303 	orr.w	r3, r4, r3
 800e45c:	888c      	ldrh	r4, [r1, #4]
 800e45e:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
 800e462:	4323      	orrs	r3, r4
 800e464:	88cc      	ldrh	r4, [r1, #6]
 800e466:	4323      	orrs	r3, r4
 800e468:	890c      	ldrh	r4, [r1, #8]
 800e46a:	4323      	orrs	r3, r4
 800e46c:	894c      	ldrh	r4, [r1, #10]
 800e46e:	4323      	orrs	r3, r4
 800e470:	898c      	ldrh	r4, [r1, #12]
 800e472:	4323      	orrs	r3, r4
 800e474:	89cc      	ldrh	r4, [r1, #14]
 800e476:	4323      	orrs	r3, r4
 800e478:	ea42 0303 	orr.w	r3, r2, r3
 800e47c:	8003      	strh	r3, [r0, #0]
 800e47e:	8b83      	ldrh	r3, [r0, #28]
 800e480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e484:	041b      	lsls	r3, r3, #16
 800e486:	0c1b      	lsrs	r3, r3, #16
 800e488:	8383      	strh	r3, [r0, #28]
 800e48a:	8a0b      	ldrh	r3, [r1, #16]
 800e48c:	8203      	strh	r3, [r0, #16]
 800e48e:	bd10      	pop	{r4, pc}

0800e490 <I2S_Init>:
 800e490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e492:	8b83      	ldrh	r3, [r0, #28]
 800e494:	b087      	sub	sp, #28
 800e496:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800e49a:	f023 031f 	bic.w	r3, r3, #31
 800e49e:	041b      	lsls	r3, r3, #16
 800e4a0:	0c1b      	lsrs	r3, r3, #16
 800e4a2:	8383      	strh	r3, [r0, #28]
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	8403      	strh	r3, [r0, #32]
 800e4a8:	890b      	ldrh	r3, [r1, #8]
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	460d      	mov	r5, r1
 800e4b0:	8b86      	ldrh	r6, [r0, #28]
 800e4b2:	d023      	beq.n	800e4fc <I2S_Init+0x6c>
 800e4b4:	a801      	add	r0, sp, #4
 800e4b6:	888f      	ldrh	r7, [r1, #4]
 800e4b8:	f7ff fe0a 	bl	800e0d0 <RCC_GetClocksFreq>
 800e4bc:	88eb      	ldrh	r3, [r5, #6]
 800e4be:	2f00      	cmp	r7, #0
 800e4c0:	bf14      	ite	ne
 800e4c2:	2702      	movne	r7, #2
 800e4c4:	2701      	moveq	r7, #1
 800e4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4ca:	9a01      	ldr	r2, [sp, #4]
 800e4cc:	f04f 030a 	mov.w	r3, #10
 800e4d0:	d101      	bne.n	800e4d6 <I2S_Init+0x46>
 800e4d2:	0a12      	lsrs	r2, r2, #8
 800e4d4:	e002      	b.n	800e4dc <I2S_Init+0x4c>
 800e4d6:	017f      	lsls	r7, r7, #5
 800e4d8:	fbb2 f2f7 	udiv	r2, r2, r7
 800e4dc:	4353      	muls	r3, r2
 800e4de:	8929      	ldrh	r1, [r5, #8]
 800e4e0:	220a      	movs	r2, #10
 800e4e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4e6:	3305      	adds	r3, #5
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4ee:	f003 0201 	and.w	r2, r3, #1
 800e4f2:	0212      	lsls	r2, r2, #8
 800e4f4:	085b      	lsrs	r3, r3, #1
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	b292      	uxth	r2, r2
 800e4fa:	e000      	b.n	800e4fe <I2S_Init+0x6e>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	1e99      	subs	r1, r3, #2
 800e500:	b289      	uxth	r1, r1
 800e502:	29fe      	cmp	r1, #254	; 0xfe
 800e504:	bf28      	it	cs
 800e506:	2200      	movcs	r2, #0
 800e508:	88e9      	ldrh	r1, [r5, #6]
 800e50a:	bf28      	it	cs
 800e50c:	2302      	movcs	r3, #2
 800e50e:	4313      	orrs	r3, r2
 800e510:	430b      	orrs	r3, r1
 800e512:	8423      	strh	r3, [r4, #32]
 800e514:	882b      	ldrh	r3, [r5, #0]
 800e516:	886a      	ldrh	r2, [r5, #2]
 800e518:	ea46 0303 	orr.w	r3, r6, r3
 800e51c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e520:	4313      	orrs	r3, r2
 800e522:	88aa      	ldrh	r2, [r5, #4]
 800e524:	4313      	orrs	r3, r2
 800e526:	896a      	ldrh	r2, [r5, #10]
 800e528:	4313      	orrs	r3, r2
 800e52a:	83a3      	strh	r3, [r4, #28]
 800e52c:	b007      	add	sp, #28
 800e52e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e530 <SPI_StructInit>:
 800e530:	2300      	movs	r3, #0
 800e532:	8003      	strh	r3, [r0, #0]
 800e534:	8043      	strh	r3, [r0, #2]
 800e536:	8083      	strh	r3, [r0, #4]
 800e538:	80c3      	strh	r3, [r0, #6]
 800e53a:	8103      	strh	r3, [r0, #8]
 800e53c:	8143      	strh	r3, [r0, #10]
 800e53e:	8183      	strh	r3, [r0, #12]
 800e540:	81c3      	strh	r3, [r0, #14]
 800e542:	2307      	movs	r3, #7
 800e544:	8203      	strh	r3, [r0, #16]
 800e546:	4770      	bx	lr

0800e548 <I2S_StructInit>:
 800e548:	2300      	movs	r3, #0
 800e54a:	2202      	movs	r2, #2
 800e54c:	8003      	strh	r3, [r0, #0]
 800e54e:	8043      	strh	r3, [r0, #2]
 800e550:	8083      	strh	r3, [r0, #4]
 800e552:	80c3      	strh	r3, [r0, #6]
 800e554:	8102      	strh	r2, [r0, #8]
 800e556:	8143      	strh	r3, [r0, #10]
 800e558:	4770      	bx	lr

0800e55a <SPI_Cmd>:
 800e55a:	b121      	cbz	r1, 800e566 <SPI_Cmd+0xc>
 800e55c:	8803      	ldrh	r3, [r0, #0]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e564:	e004      	b.n	800e570 <SPI_Cmd+0x16>
 800e566:	8803      	ldrh	r3, [r0, #0]
 800e568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e56c:	041b      	lsls	r3, r3, #16
 800e56e:	0c1b      	lsrs	r3, r3, #16
 800e570:	8003      	strh	r3, [r0, #0]
 800e572:	4770      	bx	lr

0800e574 <I2S_Cmd>:
 800e574:	b121      	cbz	r1, 800e580 <I2S_Cmd+0xc>
 800e576:	8b83      	ldrh	r3, [r0, #28]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e57e:	e004      	b.n	800e58a <I2S_Cmd+0x16>
 800e580:	8b83      	ldrh	r3, [r0, #28]
 800e582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e586:	041b      	lsls	r3, r3, #16
 800e588:	0c1b      	lsrs	r3, r3, #16
 800e58a:	8383      	strh	r3, [r0, #28]
 800e58c:	4770      	bx	lr

0800e58e <SPI_I2S_ITConfig>:
 800e58e:	0909      	lsrs	r1, r1, #4
 800e590:	2301      	movs	r3, #1
 800e592:	408b      	lsls	r3, r1
 800e594:	b29b      	uxth	r3, r3
 800e596:	b11a      	cbz	r2, 800e5a0 <SPI_I2S_ITConfig+0x12>
 800e598:	8882      	ldrh	r2, [r0, #4]
 800e59a:	b292      	uxth	r2, r2
 800e59c:	4313      	orrs	r3, r2
 800e59e:	e003      	b.n	800e5a8 <SPI_I2S_ITConfig+0x1a>
 800e5a0:	8882      	ldrh	r2, [r0, #4]
 800e5a2:	b292      	uxth	r2, r2
 800e5a4:	ea22 0303 	bic.w	r3, r2, r3
 800e5a8:	8083      	strh	r3, [r0, #4]
 800e5aa:	4770      	bx	lr

0800e5ac <SPI_I2S_DMACmd>:
 800e5ac:	b11a      	cbz	r2, 800e5b6 <SPI_I2S_DMACmd+0xa>
 800e5ae:	8883      	ldrh	r3, [r0, #4]
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	4319      	orrs	r1, r3
 800e5b4:	e003      	b.n	800e5be <SPI_I2S_DMACmd+0x12>
 800e5b6:	8883      	ldrh	r3, [r0, #4]
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	ea23 0101 	bic.w	r1, r3, r1
 800e5be:	8081      	strh	r1, [r0, #4]
 800e5c0:	4770      	bx	lr

0800e5c2 <SPI_I2S_SendData>:
 800e5c2:	8181      	strh	r1, [r0, #12]
 800e5c4:	4770      	bx	lr

0800e5c6 <SPI_I2S_ReceiveData>:
 800e5c6:	8980      	ldrh	r0, [r0, #12]
 800e5c8:	b280      	uxth	r0, r0
 800e5ca:	4770      	bx	lr

0800e5cc <SPI_NSSInternalSoftwareConfig>:
 800e5cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e5d0:	4299      	cmp	r1, r3
 800e5d2:	d004      	beq.n	800e5de <SPI_NSSInternalSoftwareConfig+0x12>
 800e5d4:	8803      	ldrh	r3, [r0, #0]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5dc:	e004      	b.n	800e5e8 <SPI_NSSInternalSoftwareConfig+0x1c>
 800e5de:	8803      	ldrh	r3, [r0, #0]
 800e5e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5e4:	041b      	lsls	r3, r3, #16
 800e5e6:	0c1b      	lsrs	r3, r3, #16
 800e5e8:	8003      	strh	r3, [r0, #0]
 800e5ea:	4770      	bx	lr

0800e5ec <SPI_SSOutputCmd>:
 800e5ec:	b121      	cbz	r1, 800e5f8 <SPI_SSOutputCmd+0xc>
 800e5ee:	8883      	ldrh	r3, [r0, #4]
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	f043 0304 	orr.w	r3, r3, #4
 800e5f6:	e004      	b.n	800e602 <SPI_SSOutputCmd+0x16>
 800e5f8:	8883      	ldrh	r3, [r0, #4]
 800e5fa:	f023 0304 	bic.w	r3, r3, #4
 800e5fe:	041b      	lsls	r3, r3, #16
 800e600:	0c1b      	lsrs	r3, r3, #16
 800e602:	8083      	strh	r3, [r0, #4]
 800e604:	4770      	bx	lr

0800e606 <SPI_DataSizeConfig>:
 800e606:	8803      	ldrh	r3, [r0, #0]
 800e608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e60c:	041b      	lsls	r3, r3, #16
 800e60e:	0c1b      	lsrs	r3, r3, #16
 800e610:	8003      	strh	r3, [r0, #0]
 800e612:	8803      	ldrh	r3, [r0, #0]
 800e614:	b29b      	uxth	r3, r3
 800e616:	ea41 0303 	orr.w	r3, r1, r3
 800e61a:	8003      	strh	r3, [r0, #0]
 800e61c:	4770      	bx	lr

0800e61e <SPI_TransmitCRC>:
 800e61e:	8803      	ldrh	r3, [r0, #0]
 800e620:	b29b      	uxth	r3, r3
 800e622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e626:	8003      	strh	r3, [r0, #0]
 800e628:	4770      	bx	lr

0800e62a <SPI_CalculateCRC>:
 800e62a:	b121      	cbz	r1, 800e636 <SPI_CalculateCRC+0xc>
 800e62c:	8803      	ldrh	r3, [r0, #0]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e634:	e004      	b.n	800e640 <SPI_CalculateCRC+0x16>
 800e636:	8803      	ldrh	r3, [r0, #0]
 800e638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e63c:	041b      	lsls	r3, r3, #16
 800e63e:	0c1b      	lsrs	r3, r3, #16
 800e640:	8003      	strh	r3, [r0, #0]
 800e642:	4770      	bx	lr

0800e644 <SPI_GetCRC>:
 800e644:	2901      	cmp	r1, #1
 800e646:	d002      	beq.n	800e64e <SPI_GetCRC+0xa>
 800e648:	8b00      	ldrh	r0, [r0, #24]
 800e64a:	b280      	uxth	r0, r0
 800e64c:	4770      	bx	lr
 800e64e:	8a80      	ldrh	r0, [r0, #20]
 800e650:	b280      	uxth	r0, r0
 800e652:	4770      	bx	lr

0800e654 <SPI_GetCRCPolynomial>:
 800e654:	8a00      	ldrh	r0, [r0, #16]
 800e656:	b280      	uxth	r0, r0
 800e658:	4770      	bx	lr

0800e65a <SPI_BiDirectionalLineConfig>:
 800e65a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800e65e:	d104      	bne.n	800e66a <SPI_BiDirectionalLineConfig+0x10>
 800e660:	8803      	ldrh	r3, [r0, #0]
 800e662:	b29b      	uxth	r3, r3
 800e664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e668:	e004      	b.n	800e674 <SPI_BiDirectionalLineConfig+0x1a>
 800e66a:	8803      	ldrh	r3, [r0, #0]
 800e66c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e670:	041b      	lsls	r3, r3, #16
 800e672:	0c1b      	lsrs	r3, r3, #16
 800e674:	8003      	strh	r3, [r0, #0]
 800e676:	4770      	bx	lr

0800e678 <SPI_I2S_GetFlagStatus>:
 800e678:	8903      	ldrh	r3, [r0, #8]
 800e67a:	4219      	tst	r1, r3
 800e67c:	bf0c      	ite	eq
 800e67e:	2000      	moveq	r0, #0
 800e680:	2001      	movne	r0, #1
 800e682:	4770      	bx	lr

0800e684 <SPI_I2S_ClearFlag>:
 800e684:	43c9      	mvns	r1, r1
 800e686:	8101      	strh	r1, [r0, #8]
 800e688:	4770      	bx	lr

0800e68a <SPI_I2S_GetITStatus>:
 800e68a:	2301      	movs	r3, #1
 800e68c:	f001 020f 	and.w	r2, r1, #15
 800e690:	fa13 f202 	lsls.w	r2, r3, r2
 800e694:	b510      	push	{r4, lr}
 800e696:	8884      	ldrh	r4, [r0, #4]
 800e698:	8900      	ldrh	r0, [r0, #8]
 800e69a:	b2a4      	uxth	r4, r4
 800e69c:	b280      	uxth	r0, r0
 800e69e:	4010      	ands	r0, r2
 800e6a0:	d005      	beq.n	800e6ae <SPI_I2S_GetITStatus+0x24>
 800e6a2:	0909      	lsrs	r1, r1, #4
 800e6a4:	408b      	lsls	r3, r1
 800e6a6:	421c      	tst	r4, r3
 800e6a8:	bf0c      	ite	eq
 800e6aa:	2000      	moveq	r0, #0
 800e6ac:	2001      	movne	r0, #1
 800e6ae:	bd10      	pop	{r4, pc}

0800e6b0 <SPI_I2S_ClearITPendingBit>:
 800e6b0:	f001 010f 	and.w	r1, r1, #15
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	408b      	lsls	r3, r1
 800e6b8:	43db      	mvns	r3, r3
 800e6ba:	8103      	strh	r3, [r0, #8]
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop

0800e6c0 <TI1_Config>:
 800e6c0:	b530      	push	{r4, r5, lr}
 800e6c2:	8c04      	ldrh	r4, [r0, #32]
 800e6c4:	f024 0401 	bic.w	r4, r4, #1
 800e6c8:	0424      	lsls	r4, r4, #16
 800e6ca:	0c24      	lsrs	r4, r4, #16
 800e6cc:	8404      	strh	r4, [r0, #32]
 800e6ce:	8b04      	ldrh	r4, [r0, #24]
 800e6d0:	8c05      	ldrh	r5, [r0, #32]
 800e6d2:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 800e6d6:	f025 0502 	bic.w	r5, r5, #2
 800e6da:	0424      	lsls	r4, r4, #16
 800e6dc:	042d      	lsls	r5, r5, #16
 800e6de:	0c24      	lsrs	r4, r4, #16
 800e6e0:	0c2d      	lsrs	r5, r5, #16
 800e6e2:	ea42 0404 	orr.w	r4, r2, r4
 800e6e6:	f045 0501 	orr.w	r5, r5, #1
 800e6ea:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 800e6ee:	430d      	orrs	r5, r1
 800e6f0:	8304      	strh	r4, [r0, #24]
 800e6f2:	8405      	strh	r5, [r0, #32]
 800e6f4:	bd30      	pop	{r4, r5, pc}

0800e6f6 <TI2_Config>:
 800e6f6:	b530      	push	{r4, r5, lr}
 800e6f8:	8c04      	ldrh	r4, [r0, #32]
 800e6fa:	f024 0410 	bic.w	r4, r4, #16
 800e6fe:	0424      	lsls	r4, r4, #16
 800e700:	0c24      	lsrs	r4, r4, #16
 800e702:	8404      	strh	r4, [r0, #32]
 800e704:	8b04      	ldrh	r4, [r0, #24]
 800e706:	8c05      	ldrh	r5, [r0, #32]
 800e708:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800e70c:	f025 0520 	bic.w	r5, r5, #32
 800e710:	0524      	lsls	r4, r4, #20
 800e712:	042d      	lsls	r5, r5, #16
 800e714:	0d24      	lsrs	r4, r4, #20
 800e716:	0c2d      	lsrs	r5, r5, #16
 800e718:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800e71c:	f045 0510 	orr.w	r5, r5, #16
 800e720:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
 800e724:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
 800e728:	8304      	strh	r4, [r0, #24]
 800e72a:	8405      	strh	r5, [r0, #32]
 800e72c:	bd30      	pop	{r4, r5, pc}

0800e72e <TIM_DeInit>:
 800e72e:	4b2b      	ldr	r3, [pc, #172]	; (800e7dc <TIM_DeInit+0xae>)
 800e730:	b510      	push	{r4, lr}
 800e732:	4298      	cmp	r0, r3
 800e734:	d107      	bne.n	800e746 <TIM_DeInit+0x18>
 800e736:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e73a:	2101      	movs	r1, #1
 800e73c:	f7ff fd3e 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800e740:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e744:	e043      	b.n	800e7ce <TIM_DeInit+0xa0>
 800e746:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800e74a:	d105      	bne.n	800e758 <TIM_DeInit+0x2a>
 800e74c:	2001      	movs	r0, #1
 800e74e:	4601      	mov	r1, r0
 800e750:	f7ff fd40 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e754:	2001      	movs	r0, #1
 800e756:	e007      	b.n	800e768 <TIM_DeInit+0x3a>
 800e758:	4b21      	ldr	r3, [pc, #132]	; (800e7e0 <TIM_DeInit+0xb2>)
 800e75a:	4298      	cmp	r0, r3
 800e75c:	d109      	bne.n	800e772 <TIM_DeInit+0x44>
 800e75e:	2002      	movs	r0, #2
 800e760:	2101      	movs	r1, #1
 800e762:	f7ff fd37 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e766:	2002      	movs	r0, #2
 800e768:	2100      	movs	r1, #0
 800e76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e76e:	f7ff bd31 	b.w	800e1d4 <RCC_APB1PeriphResetCmd>
 800e772:	4b1c      	ldr	r3, [pc, #112]	; (800e7e4 <TIM_DeInit+0xb6>)
 800e774:	4298      	cmp	r0, r3
 800e776:	d105      	bne.n	800e784 <TIM_DeInit+0x56>
 800e778:	2004      	movs	r0, #4
 800e77a:	2101      	movs	r1, #1
 800e77c:	f7ff fd2a 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e780:	2004      	movs	r0, #4
 800e782:	e7f1      	b.n	800e768 <TIM_DeInit+0x3a>
 800e784:	4b18      	ldr	r3, [pc, #96]	; (800e7e8 <TIM_DeInit+0xba>)
 800e786:	4298      	cmp	r0, r3
 800e788:	d105      	bne.n	800e796 <TIM_DeInit+0x68>
 800e78a:	2008      	movs	r0, #8
 800e78c:	2101      	movs	r1, #1
 800e78e:	f7ff fd21 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e792:	2008      	movs	r0, #8
 800e794:	e7e8      	b.n	800e768 <TIM_DeInit+0x3a>
 800e796:	4b15      	ldr	r3, [pc, #84]	; (800e7ec <TIM_DeInit+0xbe>)
 800e798:	4298      	cmp	r0, r3
 800e79a:	d105      	bne.n	800e7a8 <TIM_DeInit+0x7a>
 800e79c:	2010      	movs	r0, #16
 800e79e:	2101      	movs	r1, #1
 800e7a0:	f7ff fd18 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e7a4:	2010      	movs	r0, #16
 800e7a6:	e7df      	b.n	800e768 <TIM_DeInit+0x3a>
 800e7a8:	4b11      	ldr	r3, [pc, #68]	; (800e7f0 <TIM_DeInit+0xc2>)
 800e7aa:	4298      	cmp	r0, r3
 800e7ac:	d105      	bne.n	800e7ba <TIM_DeInit+0x8c>
 800e7ae:	2020      	movs	r0, #32
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	f7ff fd0f 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800e7b6:	2020      	movs	r0, #32
 800e7b8:	e7d6      	b.n	800e768 <TIM_DeInit+0x3a>
 800e7ba:	4b0e      	ldr	r3, [pc, #56]	; (800e7f4 <TIM_DeInit+0xc6>)
 800e7bc:	4298      	cmp	r0, r3
 800e7be:	d10b      	bne.n	800e7d8 <TIM_DeInit+0xaa>
 800e7c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e7c4:	2101      	movs	r1, #1
 800e7c6:	f7ff fcf9 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800e7ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7d4:	f7ff bcf2 	b.w	800e1bc <RCC_APB2PeriphResetCmd>
 800e7d8:	bd10      	pop	{r4, pc}
 800e7da:	bf00      	nop
 800e7dc:	40012c00 	.word	0x40012c00
 800e7e0:	40000400 	.word	0x40000400
 800e7e4:	40000800 	.word	0x40000800
 800e7e8:	40000c00 	.word	0x40000c00
 800e7ec:	40001000 	.word	0x40001000
 800e7f0:	40001400 	.word	0x40001400
 800e7f4:	40013400 	.word	0x40013400

0800e7f8 <TIM_TimeBaseInit>:
 800e7f8:	8803      	ldrh	r3, [r0, #0]
 800e7fa:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 800e7fe:	8003      	strh	r3, [r0, #0]
 800e800:	88ca      	ldrh	r2, [r1, #6]
 800e802:	8803      	ldrh	r3, [r0, #0]
 800e804:	4313      	orrs	r3, r2
 800e806:	884a      	ldrh	r2, [r1, #2]
 800e808:	4313      	orrs	r3, r2
 800e80a:	8003      	strh	r3, [r0, #0]
 800e80c:	888b      	ldrh	r3, [r1, #4]
 800e80e:	8583      	strh	r3, [r0, #44]	; 0x2c
 800e810:	880b      	ldrh	r3, [r1, #0]
 800e812:	8503      	strh	r3, [r0, #40]	; 0x28
 800e814:	4b05      	ldr	r3, [pc, #20]	; (800e82c <TIM_TimeBaseInit+0x34>)
 800e816:	4298      	cmp	r0, r3
 800e818:	d002      	beq.n	800e820 <TIM_TimeBaseInit+0x28>
 800e81a:	4b05      	ldr	r3, [pc, #20]	; (800e830 <TIM_TimeBaseInit+0x38>)
 800e81c:	4298      	cmp	r0, r3
 800e81e:	d101      	bne.n	800e824 <TIM_TimeBaseInit+0x2c>
 800e820:	7a0b      	ldrb	r3, [r1, #8]
 800e822:	8603      	strh	r3, [r0, #48]	; 0x30
 800e824:	2301      	movs	r3, #1
 800e826:	8283      	strh	r3, [r0, #20]
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	40012c00 	.word	0x40012c00
 800e830:	40013400 	.word	0x40013400

0800e834 <TIM_OC1Init>:
 800e834:	8c03      	ldrh	r3, [r0, #32]
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	f023 0301 	bic.w	r3, r3, #1
 800e83c:	041b      	lsls	r3, r3, #16
 800e83e:	0c1b      	lsrs	r3, r3, #16
 800e840:	8403      	strh	r3, [r0, #32]
 800e842:	8c03      	ldrh	r3, [r0, #32]
 800e844:	8884      	ldrh	r4, [r0, #4]
 800e846:	8b02      	ldrh	r2, [r0, #24]
 800e848:	880d      	ldrh	r5, [r1, #0]
 800e84a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e84e:	0412      	lsls	r2, r2, #16
 800e850:	0c12      	lsrs	r2, r2, #16
 800e852:	884e      	ldrh	r6, [r1, #2]
 800e854:	432a      	orrs	r2, r5
 800e856:	890d      	ldrh	r5, [r1, #8]
 800e858:	f023 0302 	bic.w	r3, r3, #2
 800e85c:	041b      	lsls	r3, r3, #16
 800e85e:	ea46 0505 	orr.w	r5, r6, r5
 800e862:	0c1b      	lsrs	r3, r3, #16
 800e864:	b2ad      	uxth	r5, r5
 800e866:	ea45 0303 	orr.w	r3, r5, r3
 800e86a:	88cd      	ldrh	r5, [r1, #6]
 800e86c:	8685      	strh	r5, [r0, #52]	; 0x34
 800e86e:	4d0f      	ldr	r5, [pc, #60]	; (800e8ac <TIM_OC1Init+0x78>)
 800e870:	42a8      	cmp	r0, r5
 800e872:	d002      	beq.n	800e87a <TIM_OC1Init+0x46>
 800e874:	4d0e      	ldr	r5, [pc, #56]	; (800e8b0 <TIM_OC1Init+0x7c>)
 800e876:	42a8      	cmp	r0, r5
 800e878:	d114      	bne.n	800e8a4 <TIM_OC1Init+0x70>
 800e87a:	f64f 75f7 	movw	r5, #65527	; 0xfff7
 800e87e:	ea03 0505 	and.w	r5, r3, r5
 800e882:	894b      	ldrh	r3, [r1, #10]
 800e884:	431d      	orrs	r5, r3
 800e886:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800e88a:	ea05 0303 	and.w	r3, r5, r3
 800e88e:	888d      	ldrh	r5, [r1, #4]
 800e890:	432b      	orrs	r3, r5
 800e892:	f647 45ff 	movw	r5, #31999	; 0x7cff
 800e896:	ea04 0505 	and.w	r5, r4, r5
 800e89a:	89cc      	ldrh	r4, [r1, #14]
 800e89c:	8989      	ldrh	r1, [r1, #12]
 800e89e:	430c      	orrs	r4, r1
 800e8a0:	b2a4      	uxth	r4, r4
 800e8a2:	432c      	orrs	r4, r5
 800e8a4:	8084      	strh	r4, [r0, #4]
 800e8a6:	8302      	strh	r2, [r0, #24]
 800e8a8:	8403      	strh	r3, [r0, #32]
 800e8aa:	bd70      	pop	{r4, r5, r6, pc}
 800e8ac:	40012c00 	.word	0x40012c00
 800e8b0:	40013400 	.word	0x40013400

0800e8b4 <TIM_OC2Init>:
 800e8b4:	8c03      	ldrh	r3, [r0, #32]
 800e8b6:	b530      	push	{r4, r5, lr}
 800e8b8:	f023 0310 	bic.w	r3, r3, #16
 800e8bc:	041b      	lsls	r3, r3, #16
 800e8be:	0c1b      	lsrs	r3, r3, #16
 800e8c0:	8403      	strh	r3, [r0, #32]
 800e8c2:	8c03      	ldrh	r3, [r0, #32]
 800e8c4:	8884      	ldrh	r4, [r0, #4]
 800e8c6:	8b02      	ldrh	r2, [r0, #24]
 800e8c8:	880d      	ldrh	r5, [r1, #0]
 800e8ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800e8ce:	0412      	lsls	r2, r2, #16
 800e8d0:	0c12      	lsrs	r2, r2, #16
 800e8d2:	f023 0320 	bic.w	r3, r3, #32
 800e8d6:	041b      	lsls	r3, r3, #16
 800e8d8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800e8dc:	890d      	ldrh	r5, [r1, #8]
 800e8de:	0c1b      	lsrs	r3, r3, #16
 800e8e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800e8e4:	884d      	ldrh	r5, [r1, #2]
 800e8e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800e8ea:	88cd      	ldrh	r5, [r1, #6]
 800e8ec:	8705      	strh	r5, [r0, #56]	; 0x38
 800e8ee:	4d11      	ldr	r5, [pc, #68]	; (800e934 <TIM_OC2Init+0x80>)
 800e8f0:	42a8      	cmp	r0, r5
 800e8f2:	d002      	beq.n	800e8fa <TIM_OC2Init+0x46>
 800e8f4:	4d10      	ldr	r5, [pc, #64]	; (800e938 <TIM_OC2Init+0x84>)
 800e8f6:	42a8      	cmp	r0, r5
 800e8f8:	d117      	bne.n	800e92a <TIM_OC2Init+0x76>
 800e8fa:	f64f 757f 	movw	r5, #65407	; 0xff7f
 800e8fe:	ea03 0505 	and.w	r5, r3, r5
 800e902:	894b      	ldrh	r3, [r1, #10]
 800e904:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
 800e908:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800e90c:	ea05 0303 	and.w	r3, r5, r3
 800e910:	888d      	ldrh	r5, [r1, #4]
 800e912:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800e916:	f247 35ff 	movw	r5, #29695	; 0x73ff
 800e91a:	ea04 0505 	and.w	r5, r4, r5
 800e91e:	898c      	ldrh	r4, [r1, #12]
 800e920:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
 800e924:	89cc      	ldrh	r4, [r1, #14]
 800e926:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
 800e92a:	8084      	strh	r4, [r0, #4]
 800e92c:	8302      	strh	r2, [r0, #24]
 800e92e:	8403      	strh	r3, [r0, #32]
 800e930:	bd30      	pop	{r4, r5, pc}
 800e932:	bf00      	nop
 800e934:	40012c00 	.word	0x40012c00
 800e938:	40013400 	.word	0x40013400

0800e93c <TIM_OC3Init>:
 800e93c:	8c03      	ldrh	r3, [r0, #32]
 800e93e:	b530      	push	{r4, r5, lr}
 800e940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e944:	041b      	lsls	r3, r3, #16
 800e946:	0c1b      	lsrs	r3, r3, #16
 800e948:	8403      	strh	r3, [r0, #32]
 800e94a:	8c03      	ldrh	r3, [r0, #32]
 800e94c:	8884      	ldrh	r4, [r0, #4]
 800e94e:	8b82      	ldrh	r2, [r0, #28]
 800e950:	880d      	ldrh	r5, [r1, #0]
 800e952:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e956:	0412      	lsls	r2, r2, #16
 800e958:	0c12      	lsrs	r2, r2, #16
 800e95a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e95e:	041b      	lsls	r3, r3, #16
 800e960:	432a      	orrs	r2, r5
 800e962:	890d      	ldrh	r5, [r1, #8]
 800e964:	0c1b      	lsrs	r3, r3, #16
 800e966:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800e96a:	884d      	ldrh	r5, [r1, #2]
 800e96c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800e970:	88cd      	ldrh	r5, [r1, #6]
 800e972:	8785      	strh	r5, [r0, #60]	; 0x3c
 800e974:	4d10      	ldr	r5, [pc, #64]	; (800e9b8 <TIM_OC3Init+0x7c>)
 800e976:	42a8      	cmp	r0, r5
 800e978:	d002      	beq.n	800e980 <TIM_OC3Init+0x44>
 800e97a:	4d10      	ldr	r5, [pc, #64]	; (800e9bc <TIM_OC3Init+0x80>)
 800e97c:	42a8      	cmp	r0, r5
 800e97e:	d117      	bne.n	800e9b0 <TIM_OC3Init+0x74>
 800e980:	f24f 75ff 	movw	r5, #63487	; 0xf7ff
 800e984:	ea03 0505 	and.w	r5, r3, r5
 800e988:	894b      	ldrh	r3, [r1, #10]
 800e98a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800e98e:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 800e992:	ea05 0303 	and.w	r3, r5, r3
 800e996:	888d      	ldrh	r5, [r1, #4]
 800e998:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800e99c:	f644 75ff 	movw	r5, #20479	; 0x4fff
 800e9a0:	ea04 0505 	and.w	r5, r4, r5
 800e9a4:	898c      	ldrh	r4, [r1, #12]
 800e9a6:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 800e9aa:	89cc      	ldrh	r4, [r1, #14]
 800e9ac:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 800e9b0:	8084      	strh	r4, [r0, #4]
 800e9b2:	8382      	strh	r2, [r0, #28]
 800e9b4:	8403      	strh	r3, [r0, #32]
 800e9b6:	bd30      	pop	{r4, r5, pc}
 800e9b8:	40012c00 	.word	0x40012c00
 800e9bc:	40013400 	.word	0x40013400

0800e9c0 <TIM_OC4Init>:
 800e9c0:	8c03      	ldrh	r3, [r0, #32]
 800e9c2:	b530      	push	{r4, r5, lr}
 800e9c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9c8:	041b      	lsls	r3, r3, #16
 800e9ca:	0c1b      	lsrs	r3, r3, #16
 800e9cc:	8403      	strh	r3, [r0, #32]
 800e9ce:	8c03      	ldrh	r3, [r0, #32]
 800e9d0:	8884      	ldrh	r4, [r0, #4]
 800e9d2:	8b82      	ldrh	r2, [r0, #28]
 800e9d4:	880d      	ldrh	r5, [r1, #0]
 800e9d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800e9da:	0412      	lsls	r2, r2, #16
 800e9dc:	0c12      	lsrs	r2, r2, #16
 800e9de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9e2:	041b      	lsls	r3, r3, #16
 800e9e4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800e9e8:	890d      	ldrh	r5, [r1, #8]
 800e9ea:	0c1b      	lsrs	r3, r3, #16
 800e9ec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 800e9f0:	884d      	ldrh	r5, [r1, #2]
 800e9f2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 800e9f6:	88cd      	ldrh	r5, [r1, #6]
 800e9f8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800e9fc:	4d07      	ldr	r5, [pc, #28]	; (800ea1c <TIM_OC4Init+0x5c>)
 800e9fe:	42a8      	cmp	r0, r5
 800ea00:	d002      	beq.n	800ea08 <TIM_OC4Init+0x48>
 800ea02:	4d07      	ldr	r5, [pc, #28]	; (800ea20 <TIM_OC4Init+0x60>)
 800ea04:	42a8      	cmp	r0, r5
 800ea06:	d104      	bne.n	800ea12 <TIM_OC4Init+0x52>
 800ea08:	04a4      	lsls	r4, r4, #18
 800ea0a:	8989      	ldrh	r1, [r1, #12]
 800ea0c:	0ca4      	lsrs	r4, r4, #18
 800ea0e:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
 800ea12:	8084      	strh	r4, [r0, #4]
 800ea14:	8382      	strh	r2, [r0, #28]
 800ea16:	8403      	strh	r3, [r0, #32]
 800ea18:	bd30      	pop	{r4, r5, pc}
 800ea1a:	bf00      	nop
 800ea1c:	40012c00 	.word	0x40012c00
 800ea20:	40013400 	.word	0x40013400

0800ea24 <TIM_BDTRConfig>:
 800ea24:	884a      	ldrh	r2, [r1, #2]
 800ea26:	880b      	ldrh	r3, [r1, #0]
 800ea28:	ea42 0303 	orr.w	r3, r2, r3
 800ea2c:	888a      	ldrh	r2, [r1, #4]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	88ca      	ldrh	r2, [r1, #6]
 800ea32:	4313      	orrs	r3, r2
 800ea34:	890a      	ldrh	r2, [r1, #8]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	894a      	ldrh	r2, [r1, #10]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	898a      	ldrh	r2, [r1, #12]
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800ea44:	4770      	bx	lr

0800ea46 <TIM_TimeBaseStructInit>:
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4a:	8083      	strh	r3, [r0, #4]
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	8003      	strh	r3, [r0, #0]
 800ea50:	80c3      	strh	r3, [r0, #6]
 800ea52:	8043      	strh	r3, [r0, #2]
 800ea54:	7203      	strb	r3, [r0, #8]
 800ea56:	4770      	bx	lr

0800ea58 <TIM_OCStructInit>:
 800ea58:	2300      	movs	r3, #0
 800ea5a:	8003      	strh	r3, [r0, #0]
 800ea5c:	8043      	strh	r3, [r0, #2]
 800ea5e:	8083      	strh	r3, [r0, #4]
 800ea60:	80c3      	strh	r3, [r0, #6]
 800ea62:	8103      	strh	r3, [r0, #8]
 800ea64:	8143      	strh	r3, [r0, #10]
 800ea66:	8183      	strh	r3, [r0, #12]
 800ea68:	81c3      	strh	r3, [r0, #14]
 800ea6a:	4770      	bx	lr

0800ea6c <TIM_ICStructInit>:
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	2201      	movs	r2, #1
 800ea70:	8003      	strh	r3, [r0, #0]
 800ea72:	8043      	strh	r3, [r0, #2]
 800ea74:	8082      	strh	r2, [r0, #4]
 800ea76:	80c3      	strh	r3, [r0, #6]
 800ea78:	8103      	strh	r3, [r0, #8]
 800ea7a:	4770      	bx	lr

0800ea7c <TIM_BDTRStructInit>:
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	8003      	strh	r3, [r0, #0]
 800ea80:	8043      	strh	r3, [r0, #2]
 800ea82:	8083      	strh	r3, [r0, #4]
 800ea84:	80c3      	strh	r3, [r0, #6]
 800ea86:	8103      	strh	r3, [r0, #8]
 800ea88:	8143      	strh	r3, [r0, #10]
 800ea8a:	8183      	strh	r3, [r0, #12]
 800ea8c:	4770      	bx	lr

0800ea8e <TIM_Cmd>:
 800ea8e:	b121      	cbz	r1, 800ea9a <TIM_Cmd+0xc>
 800ea90:	8803      	ldrh	r3, [r0, #0]
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	f043 0301 	orr.w	r3, r3, #1
 800ea98:	e004      	b.n	800eaa4 <TIM_Cmd+0x16>
 800ea9a:	8803      	ldrh	r3, [r0, #0]
 800ea9c:	f023 0301 	bic.w	r3, r3, #1
 800eaa0:	059b      	lsls	r3, r3, #22
 800eaa2:	0d9b      	lsrs	r3, r3, #22
 800eaa4:	8003      	strh	r3, [r0, #0]
 800eaa6:	4770      	bx	lr

0800eaa8 <TIM_CtrlPWMOutputs>:
 800eaa8:	b131      	cbz	r1, 800eab8 <TIM_CtrlPWMOutputs+0x10>
 800eaaa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800eaae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eab6:	e003      	b.n	800eac0 <TIM_CtrlPWMOutputs+0x18>
 800eab8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800eabc:	045b      	lsls	r3, r3, #17
 800eabe:	0c5b      	lsrs	r3, r3, #17
 800eac0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800eac4:	4770      	bx	lr

0800eac6 <TIM_ITConfig>:
 800eac6:	b11a      	cbz	r2, 800ead0 <TIM_ITConfig+0xa>
 800eac8:	8983      	ldrh	r3, [r0, #12]
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	4319      	orrs	r1, r3
 800eace:	e003      	b.n	800ead8 <TIM_ITConfig+0x12>
 800ead0:	8983      	ldrh	r3, [r0, #12]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	ea23 0101 	bic.w	r1, r3, r1
 800ead8:	8181      	strh	r1, [r0, #12]
 800eada:	4770      	bx	lr

0800eadc <TIM_GenerateEvent>:
 800eadc:	8281      	strh	r1, [r0, #20]
 800eade:	4770      	bx	lr

0800eae0 <TIM_DMAConfig>:
 800eae0:	430a      	orrs	r2, r1
 800eae2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 800eae6:	4770      	bx	lr

0800eae8 <TIM_DMACmd>:
 800eae8:	b11a      	cbz	r2, 800eaf2 <TIM_DMACmd+0xa>
 800eaea:	8983      	ldrh	r3, [r0, #12]
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	4319      	orrs	r1, r3
 800eaf0:	e003      	b.n	800eafa <TIM_DMACmd+0x12>
 800eaf2:	8983      	ldrh	r3, [r0, #12]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	ea23 0101 	bic.w	r1, r3, r1
 800eafa:	8181      	strh	r1, [r0, #12]
 800eafc:	4770      	bx	lr

0800eafe <TIM_InternalClockConfig>:
 800eafe:	8903      	ldrh	r3, [r0, #8]
 800eb00:	f023 0307 	bic.w	r3, r3, #7
 800eb04:	041b      	lsls	r3, r3, #16
 800eb06:	0c1b      	lsrs	r3, r3, #16
 800eb08:	8103      	strh	r3, [r0, #8]
 800eb0a:	4770      	bx	lr

0800eb0c <TIM_ETRConfig>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	8904      	ldrh	r4, [r0, #8]
 800eb10:	b2e4      	uxtb	r4, r4
 800eb12:	ea41 0404 	orr.w	r4, r1, r4
 800eb16:	ea42 0404 	orr.w	r4, r2, r4
 800eb1a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800eb1e:	8104      	strh	r4, [r0, #8]
 800eb20:	bd10      	pop	{r4, pc}

0800eb22 <TIM_ETRClockMode2Config>:
 800eb22:	b510      	push	{r4, lr}
 800eb24:	4604      	mov	r4, r0
 800eb26:	f7ff fff1 	bl	800eb0c <TIM_ETRConfig>
 800eb2a:	8923      	ldrh	r3, [r4, #8]
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb32:	8123      	strh	r3, [r4, #8]
 800eb34:	bd10      	pop	{r4, pc}

0800eb36 <TIM_ETRClockMode1Config>:
 800eb36:	b510      	push	{r4, lr}
 800eb38:	4604      	mov	r4, r0
 800eb3a:	f7ff ffe7 	bl	800eb0c <TIM_ETRConfig>
 800eb3e:	8923      	ldrh	r3, [r4, #8]
 800eb40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800eb44:	041b      	lsls	r3, r3, #16
 800eb46:	0c1b      	lsrs	r3, r3, #16
 800eb48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eb4c:	8123      	strh	r3, [r4, #8]
 800eb4e:	bd10      	pop	{r4, pc}

0800eb50 <TIM_PrescalerConfig>:
 800eb50:	8501      	strh	r1, [r0, #40]	; 0x28
 800eb52:	8282      	strh	r2, [r0, #20]
 800eb54:	4770      	bx	lr

0800eb56 <TIM_CounterModeConfig>:
 800eb56:	8803      	ldrh	r3, [r0, #0]
 800eb58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb5c:	059b      	lsls	r3, r3, #22
 800eb5e:	0d9b      	lsrs	r3, r3, #22
 800eb60:	ea41 0303 	orr.w	r3, r1, r3
 800eb64:	8003      	strh	r3, [r0, #0]
 800eb66:	4770      	bx	lr

0800eb68 <TIM_SelectInputTrigger>:
 800eb68:	8903      	ldrh	r3, [r0, #8]
 800eb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb6e:	041b      	lsls	r3, r3, #16
 800eb70:	0c1b      	lsrs	r3, r3, #16
 800eb72:	ea41 0303 	orr.w	r3, r1, r3
 800eb76:	8103      	strh	r3, [r0, #8]
 800eb78:	4770      	bx	lr

0800eb7a <TIM_TIxExternalClockConfig>:
 800eb7a:	b538      	push	{r3, r4, r5, lr}
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	2d60      	cmp	r5, #96	; 0x60
 800eb80:	4604      	mov	r4, r0
 800eb82:	4611      	mov	r1, r2
 800eb84:	d103      	bne.n	800eb8e <TIM_TIxExternalClockConfig+0x14>
 800eb86:	2201      	movs	r2, #1
 800eb88:	f7ff fdb5 	bl	800e6f6 <TI2_Config>
 800eb8c:	e002      	b.n	800eb94 <TIM_TIxExternalClockConfig+0x1a>
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f7ff fd96 	bl	800e6c0 <TI1_Config>
 800eb94:	4620      	mov	r0, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	f7ff ffe6 	bl	800eb68 <TIM_SelectInputTrigger>
 800eb9c:	8923      	ldrh	r3, [r4, #8]
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	f043 0307 	orr.w	r3, r3, #7
 800eba4:	8123      	strh	r3, [r4, #8]
 800eba6:	bd38      	pop	{r3, r4, r5, pc}

0800eba8 <TIM_ITRxExternalClockConfig>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	4604      	mov	r4, r0
 800ebac:	f7ff ffdc 	bl	800eb68 <TIM_SelectInputTrigger>
 800ebb0:	8923      	ldrh	r3, [r4, #8]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	f043 0307 	orr.w	r3, r3, #7
 800ebb8:	8123      	strh	r3, [r4, #8]
 800ebba:	bd10      	pop	{r4, pc}

0800ebbc <TIM_EncoderInterfaceConfig>:
 800ebbc:	b570      	push	{r4, r5, r6, lr}
 800ebbe:	8904      	ldrh	r4, [r0, #8]
 800ebc0:	8b06      	ldrh	r6, [r0, #24]
 800ebc2:	8c05      	ldrh	r5, [r0, #32]
 800ebc4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 800ebc8:	f026 0603 	bic.w	r6, r6, #3
 800ebcc:	f025 0522 	bic.w	r5, r5, #34	; 0x22
 800ebd0:	f024 0407 	bic.w	r4, r4, #7
 800ebd4:	0436      	lsls	r6, r6, #16
 800ebd6:	042d      	lsls	r5, r5, #16
 800ebd8:	0424      	lsls	r4, r4, #16
 800ebda:	0c36      	lsrs	r6, r6, #16
 800ebdc:	0c2d      	lsrs	r5, r5, #16
 800ebde:	0c24      	lsrs	r4, r4, #16
 800ebe0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800ebe4:	ea42 0505 	orr.w	r5, r2, r5
 800ebe8:	4321      	orrs	r1, r4
 800ebea:	f046 0601 	orr.w	r6, r6, #1
 800ebee:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
 800ebf2:	8101      	strh	r1, [r0, #8]
 800ebf4:	8306      	strh	r6, [r0, #24]
 800ebf6:	8405      	strh	r5, [r0, #32]
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}

0800ebfa <TIM_ForcedOC1Config>:
 800ebfa:	8b03      	ldrh	r3, [r0, #24]
 800ebfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec00:	041b      	lsls	r3, r3, #16
 800ec02:	0c1b      	lsrs	r3, r3, #16
 800ec04:	ea41 0303 	orr.w	r3, r1, r3
 800ec08:	8303      	strh	r3, [r0, #24]
 800ec0a:	4770      	bx	lr

0800ec0c <TIM_ForcedOC2Config>:
 800ec0c:	8b03      	ldrh	r3, [r0, #24]
 800ec0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec12:	041b      	lsls	r3, r3, #16
 800ec14:	0c1b      	lsrs	r3, r3, #16
 800ec16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ec1a:	8303      	strh	r3, [r0, #24]
 800ec1c:	4770      	bx	lr

0800ec1e <TIM_ForcedOC3Config>:
 800ec1e:	8b83      	ldrh	r3, [r0, #28]
 800ec20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec24:	041b      	lsls	r3, r3, #16
 800ec26:	0c1b      	lsrs	r3, r3, #16
 800ec28:	ea41 0303 	orr.w	r3, r1, r3
 800ec2c:	8383      	strh	r3, [r0, #28]
 800ec2e:	4770      	bx	lr

0800ec30 <TIM_ForcedOC4Config>:
 800ec30:	8b83      	ldrh	r3, [r0, #28]
 800ec32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec36:	041b      	lsls	r3, r3, #16
 800ec38:	0c1b      	lsrs	r3, r3, #16
 800ec3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ec3e:	8383      	strh	r3, [r0, #28]
 800ec40:	4770      	bx	lr

0800ec42 <TIM_ARRPreloadConfig>:
 800ec42:	b121      	cbz	r1, 800ec4e <TIM_ARRPreloadConfig+0xc>
 800ec44:	8803      	ldrh	r3, [r0, #0]
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec4c:	e004      	b.n	800ec58 <TIM_ARRPreloadConfig+0x16>
 800ec4e:	8803      	ldrh	r3, [r0, #0]
 800ec50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec54:	059b      	lsls	r3, r3, #22
 800ec56:	0d9b      	lsrs	r3, r3, #22
 800ec58:	8003      	strh	r3, [r0, #0]
 800ec5a:	4770      	bx	lr

0800ec5c <TIM_SelectCOM>:
 800ec5c:	b121      	cbz	r1, 800ec68 <TIM_SelectCOM+0xc>
 800ec5e:	8883      	ldrh	r3, [r0, #4]
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	f043 0304 	orr.w	r3, r3, #4
 800ec66:	e004      	b.n	800ec72 <TIM_SelectCOM+0x16>
 800ec68:	8883      	ldrh	r3, [r0, #4]
 800ec6a:	f023 0304 	bic.w	r3, r3, #4
 800ec6e:	041b      	lsls	r3, r3, #16
 800ec70:	0c1b      	lsrs	r3, r3, #16
 800ec72:	8083      	strh	r3, [r0, #4]
 800ec74:	4770      	bx	lr

0800ec76 <TIM_SelectCCDMA>:
 800ec76:	b121      	cbz	r1, 800ec82 <TIM_SelectCCDMA+0xc>
 800ec78:	8883      	ldrh	r3, [r0, #4]
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	f043 0308 	orr.w	r3, r3, #8
 800ec80:	e004      	b.n	800ec8c <TIM_SelectCCDMA+0x16>
 800ec82:	8883      	ldrh	r3, [r0, #4]
 800ec84:	f023 0308 	bic.w	r3, r3, #8
 800ec88:	041b      	lsls	r3, r3, #16
 800ec8a:	0c1b      	lsrs	r3, r3, #16
 800ec8c:	8083      	strh	r3, [r0, #4]
 800ec8e:	4770      	bx	lr

0800ec90 <TIM_CCPreloadControl>:
 800ec90:	b121      	cbz	r1, 800ec9c <TIM_CCPreloadControl+0xc>
 800ec92:	8883      	ldrh	r3, [r0, #4]
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	f043 0301 	orr.w	r3, r3, #1
 800ec9a:	e004      	b.n	800eca6 <TIM_CCPreloadControl+0x16>
 800ec9c:	8883      	ldrh	r3, [r0, #4]
 800ec9e:	f023 0301 	bic.w	r3, r3, #1
 800eca2:	041b      	lsls	r3, r3, #16
 800eca4:	0c1b      	lsrs	r3, r3, #16
 800eca6:	8083      	strh	r3, [r0, #4]
 800eca8:	4770      	bx	lr

0800ecaa <TIM_OC1PreloadConfig>:
 800ecaa:	8b03      	ldrh	r3, [r0, #24]
 800ecac:	f023 0308 	bic.w	r3, r3, #8
 800ecb0:	041b      	lsls	r3, r3, #16
 800ecb2:	0c1b      	lsrs	r3, r3, #16
 800ecb4:	ea41 0303 	orr.w	r3, r1, r3
 800ecb8:	8303      	strh	r3, [r0, #24]
 800ecba:	4770      	bx	lr

0800ecbc <TIM_OC2PreloadConfig>:
 800ecbc:	8b03      	ldrh	r3, [r0, #24]
 800ecbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecc2:	041b      	lsls	r3, r3, #16
 800ecc4:	0c1b      	lsrs	r3, r3, #16
 800ecc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ecca:	8303      	strh	r3, [r0, #24]
 800eccc:	4770      	bx	lr

0800ecce <TIM_OC3PreloadConfig>:
 800ecce:	8b83      	ldrh	r3, [r0, #28]
 800ecd0:	f023 0308 	bic.w	r3, r3, #8
 800ecd4:	041b      	lsls	r3, r3, #16
 800ecd6:	0c1b      	lsrs	r3, r3, #16
 800ecd8:	ea41 0303 	orr.w	r3, r1, r3
 800ecdc:	8383      	strh	r3, [r0, #28]
 800ecde:	4770      	bx	lr

0800ece0 <TIM_OC4PreloadConfig>:
 800ece0:	8b83      	ldrh	r3, [r0, #28]
 800ece2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ece6:	041b      	lsls	r3, r3, #16
 800ece8:	0c1b      	lsrs	r3, r3, #16
 800ecea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ecee:	8383      	strh	r3, [r0, #28]
 800ecf0:	4770      	bx	lr

0800ecf2 <TIM_OC1FastConfig>:
 800ecf2:	8b03      	ldrh	r3, [r0, #24]
 800ecf4:	f023 0304 	bic.w	r3, r3, #4
 800ecf8:	041b      	lsls	r3, r3, #16
 800ecfa:	0c1b      	lsrs	r3, r3, #16
 800ecfc:	ea41 0303 	orr.w	r3, r1, r3
 800ed00:	8303      	strh	r3, [r0, #24]
 800ed02:	4770      	bx	lr

0800ed04 <TIM_OC2FastConfig>:
 800ed04:	8b03      	ldrh	r3, [r0, #24]
 800ed06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed0a:	041b      	lsls	r3, r3, #16
 800ed0c:	0c1b      	lsrs	r3, r3, #16
 800ed0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed12:	8303      	strh	r3, [r0, #24]
 800ed14:	4770      	bx	lr

0800ed16 <TIM_OC3FastConfig>:
 800ed16:	8b83      	ldrh	r3, [r0, #28]
 800ed18:	f023 0304 	bic.w	r3, r3, #4
 800ed1c:	041b      	lsls	r3, r3, #16
 800ed1e:	0c1b      	lsrs	r3, r3, #16
 800ed20:	ea41 0303 	orr.w	r3, r1, r3
 800ed24:	8383      	strh	r3, [r0, #28]
 800ed26:	4770      	bx	lr

0800ed28 <TIM_OC4FastConfig>:
 800ed28:	8b83      	ldrh	r3, [r0, #28]
 800ed2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed2e:	041b      	lsls	r3, r3, #16
 800ed30:	0c1b      	lsrs	r3, r3, #16
 800ed32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed36:	8383      	strh	r3, [r0, #28]
 800ed38:	4770      	bx	lr

0800ed3a <TIM_ClearOC1Ref>:
 800ed3a:	8b03      	ldrh	r3, [r0, #24]
 800ed3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed40:	041b      	lsls	r3, r3, #16
 800ed42:	0c1b      	lsrs	r3, r3, #16
 800ed44:	ea41 0303 	orr.w	r3, r1, r3
 800ed48:	8303      	strh	r3, [r0, #24]
 800ed4a:	4770      	bx	lr

0800ed4c <TIM_ClearOC2Ref>:
 800ed4c:	8b03      	ldrh	r3, [r0, #24]
 800ed4e:	045b      	lsls	r3, r3, #17
 800ed50:	0c5b      	lsrs	r3, r3, #17
 800ed52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed56:	8303      	strh	r3, [r0, #24]
 800ed58:	4770      	bx	lr

0800ed5a <TIM_ClearOC3Ref>:
 800ed5a:	8b83      	ldrh	r3, [r0, #28]
 800ed5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed60:	041b      	lsls	r3, r3, #16
 800ed62:	0c1b      	lsrs	r3, r3, #16
 800ed64:	ea41 0303 	orr.w	r3, r1, r3
 800ed68:	8383      	strh	r3, [r0, #28]
 800ed6a:	4770      	bx	lr

0800ed6c <TIM_ClearOC4Ref>:
 800ed6c:	8b83      	ldrh	r3, [r0, #28]
 800ed6e:	045b      	lsls	r3, r3, #17
 800ed70:	0c5b      	lsrs	r3, r3, #17
 800ed72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed76:	8383      	strh	r3, [r0, #28]
 800ed78:	4770      	bx	lr

0800ed7a <TIM_OC1PolarityConfig>:
 800ed7a:	8c03      	ldrh	r3, [r0, #32]
 800ed7c:	f023 0302 	bic.w	r3, r3, #2
 800ed80:	041b      	lsls	r3, r3, #16
 800ed82:	0c1b      	lsrs	r3, r3, #16
 800ed84:	ea41 0303 	orr.w	r3, r1, r3
 800ed88:	8403      	strh	r3, [r0, #32]
 800ed8a:	4770      	bx	lr

0800ed8c <TIM_OC1NPolarityConfig>:
 800ed8c:	8c03      	ldrh	r3, [r0, #32]
 800ed8e:	f023 0308 	bic.w	r3, r3, #8
 800ed92:	041b      	lsls	r3, r3, #16
 800ed94:	0c1b      	lsrs	r3, r3, #16
 800ed96:	ea41 0303 	orr.w	r3, r1, r3
 800ed9a:	8403      	strh	r3, [r0, #32]
 800ed9c:	4770      	bx	lr

0800ed9e <TIM_OC2PolarityConfig>:
 800ed9e:	8c03      	ldrh	r3, [r0, #32]
 800eda0:	f023 0320 	bic.w	r3, r3, #32
 800eda4:	041b      	lsls	r3, r3, #16
 800eda6:	0c1b      	lsrs	r3, r3, #16
 800eda8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800edac:	8403      	strh	r3, [r0, #32]
 800edae:	4770      	bx	lr

0800edb0 <TIM_OC2NPolarityConfig>:
 800edb0:	8c03      	ldrh	r3, [r0, #32]
 800edb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edb6:	041b      	lsls	r3, r3, #16
 800edb8:	0c1b      	lsrs	r3, r3, #16
 800edba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800edbe:	8403      	strh	r3, [r0, #32]
 800edc0:	4770      	bx	lr

0800edc2 <TIM_OC3PolarityConfig>:
 800edc2:	8c03      	ldrh	r3, [r0, #32]
 800edc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800edc8:	041b      	lsls	r3, r3, #16
 800edca:	0c1b      	lsrs	r3, r3, #16
 800edcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800edd0:	8403      	strh	r3, [r0, #32]
 800edd2:	4770      	bx	lr

0800edd4 <TIM_OC3NPolarityConfig>:
 800edd4:	8c03      	ldrh	r3, [r0, #32]
 800edd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edda:	041b      	lsls	r3, r3, #16
 800eddc:	0c1b      	lsrs	r3, r3, #16
 800edde:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ede2:	8403      	strh	r3, [r0, #32]
 800ede4:	4770      	bx	lr

0800ede6 <TIM_OC4PolarityConfig>:
 800ede6:	8c03      	ldrh	r3, [r0, #32]
 800ede8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800edec:	041b      	lsls	r3, r3, #16
 800edee:	0c1b      	lsrs	r3, r3, #16
 800edf0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800edf4:	8403      	strh	r3, [r0, #32]
 800edf6:	4770      	bx	lr

0800edf8 <TIM_CCxCmd>:
 800edf8:	2301      	movs	r3, #1
 800edfa:	408b      	lsls	r3, r1
 800edfc:	fa12 f101 	lsls.w	r1, r2, r1
 800ee00:	b510      	push	{r4, lr}
 800ee02:	8c04      	ldrh	r4, [r0, #32]
 800ee04:	b2a4      	uxth	r4, r4
 800ee06:	ea24 0303 	bic.w	r3, r4, r3
 800ee0a:	8403      	strh	r3, [r0, #32]
 800ee0c:	8c03      	ldrh	r3, [r0, #32]
 800ee0e:	ea41 0303 	orr.w	r3, r1, r3
 800ee12:	8403      	strh	r3, [r0, #32]
 800ee14:	bd10      	pop	{r4, pc}

0800ee16 <TIM_CCxNCmd>:
 800ee16:	2304      	movs	r3, #4
 800ee18:	408b      	lsls	r3, r1
 800ee1a:	fa12 f101 	lsls.w	r1, r2, r1
 800ee1e:	b510      	push	{r4, lr}
 800ee20:	8c04      	ldrh	r4, [r0, #32]
 800ee22:	b2a4      	uxth	r4, r4
 800ee24:	ea24 0303 	bic.w	r3, r4, r3
 800ee28:	8403      	strh	r3, [r0, #32]
 800ee2a:	8c03      	ldrh	r3, [r0, #32]
 800ee2c:	ea41 0303 	orr.w	r3, r1, r3
 800ee30:	8403      	strh	r3, [r0, #32]
 800ee32:	bd10      	pop	{r4, pc}

0800ee34 <TIM_SelectOCxM>:
 800ee34:	b530      	push	{r4, r5, lr}
 800ee36:	2401      	movs	r4, #1
 800ee38:	408c      	lsls	r4, r1
 800ee3a:	8c05      	ldrh	r5, [r0, #32]
 800ee3c:	f100 0318 	add.w	r3, r0, #24
 800ee40:	b2ad      	uxth	r5, r5
 800ee42:	ea25 0404 	bic.w	r4, r5, r4
 800ee46:	8404      	strh	r4, [r0, #32]
 800ee48:	b109      	cbz	r1, 800ee4e <TIM_SelectOCxM+0x1a>
 800ee4a:	2908      	cmp	r1, #8
 800ee4c:	d108      	bne.n	800ee60 <TIM_SelectOCxM+0x2c>
 800ee4e:	0849      	lsrs	r1, r1, #1
 800ee50:	58cc      	ldr	r4, [r1, r3]
 800ee52:	f64f 708f 	movw	r0, #65423	; 0xff8f
 800ee56:	ea04 0000 	and.w	r0, r4, r0
 800ee5a:	50c8      	str	r0, [r1, r3]
 800ee5c:	58c8      	ldr	r0, [r1, r3]
 800ee5e:	e00b      	b.n	800ee78 <TIM_SelectOCxM+0x44>
 800ee60:	3904      	subs	r1, #4
 800ee62:	b289      	uxth	r1, r1
 800ee64:	0849      	lsrs	r1, r1, #1
 800ee66:	58cc      	ldr	r4, [r1, r3]
 800ee68:	f648 70ff 	movw	r0, #36863	; 0x8fff
 800ee6c:	ea04 0000 	and.w	r0, r4, r0
 800ee70:	50c8      	str	r0, [r1, r3]
 800ee72:	0212      	lsls	r2, r2, #8
 800ee74:	58c8      	ldr	r0, [r1, r3]
 800ee76:	b292      	uxth	r2, r2
 800ee78:	ea40 0202 	orr.w	r2, r0, r2
 800ee7c:	50ca      	str	r2, [r1, r3]
 800ee7e:	bd30      	pop	{r4, r5, pc}

0800ee80 <TIM_UpdateDisableConfig>:
 800ee80:	b121      	cbz	r1, 800ee8c <TIM_UpdateDisableConfig+0xc>
 800ee82:	8803      	ldrh	r3, [r0, #0]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	f043 0302 	orr.w	r3, r3, #2
 800ee8a:	e004      	b.n	800ee96 <TIM_UpdateDisableConfig+0x16>
 800ee8c:	8803      	ldrh	r3, [r0, #0]
 800ee8e:	f023 0302 	bic.w	r3, r3, #2
 800ee92:	059b      	lsls	r3, r3, #22
 800ee94:	0d9b      	lsrs	r3, r3, #22
 800ee96:	8003      	strh	r3, [r0, #0]
 800ee98:	4770      	bx	lr

0800ee9a <TIM_UpdateRequestConfig>:
 800ee9a:	b121      	cbz	r1, 800eea6 <TIM_UpdateRequestConfig+0xc>
 800ee9c:	8803      	ldrh	r3, [r0, #0]
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	f043 0304 	orr.w	r3, r3, #4
 800eea4:	e004      	b.n	800eeb0 <TIM_UpdateRequestConfig+0x16>
 800eea6:	8803      	ldrh	r3, [r0, #0]
 800eea8:	f023 0304 	bic.w	r3, r3, #4
 800eeac:	059b      	lsls	r3, r3, #22
 800eeae:	0d9b      	lsrs	r3, r3, #22
 800eeb0:	8003      	strh	r3, [r0, #0]
 800eeb2:	4770      	bx	lr

0800eeb4 <TIM_SelectHallSensor>:
 800eeb4:	b121      	cbz	r1, 800eec0 <TIM_SelectHallSensor+0xc>
 800eeb6:	8883      	ldrh	r3, [r0, #4]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eebe:	e004      	b.n	800eeca <TIM_SelectHallSensor+0x16>
 800eec0:	8883      	ldrh	r3, [r0, #4]
 800eec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eec6:	041b      	lsls	r3, r3, #16
 800eec8:	0c1b      	lsrs	r3, r3, #16
 800eeca:	8083      	strh	r3, [r0, #4]
 800eecc:	4770      	bx	lr

0800eece <TIM_SelectOnePulseMode>:
 800eece:	8803      	ldrh	r3, [r0, #0]
 800eed0:	f023 0308 	bic.w	r3, r3, #8
 800eed4:	059b      	lsls	r3, r3, #22
 800eed6:	0d9b      	lsrs	r3, r3, #22
 800eed8:	8003      	strh	r3, [r0, #0]
 800eeda:	8803      	ldrh	r3, [r0, #0]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	ea41 0303 	orr.w	r3, r1, r3
 800eee2:	8003      	strh	r3, [r0, #0]
 800eee4:	4770      	bx	lr

0800eee6 <TIM_SelectOutputTrigger>:
 800eee6:	8883      	ldrh	r3, [r0, #4]
 800eee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeec:	041b      	lsls	r3, r3, #16
 800eeee:	0c1b      	lsrs	r3, r3, #16
 800eef0:	8083      	strh	r3, [r0, #4]
 800eef2:	8883      	ldrh	r3, [r0, #4]
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	ea41 0303 	orr.w	r3, r1, r3
 800eefa:	8083      	strh	r3, [r0, #4]
 800eefc:	4770      	bx	lr

0800eefe <TIM_SelectSlaveMode>:
 800eefe:	8903      	ldrh	r3, [r0, #8]
 800ef00:	f023 0307 	bic.w	r3, r3, #7
 800ef04:	041b      	lsls	r3, r3, #16
 800ef06:	0c1b      	lsrs	r3, r3, #16
 800ef08:	8103      	strh	r3, [r0, #8]
 800ef0a:	8903      	ldrh	r3, [r0, #8]
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	ea41 0303 	orr.w	r3, r1, r3
 800ef12:	8103      	strh	r3, [r0, #8]
 800ef14:	4770      	bx	lr

0800ef16 <TIM_SelectMasterSlaveMode>:
 800ef16:	8903      	ldrh	r3, [r0, #8]
 800ef18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef1c:	041b      	lsls	r3, r3, #16
 800ef1e:	0c1b      	lsrs	r3, r3, #16
 800ef20:	8103      	strh	r3, [r0, #8]
 800ef22:	8903      	ldrh	r3, [r0, #8]
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	ea41 0303 	orr.w	r3, r1, r3
 800ef2a:	8103      	strh	r3, [r0, #8]
 800ef2c:	4770      	bx	lr

0800ef2e <TIM_SetCounter>:
 800ef2e:	8481      	strh	r1, [r0, #36]	; 0x24
 800ef30:	4770      	bx	lr

0800ef32 <TIM_SetAutoreload>:
 800ef32:	8581      	strh	r1, [r0, #44]	; 0x2c
 800ef34:	4770      	bx	lr

0800ef36 <TIM_SetCompare1>:
 800ef36:	8681      	strh	r1, [r0, #52]	; 0x34
 800ef38:	4770      	bx	lr

0800ef3a <TIM_SetCompare2>:
 800ef3a:	8701      	strh	r1, [r0, #56]	; 0x38
 800ef3c:	4770      	bx	lr

0800ef3e <TIM_SetCompare3>:
 800ef3e:	8781      	strh	r1, [r0, #60]	; 0x3c
 800ef40:	4770      	bx	lr

0800ef42 <TIM_SetCompare4>:
 800ef42:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800ef46:	4770      	bx	lr

0800ef48 <TIM_SetIC1Prescaler>:
 800ef48:	8b03      	ldrh	r3, [r0, #24]
 800ef4a:	f023 030c 	bic.w	r3, r3, #12
 800ef4e:	041b      	lsls	r3, r3, #16
 800ef50:	0c1b      	lsrs	r3, r3, #16
 800ef52:	8303      	strh	r3, [r0, #24]
 800ef54:	8b03      	ldrh	r3, [r0, #24]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	ea41 0303 	orr.w	r3, r1, r3
 800ef5c:	8303      	strh	r3, [r0, #24]
 800ef5e:	4770      	bx	lr

0800ef60 <TIM_SetIC2Prescaler>:
 800ef60:	8b03      	ldrh	r3, [r0, #24]
 800ef62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ef66:	041b      	lsls	r3, r3, #16
 800ef68:	0c1b      	lsrs	r3, r3, #16
 800ef6a:	8303      	strh	r3, [r0, #24]
 800ef6c:	8b03      	ldrh	r3, [r0, #24]
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ef74:	8303      	strh	r3, [r0, #24]
 800ef76:	4770      	bx	lr

0800ef78 <TIM_PWMIConfig>:
 800ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	88a2      	ldrh	r2, [r4, #4]
 800ef80:	8849      	ldrh	r1, [r1, #2]
 800ef82:	f8b4 e000 	ldrh.w	lr, [r4]
 800ef86:	4605      	mov	r5, r0
 800ef88:	2900      	cmp	r1, #0
 800ef8a:	bf0c      	ite	eq
 800ef8c:	2702      	moveq	r7, #2
 800ef8e:	2700      	movne	r7, #0
 800ef90:	2a01      	cmp	r2, #1
 800ef92:	bf14      	ite	ne
 800ef94:	2601      	movne	r6, #1
 800ef96:	2602      	moveq	r6, #2
 800ef98:	8923      	ldrh	r3, [r4, #8]
 800ef9a:	f1be 0f00 	cmp.w	lr, #0
 800ef9e:	d110      	bne.n	800efc2 <TIM_PWMIConfig+0x4a>
 800efa0:	f7ff fb8e 	bl	800e6c0 <TI1_Config>
 800efa4:	4628      	mov	r0, r5
 800efa6:	88e1      	ldrh	r1, [r4, #6]
 800efa8:	f7ff ffce 	bl	800ef48 <TIM_SetIC1Prescaler>
 800efac:	4628      	mov	r0, r5
 800efae:	4639      	mov	r1, r7
 800efb0:	4632      	mov	r2, r6
 800efb2:	8923      	ldrh	r3, [r4, #8]
 800efb4:	f7ff fb9f 	bl	800e6f6 <TI2_Config>
 800efb8:	88e1      	ldrh	r1, [r4, #6]
 800efba:	4628      	mov	r0, r5
 800efbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	e7ce      	b.n	800ef60 <TIM_SetIC2Prescaler>
 800efc2:	f7ff fb98 	bl	800e6f6 <TI2_Config>
 800efc6:	4628      	mov	r0, r5
 800efc8:	88e1      	ldrh	r1, [r4, #6]
 800efca:	f7ff ffc9 	bl	800ef60 <TIM_SetIC2Prescaler>
 800efce:	4628      	mov	r0, r5
 800efd0:	4639      	mov	r1, r7
 800efd2:	4632      	mov	r2, r6
 800efd4:	8923      	ldrh	r3, [r4, #8]
 800efd6:	f7ff fb73 	bl	800e6c0 <TI1_Config>
 800efda:	88e1      	ldrh	r1, [r4, #6]
 800efdc:	4628      	mov	r0, r5
 800efde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe2:	e7b1      	b.n	800ef48 <TIM_SetIC1Prescaler>

0800efe4 <TIM_SetIC3Prescaler>:
 800efe4:	8b83      	ldrh	r3, [r0, #28]
 800efe6:	f023 030c 	bic.w	r3, r3, #12
 800efea:	041b      	lsls	r3, r3, #16
 800efec:	0c1b      	lsrs	r3, r3, #16
 800efee:	8383      	strh	r3, [r0, #28]
 800eff0:	8b83      	ldrh	r3, [r0, #28]
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	ea41 0303 	orr.w	r3, r1, r3
 800eff8:	8383      	strh	r3, [r0, #28]
 800effa:	4770      	bx	lr

0800effc <TIM_SetIC4Prescaler>:
 800effc:	8b83      	ldrh	r3, [r0, #28]
 800effe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f002:	041b      	lsls	r3, r3, #16
 800f004:	0c1b      	lsrs	r3, r3, #16
 800f006:	8383      	strh	r3, [r0, #28]
 800f008:	8b83      	ldrh	r3, [r0, #28]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f010:	8383      	strh	r3, [r0, #28]
 800f012:	4770      	bx	lr

0800f014 <TIM_ICInit>:
 800f014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f018:	880b      	ldrh	r3, [r1, #0]
 800f01a:	460d      	mov	r5, r1
 800f01c:	4604      	mov	r4, r0
 800f01e:	8849      	ldrh	r1, [r1, #2]
 800f020:	88aa      	ldrh	r2, [r5, #4]
 800f022:	b93b      	cbnz	r3, 800f034 <TIM_ICInit+0x20>
 800f024:	892b      	ldrh	r3, [r5, #8]
 800f026:	f7ff fb4b 	bl	800e6c0 <TI1_Config>
 800f02a:	88e9      	ldrh	r1, [r5, #6]
 800f02c:	4620      	mov	r0, r4
 800f02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f032:	e789      	b.n	800ef48 <TIM_SetIC1Prescaler>
 800f034:	2b04      	cmp	r3, #4
 800f036:	d107      	bne.n	800f048 <TIM_ICInit+0x34>
 800f038:	892b      	ldrh	r3, [r5, #8]
 800f03a:	f7ff fb5c 	bl	800e6f6 <TI2_Config>
 800f03e:	88e9      	ldrh	r1, [r5, #6]
 800f040:	4620      	mov	r0, r4
 800f042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f046:	e78b      	b.n	800ef60 <TIM_SetIC2Prescaler>
 800f048:	2b08      	cmp	r3, #8
 800f04a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800f04e:	d123      	bne.n	800f098 <TIM_ICInit+0x84>
 800f050:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 800f054:	f42c 7c80 	bic.w	ip, ip, #256	; 0x100
 800f058:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800f05c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f060:	f8a0 c020 	strh.w	ip, [r0, #32]
 800f064:	8b87      	ldrh	r7, [r0, #28]
 800f066:	8c06      	ldrh	r6, [r0, #32]
 800f068:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
 800f06c:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 800f070:	043f      	lsls	r7, r7, #16
 800f072:	0436      	lsls	r6, r6, #16
 800f074:	0c3f      	lsrs	r7, r7, #16
 800f076:	0c36      	lsrs	r6, r6, #16
 800f078:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
 800f07c:	ea46 2101 	orr.w	r1, r6, r1, lsl #8
 800f080:	b2bf      	uxth	r7, r7
 800f082:	b289      	uxth	r1, r1
 800f084:	ea47 0202 	orr.w	r2, r7, r2
 800f088:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f08c:	8382      	strh	r2, [r0, #28]
 800f08e:	8401      	strh	r1, [r0, #32]
 800f090:	88e9      	ldrh	r1, [r5, #6]
 800f092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f096:	e7a5      	b.n	800efe4 <TIM_SetIC3Prescaler>
 800f098:	8c07      	ldrh	r7, [r0, #32]
 800f09a:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800f09e:	043f      	lsls	r7, r7, #16
 800f0a0:	0c3f      	lsrs	r7, r7, #16
 800f0a2:	8407      	strh	r7, [r0, #32]
 800f0a4:	8b86      	ldrh	r6, [r0, #28]
 800f0a6:	8c03      	ldrh	r3, [r0, #32]
 800f0a8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 800f0ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f0b0:	041b      	lsls	r3, r3, #16
 800f0b2:	0536      	lsls	r6, r6, #20
 800f0b4:	0c1b      	lsrs	r3, r3, #16
 800f0b6:	0d36      	lsrs	r6, r6, #20
 800f0b8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800f0bc:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	ea42 3808 	orr.w	r8, r2, r8, lsl #12
 800f0c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0ca:	f8a0 801c 	strh.w	r8, [r0, #28]
 800f0ce:	8403      	strh	r3, [r0, #32]
 800f0d0:	88e9      	ldrh	r1, [r5, #6]
 800f0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d6:	e791      	b.n	800effc <TIM_SetIC4Prescaler>

0800f0d8 <TIM_SetClockDivision>:
 800f0d8:	8803      	ldrh	r3, [r0, #0]
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	8003      	strh	r3, [r0, #0]
 800f0de:	8803      	ldrh	r3, [r0, #0]
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	ea41 0303 	orr.w	r3, r1, r3
 800f0e6:	8003      	strh	r3, [r0, #0]
 800f0e8:	4770      	bx	lr

0800f0ea <TIM_GetCapture1>:
 800f0ea:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800f0ec:	b280      	uxth	r0, r0
 800f0ee:	4770      	bx	lr

0800f0f0 <TIM_GetCapture2>:
 800f0f0:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 800f0f2:	b280      	uxth	r0, r0
 800f0f4:	4770      	bx	lr

0800f0f6 <TIM_GetCapture3>:
 800f0f6:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 800f0f8:	b280      	uxth	r0, r0
 800f0fa:	4770      	bx	lr

0800f0fc <TIM_GetCapture4>:
 800f0fc:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 800f100:	b280      	uxth	r0, r0
 800f102:	4770      	bx	lr

0800f104 <TIM_GetCounter>:
 800f104:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 800f106:	b280      	uxth	r0, r0
 800f108:	4770      	bx	lr

0800f10a <TIM_GetPrescaler>:
 800f10a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 800f10c:	b280      	uxth	r0, r0
 800f10e:	4770      	bx	lr

0800f110 <TIM_GetFlagStatus>:
 800f110:	8a03      	ldrh	r3, [r0, #16]
 800f112:	4219      	tst	r1, r3
 800f114:	bf0c      	ite	eq
 800f116:	2000      	moveq	r0, #0
 800f118:	2001      	movne	r0, #1
 800f11a:	4770      	bx	lr

0800f11c <TIM_ClearFlag>:
 800f11c:	43c9      	mvns	r1, r1
 800f11e:	8201      	strh	r1, [r0, #16]
 800f120:	4770      	bx	lr

0800f122 <TIM_GetITStatus>:
 800f122:	8a03      	ldrh	r3, [r0, #16]
 800f124:	8982      	ldrh	r2, [r0, #12]
 800f126:	ea11 0003 	ands.w	r0, r1, r3
 800f12a:	b292      	uxth	r2, r2
 800f12c:	d003      	beq.n	800f136 <TIM_GetITStatus+0x14>
 800f12e:	4211      	tst	r1, r2
 800f130:	bf0c      	ite	eq
 800f132:	2000      	moveq	r0, #0
 800f134:	2001      	movne	r0, #1
 800f136:	4770      	bx	lr

0800f138 <TIM_ClearITPendingBit>:
 800f138:	43c9      	mvns	r1, r1
 800f13a:	8201      	strh	r1, [r0, #16]
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop

0800f140 <USART_DeInit>:
 800f140:	4b20      	ldr	r3, [pc, #128]	; (800f1c4 <USART_DeInit+0x84>)
 800f142:	b510      	push	{r4, lr}
 800f144:	4298      	cmp	r0, r3
 800f146:	d10b      	bne.n	800f160 <USART_DeInit+0x20>
 800f148:	2101      	movs	r1, #1
 800f14a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f14e:	f7ff f835 	bl	800e1bc <RCC_APB2PeriphResetCmd>
 800f152:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f156:	2100      	movs	r1, #0
 800f158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f15c:	f7ff b82e 	b.w	800e1bc <RCC_APB2PeriphResetCmd>
 800f160:	4b19      	ldr	r3, [pc, #100]	; (800f1c8 <USART_DeInit+0x88>)
 800f162:	4298      	cmp	r0, r3
 800f164:	d107      	bne.n	800f176 <USART_DeInit+0x36>
 800f166:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f16a:	2101      	movs	r1, #1
 800f16c:	f7ff f832 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800f170:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f174:	e01f      	b.n	800f1b6 <USART_DeInit+0x76>
 800f176:	4b15      	ldr	r3, [pc, #84]	; (800f1cc <USART_DeInit+0x8c>)
 800f178:	4298      	cmp	r0, r3
 800f17a:	d107      	bne.n	800f18c <USART_DeInit+0x4c>
 800f17c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f180:	2101      	movs	r1, #1
 800f182:	f7ff f827 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800f186:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f18a:	e014      	b.n	800f1b6 <USART_DeInit+0x76>
 800f18c:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <USART_DeInit+0x90>)
 800f18e:	4298      	cmp	r0, r3
 800f190:	d107      	bne.n	800f1a2 <USART_DeInit+0x62>
 800f192:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f196:	2101      	movs	r1, #1
 800f198:	f7ff f81c 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800f19c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f1a0:	e009      	b.n	800f1b6 <USART_DeInit+0x76>
 800f1a2:	4b0c      	ldr	r3, [pc, #48]	; (800f1d4 <USART_DeInit+0x94>)
 800f1a4:	4298      	cmp	r0, r3
 800f1a6:	d10b      	bne.n	800f1c0 <USART_DeInit+0x80>
 800f1a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	f7ff f811 	bl	800e1d4 <RCC_APB1PeriphResetCmd>
 800f1b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1bc:	f7ff b80a 	b.w	800e1d4 <RCC_APB1PeriphResetCmd>
 800f1c0:	bd10      	pop	{r4, pc}
 800f1c2:	bf00      	nop
 800f1c4:	40013800 	.word	0x40013800
 800f1c8:	40004400 	.word	0x40004400
 800f1cc:	40004800 	.word	0x40004800
 800f1d0:	40004c00 	.word	0x40004c00
 800f1d4:	40005000 	.word	0x40005000

0800f1d8 <USART_Init>:
 800f1d8:	b530      	push	{r4, r5, lr}
 800f1da:	8a03      	ldrh	r3, [r0, #16]
 800f1dc:	88ca      	ldrh	r2, [r1, #6]
 800f1de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f1e2:	041b      	lsls	r3, r3, #16
 800f1e4:	0c1b      	lsrs	r3, r3, #16
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	8203      	strh	r3, [r0, #16]
 800f1ea:	460d      	mov	r5, r1
 800f1ec:	8983      	ldrh	r3, [r0, #12]
 800f1ee:	8909      	ldrh	r1, [r1, #8]
 800f1f0:	88aa      	ldrh	r2, [r5, #4]
 800f1f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800f1f6:	ea41 0202 	orr.w	r2, r1, r2
 800f1fa:	8969      	ldrh	r1, [r5, #10]
 800f1fc:	f023 030c 	bic.w	r3, r3, #12
 800f200:	430a      	orrs	r2, r1
 800f202:	041b      	lsls	r3, r3, #16
 800f204:	0c1b      	lsrs	r3, r3, #16
 800f206:	b292      	uxth	r2, r2
 800f208:	ea42 0303 	orr.w	r3, r2, r3
 800f20c:	8183      	strh	r3, [r0, #12]
 800f20e:	8a83      	ldrh	r3, [r0, #20]
 800f210:	89aa      	ldrh	r2, [r5, #12]
 800f212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f216:	041b      	lsls	r3, r3, #16
 800f218:	0c1b      	lsrs	r3, r3, #16
 800f21a:	b087      	sub	sp, #28
 800f21c:	4313      	orrs	r3, r2
 800f21e:	4604      	mov	r4, r0
 800f220:	8283      	strh	r3, [r0, #20]
 800f222:	a801      	add	r0, sp, #4
 800f224:	f7fe ff54 	bl	800e0d0 <RCC_GetClocksFreq>
 800f228:	4b0e      	ldr	r3, [pc, #56]	; (800f264 <USART_Init+0x8c>)
 800f22a:	682a      	ldr	r2, [r5, #0]
 800f22c:	429c      	cmp	r4, r3
 800f22e:	bf0c      	ite	eq
 800f230:	9b04      	ldreq	r3, [sp, #16]
 800f232:	9b03      	ldrne	r3, [sp, #12]
 800f234:	2119      	movs	r1, #25
 800f236:	434b      	muls	r3, r1
 800f238:	0092      	lsls	r2, r2, #2
 800f23a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f23e:	2364      	movs	r3, #100	; 0x64
 800f240:	fbb1 f2f3 	udiv	r2, r1, r3
 800f244:	0112      	lsls	r2, r2, #4
 800f246:	0910      	lsrs	r0, r2, #4
 800f248:	fb03 1110 	mls	r1, r3, r0, r1
 800f24c:	0109      	lsls	r1, r1, #4
 800f24e:	3132      	adds	r1, #50	; 0x32
 800f250:	fbb1 f3f3 	udiv	r3, r1, r3
 800f254:	f003 030f 	and.w	r3, r3, #15
 800f258:	ea43 0202 	orr.w	r2, r3, r2
 800f25c:	8122      	strh	r2, [r4, #8]
 800f25e:	b007      	add	sp, #28
 800f260:	bd30      	pop	{r4, r5, pc}
 800f262:	bf00      	nop
 800f264:	40013800 	.word	0x40013800

0800f268 <USART_StructInit>:
 800f268:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800f26c:	6003      	str	r3, [r0, #0]
 800f26e:	220c      	movs	r2, #12
 800f270:	2300      	movs	r3, #0
 800f272:	8083      	strh	r3, [r0, #4]
 800f274:	80c3      	strh	r3, [r0, #6]
 800f276:	8103      	strh	r3, [r0, #8]
 800f278:	8142      	strh	r2, [r0, #10]
 800f27a:	8183      	strh	r3, [r0, #12]
 800f27c:	4770      	bx	lr

0800f27e <USART_ClockInit>:
 800f27e:	b510      	push	{r4, lr}
 800f280:	884c      	ldrh	r4, [r1, #2]
 800f282:	880a      	ldrh	r2, [r1, #0]
 800f284:	8a03      	ldrh	r3, [r0, #16]
 800f286:	ea44 0202 	orr.w	r2, r4, r2
 800f28a:	888c      	ldrh	r4, [r1, #4]
 800f28c:	88c9      	ldrh	r1, [r1, #6]
 800f28e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f292:	4322      	orrs	r2, r4
 800f294:	041b      	lsls	r3, r3, #16
 800f296:	430a      	orrs	r2, r1
 800f298:	0c1b      	lsrs	r3, r3, #16
 800f29a:	b292      	uxth	r2, r2
 800f29c:	ea42 0303 	orr.w	r3, r2, r3
 800f2a0:	8203      	strh	r3, [r0, #16]
 800f2a2:	bd10      	pop	{r4, pc}

0800f2a4 <USART_ClockStructInit>:
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	8003      	strh	r3, [r0, #0]
 800f2a8:	8043      	strh	r3, [r0, #2]
 800f2aa:	8083      	strh	r3, [r0, #4]
 800f2ac:	80c3      	strh	r3, [r0, #6]
 800f2ae:	4770      	bx	lr

0800f2b0 <USART_Cmd>:
 800f2b0:	b121      	cbz	r1, 800f2bc <USART_Cmd+0xc>
 800f2b2:	8983      	ldrh	r3, [r0, #12]
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f2ba:	e004      	b.n	800f2c6 <USART_Cmd+0x16>
 800f2bc:	8983      	ldrh	r3, [r0, #12]
 800f2be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2c2:	041b      	lsls	r3, r3, #16
 800f2c4:	0c1b      	lsrs	r3, r3, #16
 800f2c6:	8183      	strh	r3, [r0, #12]
 800f2c8:	4770      	bx	lr

0800f2ca <USART_ITConfig>:
 800f2ca:	b2cb      	uxtb	r3, r1
 800f2cc:	b510      	push	{r4, lr}
 800f2ce:	095b      	lsrs	r3, r3, #5
 800f2d0:	2401      	movs	r4, #1
 800f2d2:	f001 011f 	and.w	r1, r1, #31
 800f2d6:	fa14 f101 	lsls.w	r1, r4, r1
 800f2da:	42a3      	cmp	r3, r4
 800f2dc:	d101      	bne.n	800f2e2 <USART_ITConfig+0x18>
 800f2de:	300c      	adds	r0, #12
 800f2e0:	e004      	b.n	800f2ec <USART_ITConfig+0x22>
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d101      	bne.n	800f2ea <USART_ITConfig+0x20>
 800f2e6:	3010      	adds	r0, #16
 800f2e8:	e000      	b.n	800f2ec <USART_ITConfig+0x22>
 800f2ea:	3014      	adds	r0, #20
 800f2ec:	b11a      	cbz	r2, 800f2f6 <USART_ITConfig+0x2c>
 800f2ee:	6803      	ldr	r3, [r0, #0]
 800f2f0:	ea43 0101 	orr.w	r1, r3, r1
 800f2f4:	e002      	b.n	800f2fc <USART_ITConfig+0x32>
 800f2f6:	6803      	ldr	r3, [r0, #0]
 800f2f8:	ea23 0101 	bic.w	r1, r3, r1
 800f2fc:	6001      	str	r1, [r0, #0]
 800f2fe:	bd10      	pop	{r4, pc}

0800f300 <USART_DMACmd>:
 800f300:	b11a      	cbz	r2, 800f30a <USART_DMACmd+0xa>
 800f302:	8a83      	ldrh	r3, [r0, #20]
 800f304:	b29b      	uxth	r3, r3
 800f306:	4319      	orrs	r1, r3
 800f308:	e003      	b.n	800f312 <USART_DMACmd+0x12>
 800f30a:	8a83      	ldrh	r3, [r0, #20]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	ea23 0101 	bic.w	r1, r3, r1
 800f312:	8281      	strh	r1, [r0, #20]
 800f314:	4770      	bx	lr

0800f316 <USART_SetAddress>:
 800f316:	8a03      	ldrh	r3, [r0, #16]
 800f318:	f023 030f 	bic.w	r3, r3, #15
 800f31c:	041b      	lsls	r3, r3, #16
 800f31e:	0c1b      	lsrs	r3, r3, #16
 800f320:	8203      	strh	r3, [r0, #16]
 800f322:	8a03      	ldrh	r3, [r0, #16]
 800f324:	b29b      	uxth	r3, r3
 800f326:	ea41 0303 	orr.w	r3, r1, r3
 800f32a:	8203      	strh	r3, [r0, #16]
 800f32c:	4770      	bx	lr

0800f32e <USART_WakeUpConfig>:
 800f32e:	8983      	ldrh	r3, [r0, #12]
 800f330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f334:	041b      	lsls	r3, r3, #16
 800f336:	0c1b      	lsrs	r3, r3, #16
 800f338:	8183      	strh	r3, [r0, #12]
 800f33a:	8983      	ldrh	r3, [r0, #12]
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	ea41 0303 	orr.w	r3, r1, r3
 800f342:	8183      	strh	r3, [r0, #12]
 800f344:	4770      	bx	lr

0800f346 <USART_ReceiverWakeUpCmd>:
 800f346:	b121      	cbz	r1, 800f352 <USART_ReceiverWakeUpCmd+0xc>
 800f348:	8983      	ldrh	r3, [r0, #12]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	f043 0302 	orr.w	r3, r3, #2
 800f350:	e004      	b.n	800f35c <USART_ReceiverWakeUpCmd+0x16>
 800f352:	8983      	ldrh	r3, [r0, #12]
 800f354:	f023 0302 	bic.w	r3, r3, #2
 800f358:	041b      	lsls	r3, r3, #16
 800f35a:	0c1b      	lsrs	r3, r3, #16
 800f35c:	8183      	strh	r3, [r0, #12]
 800f35e:	4770      	bx	lr

0800f360 <USART_LINBreakDetectLengthConfig>:
 800f360:	8a03      	ldrh	r3, [r0, #16]
 800f362:	f023 0320 	bic.w	r3, r3, #32
 800f366:	041b      	lsls	r3, r3, #16
 800f368:	0c1b      	lsrs	r3, r3, #16
 800f36a:	8203      	strh	r3, [r0, #16]
 800f36c:	8a03      	ldrh	r3, [r0, #16]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	ea41 0303 	orr.w	r3, r1, r3
 800f374:	8203      	strh	r3, [r0, #16]
 800f376:	4770      	bx	lr

0800f378 <USART_LINCmd>:
 800f378:	b121      	cbz	r1, 800f384 <USART_LINCmd+0xc>
 800f37a:	8a03      	ldrh	r3, [r0, #16]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f382:	e004      	b.n	800f38e <USART_LINCmd+0x16>
 800f384:	8a03      	ldrh	r3, [r0, #16]
 800f386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f38a:	041b      	lsls	r3, r3, #16
 800f38c:	0c1b      	lsrs	r3, r3, #16
 800f38e:	8203      	strh	r3, [r0, #16]
 800f390:	4770      	bx	lr

0800f392 <USART_SendData>:
 800f392:	05c9      	lsls	r1, r1, #23
 800f394:	0dc9      	lsrs	r1, r1, #23
 800f396:	8081      	strh	r1, [r0, #4]
 800f398:	4770      	bx	lr

0800f39a <USART_ReceiveData>:
 800f39a:	8880      	ldrh	r0, [r0, #4]
 800f39c:	05c0      	lsls	r0, r0, #23
 800f39e:	0dc0      	lsrs	r0, r0, #23
 800f3a0:	4770      	bx	lr

0800f3a2 <USART_SendBreak>:
 800f3a2:	8983      	ldrh	r3, [r0, #12]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	f043 0301 	orr.w	r3, r3, #1
 800f3aa:	8183      	strh	r3, [r0, #12]
 800f3ac:	4770      	bx	lr

0800f3ae <USART_SetGuardTime>:
 800f3ae:	8b03      	ldrh	r3, [r0, #24]
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	8303      	strh	r3, [r0, #24]
 800f3b4:	8b03      	ldrh	r3, [r0, #24]
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f3bc:	8303      	strh	r3, [r0, #24]
 800f3be:	4770      	bx	lr

0800f3c0 <USART_SetPrescaler>:
 800f3c0:	8b03      	ldrh	r3, [r0, #24]
 800f3c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3c6:	8303      	strh	r3, [r0, #24]
 800f3c8:	8b03      	ldrh	r3, [r0, #24]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	ea41 0303 	orr.w	r3, r1, r3
 800f3d0:	8303      	strh	r3, [r0, #24]
 800f3d2:	4770      	bx	lr

0800f3d4 <USART_SmartCardCmd>:
 800f3d4:	b121      	cbz	r1, 800f3e0 <USART_SmartCardCmd+0xc>
 800f3d6:	8a83      	ldrh	r3, [r0, #20]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	f043 0320 	orr.w	r3, r3, #32
 800f3de:	e004      	b.n	800f3ea <USART_SmartCardCmd+0x16>
 800f3e0:	8a83      	ldrh	r3, [r0, #20]
 800f3e2:	f023 0320 	bic.w	r3, r3, #32
 800f3e6:	041b      	lsls	r3, r3, #16
 800f3e8:	0c1b      	lsrs	r3, r3, #16
 800f3ea:	8283      	strh	r3, [r0, #20]
 800f3ec:	4770      	bx	lr

0800f3ee <USART_SmartCardNACKCmd>:
 800f3ee:	b121      	cbz	r1, 800f3fa <USART_SmartCardNACKCmd+0xc>
 800f3f0:	8a83      	ldrh	r3, [r0, #20]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	f043 0310 	orr.w	r3, r3, #16
 800f3f8:	e004      	b.n	800f404 <USART_SmartCardNACKCmd+0x16>
 800f3fa:	8a83      	ldrh	r3, [r0, #20]
 800f3fc:	f023 0310 	bic.w	r3, r3, #16
 800f400:	041b      	lsls	r3, r3, #16
 800f402:	0c1b      	lsrs	r3, r3, #16
 800f404:	8283      	strh	r3, [r0, #20]
 800f406:	4770      	bx	lr

0800f408 <USART_HalfDuplexCmd>:
 800f408:	b121      	cbz	r1, 800f414 <USART_HalfDuplexCmd+0xc>
 800f40a:	8a83      	ldrh	r3, [r0, #20]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	f043 0308 	orr.w	r3, r3, #8
 800f412:	e004      	b.n	800f41e <USART_HalfDuplexCmd+0x16>
 800f414:	8a83      	ldrh	r3, [r0, #20]
 800f416:	f023 0308 	bic.w	r3, r3, #8
 800f41a:	041b      	lsls	r3, r3, #16
 800f41c:	0c1b      	lsrs	r3, r3, #16
 800f41e:	8283      	strh	r3, [r0, #20]
 800f420:	4770      	bx	lr

0800f422 <USART_IrDAConfig>:
 800f422:	8a83      	ldrh	r3, [r0, #20]
 800f424:	f023 0304 	bic.w	r3, r3, #4
 800f428:	041b      	lsls	r3, r3, #16
 800f42a:	0c1b      	lsrs	r3, r3, #16
 800f42c:	8283      	strh	r3, [r0, #20]
 800f42e:	8a83      	ldrh	r3, [r0, #20]
 800f430:	b29b      	uxth	r3, r3
 800f432:	ea41 0303 	orr.w	r3, r1, r3
 800f436:	8283      	strh	r3, [r0, #20]
 800f438:	4770      	bx	lr

0800f43a <USART_IrDACmd>:
 800f43a:	b121      	cbz	r1, 800f446 <USART_IrDACmd+0xc>
 800f43c:	8a83      	ldrh	r3, [r0, #20]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	f043 0302 	orr.w	r3, r3, #2
 800f444:	e004      	b.n	800f450 <USART_IrDACmd+0x16>
 800f446:	8a83      	ldrh	r3, [r0, #20]
 800f448:	f023 0302 	bic.w	r3, r3, #2
 800f44c:	041b      	lsls	r3, r3, #16
 800f44e:	0c1b      	lsrs	r3, r3, #16
 800f450:	8283      	strh	r3, [r0, #20]
 800f452:	4770      	bx	lr

0800f454 <USART_GetFlagStatus>:
 800f454:	8803      	ldrh	r3, [r0, #0]
 800f456:	4219      	tst	r1, r3
 800f458:	bf0c      	ite	eq
 800f45a:	2000      	moveq	r0, #0
 800f45c:	2001      	movne	r0, #1
 800f45e:	4770      	bx	lr

0800f460 <USART_ClearFlag>:
 800f460:	43c9      	mvns	r1, r1
 800f462:	8001      	strh	r1, [r0, #0]
 800f464:	4770      	bx	lr

0800f466 <USART_GetITStatus>:
 800f466:	b510      	push	{r4, lr}
 800f468:	b2cc      	uxtb	r4, r1
 800f46a:	2201      	movs	r2, #1
 800f46c:	0964      	lsrs	r4, r4, #5
 800f46e:	f001 031f 	and.w	r3, r1, #31
 800f472:	409a      	lsls	r2, r3
 800f474:	2c01      	cmp	r4, #1
 800f476:	d101      	bne.n	800f47c <USART_GetITStatus+0x16>
 800f478:	8983      	ldrh	r3, [r0, #12]
 800f47a:	e003      	b.n	800f484 <USART_GetITStatus+0x1e>
 800f47c:	2c02      	cmp	r4, #2
 800f47e:	bf0c      	ite	eq
 800f480:	8a03      	ldrheq	r3, [r0, #16]
 800f482:	8a83      	ldrhne	r3, [r0, #20]
 800f484:	b29b      	uxth	r3, r3
 800f486:	ea02 0303 	and.w	r3, r2, r3
 800f48a:	8802      	ldrh	r2, [r0, #0]
 800f48c:	b292      	uxth	r2, r2
 800f48e:	b143      	cbz	r3, 800f4a2 <USART_GetITStatus+0x3c>
 800f490:	0a09      	lsrs	r1, r1, #8
 800f492:	2301      	movs	r3, #1
 800f494:	fa13 f101 	lsls.w	r1, r3, r1
 800f498:	4211      	tst	r1, r2
 800f49a:	bf0c      	ite	eq
 800f49c:	2000      	moveq	r0, #0
 800f49e:	2001      	movne	r0, #1
 800f4a0:	bd10      	pop	{r4, pc}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	bd10      	pop	{r4, pc}

0800f4a6 <USART_ClearITPendingBit>:
 800f4a6:	0a09      	lsrs	r1, r1, #8
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	408b      	lsls	r3, r1
 800f4ac:	43db      	mvns	r3, r3
 800f4ae:	8003      	strh	r3, [r0, #0]
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop

0800f4b4 <Standard_GetConfiguration>:
 800f4b4:	b508      	push	{r3, lr}
 800f4b6:	b138      	cbz	r0, 800f4c8 <Standard_GetConfiguration+0x14>
 800f4b8:	4906      	ldr	r1, [pc, #24]	; (800f4d4 <Standard_GetConfiguration+0x20>)
 800f4ba:	680b      	ldr	r3, [r1, #0]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	4790      	blx	r2
 800f4c0:	4805      	ldr	r0, [pc, #20]	; (800f4d8 <Standard_GetConfiguration+0x24>)
 800f4c2:	6800      	ldr	r0, [r0, #0]
 800f4c4:	300a      	adds	r0, #10
 800f4c6:	bd08      	pop	{r3, pc}
 800f4c8:	4903      	ldr	r1, [pc, #12]	; (800f4d8 <Standard_GetConfiguration+0x24>)
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	680b      	ldr	r3, [r1, #0]
 800f4ce:	821a      	strh	r2, [r3, #16]
 800f4d0:	bd08      	pop	{r3, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20000ee0 	.word	0x20000ee0
 800f4d8:	20000ee4 	.word	0x20000ee4

0800f4dc <Standard_GetInterface>:
 800f4dc:	b508      	push	{r3, lr}
 800f4de:	b138      	cbz	r0, 800f4f0 <Standard_GetInterface+0x14>
 800f4e0:	4906      	ldr	r1, [pc, #24]	; (800f4fc <Standard_GetInterface+0x20>)
 800f4e2:	680b      	ldr	r3, [r1, #0]
 800f4e4:	689a      	ldr	r2, [r3, #8]
 800f4e6:	4790      	blx	r2
 800f4e8:	4805      	ldr	r0, [pc, #20]	; (800f500 <Standard_GetInterface+0x24>)
 800f4ea:	6800      	ldr	r0, [r0, #0]
 800f4ec:	300c      	adds	r0, #12
 800f4ee:	bd08      	pop	{r3, pc}
 800f4f0:	4903      	ldr	r1, [pc, #12]	; (800f500 <Standard_GetInterface+0x24>)
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	680b      	ldr	r3, [r1, #0]
 800f4f6:	821a      	strh	r2, [r3, #16]
 800f4f8:	bd08      	pop	{r3, pc}
 800f4fa:	bf00      	nop
 800f4fc:	20000ee0 	.word	0x20000ee0
 800f500:	20000ee4 	.word	0x20000ee4

0800f504 <Standard_GetStatus>:
 800f504:	b508      	push	{r3, lr}
 800f506:	2800      	cmp	r0, #0
 800f508:	d029      	beq.n	800f55e <Standard_GetStatus+0x5a>
 800f50a:	4a2a      	ldr	r2, [pc, #168]	; (800f5b4 <Standard_GetStatus+0xb0>)
 800f50c:	482a      	ldr	r0, [pc, #168]	; (800f5b8 <Standard_GetStatus+0xb4>)
 800f50e:	2300      	movs	r3, #0
 800f510:	6812      	ldr	r2, [r2, #0]
 800f512:	8003      	strh	r3, [r0, #0]
 800f514:	f892 c000 	ldrb.w	ip, [r2]
 800f518:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 800f51c:	d118      	bne.n	800f550 <Standard_GetStatus+0x4c>
 800f51e:	7a51      	ldrb	r1, [r2, #9]
 800f520:	f890 e000 	ldrb.w	lr, [r0]
 800f524:	f011 0f20 	tst.w	r1, #32
 800f528:	bf14      	ite	ne
 800f52a:	f04e 0e02 	orrne.w	lr, lr, #2
 800f52e:	f00e 0efd 	andeq.w	lr, lr, #253	; 0xfd
 800f532:	f011 0f40 	tst.w	r1, #64	; 0x40
 800f536:	bf14      	ite	ne
 800f538:	f04e 0e01 	orrne.w	lr, lr, #1
 800f53c:	f02e 0e01 	biceq.w	lr, lr, #1
 800f540:	f880 e000 	strb.w	lr, [r0]
 800f544:	4b1d      	ldr	r3, [pc, #116]	; (800f5bc <Standard_GetStatus+0xb8>)
 800f546:	6819      	ldr	r1, [r3, #0]
 800f548:	6908      	ldr	r0, [r1, #16]
 800f54a:	4780      	blx	r0
 800f54c:	481a      	ldr	r0, [pc, #104]	; (800f5b8 <Standard_GetStatus+0xb4>)
 800f54e:	bd08      	pop	{r3, pc}
 800f550:	2b01      	cmp	r3, #1
 800f552:	d100      	bne.n	800f556 <Standard_GetStatus+0x52>
 800f554:	bd08      	pop	{r3, pc}
 800f556:	2b02      	cmp	r3, #2
 800f558:	d006      	beq.n	800f568 <Standard_GetStatus+0x64>
 800f55a:	2000      	movs	r0, #0
 800f55c:	e7fa      	b.n	800f554 <Standard_GetStatus+0x50>
 800f55e:	4915      	ldr	r1, [pc, #84]	; (800f5b4 <Standard_GetStatus+0xb0>)
 800f560:	2202      	movs	r2, #2
 800f562:	680b      	ldr	r3, [r1, #0]
 800f564:	821a      	strh	r2, [r3, #16]
 800f566:	bd08      	pop	{r3, pc}
 800f568:	f892 c005 	ldrb.w	ip, [r2, #5]
 800f56c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f570:	f00c 020f 	and.w	r2, ip, #15
 800f574:	d111      	bne.n	800f59a <Standard_GetStatus+0x96>
 800f576:	0093      	lsls	r3, r2, #2
 800f578:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 800f57c:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 800f580:	f8de 2000 	ldr.w	r2, [lr]
 800f584:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 800f588:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 800f58c:	d1da      	bne.n	800f544 <Standard_GetStatus+0x40>
 800f58e:	7802      	ldrb	r2, [r0, #0]
 800f590:	f042 0c01 	orr.w	ip, r2, #1
 800f594:	f880 c000 	strb.w	ip, [r0]
 800f598:	e7d4      	b.n	800f544 <Standard_GetStatus+0x40>
 800f59a:	0093      	lsls	r3, r2, #2
 800f59c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 800f5a0:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 800f5a4:	f8de 2000 	ldr.w	r2, [lr]
 800f5a8:	f002 0330 	and.w	r3, r2, #48	; 0x30
 800f5ac:	2b10      	cmp	r3, #16
 800f5ae:	d1c9      	bne.n	800f544 <Standard_GetStatus+0x40>
 800f5b0:	e7ed      	b.n	800f58e <Standard_GetStatus+0x8a>
 800f5b2:	bf00      	nop
 800f5b4:	20000ee4 	.word	0x20000ee4
 800f5b8:	20000eb4 	.word	0x20000eb4
 800f5bc:	20000ee0 	.word	0x20000ee0

0800f5c0 <DataStageIn>:
 800f5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c4:	4e26      	ldr	r6, [pc, #152]	; (800f660 <DataStageIn+0xa0>)
 800f5c6:	6834      	ldr	r4, [r6, #0]
 800f5c8:	8a23      	ldrh	r3, [r4, #16]
 800f5ca:	7a27      	ldrb	r7, [r4, #8]
 800f5cc:	b923      	cbnz	r3, 800f5d8 <DataStageIn+0x18>
 800f5ce:	2f04      	cmp	r7, #4
 800f5d0:	d02c      	beq.n	800f62c <DataStageIn+0x6c>
 800f5d2:	8aa5      	ldrh	r5, [r4, #20]
 800f5d4:	2704      	movs	r7, #4
 800f5d6:	e003      	b.n	800f5e0 <DataStageIn+0x20>
 800f5d8:	8aa5      	ldrh	r5, [r4, #20]
 800f5da:	42ab      	cmp	r3, r5
 800f5dc:	d9fa      	bls.n	800f5d4 <DataStageIn+0x14>
 800f5de:	2702      	movs	r7, #2
 800f5e0:	429d      	cmp	r5, r3
 800f5e2:	bf28      	it	cs
 800f5e4:	461d      	movcs	r5, r3
 800f5e6:	69a2      	ldr	r2, [r4, #24]
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	4790      	blx	r2
 800f5ec:	4680      	mov	r8, r0
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	f001 f840 	bl	8010674 <GetEPTxAddr>
 800f5f4:	462a      	mov	r2, r5
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	f000 fdcf 	bl	801019c <UserToPMABufferCopy>
 800f5fe:	4629      	mov	r1, r5
 800f600:	2000      	movs	r0, #0
 800f602:	f001 f857 	bl	80106b4 <SetEPTxCount>
 800f606:	8a20      	ldrh	r0, [r4, #16]
 800f608:	8a61      	ldrh	r1, [r4, #18]
 800f60a:	ebc5 0c00 	rsb	ip, r5, r0
 800f60e:	4b15      	ldr	r3, [pc, #84]	; (800f664 <DataStageIn+0xa4>)
 800f610:	4815      	ldr	r0, [pc, #84]	; (800f668 <DataStageIn+0xa8>)
 800f612:	186d      	adds	r5, r5, r1
 800f614:	2230      	movs	r2, #48	; 0x30
 800f616:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800f61a:	f8a4 c010 	strh.w	ip, [r4, #16]
 800f61e:	8265      	strh	r5, [r4, #18]
 800f620:	801a      	strh	r2, [r3, #0]
 800f622:	6834      	ldr	r4, [r6, #0]
 800f624:	8001      	strh	r1, [r0, #0]
 800f626:	7227      	strb	r7, [r4, #8]
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	4a0f      	ldr	r2, [pc, #60]	; (800f66c <DataStageIn+0xac>)
 800f62e:	7811      	ldrb	r1, [r2, #0]
 800f630:	2901      	cmp	r1, #1
 800f632:	d006      	beq.n	800f642 <DataStageIn+0x82>
 800f634:	4b0b      	ldr	r3, [pc, #44]	; (800f664 <DataStageIn+0xa4>)
 800f636:	2707      	movs	r7, #7
 800f638:	2210      	movs	r2, #16
 800f63a:	801a      	strh	r2, [r3, #0]
 800f63c:	7227      	strb	r7, [r4, #8]
 800f63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f642:	480b      	ldr	r0, [pc, #44]	; (800f670 <DataStageIn+0xb0>)
 800f644:	490b      	ldr	r1, [pc, #44]	; (800f674 <DataStageIn+0xb4>)
 800f646:	6804      	ldr	r4, [r0, #0]
 800f648:	fa1f fc84 	uxth.w	ip, r4
 800f64c:	eb0c 0001 	add.w	r0, ip, r1
 800f650:	0044      	lsls	r4, r0, #1
 800f652:	4904      	ldr	r1, [pc, #16]	; (800f664 <DataStageIn+0xa4>)
 800f654:	6023      	str	r3, [r4, #0]
 800f656:	2030      	movs	r0, #48	; 0x30
 800f658:	6834      	ldr	r4, [r6, #0]
 800f65a:	8008      	strh	r0, [r1, #0]
 800f65c:	7013      	strb	r3, [r2, #0]
 800f65e:	e7e2      	b.n	800f626 <DataStageIn+0x66>
 800f660:	20000ee4 	.word	0x20000ee4
 800f664:	20000eec 	.word	0x20000eec
 800f668:	20000eea 	.word	0x20000eea
 800f66c:	20000a10 	.word	0x20000a10
 800f670:	40005c50 	.word	0x40005c50
 800f674:	20003002 	.word	0x20003002

0800f678 <Standard_SetConfiguration>:
 800f678:	b510      	push	{r4, lr}
 800f67a:	4b0b      	ldr	r3, [pc, #44]	; (800f6a8 <Standard_SetConfiguration+0x30>)
 800f67c:	4a0b      	ldr	r2, [pc, #44]	; (800f6ac <Standard_SetConfiguration+0x34>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	7851      	ldrb	r1, [r2, #1]
 800f682:	78da      	ldrb	r2, [r3, #3]
 800f684:	4291      	cmp	r1, r2
 800f686:	d305      	bcc.n	800f694 <Standard_SetConfiguration+0x1c>
 800f688:	7898      	ldrb	r0, [r3, #2]
 800f68a:	b918      	cbnz	r0, 800f694 <Standard_SetConfiguration+0x1c>
 800f68c:	889c      	ldrh	r4, [r3, #4]
 800f68e:	b11c      	cbz	r4, 800f698 <Standard_SetConfiguration+0x20>
 800f690:	2002      	movs	r0, #2
 800f692:	bd10      	pop	{r4, pc}
 800f694:	2002      	movs	r0, #2
 800f696:	bd10      	pop	{r4, pc}
 800f698:	729a      	strb	r2, [r3, #10]
 800f69a:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <Standard_SetConfiguration+0x38>)
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	6851      	ldr	r1, [r2, #4]
 800f6a0:	4788      	blx	r1
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20000ee4 	.word	0x20000ee4
 800f6ac:	20000134 	.word	0x20000134
 800f6b0:	20000ee0 	.word	0x20000ee0

0800f6b4 <Standard_SetInterface>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4810      	ldr	r0, [pc, #64]	; (800f6f8 <Standard_SetInterface+0x44>)
 800f6b8:	4c10      	ldr	r4, [pc, #64]	; (800f6fc <Standard_SetInterface+0x48>)
 800f6ba:	6802      	ldr	r2, [r0, #0]
 800f6bc:	6821      	ldr	r1, [r4, #0]
 800f6be:	6993      	ldr	r3, [r2, #24]
 800f6c0:	7948      	ldrb	r0, [r1, #5]
 800f6c2:	78c9      	ldrb	r1, [r1, #3]
 800f6c4:	4798      	blx	r3
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	7a9a      	ldrb	r2, [r3, #10]
 800f6ca:	b18a      	cbz	r2, 800f6f0 <Standard_SetInterface+0x3c>
 800f6cc:	b980      	cbnz	r0, 800f6f0 <Standard_SetInterface+0x3c>
 800f6ce:	7919      	ldrb	r1, [r3, #4]
 800f6d0:	b971      	cbnz	r1, 800f6f0 <Standard_SetInterface+0x3c>
 800f6d2:	789d      	ldrb	r5, [r3, #2]
 800f6d4:	b975      	cbnz	r5, 800f6f4 <Standard_SetInterface+0x40>
 800f6d6:	4b0a      	ldr	r3, [pc, #40]	; (800f700 <Standard_SetInterface+0x4c>)
 800f6d8:	6819      	ldr	r1, [r3, #0]
 800f6da:	68c8      	ldr	r0, [r1, #12]
 800f6dc:	4780      	blx	r0
 800f6de:	6823      	ldr	r3, [r4, #0]
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	795a      	ldrb	r2, [r3, #5]
 800f6e4:	f893 c003 	ldrb.w	ip, [r3, #3]
 800f6e8:	72da      	strb	r2, [r3, #11]
 800f6ea:	f883 c00c 	strb.w	ip, [r3, #12]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	2002      	movs	r0, #2
 800f6f2:	bd38      	pop	{r3, r4, r5, pc}
 800f6f4:	2002      	movs	r0, #2
 800f6f6:	bd38      	pop	{r3, r4, r5, pc}
 800f6f8:	20000ebc 	.word	0x20000ebc
 800f6fc:	20000ee4 	.word	0x20000ee4
 800f700:	20000ee0 	.word	0x20000ee0

0800f704 <Standard_ClearFeature>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4b3a      	ldr	r3, [pc, #232]	; (800f7f0 <Standard_ClearFeature+0xec>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	7818      	ldrb	r0, [r3, #0]
 800f70c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800f710:	d035      	beq.n	800f77e <Standard_ClearFeature+0x7a>
 800f712:	2802      	cmp	r0, #2
 800f714:	d001      	beq.n	800f71a <Standard_ClearFeature+0x16>
 800f716:	2002      	movs	r0, #2
 800f718:	bd38      	pop	{r3, r4, r5, pc}
 800f71a:	885a      	ldrh	r2, [r3, #2]
 800f71c:	2a00      	cmp	r2, #0
 800f71e:	d12d      	bne.n	800f77c <Standard_ClearFeature+0x78>
 800f720:	7919      	ldrb	r1, [r3, #4]
 800f722:	bb59      	cbnz	r1, 800f77c <Standard_ClearFeature+0x78>
 800f724:	795a      	ldrb	r2, [r3, #5]
 800f726:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f72a:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800f72e:	d12b      	bne.n	800f788 <Standard_ClearFeature+0x84>
 800f730:	0084      	lsls	r4, r0, #2
 800f732:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800f736:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 800f73a:	f8dc 5000 	ldr.w	r5, [ip]
 800f73e:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
 800f742:	492c      	ldr	r1, [pc, #176]	; (800f7f4 <Standard_ClearFeature+0xf0>)
 800f744:	f891 c000 	ldrb.w	ip, [r1]
 800f748:	4560      	cmp	r0, ip
 800f74a:	d2e4      	bcs.n	800f716 <Standard_ClearFeature+0x12>
 800f74c:	2d00      	cmp	r5, #0
 800f74e:	d0e2      	beq.n	800f716 <Standard_ClearFeature+0x12>
 800f750:	7a9b      	ldrb	r3, [r3, #10]
 800f752:	b193      	cbz	r3, 800f77a <Standard_ClearFeature+0x76>
 800f754:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f758:	d020      	beq.n	800f79c <Standard_ClearFeature+0x98>
 800f75a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800f75e:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800f762:	6822      	ldr	r2, [r4, #0]
 800f764:	f002 0e30 	and.w	lr, r2, #48	; 0x30
 800f768:	f1be 0f10 	cmp.w	lr, #16
 800f76c:	d033      	beq.n	800f7d6 <Standard_ClearFeature+0xd2>
 800f76e:	4b22      	ldr	r3, [pc, #136]	; (800f7f8 <Standard_ClearFeature+0xf4>)
 800f770:	6819      	ldr	r1, [r3, #0]
 800f772:	6948      	ldr	r0, [r1, #20]
 800f774:	4780      	blx	r0
 800f776:	2000      	movs	r0, #0
 800f778:	bd38      	pop	{r3, r4, r5, pc}
 800f77a:	2002      	movs	r0, #2
 800f77c:	bd38      	pop	{r3, r4, r5, pc}
 800f77e:	7a59      	ldrb	r1, [r3, #9]
 800f780:	f021 0220 	bic.w	r2, r1, #32
 800f784:	725a      	strb	r2, [r3, #9]
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	0084      	lsls	r4, r0, #2
 800f78a:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800f78e:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 800f792:	f8dc 5000 	ldr.w	r5, [ip]
 800f796:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800f79a:	e7d2      	b.n	800f742 <Standard_ClearFeature+0x3e>
 800f79c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800f7a0:	f503 44b8 	add.w	r4, r3, #23552	; 0x5c00
 800f7a4:	6821      	ldr	r1, [r4, #0]
 800f7a6:	f401 5c40 	and.w	ip, r1, #12288	; 0x3000
 800f7aa:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 800f7ae:	d1de      	bne.n	800f76e <Standard_ClearFeature+0x6a>
 800f7b0:	b9d0      	cbnz	r0, 800f7e8 <Standard_ClearFeature+0xe4>
 800f7b2:	4a12      	ldr	r2, [pc, #72]	; (800f7fc <Standard_ClearFeature+0xf8>)
 800f7b4:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800f7b8:	f000 ffa2 	bl	8010700 <SetEPRxCount>
 800f7bc:	6822      	ldr	r2, [r4, #0]
 800f7be:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800f7c2:	ea02 0103 	and.w	r1, r2, r3
 800f7c6:	f481 5c40 	eor.w	ip, r1, #12288	; 0x3000
 800f7ca:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
 800f7ce:	f04e 0080 	orr.w	r0, lr, #128	; 0x80
 800f7d2:	6020      	str	r0, [r4, #0]
 800f7d4:	e7cb      	b.n	800f76e <Standard_ClearFeature+0x6a>
 800f7d6:	b2c4      	uxtb	r4, r0
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f000 fef5 	bl	80105c8 <ClearDTOG_TX>
 800f7de:	4620      	mov	r0, r4
 800f7e0:	2130      	movs	r1, #48	; 0x30
 800f7e2:	f000 fd99 	bl	8010318 <SetEPTxStatus>
 800f7e6:	e7c2      	b.n	800f76e <Standard_ClearFeature+0x6a>
 800f7e8:	f000 feda 	bl	80105a0 <ClearDTOG_RX>
 800f7ec:	e7e6      	b.n	800f7bc <Standard_ClearFeature+0xb8>
 800f7ee:	bf00      	nop
 800f7f0:	20000ee4 	.word	0x20000ee4
 800f7f4:	20000134 	.word	0x20000134
 800f7f8:	20000ee0 	.word	0x20000ee0
 800f7fc:	20000104 	.word	0x20000104

0800f800 <Standard_SetEndPointFeature>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4b29      	ldr	r3, [pc, #164]	; (800f8a8 <Standard_SetEndPointFeature+0xa8>)
 800f804:	6819      	ldr	r1, [r3, #0]
 800f806:	794b      	ldrb	r3, [r1, #5]
 800f808:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f80c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f810:	d12b      	bne.n	800f86a <Standard_SetEndPointFeature+0x6a>
 800f812:	0090      	lsls	r0, r2, #2
 800f814:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 800f818:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 800f81c:	6825      	ldr	r5, [r4, #0]
 800f81e:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
 800f822:	4c22      	ldr	r4, [pc, #136]	; (800f8ac <Standard_SetEndPointFeature+0xac>)
 800f824:	7824      	ldrb	r4, [r4, #0]
 800f826:	42a2      	cmp	r2, r4
 800f828:	d21d      	bcs.n	800f866 <Standard_SetEndPointFeature+0x66>
 800f82a:	884a      	ldrh	r2, [r1, #2]
 800f82c:	b9da      	cbnz	r2, 800f866 <Standard_SetEndPointFeature+0x66>
 800f82e:	b1d5      	cbz	r5, 800f866 <Standard_SetEndPointFeature+0x66>
 800f830:	7a89      	ldrb	r1, [r1, #10]
 800f832:	b319      	cbz	r1, 800f87c <Standard_SetEndPointFeature+0x7c>
 800f834:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f838:	d022      	beq.n	800f880 <Standard_SetEndPointFeature+0x80>
 800f83a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800f83e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800f842:	6803      	ldr	r3, [r0, #0]
 800f844:	f648 71bf 	movw	r1, #36799	; 0x8fbf
 800f848:	ea03 0201 	and.w	r2, r3, r1
 800f84c:	f082 0c10 	eor.w	ip, r2, #16
 800f850:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
 800f854:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 800f858:	6003      	str	r3, [r0, #0]
 800f85a:	4815      	ldr	r0, [pc, #84]	; (800f8b0 <Standard_SetEndPointFeature+0xb0>)
 800f85c:	6803      	ldr	r3, [r0, #0]
 800f85e:	6999      	ldr	r1, [r3, #24]
 800f860:	4788      	blx	r1
 800f862:	2000      	movs	r0, #0
 800f864:	bd38      	pop	{r3, r4, r5, pc}
 800f866:	2002      	movs	r0, #2
 800f868:	bd38      	pop	{r3, r4, r5, pc}
 800f86a:	0090      	lsls	r0, r2, #2
 800f86c:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 800f870:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 800f874:	6825      	ldr	r5, [r4, #0]
 800f876:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800f87a:	e7d2      	b.n	800f822 <Standard_SetEndPointFeature+0x22>
 800f87c:	2002      	movs	r0, #2
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 800f884:	f50e 4eb8 	add.w	lr, lr, #23552	; 0x5c00
 800f888:	f8de 2000 	ldr.w	r2, [lr]
 800f88c:	f64b 708f 	movw	r0, #49039	; 0xbf8f
 800f890:	ea02 0300 	and.w	r3, r2, r0
 800f894:	f483 5180 	eor.w	r1, r3, #4096	; 0x1000
 800f898:	f441 4c00 	orr.w	ip, r1, #32768	; 0x8000
 800f89c:	f04c 0280 	orr.w	r2, ip, #128	; 0x80
 800f8a0:	f8ce 2000 	str.w	r2, [lr]
 800f8a4:	e7d9      	b.n	800f85a <Standard_SetEndPointFeature+0x5a>
 800f8a6:	bf00      	nop
 800f8a8:	20000ee4 	.word	0x20000ee4
 800f8ac:	20000134 	.word	0x20000134
 800f8b0:	20000ee0 	.word	0x20000ee0

0800f8b4 <Standard_SetDeviceFeature>:
 800f8b4:	b508      	push	{r3, lr}
 800f8b6:	4806      	ldr	r0, [pc, #24]	; (800f8d0 <Standard_SetDeviceFeature+0x1c>)
 800f8b8:	4906      	ldr	r1, [pc, #24]	; (800f8d4 <Standard_SetDeviceFeature+0x20>)
 800f8ba:	6803      	ldr	r3, [r0, #0]
 800f8bc:	f893 c009 	ldrb.w	ip, [r3, #9]
 800f8c0:	f04c 0220 	orr.w	r2, ip, #32
 800f8c4:	725a      	strb	r2, [r3, #9]
 800f8c6:	6808      	ldr	r0, [r1, #0]
 800f8c8:	69c3      	ldr	r3, [r0, #28]
 800f8ca:	4798      	blx	r3
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	bd08      	pop	{r3, pc}
 800f8d0:	20000ee4 	.word	0x20000ee4
 800f8d4:	20000ee0 	.word	0x20000ee0

0800f8d8 <Standard_GetDescriptorData>:
 800f8d8:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <Standard_GetDescriptorData+0x18>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	8a5a      	ldrh	r2, [r3, #18]
 800f8de:	b110      	cbz	r0, 800f8e6 <Standard_GetDescriptorData+0xe>
 800f8e0:	6808      	ldr	r0, [r1, #0]
 800f8e2:	1880      	adds	r0, r0, r2
 800f8e4:	4770      	bx	lr
 800f8e6:	8889      	ldrh	r1, [r1, #4]
 800f8e8:	1a8a      	subs	r2, r1, r2
 800f8ea:	821a      	strh	r2, [r3, #16]
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	20000ee4 	.word	0x20000ee4

0800f8f4 <Post0_Process>:
 800f8f4:	b508      	push	{r3, lr}
 800f8f6:	490d      	ldr	r1, [pc, #52]	; (800f92c <Post0_Process+0x38>)
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800f8fe:	f000 feff 	bl	8010700 <SetEPRxCount>
 800f902:	480b      	ldr	r0, [pc, #44]	; (800f930 <Post0_Process+0x3c>)
 800f904:	6803      	ldr	r3, [r0, #0]
 800f906:	7a18      	ldrb	r0, [r3, #8]
 800f908:	2808      	cmp	r0, #8
 800f90a:	d107      	bne.n	800f91c <Post0_Process+0x28>
 800f90c:	4909      	ldr	r1, [pc, #36]	; (800f934 <Post0_Process+0x40>)
 800f90e:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <Post0_Process+0x44>)
 800f910:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800f914:	2210      	movs	r2, #16
 800f916:	f8a1 c000 	strh.w	ip, [r1]
 800f91a:	801a      	strh	r2, [r3, #0]
 800f91c:	f1a0 0009 	sub.w	r0, r0, #9
 800f920:	f1d0 0e00 	rsbs	lr, r0, #0
 800f924:	eb4e 0000 	adc.w	r0, lr, r0
 800f928:	bd08      	pop	{r3, pc}
 800f92a:	bf00      	nop
 800f92c:	20000104 	.word	0x20000104
 800f930:	20000ee4 	.word	0x20000ee4
 800f934:	20000eea 	.word	0x20000eea
 800f938:	20000eec 	.word	0x20000eec

0800f93c <Out0_Process>:
 800f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f940:	4d2f      	ldr	r5, [pc, #188]	; (800fa00 <Out0_Process+0xc4>)
 800f942:	682c      	ldr	r4, [r5, #0]
 800f944:	7a23      	ldrb	r3, [r4, #8]
 800f946:	2b02      	cmp	r3, #2
 800f948:	d007      	beq.n	800f95a <Out0_Process+0x1e>
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	d005      	beq.n	800f95a <Out0_Process+0x1e>
 800f94e:	2b03      	cmp	r3, #3
 800f950:	d008      	beq.n	800f964 <Out0_Process+0x28>
 800f952:	2b05      	cmp	r3, #5
 800f954:	d006      	beq.n	800f964 <Out0_Process+0x28>
 800f956:	2b07      	cmp	r3, #7
 800f958:	d042      	beq.n	800f9e0 <Out0_Process+0xa4>
 800f95a:	2308      	movs	r3, #8
 800f95c:	7223      	strb	r3, [r4, #8]
 800f95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f962:	e7c7      	b.n	800f8f4 <Post0_Process>
 800f964:	69a3      	ldr	r3, [r4, #24]
 800f966:	8a22      	ldrh	r2, [r4, #16]
 800f968:	b1b3      	cbz	r3, 800f998 <Out0_Process+0x5c>
 800f96a:	b31a      	cbz	r2, 800f9b4 <Out0_Process+0x78>
 800f96c:	8aa6      	ldrh	r6, [r4, #20]
 800f96e:	4296      	cmp	r6, r2
 800f970:	bf28      	it	cs
 800f972:	4616      	movcs	r6, r2
 800f974:	4630      	mov	r0, r6
 800f976:	4798      	blx	r3
 800f978:	8a21      	ldrh	r1, [r4, #16]
 800f97a:	4607      	mov	r7, r0
 800f97c:	8a60      	ldrh	r0, [r4, #18]
 800f97e:	1b8a      	subs	r2, r1, r6
 800f980:	1833      	adds	r3, r6, r0
 800f982:	8222      	strh	r2, [r4, #16]
 800f984:	8263      	strh	r3, [r4, #18]
 800f986:	2000      	movs	r0, #0
 800f988:	f000 fe84 	bl	8010694 <GetEPRxAddr>
 800f98c:	4632      	mov	r2, r6
 800f98e:	4601      	mov	r1, r0
 800f990:	4638      	mov	r0, r7
 800f992:	f000 fc37 	bl	8010204 <PMAToUserBufferCopy>
 800f996:	8a22      	ldrh	r2, [r4, #16]
 800f998:	b162      	cbz	r2, 800f9b4 <Out0_Process+0x78>
 800f99a:	4a1a      	ldr	r2, [pc, #104]	; (800fa04 <Out0_Process+0xc8>)
 800f99c:	2000      	movs	r0, #0
 800f99e:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800f9a2:	4601      	mov	r1, r0
 800f9a4:	f8a2 c000 	strh.w	ip, [r2]
 800f9a8:	f000 fe84 	bl	80106b4 <SetEPTxCount>
 800f9ac:	4b16      	ldr	r3, [pc, #88]	; (800fa08 <Out0_Process+0xcc>)
 800f9ae:	2030      	movs	r0, #48	; 0x30
 800f9b0:	8a22      	ldrh	r2, [r4, #16]
 800f9b2:	8018      	strh	r0, [r3, #0]
 800f9b4:	8aa4      	ldrh	r4, [r4, #20]
 800f9b6:	4294      	cmp	r4, r2
 800f9b8:	d919      	bls.n	800f9ee <Out0_Process+0xb2>
 800f9ba:	b9e2      	cbnz	r2, 800f9f6 <Out0_Process+0xba>
 800f9bc:	6828      	ldr	r0, [r5, #0]
 800f9be:	2406      	movs	r4, #6
 800f9c0:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <Out0_Process+0xd0>)
 800f9c2:	7204      	strb	r4, [r0, #8]
 800f9c4:	6819      	ldr	r1, [r3, #0]
 800f9c6:	4812      	ldr	r0, [pc, #72]	; (800fa10 <Out0_Process+0xd4>)
 800f9c8:	fa1f fc81 	uxth.w	ip, r1
 800f9cc:	eb0c 0400 	add.w	r4, ip, r0
 800f9d0:	0063      	lsls	r3, r4, #1
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	682c      	ldr	r4, [r5, #0]
 800f9d6:	480c      	ldr	r0, [pc, #48]	; (800fa08 <Out0_Process+0xcc>)
 800f9d8:	2130      	movs	r1, #48	; 0x30
 800f9da:	7a23      	ldrb	r3, [r4, #8]
 800f9dc:	8001      	strh	r1, [r0, #0]
 800f9de:	e7bd      	b.n	800f95c <Out0_Process+0x20>
 800f9e0:	4b0c      	ldr	r3, [pc, #48]	; (800fa14 <Out0_Process+0xd8>)
 800f9e2:	6819      	ldr	r1, [r3, #0]
 800f9e4:	68ca      	ldr	r2, [r1, #12]
 800f9e6:	4790      	blx	r2
 800f9e8:	682c      	ldr	r4, [r5, #0]
 800f9ea:	2308      	movs	r3, #8
 800f9ec:	e7b6      	b.n	800f95c <Out0_Process+0x20>
 800f9ee:	682c      	ldr	r4, [r5, #0]
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	7223      	strb	r3, [r4, #8]
 800f9f4:	e7b2      	b.n	800f95c <Out0_Process+0x20>
 800f9f6:	682c      	ldr	r4, [r5, #0]
 800f9f8:	2305      	movs	r3, #5
 800f9fa:	7223      	strb	r3, [r4, #8]
 800f9fc:	e7ae      	b.n	800f95c <Out0_Process+0x20>
 800f9fe:	bf00      	nop
 800fa00:	20000ee4 	.word	0x20000ee4
 800fa04:	20000eea 	.word	0x20000eea
 800fa08:	20000eec 	.word	0x20000eec
 800fa0c:	40005c50 	.word	0x40005c50
 800fa10:	20003002 	.word	0x20003002
 800fa14:	20000ebc 	.word	0x20000ebc

0800fa18 <Setup0_Process>:
 800fa18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa1a:	4a9a      	ldr	r2, [pc, #616]	; (800fc84 <Setup0_Process+0x26c>)
 800fa1c:	4c9a      	ldr	r4, [pc, #616]	; (800fc88 <Setup0_Process+0x270>)
 800fa1e:	6811      	ldr	r1, [r2, #0]
 800fa20:	6822      	ldr	r2, [r4, #0]
 800fa22:	4b9a      	ldr	r3, [pc, #616]	; (800fc8c <Setup0_Process+0x274>)
 800fa24:	fa1f fc81 	uxth.w	ip, r1
 800fa28:	7a11      	ldrb	r1, [r2, #8]
 800fa2a:	eb0c 0003 	add.w	r0, ip, r3
 800fa2e:	0043      	lsls	r3, r0, #1
 800fa30:	2909      	cmp	r1, #9
 800fa32:	b083      	sub	sp, #12
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	d04d      	beq.n	800fad4 <Setup0_Process+0xbc>
 800fa38:	b299      	uxth	r1, r3
 800fa3a:	f101 5c00 	add.w	ip, r1, #536870912	; 0x20000000
 800fa3e:	f50c 5640 	add.w	r6, ip, #12288	; 0x3000
 800fa42:	0070      	lsls	r0, r6, #1
 800fa44:	4605      	mov	r5, r0
 800fa46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fa4a:	f100 060a 	add.w	r6, r0, #10
 800fa4e:	7013      	strb	r3, [r2, #0]
 800fa50:	f890 e001 	ldrb.w	lr, [r0, #1]
 800fa54:	6827      	ldr	r7, [r4, #0]
 800fa56:	f887 e001 	strb.w	lr, [r7, #1]
 800fa5a:	f8b5 0003 	ldrh.w	r0, [r5, #3]
 800fa5e:	6827      	ldr	r7, [r4, #0]
 800fa60:	f001 f832 	bl	8010ac8 <ByteSwap>
 800fa64:	8078      	strh	r0, [r7, #2]
 800fa66:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 800fa6a:	6825      	ldr	r5, [r4, #0]
 800fa6c:	f001 f82c 	bl	8010ac8 <ByteSwap>
 800fa70:	80a8      	strh	r0, [r5, #4]
 800fa72:	6822      	ldr	r2, [r4, #0]
 800fa74:	8873      	ldrh	r3, [r6, #2]
 800fa76:	2001      	movs	r0, #1
 800fa78:	80d3      	strh	r3, [r2, #6]
 800fa7a:	7210      	strb	r0, [r2, #8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d02e      	beq.n	800fade <Setup0_Process+0xc6>
 800fa80:	7851      	ldrb	r1, [r2, #1]
 800fa82:	2906      	cmp	r1, #6
 800fa84:	f000 808a 	beq.w	800fb9c <Setup0_Process+0x184>
 800fa88:	2900      	cmp	r1, #0
 800fa8a:	d147      	bne.n	800fb1c <Setup0_Process+0x104>
 800fa8c:	8850      	ldrh	r0, [r2, #2]
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	f000 809b 	beq.w	800fbca <Setup0_Process+0x1b2>
 800fa94:	4d7e      	ldr	r5, [pc, #504]	; (800fc90 <Setup0_Process+0x278>)
 800fa96:	682b      	ldr	r3, [r5, #0]
 800fa98:	4608      	mov	r0, r1
 800fa9a:	691a      	ldr	r2, [r3, #16]
 800fa9c:	4790      	blx	r2
 800fa9e:	2803      	cmp	r0, #3
 800faa0:	f000 8106 	beq.w	800fcb0 <Setup0_Process+0x298>
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800faaa:	8a1a      	ldrh	r2, [r3, #16]
 800faac:	4562      	cmp	r2, ip
 800faae:	d048      	beq.n	800fb42 <Setup0_Process+0x12a>
 800fab0:	2802      	cmp	r0, #2
 800fab2:	d02d      	beq.n	800fb10 <Setup0_Process+0xf8>
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	d02b      	beq.n	800fb10 <Setup0_Process+0xf8>
 800fab8:	f993 e000 	ldrsb.w	lr, [r3]
 800fabc:	f1be 0f00 	cmp.w	lr, #0
 800fac0:	f2c0 80ba 	blt.w	800fc38 <Setup0_Process+0x220>
 800fac4:	2103      	movs	r1, #3
 800fac6:	7219      	strb	r1, [r3, #8]
 800fac8:	4b72      	ldr	r3, [pc, #456]	; (800fc94 <Setup0_Process+0x27c>)
 800faca:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
 800face:	f8a3 e000 	strh.w	lr, [r3]
 800fad2:	e01f      	b.n	800fb14 <Setup0_Process+0xfc>
 800fad4:	88d3      	ldrh	r3, [r2, #6]
 800fad6:	2001      	movs	r0, #1
 800fad8:	7210      	strb	r0, [r2, #8]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1d0      	bne.n	800fa80 <Setup0_Process+0x68>
 800fade:	7813      	ldrb	r3, [r2, #0]
 800fae0:	7855      	ldrb	r5, [r2, #1]
 800fae2:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800fae6:	d02f      	beq.n	800fb48 <Setup0_Process+0x130>
 800fae8:	2b01      	cmp	r3, #1
 800faea:	f000 80bb 	beq.w	800fc64 <Setup0_Process+0x24c>
 800faee:	2b02      	cmp	r3, #2
 800faf0:	f000 80f6 	beq.w	800fce0 <Setup0_Process+0x2c8>
 800faf4:	4a66      	ldr	r2, [pc, #408]	; (800fc90 <Setup0_Process+0x278>)
 800faf6:	4628      	mov	r0, r5
 800faf8:	6811      	ldr	r1, [r2, #0]
 800fafa:	694b      	ldr	r3, [r1, #20]
 800fafc:	4798      	blx	r3
 800fafe:	2803      	cmp	r0, #3
 800fb00:	f000 8119 	beq.w	800fd36 <Setup0_Process+0x31e>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d038      	beq.n	800fb7a <Setup0_Process+0x162>
 800fb08:	6822      	ldr	r2, [r4, #0]
 800fb0a:	2308      	movs	r3, #8
 800fb0c:	7213      	strb	r3, [r2, #8]
 800fb0e:	e001      	b.n	800fb14 <Setup0_Process+0xfc>
 800fb10:	2108      	movs	r1, #8
 800fb12:	7219      	strb	r1, [r3, #8]
 800fb14:	b003      	add	sp, #12
 800fb16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb1a:	e6eb      	b.n	800f8f4 <Post0_Process>
 800fb1c:	2908      	cmp	r1, #8
 800fb1e:	d167      	bne.n	800fbf0 <Setup0_Process+0x1d8>
 800fb20:	7810      	ldrb	r0, [r2, #0]
 800fb22:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800fb26:	d1b5      	bne.n	800fa94 <Setup0_Process+0x7c>
 800fb28:	4b5b      	ldr	r3, [pc, #364]	; (800fc98 <Setup0_Process+0x280>)
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	6193      	str	r3, [r2, #24]
 800fb2e:	8251      	strh	r1, [r2, #18]
 800fb30:	2000      	movs	r0, #0
 800fb32:	4798      	blx	r3
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800fb3a:	8a1a      	ldrh	r2, [r3, #16]
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	4562      	cmp	r2, ip
 800fb40:	d1b6      	bne.n	800fab0 <Setup0_Process+0x98>
 800fb42:	2209      	movs	r2, #9
 800fb44:	721a      	strb	r2, [r3, #8]
 800fb46:	e7e5      	b.n	800fb14 <Setup0_Process+0xfc>
 800fb48:	2d09      	cmp	r5, #9
 800fb4a:	f000 80ea 	beq.w	800fd22 <Setup0_Process+0x30a>
 800fb4e:	2d05      	cmp	r5, #5
 800fb50:	f000 80b6 	beq.w	800fcc0 <Setup0_Process+0x2a8>
 800fb54:	2d03      	cmp	r5, #3
 800fb56:	f000 80cf 	beq.w	800fcf8 <Setup0_Process+0x2e0>
 800fb5a:	2d01      	cmp	r5, #1
 800fb5c:	d1ca      	bne.n	800faf4 <Setup0_Process+0xdc>
 800fb5e:	78d1      	ldrb	r1, [r2, #3]
 800fb60:	2901      	cmp	r1, #1
 800fb62:	d1c7      	bne.n	800faf4 <Setup0_Process+0xdc>
 800fb64:	8890      	ldrh	r0, [r2, #4]
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d1c4      	bne.n	800faf4 <Setup0_Process+0xdc>
 800fb6a:	7a52      	ldrb	r2, [r2, #9]
 800fb6c:	f012 0f20 	tst.w	r2, #32
 800fb70:	d0c0      	beq.n	800faf4 <Setup0_Process+0xdc>
 800fb72:	f7ff fdc7 	bl	800f704 <Standard_ClearFeature>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d1bc      	bne.n	800faf4 <Setup0_Process+0xdc>
 800fb7a:	4a42      	ldr	r2, [pc, #264]	; (800fc84 <Setup0_Process+0x26c>)
 800fb7c:	4b47      	ldr	r3, [pc, #284]	; (800fc9c <Setup0_Process+0x284>)
 800fb7e:	6811      	ldr	r1, [r2, #0]
 800fb80:	fa1f fc81 	uxth.w	ip, r1
 800fb84:	eb0c 0003 	add.w	r0, ip, r3
 800fb88:	0042      	lsls	r2, r0, #1
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	6011      	str	r1, [r2, #0]
 800fb8e:	4b44      	ldr	r3, [pc, #272]	; (800fca0 <Setup0_Process+0x288>)
 800fb90:	6822      	ldr	r2, [r4, #0]
 800fb92:	2030      	movs	r0, #48	; 0x30
 800fb94:	8018      	strh	r0, [r3, #0]
 800fb96:	2306      	movs	r3, #6
 800fb98:	7213      	strb	r3, [r2, #8]
 800fb9a:	e7bb      	b.n	800fb14 <Setup0_Process+0xfc>
 800fb9c:	7815      	ldrb	r5, [r2, #0]
 800fb9e:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 800fba2:	f47f af77 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fba6:	7893      	ldrb	r3, [r2, #2]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	f000 80c0 	beq.w	800fd2e <Setup0_Process+0x316>
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	f000 8082 	beq.w	800fcb8 <Setup0_Process+0x2a0>
 800fbb4:	2b03      	cmp	r3, #3
 800fbb6:	f47f af6d 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fbba:	4d35      	ldr	r5, [pc, #212]	; (800fc90 <Setup0_Process+0x278>)
 800fbbc:	6829      	ldr	r1, [r5, #0]
 800fbbe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1b2      	bne.n	800fb2a <Setup0_Process+0x112>
 800fbc4:	6820      	ldr	r0, [r4, #0]
 800fbc6:	7841      	ldrb	r1, [r0, #1]
 800fbc8:	e765      	b.n	800fa96 <Setup0_Process+0x7e>
 800fbca:	6853      	ldr	r3, [r2, #4]
 800fbcc:	f423 4e7f 	bic.w	lr, r3, #65280	; 0xff00
 800fbd0:	f5be 3f00 	cmp.w	lr, #131072	; 0x20000
 800fbd4:	f47f af5e 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fbd8:	f892 c000 	ldrb.w	ip, [r2]
 800fbdc:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 800fbe0:	f040 80ad 	bne.w	800fd3e <Setup0_Process+0x326>
 800fbe4:	8890      	ldrh	r0, [r2, #4]
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	f47f af54 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fbec:	4b2d      	ldr	r3, [pc, #180]	; (800fca4 <Setup0_Process+0x28c>)
 800fbee:	e79c      	b.n	800fb2a <Setup0_Process+0x112>
 800fbf0:	290a      	cmp	r1, #10
 800fbf2:	f47f af4f 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fbf6:	f892 c000 	ldrb.w	ip, [r2]
 800fbfa:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	f47f af48 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fc04:	7a95      	ldrb	r5, [r2, #10]
 800fc06:	2d00      	cmp	r5, #0
 800fc08:	f43f af44 	beq.w	800fa94 <Setup0_Process+0x7c>
 800fc0c:	8856      	ldrh	r6, [r2, #2]
 800fc0e:	2e00      	cmp	r6, #0
 800fc10:	f47f af40 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fc14:	6850      	ldr	r0, [r2, #4]
 800fc16:	f420 4e7f 	bic.w	lr, r0, #65280	; 0xff00
 800fc1a:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
 800fc1e:	f47f af39 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fc22:	4d1b      	ldr	r5, [pc, #108]	; (800fc90 <Setup0_Process+0x278>)
 800fc24:	7950      	ldrb	r0, [r2, #5]
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	4631      	mov	r1, r6
 800fc2a:	699a      	ldr	r2, [r3, #24]
 800fc2c:	4790      	blx	r2
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d1c8      	bne.n	800fbc4 <Setup0_Process+0x1ac>
 800fc32:	6822      	ldr	r2, [r4, #0]
 800fc34:	4b1c      	ldr	r3, [pc, #112]	; (800fca8 <Setup0_Process+0x290>)
 800fc36:	e778      	b.n	800fb2a <Setup0_Process+0x112>
 800fc38:	88d9      	ldrh	r1, [r3, #6]
 800fc3a:	9101      	str	r1, [sp, #4]
 800fc3c:	9801      	ldr	r0, [sp, #4]
 800fc3e:	4282      	cmp	r2, r0
 800fc40:	d818      	bhi.n	800fc74 <Setup0_Process+0x25c>
 800fc42:	428a      	cmp	r2, r1
 800fc44:	f080 809d 	bcs.w	800fd82 <Setup0_Process+0x36a>
 800fc48:	4911      	ldr	r1, [pc, #68]	; (800fc90 <Setup0_Process+0x278>)
 800fc4a:	6808      	ldr	r0, [r1, #0]
 800fc4c:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 800fc50:	428a      	cmp	r2, r1
 800fc52:	f080 809b 	bcs.w	800fd8c <Setup0_Process+0x374>
 800fc56:	4a15      	ldr	r2, [pc, #84]	; (800fcac <Setup0_Process+0x294>)
 800fc58:	2000      	movs	r0, #0
 800fc5a:	7010      	strb	r0, [r2, #0]
 800fc5c:	8299      	strh	r1, [r3, #20]
 800fc5e:	f7ff fcaf 	bl	800f5c0 <DataStageIn>
 800fc62:	e757      	b.n	800fb14 <Setup0_Process+0xfc>
 800fc64:	2d0b      	cmp	r5, #11
 800fc66:	f47f af45 	bne.w	800faf4 <Setup0_Process+0xdc>
 800fc6a:	f7ff fd23 	bl	800f6b4 <Standard_SetInterface>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d083      	beq.n	800fb7a <Setup0_Process+0x162>
 800fc72:	e73f      	b.n	800faf4 <Setup0_Process+0xdc>
 800fc74:	4806      	ldr	r0, [pc, #24]	; (800fc90 <Setup0_Process+0x278>)
 800fc76:	9901      	ldr	r1, [sp, #4]
 800fc78:	6802      	ldr	r2, [r0, #0]
 800fc7a:	8219      	strh	r1, [r3, #16]
 800fc7c:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800fc80:	e7ec      	b.n	800fc5c <Setup0_Process+0x244>
 800fc82:	bf00      	nop
 800fc84:	40005c50 	.word	0x40005c50
 800fc88:	20000ee4 	.word	0x20000ee4
 800fc8c:	20003004 	.word	0x20003004
 800fc90:	20000ebc 	.word	0x20000ebc
 800fc94:	20000eea 	.word	0x20000eea
 800fc98:	0800f4b5 	.word	0x0800f4b5
 800fc9c:	20003002 	.word	0x20003002
 800fca0:	20000eec 	.word	0x20000eec
 800fca4:	0800f505 	.word	0x0800f505
 800fca8:	0800f4dd 	.word	0x0800f4dd
 800fcac:	20000a10 	.word	0x20000a10
 800fcb0:	6820      	ldr	r0, [r4, #0]
 800fcb2:	2109      	movs	r1, #9
 800fcb4:	7201      	strb	r1, [r0, #8]
 800fcb6:	e72d      	b.n	800fb14 <Setup0_Process+0xfc>
 800fcb8:	4d46      	ldr	r5, [pc, #280]	; (800fdd4 <Setup0_Process+0x3bc>)
 800fcba:	682b      	ldr	r3, [r5, #0]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	e77f      	b.n	800fbc0 <Setup0_Process+0x1a8>
 800fcc0:	f992 c003 	ldrsb.w	ip, [r2, #3]
 800fcc4:	f1bc 0f00 	cmp.w	ip, #0
 800fcc8:	db07      	blt.n	800fcda <Setup0_Process+0x2c2>
 800fcca:	7891      	ldrb	r1, [r2, #2]
 800fccc:	b929      	cbnz	r1, 800fcda <Setup0_Process+0x2c2>
 800fcce:	8890      	ldrh	r0, [r2, #4]
 800fcd0:	b918      	cbnz	r0, 800fcda <Setup0_Process+0x2c2>
 800fcd2:	7a93      	ldrb	r3, [r2, #10]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f43f af50 	beq.w	800fb7a <Setup0_Process+0x162>
 800fcda:	2308      	movs	r3, #8
 800fcdc:	7213      	strb	r3, [r2, #8]
 800fcde:	e719      	b.n	800fb14 <Setup0_Process+0xfc>
 800fce0:	2d01      	cmp	r5, #1
 800fce2:	f43f af46 	beq.w	800fb72 <Setup0_Process+0x15a>
 800fce6:	2d03      	cmp	r5, #3
 800fce8:	f47f af04 	bne.w	800faf4 <Setup0_Process+0xdc>
 800fcec:	f7ff fd88 	bl	800f800 <Standard_SetEndPointFeature>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	f43f af42 	beq.w	800fb7a <Setup0_Process+0x162>
 800fcf6:	e6fd      	b.n	800faf4 <Setup0_Process+0xdc>
 800fcf8:	f892 e003 	ldrb.w	lr, [r2, #3]
 800fcfc:	f1be 0f01 	cmp.w	lr, #1
 800fd00:	f47f aef8 	bne.w	800faf4 <Setup0_Process+0xdc>
 800fd04:	8891      	ldrh	r1, [r2, #4]
 800fd06:	2900      	cmp	r1, #0
 800fd08:	f47f aef4 	bne.w	800faf4 <Setup0_Process+0xdc>
 800fd0c:	f892 e009 	ldrb.w	lr, [r2, #9]
 800fd10:	4b31      	ldr	r3, [pc, #196]	; (800fdd8 <Setup0_Process+0x3c0>)
 800fd12:	f04e 0c20 	orr.w	ip, lr, #32
 800fd16:	f882 c009 	strb.w	ip, [r2, #9]
 800fd1a:	6818      	ldr	r0, [r3, #0]
 800fd1c:	69c2      	ldr	r2, [r0, #28]
 800fd1e:	4790      	blx	r2
 800fd20:	e72b      	b.n	800fb7a <Setup0_Process+0x162>
 800fd22:	f7ff fca9 	bl	800f678 <Standard_SetConfiguration>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	f43f af27 	beq.w	800fb7a <Setup0_Process+0x162>
 800fd2c:	e6e2      	b.n	800faf4 <Setup0_Process+0xdc>
 800fd2e:	4d29      	ldr	r5, [pc, #164]	; (800fdd4 <Setup0_Process+0x3bc>)
 800fd30:	6828      	ldr	r0, [r5, #0]
 800fd32:	69c3      	ldr	r3, [r0, #28]
 800fd34:	e744      	b.n	800fbc0 <Setup0_Process+0x1a8>
 800fd36:	6822      	ldr	r2, [r4, #0]
 800fd38:	2309      	movs	r3, #9
 800fd3a:	7213      	strb	r3, [r2, #8]
 800fd3c:	e6ea      	b.n	800fb14 <Setup0_Process+0xfc>
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d02f      	beq.n	800fda2 <Setup0_Process+0x38a>
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	f47f aea6 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fd48:	7953      	ldrb	r3, [r2, #5]
 800fd4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fd4e:	f003 000f 	and.w	r0, r3, #15
 800fd52:	d135      	bne.n	800fdc0 <Setup0_Process+0x3a8>
 800fd54:	0086      	lsls	r6, r0, #2
 800fd56:	f106 4e80 	add.w	lr, r6, #1073741824	; 0x40000000
 800fd5a:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 800fd5e:	f8dc 5000 	ldr.w	r5, [ip]
 800fd62:	f405 5640 	and.w	r6, r5, #12288	; 0x3000
 800fd66:	4d1d      	ldr	r5, [pc, #116]	; (800fddc <Setup0_Process+0x3c4>)
 800fd68:	782d      	ldrb	r5, [r5, #0]
 800fd6a:	42a8      	cmp	r0, r5
 800fd6c:	f4bf ae92 	bcs.w	800fa94 <Setup0_Process+0x7c>
 800fd70:	f013 0f70 	tst.w	r3, #112	; 0x70
 800fd74:	f47f ae8e 	bne.w	800fa94 <Setup0_Process+0x7c>
 800fd78:	2e00      	cmp	r6, #0
 800fd7a:	f43f ae8b 	beq.w	800fa94 <Setup0_Process+0x7c>
 800fd7e:	4b18      	ldr	r3, [pc, #96]	; (800fde0 <Setup0_Process+0x3c8>)
 800fd80:	e6d3      	b.n	800fb2a <Setup0_Process+0x112>
 800fd82:	4914      	ldr	r1, [pc, #80]	; (800fdd4 <Setup0_Process+0x3bc>)
 800fd84:	680a      	ldr	r2, [r1, #0]
 800fd86:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800fd8a:	e767      	b.n	800fc5c <Setup0_Process+0x244>
 800fd8c:	fb92 fcf1 	sdiv	ip, r2, r1
 800fd90:	fb01 201c 	mls	r0, r1, ip, r2
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f47f af61 	bne.w	800fc5c <Setup0_Process+0x244>
 800fd9a:	4a12      	ldr	r2, [pc, #72]	; (800fde4 <Setup0_Process+0x3cc>)
 800fd9c:	2001      	movs	r0, #1
 800fd9e:	7010      	strb	r0, [r2, #0]
 800fda0:	e75c      	b.n	800fc5c <Setup0_Process+0x244>
 800fda2:	4d0c      	ldr	r5, [pc, #48]	; (800fdd4 <Setup0_Process+0x3bc>)
 800fda4:	7950      	ldrb	r0, [r2, #5]
 800fda6:	682b      	ldr	r3, [r5, #0]
 800fda8:	699a      	ldr	r2, [r3, #24]
 800fdaa:	4790      	blx	r2
 800fdac:	2800      	cmp	r0, #0
 800fdae:	f47f af09 	bne.w	800fbc4 <Setup0_Process+0x1ac>
 800fdb2:	6822      	ldr	r2, [r4, #0]
 800fdb4:	7a91      	ldrb	r1, [r2, #10]
 800fdb6:	2900      	cmp	r1, #0
 800fdb8:	f47f af18 	bne.w	800fbec <Setup0_Process+0x1d4>
 800fdbc:	7851      	ldrb	r1, [r2, #1]
 800fdbe:	e66a      	b.n	800fa96 <Setup0_Process+0x7e>
 800fdc0:	0086      	lsls	r6, r0, #2
 800fdc2:	f106 4e80 	add.w	lr, r6, #1073741824	; 0x40000000
 800fdc6:	f50e 45b8 	add.w	r5, lr, #23552	; 0x5c00
 800fdca:	682e      	ldr	r6, [r5, #0]
 800fdcc:	f006 0630 	and.w	r6, r6, #48	; 0x30
 800fdd0:	e7c9      	b.n	800fd66 <Setup0_Process+0x34e>
 800fdd2:	bf00      	nop
 800fdd4:	20000ebc 	.word	0x20000ebc
 800fdd8:	20000ee0 	.word	0x20000ee0
 800fddc:	20000134 	.word	0x20000134
 800fde0:	0800f505 	.word	0x0800f505
 800fde4:	20000a10 	.word	0x20000a10

0800fde8 <SetDeviceAddress>:
 800fde8:	b4f0      	push	{r4, r5, r6, r7}
 800fdea:	4b2a      	ldr	r3, [pc, #168]	; (800fe94 <SetDeviceAddress+0xac>)
 800fdec:	781e      	ldrb	r6, [r3, #0]
 800fdee:	2e00      	cmp	r6, #0
 800fdf0:	d049      	beq.n	800fe86 <SetDeviceAddress+0x9e>
 800fdf2:	4a29      	ldr	r2, [pc, #164]	; (800fe98 <SetDeviceAddress+0xb0>)
 800fdf4:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 800fdf8:	6814      	ldr	r4, [r2, #0]
 800fdfa:	1e71      	subs	r1, r6, #1
 800fdfc:	ea04 030c 	and.w	r3, r4, ip
 800fe00:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 800fe04:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	429e      	cmp	r6, r3
 800fe0e:	f001 0101 	and.w	r1, r1, #1
 800fe12:	d938      	bls.n	800fe86 <SetDeviceAddress+0x9e>
 800fe14:	b169      	cbz	r1, 800fe32 <SetDeviceAddress+0x4a>
 800fe16:	4921      	ldr	r1, [pc, #132]	; (800fe9c <SetDeviceAddress+0xb4>)
 800fe18:	f640 720f 	movw	r2, #3855	; 0xf0f
 800fe1c:	680c      	ldr	r4, [r1, #0]
 800fe1e:	f248 0c81 	movw	ip, #32897	; 0x8081
 800fe22:	ea04 0302 	and.w	r3, r4, r2
 800fe26:	ea43 020c 	orr.w	r2, r3, ip
 800fe2a:	2302      	movs	r3, #2
 800fe2c:	429e      	cmp	r6, r3
 800fe2e:	600a      	str	r2, [r1, #0]
 800fe30:	d929      	bls.n	800fe86 <SetDeviceAddress+0x9e>
 800fe32:	b2dc      	uxtb	r4, r3
 800fe34:	00a2      	lsls	r2, r4, #2
 800fe36:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 800fe3a:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 800fe3e:	f8dc 7000 	ldr.w	r7, [ip]
 800fe42:	3301      	adds	r3, #1
 800fe44:	b2d9      	uxtb	r1, r3
 800fe46:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 800fe4a:	f640 740f 	movw	r4, #3855	; 0xf0f
 800fe4e:	ea07 0404 	and.w	r4, r7, r4
 800fe52:	f045 0280 	orr.w	r2, r5, #128	; 0x80
 800fe56:	008f      	lsls	r7, r1, #2
 800fe58:	ea42 0504 	orr.w	r5, r2, r4
 800fe5c:	f107 4480 	add.w	r4, r7, #1073741824	; 0x40000000
 800fe60:	f8cc 5000 	str.w	r5, [ip]
 800fe64:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800fe68:	6825      	ldr	r5, [r4, #0]
 800fe6a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800fe6e:	f640 720f 	movw	r2, #3855	; 0xf0f
 800fe72:	f041 0c80 	orr.w	ip, r1, #128	; 0x80
 800fe76:	ea05 0202 	and.w	r2, r5, r2
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	ea4c 0102 	orr.w	r1, ip, r2
 800fe80:	429e      	cmp	r6, r3
 800fe82:	6021      	str	r1, [r4, #0]
 800fe84:	d8d5      	bhi.n	800fe32 <SetDeviceAddress+0x4a>
 800fe86:	4b06      	ldr	r3, [pc, #24]	; (800fea0 <SetDeviceAddress+0xb8>)
 800fe88:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800fe8c:	6018      	str	r0, [r3, #0]
 800fe8e:	bcf0      	pop	{r4, r5, r6, r7}
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	20000134 	.word	0x20000134
 800fe98:	40005c00 	.word	0x40005c00
 800fe9c:	40005c04 	.word	0x40005c04
 800fea0:	40005c4c 	.word	0x40005c4c

0800fea4 <In0_Process>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	4c14      	ldr	r4, [pc, #80]	; (800fef8 <In0_Process+0x54>)
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	7a1a      	ldrb	r2, [r3, #8]
 800feac:	2a02      	cmp	r2, #2
 800feae:	d012      	beq.n	800fed6 <In0_Process+0x32>
 800feb0:	2a04      	cmp	r2, #4
 800feb2:	d010      	beq.n	800fed6 <In0_Process+0x32>
 800feb4:	2a06      	cmp	r2, #6
 800feb6:	d004      	beq.n	800fec2 <In0_Process+0x1e>
 800feb8:	2208      	movs	r2, #8
 800feba:	721a      	strb	r2, [r3, #8]
 800febc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fec0:	e518      	b.n	800f8f4 <Post0_Process>
 800fec2:	785a      	ldrb	r2, [r3, #1]
 800fec4:	2a05      	cmp	r2, #5
 800fec6:	d00b      	beq.n	800fee0 <In0_Process+0x3c>
 800fec8:	490c      	ldr	r1, [pc, #48]	; (800fefc <In0_Process+0x58>)
 800feca:	680b      	ldr	r3, [r1, #0]
 800fecc:	6898      	ldr	r0, [r3, #8]
 800fece:	4780      	blx	r0
 800fed0:	6823      	ldr	r3, [r4, #0]
 800fed2:	2208      	movs	r2, #8
 800fed4:	e7f1      	b.n	800feba <In0_Process+0x16>
 800fed6:	f7ff fb73 	bl	800f5c0 <DataStageIn>
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	7a1a      	ldrb	r2, [r3, #8]
 800fede:	e7ec      	b.n	800feba <In0_Process+0x16>
 800fee0:	7818      	ldrb	r0, [r3, #0]
 800fee2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800fee6:	d1ef      	bne.n	800fec8 <In0_Process+0x24>
 800fee8:	78d8      	ldrb	r0, [r3, #3]
 800feea:	f7ff ff7d 	bl	800fde8 <SetDeviceAddress>
 800feee:	4a04      	ldr	r2, [pc, #16]	; (800ff00 <In0_Process+0x5c>)
 800fef0:	6811      	ldr	r1, [r2, #0]
 800fef2:	6a0b      	ldr	r3, [r1, #32]
 800fef4:	4798      	blx	r3
 800fef6:	e7e7      	b.n	800fec8 <In0_Process+0x24>
 800fef8:	20000ee4 	.word	0x20000ee4
 800fefc:	20000ebc 	.word	0x20000ebc
 800ff00:	20000ee0 	.word	0x20000ee0

0800ff04 <NOP_Process>:
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop

0800ff08 <USB_Init>:
 800ff08:	b508      	push	{r3, lr}
 800ff0a:	4a07      	ldr	r2, [pc, #28]	; (800ff28 <USB_Init+0x20>)
 800ff0c:	4b07      	ldr	r3, [pc, #28]	; (800ff2c <USB_Init+0x24>)
 800ff0e:	2102      	movs	r1, #2
 800ff10:	4807      	ldr	r0, [pc, #28]	; (800ff30 <USB_Init+0x28>)
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	7211      	strb	r1, [r2, #8]
 800ff16:	4b07      	ldr	r3, [pc, #28]	; (800ff34 <USB_Init+0x2c>)
 800ff18:	4907      	ldr	r1, [pc, #28]	; (800ff38 <USB_Init+0x30>)
 800ff1a:	4a08      	ldr	r2, [pc, #32]	; (800ff3c <USB_Init+0x34>)
 800ff1c:	6018      	str	r0, [r3, #0]
 800ff1e:	6011      	str	r1, [r2, #0]
 800ff20:	6803      	ldr	r3, [r0, #0]
 800ff22:	4798      	blx	r3
 800ff24:	bd08      	pop	{r3, pc}
 800ff26:	bf00      	nop
 800ff28:	20000ec4 	.word	0x20000ec4
 800ff2c:	20000ee4 	.word	0x20000ee4
 800ff30:	20000104 	.word	0x20000104
 800ff34:	20000ebc 	.word	0x20000ebc
 800ff38:	20000138 	.word	0x20000138
 800ff3c:	20000ee0 	.word	0x20000ee0

0800ff40 <CTR_LP>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	4f67      	ldr	r7, [pc, #412]	; (80100e4 <CTR_LP+0x1a4>)
 800ff46:	b083      	sub	sp, #12
 800ff48:	2300      	movs	r3, #0
 800ff4a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80100f8 <CTR_LP+0x1b8>
 800ff4e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8010104 <CTR_LP+0x1c4>
 800ff52:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80100f0 <CTR_LP+0x1b0>
 800ff56:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff5a:	46b9      	mov	r9, r7
 800ff5c:	f8db 1000 	ldr.w	r1, [fp]
 800ff60:	4c61      	ldr	r4, [pc, #388]	; (80100e8 <CTR_LP+0x1a8>)
 800ff62:	8039      	strh	r1, [r7, #0]
 800ff64:	f8b7 c000 	ldrh.w	ip, [r7]
 800ff68:	4d60      	ldr	r5, [pc, #384]	; (80100ec <CTR_LP+0x1ac>)
 800ff6a:	fa0f f08c 	sxth.w	r0, ip
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
 800ff74:	4e5e      	ldr	r6, [pc, #376]	; (80100f0 <CTR_LP+0x1b0>)
 800ff76:	f280 80a8 	bge.w	80100ca <CTR_LP+0x18a>
 800ff7a:	f8b9 c000 	ldrh.w	ip, [r9]
 800ff7e:	f00c 000f 	and.w	r0, ip, #15
 800ff82:	0083      	lsls	r3, r0, #2
 800ff84:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 800ff88:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800ff8c:	f88a 0000 	strb.w	r0, [sl]
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d136      	bne.n	8010002 <CTR_LP+0xc2>
 800ff94:	6821      	ldr	r1, [r4, #0]
 800ff96:	f8a8 1000 	strh.w	r1, [r8]
 800ff9a:	f8b8 0000 	ldrh.w	r0, [r8]
 800ff9e:	f000 0c30 	and.w	ip, r0, #48	; 0x30
 800ffa2:	f8a5 c000 	strh.w	ip, [r5]
 800ffa6:	f8b8 3000 	ldrh.w	r3, [r8]
 800ffaa:	f403 5140 	and.w	r1, r3, #12288	; 0x3000
 800ffae:	f8a8 1000 	strh.w	r1, [r8]
 800ffb2:	6820      	ldr	r0, [r4, #0]
 800ffb4:	ea00 0202 	and.w	r2, r0, r2
 800ffb8:	f482 5c00 	eor.w	ip, r2, #8192	; 0x2000
 800ffbc:	f08c 0320 	eor.w	r3, ip, #32
 800ffc0:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800ffc4:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800ffc8:	6020      	str	r0, [r4, #0]
 800ffca:	f8b9 2000 	ldrh.w	r2, [r9]
 800ffce:	f012 0f10 	tst.w	r2, #16
 800ffd2:	d046      	beq.n	8010062 <CTR_LP+0x122>
 800ffd4:	6820      	ldr	r0, [r4, #0]
 800ffd6:	f8ad 0006 	strh.w	r0, [sp, #6]
 800ffda:	f8bd c006 	ldrh.w	ip, [sp, #6]
 800ffde:	f41c 6f00 	tst.w	ip, #2048	; 0x800
 800ffe2:	d175      	bne.n	80100d0 <CTR_LP+0x190>
 800ffe4:	f8bd c006 	ldrh.w	ip, [sp, #6]
 800ffe8:	fa0f f38c 	sxth.w	r3, ip
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	dab5      	bge.n	800ff5c <CTR_LP+0x1c>
 800fff0:	6822      	ldr	r2, [r4, #0]
 800fff2:	f640 718f 	movw	r1, #3983	; 0xf8f
 800fff6:	ea02 0001 	and.w	r0, r2, r1
 800fffa:	6020      	str	r0, [r4, #0]
 800fffc:	f7ff fc9e 	bl	800f93c <Out0_Process>
 8010000:	e037      	b.n	8010072 <CTR_LP+0x132>
 8010002:	680e      	ldr	r6, [r1, #0]
 8010004:	f8ad 6006 	strh.w	r6, [sp, #6]
 8010008:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801000c:	b22c      	sxth	r4, r5
 801000e:	2c00      	cmp	r4, #0
 8010010:	db19      	blt.n	8010046 <CTR_LP+0x106>
 8010012:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8010016:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801001a:	d09f      	beq.n	800ff5c <CTR_LP+0x1c>
 801001c:	f89a 3000 	ldrb.w	r3, [sl]
 8010020:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 8010024:	0099      	lsls	r1, r3, #2
 8010026:	f101 4c80 	add.w	ip, r1, #1073741824	; 0x40000000
 801002a:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 801002e:	6826      	ldr	r6, [r4, #0]
 8010030:	4b30      	ldr	r3, [pc, #192]	; (80100f4 <CTR_LP+0x1b4>)
 8010032:	ea06 050e 	and.w	r5, r6, lr
 8010036:	6025      	str	r5, [r4, #0]
 8010038:	f89a 0000 	ldrb.w	r0, [sl]
 801003c:	1e42      	subs	r2, r0, #1
 801003e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010042:	4788      	blx	r1
 8010044:	e78a      	b.n	800ff5c <CTR_LP+0x1c>
 8010046:	680e      	ldr	r6, [r1, #0]
 8010048:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 801004c:	ea06 050e 	and.w	r5, r6, lr
 8010050:	4c29      	ldr	r4, [pc, #164]	; (80100f8 <CTR_LP+0x1b8>)
 8010052:	600d      	str	r5, [r1, #0]
 8010054:	7820      	ldrb	r0, [r4, #0]
 8010056:	4b29      	ldr	r3, [pc, #164]	; (80100fc <CTR_LP+0x1bc>)
 8010058:	1e42      	subs	r2, r0, #1
 801005a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801005e:	4788      	blx	r1
 8010060:	e7d7      	b.n	8010012 <CTR_LP+0xd2>
 8010062:	6823      	ldr	r3, [r4, #0]
 8010064:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 8010068:	ea03 020e 	and.w	r2, r3, lr
 801006c:	6022      	str	r2, [r4, #0]
 801006e:	f7ff ff19 	bl	800fea4 <In0_Process>
 8010072:	6823      	ldr	r3, [r4, #0]
 8010074:	8831      	ldrh	r1, [r6, #0]
 8010076:	f64b 7ebf 	movw	lr, #49087	; 0xbfbf
 801007a:	f401 5c80 	and.w	ip, r1, #4096	; 0x1000
 801007e:	fa1f f08c 	uxth.w	r0, ip
 8010082:	ea03 030e 	and.w	r3, r3, lr
 8010086:	b108      	cbz	r0, 801008c <CTR_LP+0x14c>
 8010088:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801008c:	f8b6 e000 	ldrh.w	lr, [r6]
 8010090:	f40e 5000 	and.w	r0, lr, #8192	; 0x2000
 8010094:	b282      	uxth	r2, r0
 8010096:	b10a      	cbz	r2, 801009c <CTR_LP+0x15c>
 8010098:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801009c:	882a      	ldrh	r2, [r5, #0]
 801009e:	f002 0c10 	and.w	ip, r2, #16
 80100a2:	fa1f f18c 	uxth.w	r1, ip
 80100a6:	b109      	cbz	r1, 80100ac <CTR_LP+0x16c>
 80100a8:	f083 0310 	eor.w	r3, r3, #16
 80100ac:	8829      	ldrh	r1, [r5, #0]
 80100ae:	f001 0e20 	and.w	lr, r1, #32
 80100b2:	fa1f f08e 	uxth.w	r0, lr
 80100b6:	b108      	cbz	r0, 80100bc <CTR_LP+0x17c>
 80100b8:	f083 0320 	eor.w	r3, r3, #32
 80100bc:	4810      	ldr	r0, [pc, #64]	; (8010100 <CTR_LP+0x1c0>)
 80100be:	ea43 0c00 	orr.w	ip, r3, r0
 80100c2:	4b09      	ldr	r3, [pc, #36]	; (80100e8 <CTR_LP+0x1a8>)
 80100c4:	fa1f f28c 	uxth.w	r2, ip
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	b003      	add	sp, #12
 80100cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d0:	6822      	ldr	r2, [r4, #0]
 80100d2:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 80100d6:	ea02 010e 	and.w	r1, r2, lr
 80100da:	6021      	str	r1, [r4, #0]
 80100dc:	f7ff fc9c 	bl	800fa18 <Setup0_Process>
 80100e0:	e7c7      	b.n	8010072 <CTR_LP+0x132>
 80100e2:	bf00      	nop
 80100e4:	20000afc 	.word	0x20000afc
 80100e8:	40005c00 	.word	0x40005c00
 80100ec:	20000eec 	.word	0x20000eec
 80100f0:	20000eea 	.word	0x20000eea
 80100f4:	20000094 	.word	0x20000094
 80100f8:	20000ec0 	.word	0x20000ec0
 80100fc:	200000b0 	.word	0x200000b0
 8010100:	ffff8080 	.word	0xffff8080
 8010104:	40005c44 	.word	0x40005c44

08010108 <CTR_HP>:
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	4c1f      	ldr	r4, [pc, #124]	; (8010188 <CTR_HP+0x80>)
 801010c:	4d1f      	ldr	r5, [pc, #124]	; (801018c <CTR_HP+0x84>)
 801010e:	4e20      	ldr	r6, [pc, #128]	; (8010190 <CTR_HP+0x88>)
 8010110:	4627      	mov	r7, r4
 8010112:	6828      	ldr	r0, [r5, #0]
 8010114:	8020      	strh	r0, [r4, #0]
 8010116:	8821      	ldrh	r1, [r4, #0]
 8010118:	b20b      	sxth	r3, r1
 801011a:	2b00      	cmp	r3, #0
 801011c:	da26      	bge.n	801016c <CTR_HP+0x64>
 801011e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010122:	602a      	str	r2, [r5, #0]
 8010124:	f8b7 c000 	ldrh.w	ip, [r7]
 8010128:	f00c 030f 	and.w	r3, ip, #15
 801012c:	0099      	lsls	r1, r3, #2
 801012e:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8010132:	7033      	strb	r3, [r6, #0]
 8010134:	f500 43b8 	add.w	r3, r0, #23552	; 0x5c00
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	b292      	uxth	r2, r2
 801013c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8010140:	d115      	bne.n	801016e <CTR_HP+0x66>
 8010142:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010146:	d0e4      	beq.n	8010112 <CTR_HP+0xa>
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	f648 7c0f 	movw	ip, #36623	; 0x8f0f
 801014e:	ea02 000c 	and.w	r0, r2, ip
 8010152:	6018      	str	r0, [r3, #0]
 8010154:	7831      	ldrb	r1, [r6, #0]
 8010156:	480f      	ldr	r0, [pc, #60]	; (8010194 <CTR_HP+0x8c>)
 8010158:	1e4a      	subs	r2, r1, #1
 801015a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801015e:	4798      	blx	r3
 8010160:	6828      	ldr	r0, [r5, #0]
 8010162:	8020      	strh	r0, [r4, #0]
 8010164:	8821      	ldrh	r1, [r4, #0]
 8010166:	b20b      	sxth	r3, r1
 8010168:	2b00      	cmp	r3, #0
 801016a:	dbd8      	blt.n	801011e <CTR_HP+0x16>
 801016c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016e:	6819      	ldr	r1, [r3, #0]
 8010170:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 8010174:	ea01 000e 	and.w	r0, r1, lr
 8010178:	6018      	str	r0, [r3, #0]
 801017a:	7832      	ldrb	r2, [r6, #0]
 801017c:	4b06      	ldr	r3, [pc, #24]	; (8010198 <CTR_HP+0x90>)
 801017e:	1e51      	subs	r1, r2, #1
 8010180:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010184:	4780      	blx	r0
 8010186:	e7c4      	b.n	8010112 <CTR_HP+0xa>
 8010188:	20000afc 	.word	0x20000afc
 801018c:	40005c44 	.word	0x40005c44
 8010190:	20000ec0 	.word	0x20000ec0
 8010194:	20000094 	.word	0x20000094
 8010198:	200000b0 	.word	0x200000b0

0801019c <UserToPMABufferCopy>:
 801019c:	3201      	adds	r2, #1
 801019e:	1052      	asrs	r2, r2, #1
 80101a0:	b4f0      	push	{r4, r5, r6, r7}
 80101a2:	d02d      	beq.n	8010200 <UserToPMABufferCopy+0x64>
 80101a4:	4603      	mov	r3, r0
 80101a6:	7844      	ldrb	r4, [r0, #1]
 80101a8:	f813 cb02 	ldrb.w	ip, [r3], #2
 80101ac:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80101b0:	3a01      	subs	r2, #1
 80101b2:	f501 5540 	add.w	r5, r1, #12288	; 0x3000
 80101b6:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
 80101ba:	006d      	lsls	r5, r5, #1
 80101bc:	4611      	mov	r1, r2
 80101be:	8028      	strh	r0, [r5, #0]
 80101c0:	f002 0201 	and.w	r2, r2, #1
 80101c4:	2004      	movs	r0, #4
 80101c6:	b1d9      	cbz	r1, 8010200 <UserToPMABufferCopy+0x64>
 80101c8:	b142      	cbz	r2, 80101dc <UserToPMABufferCopy+0x40>
 80101ca:	785c      	ldrb	r4, [r3, #1]
 80101cc:	f813 cb02 	ldrb.w	ip, [r3], #2
 80101d0:	2008      	movs	r0, #8
 80101d2:	ea4c 2204 	orr.w	r2, ip, r4, lsl #8
 80101d6:	3901      	subs	r1, #1
 80101d8:	80aa      	strh	r2, [r5, #4]
 80101da:	d011      	beq.n	8010200 <UserToPMABufferCopy+0x64>
 80101dc:	461a      	mov	r2, r3
 80101de:	f812 cb02 	ldrb.w	ip, [r2], #2
 80101e2:	785f      	ldrb	r7, [r3, #1]
 80101e4:	1d04      	adds	r4, r0, #4
 80101e6:	ea4c 2607 	orr.w	r6, ip, r7, lsl #8
 80101ea:	5346      	strh	r6, [r0, r5]
 80101ec:	f893 c002 	ldrb.w	ip, [r3, #2]
 80101f0:	7856      	ldrb	r6, [r2, #1]
 80101f2:	1c93      	adds	r3, r2, #2
 80101f4:	ea4c 2006 	orr.w	r0, ip, r6, lsl #8
 80101f8:	5360      	strh	r0, [r4, r5]
 80101fa:	1d20      	adds	r0, r4, #4
 80101fc:	3902      	subs	r1, #2
 80101fe:	d1ed      	bne.n	80101dc <UserToPMABufferCopy+0x40>
 8010200:	bcf0      	pop	{r4, r5, r6, r7}
 8010202:	4770      	bx	lr

08010204 <PMAToUserBufferCopy>:
 8010204:	3201      	adds	r2, #1
 8010206:	1052      	asrs	r2, r2, #1
 8010208:	b430      	push	{r4, r5}
 801020a:	d020      	beq.n	801024e <PMAToUserBufferCopy+0x4a>
 801020c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8010210:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	3a01      	subs	r2, #1
 8010218:	f853 4b04 	ldr.w	r4, [r3], #4
 801021c:	4611      	mov	r1, r2
 801021e:	f820 4b02 	strh.w	r4, [r0], #2
 8010222:	f002 0201 	and.w	r2, r2, #1
 8010226:	b191      	cbz	r1, 801024e <PMAToUserBufferCopy+0x4a>
 8010228:	b12a      	cbz	r2, 8010236 <PMAToUserBufferCopy+0x32>
 801022a:	f853 2b04 	ldr.w	r2, [r3], #4
 801022e:	3901      	subs	r1, #1
 8010230:	f820 2b02 	strh.w	r2, [r0], #2
 8010234:	d00b      	beq.n	801024e <PMAToUserBufferCopy+0x4a>
 8010236:	461c      	mov	r4, r3
 8010238:	f854 5b04 	ldr.w	r5, [r4], #4
 801023c:	4602      	mov	r2, r0
 801023e:	f822 5b02 	strh.w	r5, [r2], #2
 8010242:	685d      	ldr	r5, [r3, #4]
 8010244:	1d23      	adds	r3, r4, #4
 8010246:	8045      	strh	r5, [r0, #2]
 8010248:	1c90      	adds	r0, r2, #2
 801024a:	3902      	subs	r1, #2
 801024c:	d1f3      	bne.n	8010236 <PMAToUserBufferCopy+0x32>
 801024e:	bc30      	pop	{r4, r5}
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop

08010254 <SetCNTR>:
 8010254:	4b01      	ldr	r3, [pc, #4]	; (801025c <SetCNTR+0x8>)
 8010256:	6018      	str	r0, [r3, #0]
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	40005c40 	.word	0x40005c40

08010260 <GetCNTR>:
 8010260:	4b01      	ldr	r3, [pc, #4]	; (8010268 <GetCNTR+0x8>)
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	b280      	uxth	r0, r0
 8010266:	4770      	bx	lr
 8010268:	40005c40 	.word	0x40005c40

0801026c <SetISTR>:
 801026c:	4b01      	ldr	r3, [pc, #4]	; (8010274 <SetISTR+0x8>)
 801026e:	6018      	str	r0, [r3, #0]
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	40005c44 	.word	0x40005c44

08010278 <GetISTR>:
 8010278:	4b01      	ldr	r3, [pc, #4]	; (8010280 <GetISTR+0x8>)
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	b280      	uxth	r0, r0
 801027e:	4770      	bx	lr
 8010280:	40005c44 	.word	0x40005c44

08010284 <GetFNR>:
 8010284:	4b01      	ldr	r3, [pc, #4]	; (801028c <GetFNR+0x8>)
 8010286:	6818      	ldr	r0, [r3, #0]
 8010288:	b280      	uxth	r0, r0
 801028a:	4770      	bx	lr
 801028c:	40005c48 	.word	0x40005c48

08010290 <SetDADDR>:
 8010290:	4b01      	ldr	r3, [pc, #4]	; (8010298 <SetDADDR+0x8>)
 8010292:	6018      	str	r0, [r3, #0]
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	40005c4c 	.word	0x40005c4c

0801029c <GetDADDR>:
 801029c:	4b01      	ldr	r3, [pc, #4]	; (80102a4 <GetDADDR+0x8>)
 801029e:	6818      	ldr	r0, [r3, #0]
 80102a0:	b280      	uxth	r0, r0
 80102a2:	4770      	bx	lr
 80102a4:	40005c4c 	.word	0x40005c4c

080102a8 <SetBTABLE>:
 80102a8:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80102ac:	4a02      	ldr	r2, [pc, #8]	; (80102b8 <SetBTABLE+0x10>)
 80102ae:	ea00 0301 	and.w	r3, r0, r1
 80102b2:	6013      	str	r3, [r2, #0]
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	40005c50 	.word	0x40005c50

080102bc <GetBTABLE>:
 80102bc:	4b01      	ldr	r3, [pc, #4]	; (80102c4 <GetBTABLE+0x8>)
 80102be:	6818      	ldr	r0, [r3, #0]
 80102c0:	b280      	uxth	r0, r0
 80102c2:	4770      	bx	lr
 80102c4:	40005c50 	.word	0x40005c50

080102c8 <SetENDPOINT>:
 80102c8:	0083      	lsls	r3, r0, #2
 80102ca:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80102ce:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 80102d2:	6001      	str	r1, [r0, #0]
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop

080102d8 <GetENDPOINT>:
 80102d8:	0082      	lsls	r2, r0, #2
 80102da:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80102de:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
 80102e2:	6818      	ldr	r0, [r3, #0]
 80102e4:	b280      	uxth	r0, r0
 80102e6:	4770      	bx	lr

080102e8 <SetEPType>:
 80102e8:	0080      	lsls	r0, r0, #2
 80102ea:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80102ee:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80102f2:	6813      	ldr	r3, [r2, #0]
 80102f4:	f648 1c8f 	movw	ip, #35215	; 0x898f
 80102f8:	ea03 000c 	and.w	r0, r3, ip
 80102fc:	ea40 0301 	orr.w	r3, r0, r1
 8010300:	6013      	str	r3, [r2, #0]
 8010302:	4770      	bx	lr

08010304 <GetEPType>:
 8010304:	0082      	lsls	r2, r0, #2
 8010306:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 801030a:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
 801030e:	6818      	ldr	r0, [r3, #0]
 8010310:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop

08010318 <SetEPTxStatus>:
 8010318:	b410      	push	{r4}
 801031a:	0084      	lsls	r4, r0, #2
 801031c:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 8010320:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8010324:	6804      	ldr	r4, [r0, #0]
 8010326:	f001 0c10 	and.w	ip, r1, #16
 801032a:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 801032e:	fa1f f28c 	uxth.w	r2, ip
 8010332:	ea04 0303 	and.w	r3, r4, r3
 8010336:	b10a      	cbz	r2, 801033c <SetEPTxStatus+0x24>
 8010338:	f083 0310 	eor.w	r3, r3, #16
 801033c:	f001 0220 	and.w	r2, r1, #32
 8010340:	b291      	uxth	r1, r2
 8010342:	b109      	cbz	r1, 8010348 <SetEPTxStatus+0x30>
 8010344:	f083 0320 	eor.w	r3, r3, #32
 8010348:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 801034c:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 8010350:	6003      	str	r3, [r0, #0]
 8010352:	bc10      	pop	{r4}
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop

08010358 <SetEPRxStatus>:
 8010358:	b410      	push	{r4}
 801035a:	0084      	lsls	r4, r0, #2
 801035c:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 8010360:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8010364:	6804      	ldr	r4, [r0, #0]
 8010366:	f401 5c80 	and.w	ip, r1, #4096	; 0x1000
 801036a:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 801036e:	fa1f f28c 	uxth.w	r2, ip
 8010372:	ea04 0303 	and.w	r3, r4, r3
 8010376:	b10a      	cbz	r2, 801037c <SetEPRxStatus+0x24>
 8010378:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801037c:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 8010380:	b291      	uxth	r1, r2
 8010382:	b109      	cbz	r1, 8010388 <SetEPRxStatus+0x30>
 8010384:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010388:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 801038c:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 8010390:	6003      	str	r3, [r0, #0]
 8010392:	bc10      	pop	{r4}
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop

08010398 <SetDouBleBuffEPStall>:
 8010398:	0080      	lsls	r0, r0, #2
 801039a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 801039e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	2901      	cmp	r1, #1
 80103a6:	b292      	uxth	r2, r2
 80103a8:	d005      	beq.n	80103b6 <SetDouBleBuffEPStall+0x1e>
 80103aa:	2902      	cmp	r1, #2
 80103ac:	bf04      	itt	eq
 80103ae:	f022 0210 	biceq.w	r2, r2, #16
 80103b2:	601a      	streq	r2, [r3, #0]
 80103b4:	4770      	bx	lr
 80103b6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80103ba:	6019      	str	r1, [r3, #0]
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop

080103c0 <GetEPTxStatus>:
 80103c0:	0082      	lsls	r2, r0, #2
 80103c2:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80103c6:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
 80103ca:	6818      	ldr	r0, [r3, #0]
 80103cc:	f000 0030 	and.w	r0, r0, #48	; 0x30
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop

080103d4 <GetEPRxStatus>:
 80103d4:	0082      	lsls	r2, r0, #2
 80103d6:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80103da:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
 80103de:	6818      	ldr	r0, [r3, #0]
 80103e0:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop

080103e8 <SetEPTxValid>:
 80103e8:	0081      	lsls	r1, r0, #2
 80103ea:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80103ee:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80103f2:	6810      	ldr	r0, [r2, #0]
 80103f4:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80103f8:	ea00 0c03 	and.w	ip, r0, r3
 80103fc:	f08c 0130 	eor.w	r1, ip, #48	; 0x30
 8010400:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8010404:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8010408:	6013      	str	r3, [r2, #0]
 801040a:	4770      	bx	lr

0801040c <SetEPRxValid>:
 801040c:	0081      	lsls	r1, r0, #2
 801040e:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8010412:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8010416:	6810      	ldr	r0, [r2, #0]
 8010418:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 801041c:	ea00 0c03 	and.w	ip, r0, r3
 8010420:	f48c 5140 	eor.w	r1, ip, #12288	; 0x3000
 8010424:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8010428:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	4770      	bx	lr

08010430 <SetEP_KIND>:
 8010430:	0080      	lsls	r0, r0, #2
 8010432:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8010436:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 801043a:	6813      	ldr	r3, [r2, #0]
 801043c:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 8010440:	ea03 010c 	and.w	r1, r3, ip
 8010444:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8010448:	f440 73c0 	orr.w	r3, r0, #384	; 0x180
 801044c:	6013      	str	r3, [r2, #0]
 801044e:	4770      	bx	lr

08010450 <ClearEP_KIND>:
 8010450:	0080      	lsls	r0, r0, #2
 8010452:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8010456:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 801045a:	6813      	ldr	r3, [r2, #0]
 801045c:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 8010460:	ea03 010c 	and.w	r1, r3, ip
 8010464:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8010468:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 801046c:	6013      	str	r3, [r2, #0]
 801046e:	4770      	bx	lr

08010470 <Clear_Status_Out>:
 8010470:	0080      	lsls	r0, r0, #2
 8010472:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8010476:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 801047a:	6813      	ldr	r3, [r2, #0]
 801047c:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 8010480:	ea03 010c 	and.w	r1, r3, ip
 8010484:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8010488:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 801048c:	6013      	str	r3, [r2, #0]
 801048e:	4770      	bx	lr

08010490 <Set_Status_Out>:
 8010490:	0080      	lsls	r0, r0, #2
 8010492:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8010496:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 801049a:	6813      	ldr	r3, [r2, #0]
 801049c:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 80104a0:	ea03 010c 	and.w	r1, r3, ip
 80104a4:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80104a8:	f440 73c0 	orr.w	r3, r0, #384	; 0x180
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	4770      	bx	lr

080104b0 <SetEPDoubleBuff>:
 80104b0:	0080      	lsls	r0, r0, #2
 80104b2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80104b6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80104ba:	6813      	ldr	r3, [r2, #0]
 80104bc:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 80104c0:	ea03 010c 	and.w	r1, r3, ip
 80104c4:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80104c8:	f440 73c0 	orr.w	r3, r0, #384	; 0x180
 80104cc:	6013      	str	r3, [r2, #0]
 80104ce:	4770      	bx	lr

080104d0 <ClearEPDoubleBuff>:
 80104d0:	0080      	lsls	r0, r0, #2
 80104d2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80104d6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80104da:	6813      	ldr	r3, [r2, #0]
 80104dc:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 80104e0:	ea03 010c 	and.w	r1, r3, ip
 80104e4:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80104e8:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	4770      	bx	lr

080104f0 <GetTxStallStatus>:
 80104f0:	0083      	lsls	r3, r0, #2
 80104f2:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80104f6:	f500 4cb8 	add.w	ip, r0, #23552	; 0x5c00
 80104fa:	f8dc 2000 	ldr.w	r2, [ip]
 80104fe:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8010502:	f1a1 0310 	sub.w	r3, r1, #16
 8010506:	4258      	negs	r0, r3
 8010508:	eb40 0003 	adc.w	r0, r0, r3
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop

08010510 <GetRxStallStatus>:
 8010510:	0082      	lsls	r2, r0, #2
 8010512:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 8010516:	f500 4cb8 	add.w	ip, r0, #23552	; 0x5c00
 801051a:	f8dc 3000 	ldr.w	r3, [ip]
 801051e:	f403 5140 	and.w	r1, r3, #12288	; 0x3000
 8010522:	f5a1 5280 	sub.w	r2, r1, #4096	; 0x1000
 8010526:	4250      	negs	r0, r2
 8010528:	eb40 0002 	adc.w	r0, r0, r2
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop

08010530 <ClearEP_CTR_RX>:
 8010530:	0082      	lsls	r2, r0, #2
 8010532:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 8010536:	f50c 42b8 	add.w	r2, ip, #23552	; 0x5c00
 801053a:	6811      	ldr	r1, [r2, #0]
 801053c:	f640 708f 	movw	r0, #3983	; 0xf8f
 8010540:	ea01 0300 	and.w	r3, r1, r0
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	4770      	bx	lr

08010548 <ClearEP_CTR_TX>:
 8010548:	0082      	lsls	r2, r0, #2
 801054a:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 801054e:	f50c 42b8 	add.w	r2, ip, #23552	; 0x5c00
 8010552:	6811      	ldr	r1, [r2, #0]
 8010554:	f648 700f 	movw	r0, #36623	; 0x8f0f
 8010558:	ea01 0300 	and.w	r3, r1, r0
 801055c:	6013      	str	r3, [r2, #0]
 801055e:	4770      	bx	lr

08010560 <ToggleDTOG_RX>:
 8010560:	0080      	lsls	r0, r0, #2
 8010562:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8010566:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 801056a:	6813      	ldr	r3, [r2, #0]
 801056c:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 8010570:	ea03 010c 	and.w	r1, r3, ip
 8010574:	f441 4040 	orr.w	r0, r1, #49152	; 0xc000
 8010578:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 801057c:	6013      	str	r3, [r2, #0]
 801057e:	4770      	bx	lr

08010580 <ToggleDTOG_TX>:
 8010580:	0080      	lsls	r0, r0, #2
 8010582:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8010586:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 801058a:	6813      	ldr	r3, [r2, #0]
 801058c:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 8010590:	ea03 010c 	and.w	r1, r3, ip
 8010594:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8010598:	f040 03c0 	orr.w	r3, r0, #192	; 0xc0
 801059c:	6013      	str	r3, [r2, #0]
 801059e:	4770      	bx	lr

080105a0 <ClearDTOG_RX>:
 80105a0:	0080      	lsls	r0, r0, #2
 80105a2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80105a6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80105b0:	d009      	beq.n	80105c6 <ClearDTOG_RX+0x26>
 80105b2:	6819      	ldr	r1, [r3, #0]
 80105b4:	f640 700f 	movw	r0, #3855	; 0xf0f
 80105b8:	ea01 0200 	and.w	r2, r1, r0
 80105bc:	f442 4c40 	orr.w	ip, r2, #49152	; 0xc000
 80105c0:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
 80105c4:	6019      	str	r1, [r3, #0]
 80105c6:	4770      	bx	lr

080105c8 <ClearDTOG_TX>:
 80105c8:	0080      	lsls	r0, r0, #2
 80105ca:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80105ce:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80105d8:	d009      	beq.n	80105ee <ClearDTOG_TX+0x26>
 80105da:	6819      	ldr	r1, [r3, #0]
 80105dc:	f640 700f 	movw	r0, #3855	; 0xf0f
 80105e0:	ea01 0200 	and.w	r2, r1, r0
 80105e4:	f442 4c00 	orr.w	ip, r2, #32768	; 0x8000
 80105e8:	f04c 01c0 	orr.w	r1, ip, #192	; 0xc0
 80105ec:	6019      	str	r1, [r3, #0]
 80105ee:	4770      	bx	lr

080105f0 <SetEPAddress>:
 80105f0:	0080      	lsls	r0, r0, #2
 80105f2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80105f6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80105fa:	6818      	ldr	r0, [r3, #0]
 80105fc:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 8010600:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 8010604:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8010608:	ea00 020c 	and.w	r2, r0, ip
 801060c:	ea41 0002 	orr.w	r0, r1, r2
 8010610:	6018      	str	r0, [r3, #0]
 8010612:	4770      	bx	lr

08010614 <GetEPAddress>:
 8010614:	0082      	lsls	r2, r0, #2
 8010616:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 801061a:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
 801061e:	6818      	ldr	r0, [r3, #0]
 8010620:	f000 000f 	and.w	r0, r0, #15
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop

08010628 <SetEPTxAddr>:
 8010628:	4a07      	ldr	r2, [pc, #28]	; (8010648 <SetEPTxAddr+0x20>)
 801062a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801062e:	6812      	ldr	r2, [r2, #0]
 8010630:	ea01 0303 	and.w	r3, r1, r3
 8010634:	b292      	uxth	r2, r2
 8010636:	eb02 0cc0 	add.w	ip, r2, r0, lsl #3
 801063a:	f10c 5100 	add.w	r1, ip, #536870912	; 0x20000000
 801063e:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8010642:	0042      	lsls	r2, r0, #1
 8010644:	6013      	str	r3, [r2, #0]
 8010646:	4770      	bx	lr
 8010648:	40005c50 	.word	0x40005c50

0801064c <SetEPRxAddr>:
 801064c:	b410      	push	{r4}
 801064e:	4b07      	ldr	r3, [pc, #28]	; (801066c <SetEPRxAddr+0x20>)
 8010650:	4a07      	ldr	r2, [pc, #28]	; (8010670 <SetEPRxAddr+0x24>)
 8010652:	681c      	ldr	r4, [r3, #0]
 8010654:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 8010658:	b2a4      	uxth	r4, r4
 801065a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 801065e:	1898      	adds	r0, r3, r2
 8010660:	0042      	lsls	r2, r0, #1
 8010662:	ea01 030c 	and.w	r3, r1, ip
 8010666:	6013      	str	r3, [r2, #0]
 8010668:	bc10      	pop	{r4}
 801066a:	4770      	bx	lr
 801066c:	40005c50 	.word	0x40005c50
 8010670:	20003004 	.word	0x20003004

08010674 <GetEPTxAddr>:
 8010674:	4906      	ldr	r1, [pc, #24]	; (8010690 <GetEPTxAddr+0x1c>)
 8010676:	680b      	ldr	r3, [r1, #0]
 8010678:	fa1f fc83 	uxth.w	ip, r3
 801067c:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8010680:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8010684:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8010688:	0043      	lsls	r3, r0, #1
 801068a:	8818      	ldrh	r0, [r3, #0]
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	40005c50 	.word	0x40005c50

08010694 <GetEPRxAddr>:
 8010694:	4a05      	ldr	r2, [pc, #20]	; (80106ac <GetEPRxAddr+0x18>)
 8010696:	4906      	ldr	r1, [pc, #24]	; (80106b0 <GetEPRxAddr+0x1c>)
 8010698:	6813      	ldr	r3, [r2, #0]
 801069a:	fa1f fc83 	uxth.w	ip, r3
 801069e:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 80106a2:	1850      	adds	r0, r2, r1
 80106a4:	0043      	lsls	r3, r0, #1
 80106a6:	8818      	ldrh	r0, [r3, #0]
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	40005c50 	.word	0x40005c50
 80106b0:	20003004 	.word	0x20003004

080106b4 <SetEPTxCount>:
 80106b4:	4a05      	ldr	r2, [pc, #20]	; (80106cc <SetEPTxCount+0x18>)
 80106b6:	4b06      	ldr	r3, [pc, #24]	; (80106d0 <SetEPTxCount+0x1c>)
 80106b8:	6812      	ldr	r2, [r2, #0]
 80106ba:	fa1f fc82 	uxth.w	ip, r2
 80106be:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 80106c2:	18d0      	adds	r0, r2, r3
 80106c4:	0043      	lsls	r3, r0, #1
 80106c6:	6019      	str	r1, [r3, #0]
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop
 80106cc:	40005c50 	.word	0x40005c50
 80106d0:	20003002 	.word	0x20003002

080106d4 <SetEPCountRxReg>:
 80106d4:	293e      	cmp	r1, #62	; 0x3e
 80106d6:	d90a      	bls.n	80106ee <SetEPCountRxReg+0x1a>
 80106d8:	094b      	lsrs	r3, r1, #5
 80106da:	f011 0f1f 	tst.w	r1, #31
 80106de:	d101      	bne.n	80106e4 <SetEPCountRxReg+0x10>
 80106e0:	3b01      	subs	r3, #1
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	029a      	lsls	r2, r3, #10
 80106e6:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80106ea:	6001      	str	r1, [r0, #0]
 80106ec:	4770      	bx	lr
 80106ee:	084a      	lsrs	r2, r1, #1
 80106f0:	f011 0f01 	tst.w	r1, #1
 80106f4:	bf18      	it	ne
 80106f6:	3201      	addne	r2, #1
 80106f8:	0293      	lsls	r3, r2, #10
 80106fa:	6003      	str	r3, [r0, #0]
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop

08010700 <SetEPRxCount>:
 8010700:	4a0f      	ldr	r2, [pc, #60]	; (8010740 <SetEPRxCount+0x40>)
 8010702:	4b10      	ldr	r3, [pc, #64]	; (8010744 <SetEPRxCount+0x44>)
 8010704:	6812      	ldr	r2, [r2, #0]
 8010706:	fa1f fc82 	uxth.w	ip, r2
 801070a:	eb0c 0203 	add.w	r2, ip, r3
 801070e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 8010712:	005b      	lsls	r3, r3, #1
 8010714:	293e      	cmp	r1, #62	; 0x3e
 8010716:	d90a      	bls.n	801072e <SetEPRxCount+0x2e>
 8010718:	094a      	lsrs	r2, r1, #5
 801071a:	f011 0f1f 	tst.w	r1, #31
 801071e:	d101      	bne.n	8010724 <SetEPRxCount+0x24>
 8010720:	1e50      	subs	r0, r2, #1
 8010722:	b282      	uxth	r2, r0
 8010724:	0292      	lsls	r2, r2, #10
 8010726:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 801072a:	6019      	str	r1, [r3, #0]
 801072c:	4770      	bx	lr
 801072e:	084a      	lsrs	r2, r1, #1
 8010730:	f011 0f01 	tst.w	r1, #1
 8010734:	bf18      	it	ne
 8010736:	3201      	addne	r2, #1
 8010738:	0290      	lsls	r0, r2, #10
 801073a:	6018      	str	r0, [r3, #0]
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	40005c50 	.word	0x40005c50
 8010744:	20003006 	.word	0x20003006

08010748 <GetEPTxCount>:
 8010748:	4b06      	ldr	r3, [pc, #24]	; (8010764 <GetEPTxCount+0x1c>)
 801074a:	4907      	ldr	r1, [pc, #28]	; (8010768 <GetEPTxCount+0x20>)
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	b293      	uxth	r3, r2
 8010750:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 8010754:	eb0c 0201 	add.w	r2, ip, r1
 8010758:	0053      	lsls	r3, r2, #1
 801075a:	6819      	ldr	r1, [r3, #0]
 801075c:	0588      	lsls	r0, r1, #22
 801075e:	0d80      	lsrs	r0, r0, #22
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	40005c50 	.word	0x40005c50
 8010768:	20003002 	.word	0x20003002

0801076c <GetEPRxCount>:
 801076c:	4b06      	ldr	r3, [pc, #24]	; (8010788 <GetEPRxCount+0x1c>)
 801076e:	4907      	ldr	r1, [pc, #28]	; (801078c <GetEPRxCount+0x20>)
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	b293      	uxth	r3, r2
 8010774:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 8010778:	eb0c 0201 	add.w	r2, ip, r1
 801077c:	0053      	lsls	r3, r2, #1
 801077e:	6819      	ldr	r1, [r3, #0]
 8010780:	0588      	lsls	r0, r1, #22
 8010782:	0d80      	lsrs	r0, r0, #22
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	40005c50 	.word	0x40005c50
 801078c:	20003006 	.word	0x20003006

08010790 <SetEPDblBuffAddr>:
 8010790:	b430      	push	{r4, r5}
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <SetEPDblBuffAddr+0x40>)
 8010794:	00c0      	lsls	r0, r0, #3
 8010796:	681d      	ldr	r5, [r3, #0]
 8010798:	f64f 74fe 	movw	r4, #65534	; 0xfffe
 801079c:	fa1f fc85 	uxth.w	ip, r5
 80107a0:	eb00 050c 	add.w	r5, r0, ip
 80107a4:	f105 5c00 	add.w	ip, r5, #536870912	; 0x20000000
 80107a8:	f50c 5540 	add.w	r5, ip, #12288	; 0x3000
 80107ac:	ea01 0404 	and.w	r4, r1, r4
 80107b0:	006d      	lsls	r5, r5, #1
 80107b2:	602c      	str	r4, [r5, #0]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4907      	ldr	r1, [pc, #28]	; (80107d4 <SetEPDblBuffAddr+0x44>)
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	eb00 0c03 	add.w	ip, r0, r3
 80107be:	4461      	add	r1, ip
 80107c0:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80107c4:	0049      	lsls	r1, r1, #1
 80107c6:	ea02 0300 	and.w	r3, r2, r0
 80107ca:	600b      	str	r3, [r1, #0]
 80107cc:	bc30      	pop	{r4, r5}
 80107ce:	4770      	bx	lr
 80107d0:	40005c50 	.word	0x40005c50
 80107d4:	20003004 	.word	0x20003004

080107d8 <SetEPDblBuf0Addr>:
 80107d8:	4a07      	ldr	r2, [pc, #28]	; (80107f8 <SetEPDblBuf0Addr+0x20>)
 80107da:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80107de:	6812      	ldr	r2, [r2, #0]
 80107e0:	ea01 0303 	and.w	r3, r1, r3
 80107e4:	b292      	uxth	r2, r2
 80107e6:	eb02 0cc0 	add.w	ip, r2, r0, lsl #3
 80107ea:	f10c 5100 	add.w	r1, ip, #536870912	; 0x20000000
 80107ee:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 80107f2:	0042      	lsls	r2, r0, #1
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	4770      	bx	lr
 80107f8:	40005c50 	.word	0x40005c50

080107fc <SetEPDblBuf1Addr>:
 80107fc:	b410      	push	{r4}
 80107fe:	4b07      	ldr	r3, [pc, #28]	; (801081c <SetEPDblBuf1Addr+0x20>)
 8010800:	4a07      	ldr	r2, [pc, #28]	; (8010820 <SetEPDblBuf1Addr+0x24>)
 8010802:	681c      	ldr	r4, [r3, #0]
 8010804:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 8010808:	b2a4      	uxth	r4, r4
 801080a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 801080e:	1898      	adds	r0, r3, r2
 8010810:	0042      	lsls	r2, r0, #1
 8010812:	ea01 030c 	and.w	r3, r1, ip
 8010816:	6013      	str	r3, [r2, #0]
 8010818:	bc10      	pop	{r4}
 801081a:	4770      	bx	lr
 801081c:	40005c50 	.word	0x40005c50
 8010820:	20003004 	.word	0x20003004

08010824 <GetEPDblBuf0Addr>:
 8010824:	4906      	ldr	r1, [pc, #24]	; (8010840 <GetEPDblBuf0Addr+0x1c>)
 8010826:	680b      	ldr	r3, [r1, #0]
 8010828:	fa1f fc83 	uxth.w	ip, r3
 801082c:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8010830:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8010834:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8010838:	0043      	lsls	r3, r0, #1
 801083a:	8818      	ldrh	r0, [r3, #0]
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	40005c50 	.word	0x40005c50

08010844 <GetEPDblBuf1Addr>:
 8010844:	4a05      	ldr	r2, [pc, #20]	; (801085c <GetEPDblBuf1Addr+0x18>)
 8010846:	4906      	ldr	r1, [pc, #24]	; (8010860 <GetEPDblBuf1Addr+0x1c>)
 8010848:	6813      	ldr	r3, [r2, #0]
 801084a:	fa1f fc83 	uxth.w	ip, r3
 801084e:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8010852:	1850      	adds	r0, r2, r1
 8010854:	0043      	lsls	r3, r0, #1
 8010856:	8818      	ldrh	r0, [r3, #0]
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	40005c50 	.word	0x40005c50
 8010860:	20003004 	.word	0x20003004

08010864 <SetEPDblBuffCount>:
 8010864:	2901      	cmp	r1, #1
 8010866:	b410      	push	{r4}
 8010868:	d003      	beq.n	8010872 <SetEPDblBuffCount+0xe>
 801086a:	2902      	cmp	r1, #2
 801086c:	d024      	beq.n	80108b8 <SetEPDblBuffCount+0x54>
 801086e:	bc10      	pop	{r4}
 8010870:	4770      	bx	lr
 8010872:	4924      	ldr	r1, [pc, #144]	; (8010904 <SetEPDblBuffCount+0xa0>)
 8010874:	4b24      	ldr	r3, [pc, #144]	; (8010908 <SetEPDblBuffCount+0xa4>)
 8010876:	680c      	ldr	r4, [r1, #0]
 8010878:	00c0      	lsls	r0, r0, #3
 801087a:	fa1f fc84 	uxth.w	ip, r4
 801087e:	eb0c 0403 	add.w	r4, ip, r3
 8010882:	1823      	adds	r3, r4, r0
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	2a3e      	cmp	r2, #62	; 0x3e
 8010888:	d929      	bls.n	80108de <SetEPDblBuffCount+0x7a>
 801088a:	0954      	lsrs	r4, r2, #5
 801088c:	f012 0f1f 	tst.w	r2, #31
 8010890:	d101      	bne.n	8010896 <SetEPDblBuffCount+0x32>
 8010892:	1e62      	subs	r2, r4, #1
 8010894:	b294      	uxth	r4, r2
 8010896:	02a2      	lsls	r2, r4, #10
 8010898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	680a      	ldr	r2, [r1, #0]
 80108a0:	4b1a      	ldr	r3, [pc, #104]	; (801090c <SetEPDblBuffCount+0xa8>)
 80108a2:	fa1f fc82 	uxth.w	ip, r2
 80108a6:	eb0c 0103 	add.w	r1, ip, r3
 80108aa:	1808      	adds	r0, r1, r0
 80108ac:	02a2      	lsls	r2, r4, #10
 80108ae:	0040      	lsls	r0, r0, #1
 80108b0:	f442 4400 	orr.w	r4, r2, #32768	; 0x8000
 80108b4:	6004      	str	r4, [r0, #0]
 80108b6:	e7da      	b.n	801086e <SetEPDblBuffCount+0xa>
 80108b8:	4912      	ldr	r1, [pc, #72]	; (8010904 <SetEPDblBuffCount+0xa0>)
 80108ba:	00c0      	lsls	r0, r0, #3
 80108bc:	680c      	ldr	r4, [r1, #0]
 80108be:	4b12      	ldr	r3, [pc, #72]	; (8010908 <SetEPDblBuffCount+0xa4>)
 80108c0:	b2a4      	uxth	r4, r4
 80108c2:	1904      	adds	r4, r0, r4
 80108c4:	18e3      	adds	r3, r4, r3
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	6809      	ldr	r1, [r1, #0]
 80108cc:	4b0f      	ldr	r3, [pc, #60]	; (801090c <SetEPDblBuffCount+0xa8>)
 80108ce:	b289      	uxth	r1, r1
 80108d0:	eb00 0c01 	add.w	ip, r0, r1
 80108d4:	eb0c 0103 	add.w	r1, ip, r3
 80108d8:	0048      	lsls	r0, r1, #1
 80108da:	6002      	str	r2, [r0, #0]
 80108dc:	e7c7      	b.n	801086e <SetEPDblBuffCount+0xa>
 80108de:	0854      	lsrs	r4, r2, #1
 80108e0:	f012 0f01 	tst.w	r2, #1
 80108e4:	bf18      	it	ne
 80108e6:	3401      	addne	r4, #1
 80108e8:	02a2      	lsls	r2, r4, #10
 80108ea:	601a      	str	r2, [r3, #0]
 80108ec:	680a      	ldr	r2, [r1, #0]
 80108ee:	4b07      	ldr	r3, [pc, #28]	; (801090c <SetEPDblBuffCount+0xa8>)
 80108f0:	fa1f fc82 	uxth.w	ip, r2
 80108f4:	eb0c 0103 	add.w	r1, ip, r3
 80108f8:	1808      	adds	r0, r1, r0
 80108fa:	0040      	lsls	r0, r0, #1
 80108fc:	02a4      	lsls	r4, r4, #10
 80108fe:	6004      	str	r4, [r0, #0]
 8010900:	e7b5      	b.n	801086e <SetEPDblBuffCount+0xa>
 8010902:	bf00      	nop
 8010904:	40005c50 	.word	0x40005c50
 8010908:	20003002 	.word	0x20003002
 801090c:	20003006 	.word	0x20003006

08010910 <SetEPDblBuf0Count>:
 8010910:	2901      	cmp	r1, #1
 8010912:	d00d      	beq.n	8010930 <SetEPDblBuf0Count+0x20>
 8010914:	2902      	cmp	r1, #2
 8010916:	d000      	beq.n	801091a <SetEPDblBuf0Count+0xa>
 8010918:	4770      	bx	lr
 801091a:	4915      	ldr	r1, [pc, #84]	; (8010970 <SetEPDblBuf0Count+0x60>)
 801091c:	4b15      	ldr	r3, [pc, #84]	; (8010974 <SetEPDblBuf0Count+0x64>)
 801091e:	6809      	ldr	r1, [r1, #0]
 8010920:	b289      	uxth	r1, r1
 8010922:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
 8010926:	eb0c 0003 	add.w	r0, ip, r3
 801092a:	0043      	lsls	r3, r0, #1
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	4770      	bx	lr
 8010930:	490f      	ldr	r1, [pc, #60]	; (8010970 <SetEPDblBuf0Count+0x60>)
 8010932:	4b10      	ldr	r3, [pc, #64]	; (8010974 <SetEPDblBuf0Count+0x64>)
 8010934:	6809      	ldr	r1, [r1, #0]
 8010936:	fa1f fc81 	uxth.w	ip, r1
 801093a:	eb0c 0103 	add.w	r1, ip, r3
 801093e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8010942:	005b      	lsls	r3, r3, #1
 8010944:	2a3e      	cmp	r2, #62	; 0x3e
 8010946:	d90a      	bls.n	801095e <SetEPDblBuf0Count+0x4e>
 8010948:	0951      	lsrs	r1, r2, #5
 801094a:	f012 0f1f 	tst.w	r2, #31
 801094e:	d101      	bne.n	8010954 <SetEPDblBuf0Count+0x44>
 8010950:	1e48      	subs	r0, r1, #1
 8010952:	b281      	uxth	r1, r0
 8010954:	0289      	lsls	r1, r1, #10
 8010956:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	4770      	bx	lr
 801095e:	0851      	lsrs	r1, r2, #1
 8010960:	f012 0f01 	tst.w	r2, #1
 8010964:	bf18      	it	ne
 8010966:	3101      	addne	r1, #1
 8010968:	0288      	lsls	r0, r1, #10
 801096a:	6018      	str	r0, [r3, #0]
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	40005c50 	.word	0x40005c50
 8010974:	20003002 	.word	0x20003002

08010978 <SetEPDblBuf1Count>:
 8010978:	2901      	cmp	r1, #1
 801097a:	d00d      	beq.n	8010998 <SetEPDblBuf1Count+0x20>
 801097c:	2902      	cmp	r1, #2
 801097e:	d000      	beq.n	8010982 <SetEPDblBuf1Count+0xa>
 8010980:	4770      	bx	lr
 8010982:	4915      	ldr	r1, [pc, #84]	; (80109d8 <SetEPDblBuf1Count+0x60>)
 8010984:	4b15      	ldr	r3, [pc, #84]	; (80109dc <SetEPDblBuf1Count+0x64>)
 8010986:	6809      	ldr	r1, [r1, #0]
 8010988:	b289      	uxth	r1, r1
 801098a:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
 801098e:	eb0c 0003 	add.w	r0, ip, r3
 8010992:	0043      	lsls	r3, r0, #1
 8010994:	601a      	str	r2, [r3, #0]
 8010996:	4770      	bx	lr
 8010998:	490f      	ldr	r1, [pc, #60]	; (80109d8 <SetEPDblBuf1Count+0x60>)
 801099a:	4b10      	ldr	r3, [pc, #64]	; (80109dc <SetEPDblBuf1Count+0x64>)
 801099c:	6809      	ldr	r1, [r1, #0]
 801099e:	fa1f fc81 	uxth.w	ip, r1
 80109a2:	eb0c 0103 	add.w	r1, ip, r3
 80109a6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	2a3e      	cmp	r2, #62	; 0x3e
 80109ae:	d90a      	bls.n	80109c6 <SetEPDblBuf1Count+0x4e>
 80109b0:	0951      	lsrs	r1, r2, #5
 80109b2:	f012 0f1f 	tst.w	r2, #31
 80109b6:	d101      	bne.n	80109bc <SetEPDblBuf1Count+0x44>
 80109b8:	1e48      	subs	r0, r1, #1
 80109ba:	b281      	uxth	r1, r0
 80109bc:	0289      	lsls	r1, r1, #10
 80109be:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 80109c2:	601a      	str	r2, [r3, #0]
 80109c4:	4770      	bx	lr
 80109c6:	0851      	lsrs	r1, r2, #1
 80109c8:	f012 0f01 	tst.w	r2, #1
 80109cc:	bf18      	it	ne
 80109ce:	3101      	addne	r1, #1
 80109d0:	0288      	lsls	r0, r1, #10
 80109d2:	6018      	str	r0, [r3, #0]
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	40005c50 	.word	0x40005c50
 80109dc:	20003006 	.word	0x20003006

080109e0 <GetEPDblBuf0Count>:
 80109e0:	4b06      	ldr	r3, [pc, #24]	; (80109fc <GetEPDblBuf0Count+0x1c>)
 80109e2:	4907      	ldr	r1, [pc, #28]	; (8010a00 <GetEPDblBuf0Count+0x20>)
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	b293      	uxth	r3, r2
 80109e8:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 80109ec:	eb0c 0201 	add.w	r2, ip, r1
 80109f0:	0053      	lsls	r3, r2, #1
 80109f2:	6819      	ldr	r1, [r3, #0]
 80109f4:	0588      	lsls	r0, r1, #22
 80109f6:	0d80      	lsrs	r0, r0, #22
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	40005c50 	.word	0x40005c50
 8010a00:	20003002 	.word	0x20003002

08010a04 <GetEPDblBuf1Count>:
 8010a04:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <GetEPDblBuf1Count+0x1c>)
 8010a06:	4907      	ldr	r1, [pc, #28]	; (8010a24 <GetEPDblBuf1Count+0x20>)
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	b293      	uxth	r3, r2
 8010a0c:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 8010a10:	eb0c 0201 	add.w	r2, ip, r1
 8010a14:	0053      	lsls	r3, r2, #1
 8010a16:	6819      	ldr	r1, [r3, #0]
 8010a18:	0588      	lsls	r0, r1, #22
 8010a1a:	0d80      	lsrs	r0, r0, #22
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	40005c50 	.word	0x40005c50
 8010a24:	20003006 	.word	0x20003006

08010a28 <GetEPDblBufDir>:
 8010a28:	4b0e      	ldr	r3, [pc, #56]	; (8010a64 <GetEPDblBufDir+0x3c>)
 8010a2a:	00c0      	lsls	r0, r0, #3
 8010a2c:	6819      	ldr	r1, [r3, #0]
 8010a2e:	4a0e      	ldr	r2, [pc, #56]	; (8010a68 <GetEPDblBufDir+0x40>)
 8010a30:	b289      	uxth	r1, r1
 8010a32:	eb00 0c01 	add.w	ip, r0, r1
 8010a36:	4462      	add	r2, ip
 8010a38:	0051      	lsls	r1, r2, #1
 8010a3a:	880a      	ldrh	r2, [r1, #0]
 8010a3c:	f412 4f7c 	tst.w	r2, #64512	; 0xfc00
 8010a40:	d10e      	bne.n	8010a60 <GetEPDblBufDir+0x38>
 8010a42:	6819      	ldr	r1, [r3, #0]
 8010a44:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <GetEPDblBufDir+0x44>)
 8010a46:	b28a      	uxth	r2, r1
 8010a48:	eb00 0c02 	add.w	ip, r0, r2
 8010a4c:	eb0c 0103 	add.w	r1, ip, r3
 8010a50:	004a      	lsls	r2, r1, #1
 8010a52:	8813      	ldrh	r3, [r2, #0]
 8010a54:	0598      	lsls	r0, r3, #22
 8010a56:	0d80      	lsrs	r0, r0, #22
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	bf18      	it	ne
 8010a5c:	2002      	movne	r0, #2
 8010a5e:	4770      	bx	lr
 8010a60:	2001      	movs	r0, #1
 8010a62:	4770      	bx	lr
 8010a64:	40005c50 	.word	0x40005c50
 8010a68:	20003006 	.word	0x20003006
 8010a6c:	20003002 	.word	0x20003002

08010a70 <FreeUserBuffer>:
 8010a70:	2901      	cmp	r1, #1
 8010a72:	d014      	beq.n	8010a9e <FreeUserBuffer+0x2e>
 8010a74:	2902      	cmp	r1, #2
 8010a76:	d000      	beq.n	8010a7a <FreeUserBuffer+0xa>
 8010a78:	4770      	bx	lr
 8010a7a:	0083      	lsls	r3, r0, #2
 8010a7c:	f103 4c80 	add.w	ip, r3, #1073741824	; 0x40000000
 8010a80:	f50c 4cb8 	add.w	ip, ip, #23552	; 0x5c00
 8010a84:	f8dc 2000 	ldr.w	r2, [ip]
 8010a88:	f640 710f 	movw	r1, #3855	; 0xf0f
 8010a8c:	ea02 0001 	and.w	r0, r2, r1
 8010a90:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8010a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010a98:	f8cc 2000 	str.w	r2, [ip]
 8010a9c:	4770      	bx	lr
 8010a9e:	0081      	lsls	r1, r0, #2
 8010aa0:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8010aa4:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8010aa8:	6803      	ldr	r3, [r0, #0]
 8010aaa:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 8010aae:	ea03 020c 	and.w	r2, r3, ip
 8010ab2:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8010ab6:	f041 03c0 	orr.w	r3, r1, #192	; 0xc0
 8010aba:	6003      	str	r3, [r0, #0]
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop

08010ac0 <ToWord>:
 8010ac0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop

08010ac8 <ByteSwap>:
 8010ac8:	b2c3      	uxtb	r3, r0
 8010aca:	0a00      	lsrs	r0, r0, #8
 8010acc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop

08010ad4 <USB_SIL_Init>:
 8010ad4:	4a04      	ldr	r2, [pc, #16]	; (8010ae8 <USB_SIL_Init+0x14>)
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	6010      	str	r0, [r2, #0]
 8010ada:	4904      	ldr	r1, [pc, #16]	; (8010aec <USB_SIL_Init+0x18>)
 8010adc:	4a04      	ldr	r2, [pc, #16]	; (8010af0 <USB_SIL_Init+0x1c>)
 8010ade:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8010ae2:	800b      	strh	r3, [r1, #0]
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	4770      	bx	lr
 8010ae8:	40005c44 	.word	0x40005c44
 8010aec:	20000ee8 	.word	0x20000ee8
 8010af0:	40005c40 	.word	0x40005c40

08010af4 <USB_SIL_Write>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8010afa:	4628      	mov	r0, r5
 8010afc:	460e      	mov	r6, r1
 8010afe:	b294      	uxth	r4, r2
 8010b00:	f7ff fdb8 	bl	8010674 <GetEPTxAddr>
 8010b04:	4622      	mov	r2, r4
 8010b06:	4601      	mov	r1, r0
 8010b08:	4630      	mov	r0, r6
 8010b0a:	f7ff fb47 	bl	801019c <UserToPMABufferCopy>
 8010b0e:	4628      	mov	r0, r5
 8010b10:	4621      	mov	r1, r4
 8010b12:	f7ff fdcf 	bl	80106b4 <SetEPTxCount>
 8010b16:	2000      	movs	r0, #0
 8010b18:	bd70      	pop	{r4, r5, r6, pc}
 8010b1a:	bf00      	nop

08010b1c <USB_SIL_Read>:
 8010b1c:	b570      	push	{r4, r5, r6, lr}
 8010b1e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8010b22:	4628      	mov	r0, r5
 8010b24:	460e      	mov	r6, r1
 8010b26:	f7ff fe21 	bl	801076c <GetEPRxCount>
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	f7ff fdb1 	bl	8010694 <GetEPRxAddr>
 8010b32:	4622      	mov	r2, r4
 8010b34:	4601      	mov	r1, r0
 8010b36:	4630      	mov	r0, r6
 8010b38:	f7ff fb64 	bl	8010204 <PMAToUserBufferCopy>
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}

08010b40 <sinf>:
 8010b40:	f640 73d8 	movw	r3, #4056	; 0xfd8
 8010b44:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010b48:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 8010b4c:	4601      	mov	r1, r0
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	b500      	push	{lr}
 8010b52:	b083      	sub	sp, #12
 8010b54:	dd16      	ble.n	8010b84 <sinf+0x44>
 8010b56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010b5a:	db03      	blt.n	8010b64 <sinf+0x24>
 8010b5c:	f001 fff8 	bl	8012b50 <__aeabi_fsub>
 8010b60:	b003      	add	sp, #12
 8010b62:	bd00      	pop	{pc}
 8010b64:	4669      	mov	r1, sp
 8010b66:	f000 fb3d 	bl	80111e4 <__ieee754_rem_pio2f>
 8010b6a:	f000 0003 	and.w	r0, r0, #3
 8010b6e:	2801      	cmp	r0, #1
 8010b70:	d015      	beq.n	8010b9e <sinf+0x5e>
 8010b72:	2802      	cmp	r0, #2
 8010b74:	d00b      	beq.n	8010b8e <sinf+0x4e>
 8010b76:	b9b8      	cbnz	r0, 8010ba8 <sinf+0x68>
 8010b78:	9800      	ldr	r0, [sp, #0]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	9901      	ldr	r1, [sp, #4]
 8010b7e:	f001 f92f 	bl	8011de0 <__kernel_sinf>
 8010b82:	e7ed      	b.n	8010b60 <sinf+0x20>
 8010b84:	2100      	movs	r1, #0
 8010b86:	2200      	movs	r2, #0
 8010b88:	f001 f92a 	bl	8011de0 <__kernel_sinf>
 8010b8c:	e7e8      	b.n	8010b60 <sinf+0x20>
 8010b8e:	9800      	ldr	r0, [sp, #0]
 8010b90:	2201      	movs	r2, #1
 8010b92:	9901      	ldr	r1, [sp, #4]
 8010b94:	f001 f924 	bl	8011de0 <__kernel_sinf>
 8010b98:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010b9c:	e7e0      	b.n	8010b60 <sinf+0x20>
 8010b9e:	9800      	ldr	r0, [sp, #0]
 8010ba0:	9901      	ldr	r1, [sp, #4]
 8010ba2:	f000 fd23 	bl	80115ec <__kernel_cosf>
 8010ba6:	e7db      	b.n	8010b60 <sinf+0x20>
 8010ba8:	9800      	ldr	r0, [sp, #0]
 8010baa:	9901      	ldr	r1, [sp, #4]
 8010bac:	f000 fd1e 	bl	80115ec <__kernel_cosf>
 8010bb0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010bb4:	e7d4      	b.n	8010b60 <sinf+0x20>
 8010bb6:	bf00      	nop

08010bb8 <sqrt>:
 8010bb8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8010bbc:	b08a      	sub	sp, #40	; 0x28
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	460d      	mov	r5, r1
 8010bc2:	f000 f8a3 	bl	8010d0c <__ieee754_sqrt>
 8010bc6:	f240 1684 	movw	r6, #388	; 0x184
 8010bca:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8010bce:	f996 3000 	ldrsb.w	r3, [r6]
 8010bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd6:	4680      	mov	r8, r0
 8010bd8:	4689      	mov	r9, r1
 8010bda:	d031      	beq.n	8010c40 <sqrt+0x88>
 8010bdc:	4620      	mov	r0, r4
 8010bde:	4629      	mov	r1, r5
 8010be0:	f001 f97e 	bl	8011ee0 <__fpclassifyd>
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d02b      	beq.n	8010c40 <sqrt+0x88>
 8010be8:	f04f 0a00 	mov.w	sl, #0
 8010bec:	f04f 0b00 	mov.w	fp, #0
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	4652      	mov	r2, sl
 8010bf6:	465b      	mov	r3, fp
 8010bf8:	f001 fee6 	bl	80129c8 <__aeabi_dcmplt>
 8010bfc:	b300      	cbz	r0, 8010c40 <sqrt+0x88>
 8010bfe:	7836      	ldrb	r6, [r6, #0]
 8010c00:	f24b 435c 	movw	r3, #46172	; 0xb45c
 8010c04:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010c08:	2201      	movs	r2, #1
 8010c0a:	9301      	str	r3, [sp, #4]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9200      	str	r2, [sp, #0]
 8010c10:	9308      	str	r3, [sp, #32]
 8010c12:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010c16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010c1a:	b1b6      	cbz	r6, 8010c4a <sqrt+0x92>
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	4659      	mov	r1, fp
 8010c20:	4652      	mov	r2, sl
 8010c22:	465b      	mov	r3, fp
 8010c24:	f001 fd88 	bl	8012738 <__aeabi_ddiv>
 8010c28:	2e02      	cmp	r6, #2
 8010c2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c2e:	d10e      	bne.n	8010c4e <sqrt+0x96>
 8010c30:	f002 faa4 	bl	801317c <__errno>
 8010c34:	2321      	movs	r3, #33	; 0x21
 8010c36:	6003      	str	r3, [r0, #0]
 8010c38:	9b08      	ldr	r3, [sp, #32]
 8010c3a:	b973      	cbnz	r3, 8010c5a <sqrt+0xa2>
 8010c3c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8010c40:	4640      	mov	r0, r8
 8010c42:	4649      	mov	r1, r9
 8010c44:	b00a      	add	sp, #40	; 0x28
 8010c46:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8010c4a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8010c4e:	4668      	mov	r0, sp
 8010c50:	f001 f98e 	bl	8011f70 <matherr>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d1ef      	bne.n	8010c38 <sqrt+0x80>
 8010c58:	e7ea      	b.n	8010c30 <sqrt+0x78>
 8010c5a:	f002 fa8f 	bl	801317c <__errno>
 8010c5e:	9b08      	ldr	r3, [sp, #32]
 8010c60:	6003      	str	r3, [r0, #0]
 8010c62:	e7eb      	b.n	8010c3c <sqrt+0x84>

08010c64 <asinf>:
 8010c64:	b570      	push	{r4, r5, r6, lr}
 8010c66:	b08a      	sub	sp, #40	; 0x28
 8010c68:	4606      	mov	r6, r0
 8010c6a:	f000 f92f 	bl	8010ecc <__ieee754_asinf>
 8010c6e:	f240 1484 	movw	r4, #388	; 0x184
 8010c72:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8010c76:	f994 3000 	ldrsb.w	r3, [r4]
 8010c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c7e:	4605      	mov	r5, r0
 8010c80:	d003      	beq.n	8010c8a <asinf+0x26>
 8010c82:	4630      	mov	r0, r6
 8010c84:	f001 f9d0 	bl	8012028 <__fpclassifyf>
 8010c88:	b910      	cbnz	r0, 8010c90 <asinf+0x2c>
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	b00a      	add	sp, #40	; 0x28
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
 8010c90:	4630      	mov	r0, r6
 8010c92:	f001 f975 	bl	8011f80 <fabsf>
 8010c96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010c9a:	f002 fa1f 	bl	80130dc <__aeabi_fcmpgt>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d0f3      	beq.n	8010c8a <asinf+0x26>
 8010ca2:	f24b 4364 	movw	r3, #46180	; 0xb464
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010cac:	9301      	str	r3, [sp, #4]
 8010cae:	2301      	movs	r3, #1
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	9308      	str	r3, [sp, #32]
 8010cb6:	f001 fbc1 	bl	801243c <__aeabi_f2d>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	f24b 4018 	movw	r0, #46104	; 0xb418
 8010cc0:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010cce:	f001 f951 	bl	8011f74 <nan>
 8010cd2:	f994 3000 	ldrsb.w	r3, [r4]
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010cdc:	d00b      	beq.n	8010cf6 <asinf+0x92>
 8010cde:	4668      	mov	r0, sp
 8010ce0:	f001 f946 	bl	8011f70 <matherr>
 8010ce4:	b138      	cbz	r0, 8010cf6 <asinf+0x92>
 8010ce6:	9b08      	ldr	r3, [sp, #32]
 8010ce8:	b953      	cbnz	r3, 8010d00 <asinf+0x9c>
 8010cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cee:	f001 fedb 	bl	8012aa8 <__aeabi_d2f>
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	e7c9      	b.n	8010c8a <asinf+0x26>
 8010cf6:	f002 fa41 	bl	801317c <__errno>
 8010cfa:	2321      	movs	r3, #33	; 0x21
 8010cfc:	6003      	str	r3, [r0, #0]
 8010cfe:	e7f2      	b.n	8010ce6 <asinf+0x82>
 8010d00:	f002 fa3c 	bl	801317c <__errno>
 8010d04:	9b08      	ldr	r3, [sp, #32]
 8010d06:	6003      	str	r3, [r0, #0]
 8010d08:	e7ef      	b.n	8010cea <asinf+0x86>
 8010d0a:	bf00      	nop

08010d0c <__ieee754_sqrt>:
 8010d0c:	f04f 0c00 	mov.w	ip, #0
 8010d10:	4602      	mov	r2, r0
 8010d12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d16:	46e0      	mov	r8, ip
 8010d18:	f6c7 7cf0 	movt	ip, #32752	; 0x7ff0
 8010d1c:	f6c7 78f0 	movt	r8, #32752	; 0x7ff0
 8010d20:	ea01 0c0c 	and.w	ip, r1, ip
 8010d24:	4604      	mov	r4, r0
 8010d26:	45c4      	cmp	ip, r8
 8010d28:	460d      	mov	r5, r1
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	460e      	mov	r6, r1
 8010d2e:	4607      	mov	r7, r0
 8010d30:	f000 80b0 	beq.w	8010e94 <__ieee754_sqrt+0x188>
 8010d34:	2900      	cmp	r1, #0
 8010d36:	f340 80a0 	ble.w	8010e7a <__ieee754_sqrt+0x16e>
 8010d3a:	150a      	asrs	r2, r1, #20
 8010d3c:	d07e      	beq.n	8010e3c <__ieee754_sqrt+0x130>
 8010d3e:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
 8010d42:	f012 0f01 	tst.w	r2, #1
 8010d46:	f5a2 7c7e 	sub.w	ip, r2, #1016	; 0x3f8
 8010d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d4e:	f1ac 0c07 	sub.w	ip, ip, #7
 8010d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d56:	d062      	beq.n	8010e1e <__ieee754_sqrt+0x112>
 8010d58:	0ffa      	lsrs	r2, r7, #31
 8010d5a:	2600      	movs	r6, #0
 8010d5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8010d60:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8010d64:	007f      	lsls	r7, r7, #1
 8010d66:	2016      	movs	r0, #22
 8010d68:	4631      	mov	r1, r6
 8010d6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010d6e:	188c      	adds	r4, r1, r2
 8010d70:	0ffd      	lsrs	r5, r7, #31
 8010d72:	429c      	cmp	r4, r3
 8010d74:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8010d78:	bfde      	ittt	le
 8010d7a:	ebc4 0303 	rsble	r3, r4, r3
 8010d7e:	18a1      	addle	r1, r4, r2
 8010d80:	18b6      	addle	r6, r6, r2
 8010d82:	0852      	lsrs	r2, r2, #1
 8010d84:	3801      	subs	r0, #1
 8010d86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010d8a:	d1f0      	bne.n	8010d6e <__ieee754_sqrt+0x62>
 8010d8c:	2520      	movs	r5, #32
 8010d8e:	4680      	mov	r8, r0
 8010d90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010d94:	4299      	cmp	r1, r3
 8010d96:	eb02 0408 	add.w	r4, r2, r8
 8010d9a:	db0e      	blt.n	8010dba <__ieee754_sqrt+0xae>
 8010d9c:	428b      	cmp	r3, r1
 8010d9e:	bf14      	ite	ne
 8010da0:	f04f 0900 	movne.w	r9, #0
 8010da4:	f04f 0901 	moveq.w	r9, #1
 8010da8:	42bc      	cmp	r4, r7
 8010daa:	bf8c      	ite	hi
 8010dac:	f04f 0900 	movhi.w	r9, #0
 8010db0:	f009 0901 	andls.w	r9, r9, #1
 8010db4:	f1b9 0f00 	cmp.w	r9, #0
 8010db8:	d00e      	beq.n	8010dd8 <__ieee754_sqrt+0xcc>
 8010dba:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
 8010dbe:	eb04 0802 	add.w	r8, r4, r2
 8010dc2:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8010dc6:	d023      	beq.n	8010e10 <__ieee754_sqrt+0x104>
 8010dc8:	4689      	mov	r9, r1
 8010dca:	1a5b      	subs	r3, r3, r1
 8010dcc:	42bc      	cmp	r4, r7
 8010dce:	bf88      	it	hi
 8010dd0:	3b01      	subhi	r3, #1
 8010dd2:	1b3f      	subs	r7, r7, r4
 8010dd4:	1880      	adds	r0, r0, r2
 8010dd6:	4649      	mov	r1, r9
 8010dd8:	0ffc      	lsrs	r4, r7, #31
 8010dda:	0852      	lsrs	r2, r2, #1
 8010ddc:	007f      	lsls	r7, r7, #1
 8010dde:	3d01      	subs	r5, #1
 8010de0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010de4:	d1d6      	bne.n	8010d94 <__ieee754_sqrt+0x88>
 8010de6:	433b      	orrs	r3, r7
 8010de8:	d11e      	bne.n	8010e28 <__ieee754_sqrt+0x11c>
 8010dea:	0840      	lsrs	r0, r0, #1
 8010dec:	ea4f 520c 	mov.w	r2, ip, lsl #20
 8010df0:	1073      	asrs	r3, r6, #1
 8010df2:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
 8010df6:	f016 0f01 	tst.w	r6, #1
 8010dfa:	bf18      	it	ne
 8010dfc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8010e00:	f502 02c0 	add.w	r2, r2, #6291456	; 0x600000
 8010e04:	18d5      	adds	r5, r2, r3
 8010e06:	4604      	mov	r4, r0
 8010e08:	4620      	mov	r0, r4
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e10:	f1b8 0f00 	cmp.w	r8, #0
 8010e14:	bfa8      	it	ge
 8010e16:	f101 0901 	addge.w	r9, r1, #1
 8010e1a:	dad6      	bge.n	8010dca <__ieee754_sqrt+0xbe>
 8010e1c:	e7d4      	b.n	8010dc8 <__ieee754_sqrt+0xbc>
 8010e1e:	0ffa      	lsrs	r2, r7, #31
 8010e20:	007f      	lsls	r7, r7, #1
 8010e22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8010e26:	e797      	b.n	8010d58 <__ieee754_sqrt+0x4c>
 8010e28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010e2c:	bf1c      	itt	ne
 8010e2e:	f000 0301 	andne.w	r3, r0, #1
 8010e32:	1818      	addne	r0, r3, r0
 8010e34:	d1d9      	bne.n	8010dea <__ieee754_sqrt+0xde>
 8010e36:	3601      	adds	r6, #1
 8010e38:	4628      	mov	r0, r5
 8010e3a:	e7d7      	b.n	8010dec <__ieee754_sqrt+0xe0>
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 8010e42:	d135      	bne.n	8010eb0 <__ieee754_sqrt+0x1a4>
 8010e44:	0076      	lsls	r6, r6, #1
 8010e46:	3301      	adds	r3, #1
 8010e48:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8010e4c:	d0fa      	beq.n	8010e44 <__ieee754_sqrt+0x138>
 8010e4e:	f1c3 0120 	rsb	r1, r3, #32
 8010e52:	fa37 f101 	lsrs.w	r1, r7, r1
 8010e56:	1ad2      	subs	r2, r2, r3
 8010e58:	430e      	orrs	r6, r1
 8010e5a:	409f      	lsls	r7, r3
 8010e5c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
 8010e60:	f012 0f01 	tst.w	r2, #1
 8010e64:	f5a2 7c7e 	sub.w	ip, r2, #1016	; 0x3f8
 8010e68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010e6c:	f1ac 0c07 	sub.w	ip, ip, #7
 8010e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e74:	f47f af70 	bne.w	8010d58 <__ieee754_sqrt+0x4c>
 8010e78:	e7d1      	b.n	8010e1e <__ieee754_sqrt+0x112>
 8010e7a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010e7e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8010e82:	d0c1      	beq.n	8010e08 <__ieee754_sqrt+0xfc>
 8010e84:	b9b9      	cbnz	r1, 8010eb6 <__ieee754_sqrt+0x1aa>
 8010e86:	0afe      	lsrs	r6, r7, #11
 8010e88:	3b15      	subs	r3, #21
 8010e8a:	057f      	lsls	r7, r7, #21
 8010e8c:	2e00      	cmp	r6, #0
 8010e8e:	d0fa      	beq.n	8010e86 <__ieee754_sqrt+0x17a>
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	e7d4      	b.n	8010e3e <__ieee754_sqrt+0x132>
 8010e94:	f001 fb26 	bl	80124e4 <__aeabi_dmul>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	f001 f96e 	bl	8012180 <__adddf3>
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	460d      	mov	r5, r1
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	4629      	mov	r1, r5
 8010eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb0:	2120      	movs	r1, #32
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e7cd      	b.n	8010e52 <__ieee754_sqrt+0x146>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	460b      	mov	r3, r1
 8010eba:	f001 f95f 	bl	801217c <__aeabi_dsub>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	f001 fc39 	bl	8012738 <__aeabi_ddiv>
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	460d      	mov	r5, r1
 8010eca:	e79d      	b.n	8010e08 <__ieee754_sqrt+0xfc>

08010ecc <__ieee754_asinf>:
 8010ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8010ed4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8010ed8:	4604      	mov	r4, r0
 8010eda:	4606      	mov	r6, r0
 8010edc:	f000 80fd 	beq.w	80110da <__ieee754_asinf+0x20e>
 8010ee0:	f300 80d5 	bgt.w	801108e <__ieee754_asinf+0x1c2>
 8010ee4:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8010ee8:	da10      	bge.n	8010f0c <__ieee754_asinf+0x40>
 8010eea:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8010eee:	f280 810a 	bge.w	8011106 <__ieee754_asinf+0x23a>
 8010ef2:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8010ef6:	f2c7 1149 	movt	r1, #29001	; 0x7149
 8010efa:	f001 fe2b 	bl	8012b54 <__addsf3>
 8010efe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010f02:	f002 f8eb 	bl	80130dc <__aeabi_fcmpgt>
 8010f06:	2800      	cmp	r0, #0
 8010f08:	f040 80c8 	bne.w	801109c <__ieee754_asinf+0x1d0>
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f001 f837 	bl	8011f80 <fabsf>
 8010f12:	4601      	mov	r1, r0
 8010f14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010f18:	f001 fe1a 	bl	8012b50 <__aeabi_fsub>
 8010f1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010f20:	f001 ff20 	bl	8012d64 <__aeabi_fmul>
 8010f24:	f64e 7108 	movw	r1, #61192	; 0xef08
 8010f28:	f6c3 0111 	movt	r1, #14353	; 0x3811
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	f001 ff19 	bl	8012d64 <__aeabi_fmul>
 8010f32:	f647 7104 	movw	r1, #32516	; 0x7f04
 8010f36:	f6c3 214f 	movt	r1, #14927	; 0x3a4f
 8010f3a:	f001 fe0b 	bl	8012b54 <__addsf3>
 8010f3e:	4621      	mov	r1, r4
 8010f40:	f001 ff10 	bl	8012d64 <__aeabi_fmul>
 8010f44:	f241 1146 	movw	r1, #4422	; 0x1146
 8010f48:	f6c3 5124 	movt	r1, #15652	; 0x3d24
 8010f4c:	f001 fe00 	bl	8012b50 <__aeabi_fsub>
 8010f50:	4621      	mov	r1, r4
 8010f52:	f001 ff07 	bl	8012d64 <__aeabi_fmul>
 8010f56:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8010f5a:	f6c3 614e 	movt	r1, #15950	; 0x3e4e
 8010f5e:	f001 fdf9 	bl	8012b54 <__addsf3>
 8010f62:	4621      	mov	r1, r4
 8010f64:	f001 fefe 	bl	8012d64 <__aeabi_fmul>
 8010f68:	f24b 0190 	movw	r1, #45200	; 0xb090
 8010f6c:	f6c3 61a6 	movt	r1, #16038	; 0x3ea6
 8010f70:	f001 fdee 	bl	8012b50 <__aeabi_fsub>
 8010f74:	4621      	mov	r1, r4
 8010f76:	f001 fef5 	bl	8012d64 <__aeabi_fmul>
 8010f7a:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8010f7e:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 8010f82:	f001 fde7 	bl	8012b54 <__addsf3>
 8010f86:	4621      	mov	r1, r4
 8010f88:	f001 feec 	bl	8012d64 <__aeabi_fmul>
 8010f8c:	f24c 612e 	movw	r1, #50734	; 0xc62e
 8010f90:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 8010f94:	4681      	mov	r9, r0
 8010f96:	4620      	mov	r0, r4
 8010f98:	f001 fee4 	bl	8012d64 <__aeabi_fmul>
 8010f9c:	f243 3161 	movw	r1, #13153	; 0x3361
 8010fa0:	f6c3 7130 	movt	r1, #16176	; 0x3f30
 8010fa4:	f001 fdd4 	bl	8012b50 <__aeabi_fsub>
 8010fa8:	4621      	mov	r1, r4
 8010faa:	f001 fedb 	bl	8012d64 <__aeabi_fmul>
 8010fae:	f245 712d 	movw	r1, #22317	; 0x572d
 8010fb2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8010fb6:	f001 fdcd 	bl	8012b54 <__addsf3>
 8010fba:	4621      	mov	r1, r4
 8010fbc:	f001 fed2 	bl	8012d64 <__aeabi_fmul>
 8010fc0:	f24d 1139 	movw	r1, #53561	; 0xd139
 8010fc4:	f2c4 0119 	movt	r1, #16409	; 0x4019
 8010fc8:	f001 fdc2 	bl	8012b50 <__aeabi_fsub>
 8010fcc:	4621      	mov	r1, r4
 8010fce:	f001 fec9 	bl	8012d64 <__aeabi_fmul>
 8010fd2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010fd6:	f001 fdbd 	bl	8012b54 <__addsf3>
 8010fda:	4680      	mov	r8, r0
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f000 faad 	bl	801153c <__ieee754_sqrtf>
 8010fe2:	f649 1399 	movw	r3, #39321	; 0x9999
 8010fe6:	f6c3 7379 	movt	r3, #16249	; 0x3f79
 8010fea:	429d      	cmp	r5, r3
 8010fec:	4607      	mov	r7, r0
 8010fee:	dc58      	bgt.n	80110a2 <__ieee754_asinf+0x1d6>
 8010ff0:	4601      	mov	r1, r0
 8010ff2:	f420 657e 	bic.w	r5, r0, #4064	; 0xfe0
 8010ff6:	f001 fdad 	bl	8012b54 <__addsf3>
 8010ffa:	4641      	mov	r1, r8
 8010ffc:	f025 051f 	bic.w	r5, r5, #31
 8011000:	4682      	mov	sl, r0
 8011002:	4648      	mov	r0, r9
 8011004:	f001 ff62 	bl	8012ecc <__aeabi_fdiv>
 8011008:	4601      	mov	r1, r0
 801100a:	4650      	mov	r0, sl
 801100c:	f001 feaa 	bl	8012d64 <__aeabi_fmul>
 8011010:	4629      	mov	r1, r5
 8011012:	4680      	mov	r8, r0
 8011014:	4628      	mov	r0, r5
 8011016:	f001 fea5 	bl	8012d64 <__aeabi_fmul>
 801101a:	4601      	mov	r1, r0
 801101c:	4620      	mov	r0, r4
 801101e:	f001 fd97 	bl	8012b50 <__aeabi_fsub>
 8011022:	4629      	mov	r1, r5
 8011024:	4604      	mov	r4, r0
 8011026:	4638      	mov	r0, r7
 8011028:	f001 fd94 	bl	8012b54 <__addsf3>
 801102c:	4601      	mov	r1, r0
 801102e:	4620      	mov	r0, r4
 8011030:	f001 ff4c 	bl	8012ecc <__aeabi_fdiv>
 8011034:	4601      	mov	r1, r0
 8011036:	f001 fd8d 	bl	8012b54 <__addsf3>
 801103a:	4601      	mov	r1, r0
 801103c:	f64b 502e 	movw	r0, #48430	; 0xbd2e
 8011040:	f2cb 303b 	movt	r0, #45883	; 0xb33b
 8011044:	f001 fd84 	bl	8012b50 <__aeabi_fsub>
 8011048:	4601      	mov	r1, r0
 801104a:	4640      	mov	r0, r8
 801104c:	f001 fd80 	bl	8012b50 <__aeabi_fsub>
 8011050:	4629      	mov	r1, r5
 8011052:	4604      	mov	r4, r0
 8011054:	4628      	mov	r0, r5
 8011056:	f001 fd7d 	bl	8012b54 <__addsf3>
 801105a:	4601      	mov	r1, r0
 801105c:	f640 70db 	movw	r0, #4059	; 0xfdb
 8011060:	f6c3 7049 	movt	r0, #16201	; 0x3f49
 8011064:	f001 fd74 	bl	8012b50 <__aeabi_fsub>
 8011068:	4601      	mov	r1, r0
 801106a:	4620      	mov	r0, r4
 801106c:	f001 fd70 	bl	8012b50 <__aeabi_fsub>
 8011070:	4601      	mov	r1, r0
 8011072:	f640 70db 	movw	r0, #4059	; 0xfdb
 8011076:	f6c3 7049 	movt	r0, #16201	; 0x3f49
 801107a:	f001 fd69 	bl	8012b50 <__aeabi_fsub>
 801107e:	2e00      	cmp	r6, #0
 8011080:	bfd4      	ite	le
 8011082:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 8011086:	4604      	movgt	r4, r0
 8011088:	4620      	mov	r0, r4
 801108a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801108e:	4601      	mov	r1, r0
 8011090:	f001 fd5e 	bl	8012b50 <__aeabi_fsub>
 8011094:	4601      	mov	r1, r0
 8011096:	f001 ff19 	bl	8012ecc <__aeabi_fdiv>
 801109a:	4604      	mov	r4, r0
 801109c:	4620      	mov	r0, r4
 801109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110a2:	4641      	mov	r1, r8
 80110a4:	4648      	mov	r0, r9
 80110a6:	f001 ff11 	bl	8012ecc <__aeabi_fdiv>
 80110aa:	4601      	mov	r1, r0
 80110ac:	4638      	mov	r0, r7
 80110ae:	f001 fe59 	bl	8012d64 <__aeabi_fmul>
 80110b2:	4639      	mov	r1, r7
 80110b4:	f001 fd4e 	bl	8012b54 <__addsf3>
 80110b8:	4601      	mov	r1, r0
 80110ba:	f001 fd4b 	bl	8012b54 <__addsf3>
 80110be:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 80110c2:	f2c3 313b 	movt	r1, #13115	; 0x333b
 80110c6:	f001 fd45 	bl	8012b54 <__addsf3>
 80110ca:	4601      	mov	r1, r0
 80110cc:	f640 70db 	movw	r0, #4059	; 0xfdb
 80110d0:	f6c3 70c9 	movt	r0, #16329	; 0x3fc9
 80110d4:	f001 fd3c 	bl	8012b50 <__aeabi_fsub>
 80110d8:	e7d1      	b.n	801107e <__ieee754_asinf+0x1b2>
 80110da:	f640 71db 	movw	r1, #4059	; 0xfdb
 80110de:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 80110e2:	f001 fe3f 	bl	8012d64 <__aeabi_fmul>
 80110e6:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 80110ea:	f2cb 313b 	movt	r1, #45883	; 0xb33b
 80110ee:	4605      	mov	r5, r0
 80110f0:	4620      	mov	r0, r4
 80110f2:	f001 fe37 	bl	8012d64 <__aeabi_fmul>
 80110f6:	4601      	mov	r1, r0
 80110f8:	4628      	mov	r0, r5
 80110fa:	f001 fd2b 	bl	8012b54 <__addsf3>
 80110fe:	4604      	mov	r4, r0
 8011100:	4620      	mov	r0, r4
 8011102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011106:	4601      	mov	r1, r0
 8011108:	f001 fe2c 	bl	8012d64 <__aeabi_fmul>
 801110c:	f64e 7108 	movw	r1, #61192	; 0xef08
 8011110:	f6c3 0111 	movt	r1, #14353	; 0x3811
 8011114:	4605      	mov	r5, r0
 8011116:	f001 fe25 	bl	8012d64 <__aeabi_fmul>
 801111a:	f647 7104 	movw	r1, #32516	; 0x7f04
 801111e:	f6c3 214f 	movt	r1, #14927	; 0x3a4f
 8011122:	f001 fd17 	bl	8012b54 <__addsf3>
 8011126:	4629      	mov	r1, r5
 8011128:	f001 fe1c 	bl	8012d64 <__aeabi_fmul>
 801112c:	f241 1146 	movw	r1, #4422	; 0x1146
 8011130:	f6c3 5124 	movt	r1, #15652	; 0x3d24
 8011134:	f001 fd0c 	bl	8012b50 <__aeabi_fsub>
 8011138:	4629      	mov	r1, r5
 801113a:	f001 fe13 	bl	8012d64 <__aeabi_fmul>
 801113e:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8011142:	f6c3 614e 	movt	r1, #15950	; 0x3e4e
 8011146:	f001 fd05 	bl	8012b54 <__addsf3>
 801114a:	4629      	mov	r1, r5
 801114c:	f001 fe0a 	bl	8012d64 <__aeabi_fmul>
 8011150:	f24b 0190 	movw	r1, #45200	; 0xb090
 8011154:	f6c3 61a6 	movt	r1, #16038	; 0x3ea6
 8011158:	f001 fcfa 	bl	8012b50 <__aeabi_fsub>
 801115c:	4629      	mov	r1, r5
 801115e:	f001 fe01 	bl	8012d64 <__aeabi_fmul>
 8011162:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8011166:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 801116a:	f001 fcf3 	bl	8012b54 <__addsf3>
 801116e:	4629      	mov	r1, r5
 8011170:	f001 fdf8 	bl	8012d64 <__aeabi_fmul>
 8011174:	f24c 612e 	movw	r1, #50734	; 0xc62e
 8011178:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 801117c:	4606      	mov	r6, r0
 801117e:	4628      	mov	r0, r5
 8011180:	f001 fdf0 	bl	8012d64 <__aeabi_fmul>
 8011184:	f243 3161 	movw	r1, #13153	; 0x3361
 8011188:	f6c3 7130 	movt	r1, #16176	; 0x3f30
 801118c:	f001 fce0 	bl	8012b50 <__aeabi_fsub>
 8011190:	4629      	mov	r1, r5
 8011192:	f001 fde7 	bl	8012d64 <__aeabi_fmul>
 8011196:	f245 712d 	movw	r1, #22317	; 0x572d
 801119a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 801119e:	f001 fcd9 	bl	8012b54 <__addsf3>
 80111a2:	4629      	mov	r1, r5
 80111a4:	f001 fdde 	bl	8012d64 <__aeabi_fmul>
 80111a8:	f24d 1139 	movw	r1, #53561	; 0xd139
 80111ac:	f2c4 0119 	movt	r1, #16409	; 0x4019
 80111b0:	f001 fcce 	bl	8012b50 <__aeabi_fsub>
 80111b4:	4629      	mov	r1, r5
 80111b6:	f001 fdd5 	bl	8012d64 <__aeabi_fmul>
 80111ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80111be:	f001 fcc9 	bl	8012b54 <__addsf3>
 80111c2:	4601      	mov	r1, r0
 80111c4:	4630      	mov	r0, r6
 80111c6:	f001 fe81 	bl	8012ecc <__aeabi_fdiv>
 80111ca:	4601      	mov	r1, r0
 80111cc:	4620      	mov	r0, r4
 80111ce:	f001 fdc9 	bl	8012d64 <__aeabi_fmul>
 80111d2:	4601      	mov	r1, r0
 80111d4:	4620      	mov	r0, r4
 80111d6:	f001 fcbd 	bl	8012b54 <__addsf3>
 80111da:	4604      	mov	r4, r0
 80111dc:	4620      	mov	r0, r4
 80111de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e2:	bf00      	nop

080111e4 <__ieee754_rem_pio2f>:
 80111e4:	f640 73d8 	movw	r3, #4056	; 0xfd8
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	f6c3 7349 	movt	r3, #16201	; 0x3f49
 80111f0:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80111f4:	b087      	sub	sp, #28
 80111f6:	429e      	cmp	r6, r3
 80111f8:	4605      	mov	r5, r0
 80111fa:	460c      	mov	r4, r1
 80111fc:	f340 808e 	ble.w	801131c <__ieee754_rem_pio2f+0x138>
 8011200:	f64c 33e3 	movw	r3, #52195	; 0xcbe3
 8011204:	f2c4 0316 	movt	r3, #16406	; 0x4016
 8011208:	429e      	cmp	r6, r3
 801120a:	dc26      	bgt.n	801125a <__ieee754_rem_pio2f+0x76>
 801120c:	2800      	cmp	r0, #0
 801120e:	f340 814e 	ble.w	80114ae <__ieee754_rem_pio2f+0x2ca>
 8011212:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8011216:	f026 060f 	bic.w	r6, r6, #15
 801121a:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 801121e:	f001 fc97 	bl	8012b50 <__aeabi_fsub>
 8011222:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 8011226:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 801122a:	429e      	cmp	r6, r3
 801122c:	4605      	mov	r5, r0
 801122e:	f000 8084 	beq.w	801133a <__ieee754_rem_pio2f+0x156>
 8011232:	f244 4143 	movw	r1, #17475	; 0x4443
 8011236:	2701      	movs	r7, #1
 8011238:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801123c:	f001 fc88 	bl	8012b50 <__aeabi_fsub>
 8011240:	4601      	mov	r1, r0
 8011242:	6020      	str	r0, [r4, #0]
 8011244:	4628      	mov	r0, r5
 8011246:	f001 fc83 	bl	8012b50 <__aeabi_fsub>
 801124a:	f244 4143 	movw	r1, #17475	; 0x4443
 801124e:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8011252:	f001 fc7d 	bl	8012b50 <__aeabi_fsub>
 8011256:	6060      	str	r0, [r4, #4]
 8011258:	e064      	b.n	8011324 <__ieee754_rem_pio2f+0x140>
 801125a:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 801125e:	f2c4 3349 	movt	r3, #17225	; 0x4349
 8011262:	429e      	cmp	r6, r3
 8011264:	f340 8084 	ble.w	8011370 <__ieee754_rem_pio2f+0x18c>
 8011268:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801126c:	da5e      	bge.n	801132c <__ieee754_rem_pio2f+0x148>
 801126e:	ea4f 59e6 	mov.w	r9, r6, asr #23
 8011272:	f1a9 0986 	sub.w	r9, r9, #134	; 0x86
 8011276:	ea4f 53c9 	mov.w	r3, r9, lsl #23
 801127a:	1af6      	subs	r6, r6, r3
 801127c:	4630      	mov	r0, r6
 801127e:	f001 ff37 	bl	80130f0 <__aeabi_f2iz>
 8011282:	f001 fd1b 	bl	8012cbc <__aeabi_i2f>
 8011286:	4603      	mov	r3, r0
 8011288:	4601      	mov	r1, r0
 801128a:	4630      	mov	r0, r6
 801128c:	9303      	str	r3, [sp, #12]
 801128e:	f001 fc5f 	bl	8012b50 <__aeabi_fsub>
 8011292:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011296:	f001 fd65 	bl	8012d64 <__aeabi_fmul>
 801129a:	4606      	mov	r6, r0
 801129c:	f001 ff28 	bl	80130f0 <__aeabi_f2iz>
 80112a0:	f001 fd0c 	bl	8012cbc <__aeabi_i2f>
 80112a4:	4601      	mov	r1, r0
 80112a6:	4607      	mov	r7, r0
 80112a8:	4630      	mov	r0, r6
 80112aa:	9704      	str	r7, [sp, #16]
 80112ac:	f001 fc50 	bl	8012b50 <__aeabi_fsub>
 80112b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80112b4:	f001 fd56 	bl	8012d64 <__aeabi_fmul>
 80112b8:	2100      	movs	r1, #0
 80112ba:	9005      	str	r0, [sp, #20]
 80112bc:	f001 fee6 	bl	801308c <__aeabi_fcmpeq>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	f000 8118 	beq.w	80114f6 <__ieee754_rem_pio2f+0x312>
 80112c6:	f10d 0a0c 	add.w	sl, sp, #12
 80112ca:	2603      	movs	r6, #3
 80112cc:	4638      	mov	r0, r7
 80112ce:	2100      	movs	r1, #0
 80112d0:	f10a 0804 	add.w	r8, sl, #4
 80112d4:	3e01      	subs	r6, #1
 80112d6:	f001 fed9 	bl	801308c <__aeabi_fcmpeq>
 80112da:	b140      	cbz	r0, 80112ee <__ieee754_rem_pio2f+0x10a>
 80112dc:	f858 7d04 	ldr.w	r7, [r8, #-4]!
 80112e0:	2100      	movs	r1, #0
 80112e2:	3e01      	subs	r6, #1
 80112e4:	4638      	mov	r0, r7
 80112e6:	f001 fed1 	bl	801308c <__aeabi_fcmpeq>
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d1f6      	bne.n	80112dc <__ieee754_rem_pio2f+0xf8>
 80112ee:	4633      	mov	r3, r6
 80112f0:	4e91      	ldr	r6, [pc, #580]	; (8011538 <__ieee754_rem_pio2f+0x354>)
 80112f2:	4650      	mov	r0, sl
 80112f4:	4621      	mov	r1, r4
 80112f6:	464a      	mov	r2, r9
 80112f8:	9601      	str	r6, [sp, #4]
 80112fa:	2602      	movs	r6, #2
 80112fc:	9600      	str	r6, [sp, #0]
 80112fe:	f000 fa51 	bl	80117a4 <__kernel_rem_pio2f>
 8011302:	2d00      	cmp	r5, #0
 8011304:	4607      	mov	r7, r0
 8011306:	da0d      	bge.n	8011324 <__ieee754_rem_pio2f+0x140>
 8011308:	6822      	ldr	r2, [r4, #0]
 801130a:	4247      	negs	r7, r0
 801130c:	6863      	ldr	r3, [r4, #4]
 801130e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8011312:	6022      	str	r2, [r4, #0]
 8011314:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011318:	6063      	str	r3, [r4, #4]
 801131a:	e003      	b.n	8011324 <__ieee754_rem_pio2f+0x140>
 801131c:	2700      	movs	r7, #0
 801131e:	2300      	movs	r3, #0
 8011320:	6008      	str	r0, [r1, #0]
 8011322:	604b      	str	r3, [r1, #4]
 8011324:	4638      	mov	r0, r7
 8011326:	b007      	add	sp, #28
 8011328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132c:	4601      	mov	r1, r0
 801132e:	2700      	movs	r7, #0
 8011330:	f001 fc0e 	bl	8012b50 <__aeabi_fsub>
 8011334:	6060      	str	r0, [r4, #4]
 8011336:	6020      	str	r0, [r4, #0]
 8011338:	e7f4      	b.n	8011324 <__ieee754_rem_pio2f+0x140>
 801133a:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 801133e:	2701      	movs	r7, #1
 8011340:	f2c3 7135 	movt	r1, #14133	; 0x3735
 8011344:	f001 fc04 	bl	8012b50 <__aeabi_fsub>
 8011348:	f24a 3108 	movw	r1, #41736	; 0xa308
 801134c:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8011350:	4605      	mov	r5, r0
 8011352:	f001 fbfd 	bl	8012b50 <__aeabi_fsub>
 8011356:	4601      	mov	r1, r0
 8011358:	6020      	str	r0, [r4, #0]
 801135a:	4628      	mov	r0, r5
 801135c:	f001 fbf8 	bl	8012b50 <__aeabi_fsub>
 8011360:	f24a 3108 	movw	r1, #41736	; 0xa308
 8011364:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8011368:	f001 fbf2 	bl	8012b50 <__aeabi_fsub>
 801136c:	6060      	str	r0, [r4, #4]
 801136e:	e7d9      	b.n	8011324 <__ieee754_rem_pio2f+0x140>
 8011370:	f000 fe06 	bl	8011f80 <fabsf>
 8011374:	f64f 1184 	movw	r1, #63876	; 0xf984
 8011378:	f6c3 7122 	movt	r1, #16162	; 0x3f22
 801137c:	4680      	mov	r8, r0
 801137e:	f001 fcf1 	bl	8012d64 <__aeabi_fmul>
 8011382:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011386:	f001 fbe5 	bl	8012b54 <__addsf3>
 801138a:	f001 feb1 	bl	80130f0 <__aeabi_f2iz>
 801138e:	4607      	mov	r7, r0
 8011390:	f001 fc94 	bl	8012cbc <__aeabi_i2f>
 8011394:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8011398:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 801139c:	4682      	mov	sl, r0
 801139e:	f001 fce1 	bl	8012d64 <__aeabi_fmul>
 80113a2:	4601      	mov	r1, r0
 80113a4:	4640      	mov	r0, r8
 80113a6:	f001 fbd3 	bl	8012b50 <__aeabi_fsub>
 80113aa:	f244 4143 	movw	r1, #17475	; 0x4443
 80113ae:	f2c3 7135 	movt	r1, #14133	; 0x3735
 80113b2:	4680      	mov	r8, r0
 80113b4:	4650      	mov	r0, sl
 80113b6:	f001 fcd5 	bl	8012d64 <__aeabi_fmul>
 80113ba:	2f1f      	cmp	r7, #31
 80113bc:	4681      	mov	r9, r0
 80113be:	dc1c      	bgt.n	80113fa <__ieee754_rem_pio2f+0x216>
 80113c0:	f24b 436c 	movw	r3, #46188	; 0xb46c
 80113c4:	1e79      	subs	r1, r7, #1
 80113c6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80113ca:	f026 02ff 	bic.w	r2, r6, #255	; 0xff
 80113ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d011      	beq.n	80113fa <__ieee754_rem_pio2f+0x216>
 80113d6:	4649      	mov	r1, r9
 80113d8:	4640      	mov	r0, r8
 80113da:	f001 fbb9 	bl	8012b50 <__aeabi_fsub>
 80113de:	4601      	mov	r1, r0
 80113e0:	6020      	str	r0, [r4, #0]
 80113e2:	4640      	mov	r0, r8
 80113e4:	f001 fbb4 	bl	8012b50 <__aeabi_fsub>
 80113e8:	4649      	mov	r1, r9
 80113ea:	f001 fbb1 	bl	8012b50 <__aeabi_fsub>
 80113ee:	2d00      	cmp	r5, #0
 80113f0:	6060      	str	r0, [r4, #4]
 80113f2:	da97      	bge.n	8011324 <__ieee754_rem_pio2f+0x140>
 80113f4:	6822      	ldr	r2, [r4, #0]
 80113f6:	427f      	negs	r7, r7
 80113f8:	e788      	b.n	801130c <__ieee754_rem_pio2f+0x128>
 80113fa:	4649      	mov	r1, r9
 80113fc:	4640      	mov	r0, r8
 80113fe:	f001 fba7 	bl	8012b50 <__aeabi_fsub>
 8011402:	15f6      	asrs	r6, r6, #23
 8011404:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011408:	4601      	mov	r1, r0
 801140a:	1af3      	subs	r3, r6, r3
 801140c:	6020      	str	r0, [r4, #0]
 801140e:	2b08      	cmp	r3, #8
 8011410:	dde7      	ble.n	80113e2 <__ieee754_rem_pio2f+0x1fe>
 8011412:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8011416:	4650      	mov	r0, sl
 8011418:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801141c:	f001 fca2 	bl	8012d64 <__aeabi_fmul>
 8011420:	4681      	mov	r9, r0
 8011422:	4640      	mov	r0, r8
 8011424:	4649      	mov	r1, r9
 8011426:	f001 fb93 	bl	8012b50 <__aeabi_fsub>
 801142a:	4683      	mov	fp, r0
 801142c:	4640      	mov	r0, r8
 801142e:	4659      	mov	r1, fp
 8011430:	f001 fb8e 	bl	8012b50 <__aeabi_fsub>
 8011434:	4649      	mov	r1, r9
 8011436:	f001 fb8b 	bl	8012b50 <__aeabi_fsub>
 801143a:	f24a 3108 	movw	r1, #41736	; 0xa308
 801143e:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8011442:	4680      	mov	r8, r0
 8011444:	4650      	mov	r0, sl
 8011446:	f001 fc8d 	bl	8012d64 <__aeabi_fmul>
 801144a:	4641      	mov	r1, r8
 801144c:	f001 fb80 	bl	8012b50 <__aeabi_fsub>
 8011450:	4681      	mov	r9, r0
 8011452:	4658      	mov	r0, fp
 8011454:	4649      	mov	r1, r9
 8011456:	f001 fb7b 	bl	8012b50 <__aeabi_fsub>
 801145a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801145e:	4601      	mov	r1, r0
 8011460:	1af6      	subs	r6, r6, r3
 8011462:	6020      	str	r0, [r4, #0]
 8011464:	2e19      	cmp	r6, #25
 8011466:	bfd8      	it	le
 8011468:	46d8      	movle	r8, fp
 801146a:	ddba      	ble.n	80113e2 <__ieee754_rem_pio2f+0x1fe>
 801146c:	f44f 4123 	mov.w	r1, #41728	; 0xa300
 8011470:	4650      	mov	r0, sl
 8011472:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8011476:	f001 fc75 	bl	8012d64 <__aeabi_fmul>
 801147a:	4606      	mov	r6, r0
 801147c:	4658      	mov	r0, fp
 801147e:	4631      	mov	r1, r6
 8011480:	f001 fb66 	bl	8012b50 <__aeabi_fsub>
 8011484:	4680      	mov	r8, r0
 8011486:	4658      	mov	r0, fp
 8011488:	4641      	mov	r1, r8
 801148a:	f001 fb61 	bl	8012b50 <__aeabi_fsub>
 801148e:	4631      	mov	r1, r6
 8011490:	f001 fb5e 	bl	8012b50 <__aeabi_fsub>
 8011494:	f243 1132 	movw	r1, #12594	; 0x3132
 8011498:	f2c2 418d 	movt	r1, #9357	; 0x248d
 801149c:	4606      	mov	r6, r0
 801149e:	4650      	mov	r0, sl
 80114a0:	f001 fc60 	bl	8012d64 <__aeabi_fmul>
 80114a4:	4631      	mov	r1, r6
 80114a6:	f001 fb53 	bl	8012b50 <__aeabi_fsub>
 80114aa:	4681      	mov	r9, r0
 80114ac:	e793      	b.n	80113d6 <__ieee754_rem_pio2f+0x1f2>
 80114ae:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80114b2:	f026 060f 	bic.w	r6, r6, #15
 80114b6:	f6c3 71c9 	movt	r1, #16329	; 0x3fc9
 80114ba:	f001 fb4b 	bl	8012b54 <__addsf3>
 80114be:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 80114c2:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 80114c6:	429e      	cmp	r6, r3
 80114c8:	4605      	mov	r5, r0
 80114ca:	d018      	beq.n	80114fe <__ieee754_rem_pio2f+0x31a>
 80114cc:	f244 4143 	movw	r1, #17475	; 0x4443
 80114d0:	f04f 37ff 	mov.w	r7, #4294967295
 80114d4:	f2c3 7135 	movt	r1, #14133	; 0x3735
 80114d8:	f001 fb3c 	bl	8012b54 <__addsf3>
 80114dc:	4601      	mov	r1, r0
 80114de:	6020      	str	r0, [r4, #0]
 80114e0:	4628      	mov	r0, r5
 80114e2:	f001 fb35 	bl	8012b50 <__aeabi_fsub>
 80114e6:	f244 4143 	movw	r1, #17475	; 0x4443
 80114ea:	f2c3 7135 	movt	r1, #14133	; 0x3735
 80114ee:	f001 fb31 	bl	8012b54 <__addsf3>
 80114f2:	6060      	str	r0, [r4, #4]
 80114f4:	e716      	b.n	8011324 <__ieee754_rem_pio2f+0x140>
 80114f6:	2603      	movs	r6, #3
 80114f8:	f10d 0a0c 	add.w	sl, sp, #12
 80114fc:	e6f7      	b.n	80112ee <__ieee754_rem_pio2f+0x10a>
 80114fe:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8011502:	f04f 37ff 	mov.w	r7, #4294967295
 8011506:	f2c3 7135 	movt	r1, #14133	; 0x3735
 801150a:	f001 fb23 	bl	8012b54 <__addsf3>
 801150e:	f24a 3108 	movw	r1, #41736	; 0xa308
 8011512:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 8011516:	4605      	mov	r5, r0
 8011518:	f001 fb1c 	bl	8012b54 <__addsf3>
 801151c:	4601      	mov	r1, r0
 801151e:	6020      	str	r0, [r4, #0]
 8011520:	4628      	mov	r0, r5
 8011522:	f001 fb15 	bl	8012b50 <__aeabi_fsub>
 8011526:	f24a 3108 	movw	r1, #41736	; 0xa308
 801152a:	f6c2 6185 	movt	r1, #11909	; 0x2e85
 801152e:	f001 fb11 	bl	8012b54 <__addsf3>
 8011532:	6060      	str	r0, [r4, #4]
 8011534:	e6f6      	b.n	8011324 <__ieee754_rem_pio2f+0x140>
 8011536:	bf00      	nop
 8011538:	0801b4ec 	.word	0x0801b4ec

0801153c <__ieee754_sqrtf>:
 801153c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011540:	4603      	mov	r3, r0
 8011542:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011546:	b570      	push	{r4, r5, r6, lr}
 8011548:	4604      	mov	r4, r0
 801154a:	d23a      	bcs.n	80115c2 <__ieee754_sqrtf+0x86>
 801154c:	2a00      	cmp	r2, #0
 801154e:	d036      	beq.n	80115be <__ieee754_sqrtf+0x82>
 8011550:	2800      	cmp	r0, #0
 8011552:	db40      	blt.n	80115d6 <__ieee754_sqrtf+0x9a>
 8011554:	15c1      	asrs	r1, r0, #23
 8011556:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801155a:	d209      	bcs.n	8011570 <__ieee754_sqrtf+0x34>
 801155c:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8011560:	d141      	bne.n	80115e6 <__ieee754_sqrtf+0xaa>
 8011562:	005b      	lsls	r3, r3, #1
 8011564:	3201      	adds	r2, #1
 8011566:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 801156a:	d0fa      	beq.n	8011562 <__ieee754_sqrtf+0x26>
 801156c:	3101      	adds	r1, #1
 801156e:	1a89      	subs	r1, r1, r2
 8011570:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011574:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8011578:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801157c:	f012 0f01 	tst.w	r2, #1
 8011580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011584:	bf18      	it	ne
 8011586:	005b      	lslne	r3, r3, #1
 8011588:	2600      	movs	r6, #0
 801158a:	1054      	asrs	r4, r2, #1
 801158c:	2119      	movs	r1, #25
 801158e:	005b      	lsls	r3, r3, #1
 8011590:	4635      	mov	r5, r6
 8011592:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011596:	18a8      	adds	r0, r5, r2
 8011598:	4298      	cmp	r0, r3
 801159a:	bfde      	ittt	le
 801159c:	ebc0 0303 	rsble	r3, r0, r3
 80115a0:	1885      	addle	r5, r0, r2
 80115a2:	18b6      	addle	r6, r6, r2
 80115a4:	0852      	lsrs	r2, r2, #1
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	3901      	subs	r1, #1
 80115aa:	d1f4      	bne.n	8011596 <__ieee754_sqrtf+0x5a>
 80115ac:	b113      	cbz	r3, 80115b4 <__ieee754_sqrtf+0x78>
 80115ae:	f006 0301 	and.w	r3, r6, #1
 80115b2:	199e      	adds	r6, r3, r6
 80115b4:	05e4      	lsls	r4, r4, #23
 80115b6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80115ba:	eb04 0466 	add.w	r4, r4, r6, asr #1
 80115be:	4620      	mov	r0, r4
 80115c0:	bd70      	pop	{r4, r5, r6, pc}
 80115c2:	4601      	mov	r1, r0
 80115c4:	f001 fbce 	bl	8012d64 <__aeabi_fmul>
 80115c8:	4601      	mov	r1, r0
 80115ca:	4620      	mov	r0, r4
 80115cc:	f001 fac2 	bl	8012b54 <__addsf3>
 80115d0:	4604      	mov	r4, r0
 80115d2:	4620      	mov	r0, r4
 80115d4:	bd70      	pop	{r4, r5, r6, pc}
 80115d6:	4601      	mov	r1, r0
 80115d8:	f001 faba 	bl	8012b50 <__aeabi_fsub>
 80115dc:	4601      	mov	r1, r0
 80115de:	f001 fc75 	bl	8012ecc <__aeabi_fdiv>
 80115e2:	4604      	mov	r4, r0
 80115e4:	e7eb      	b.n	80115be <__ieee754_sqrtf+0x82>
 80115e6:	2200      	movs	r2, #0
 80115e8:	e7c0      	b.n	801156c <__ieee754_sqrtf+0x30>
 80115ea:	bf00      	nop

080115ec <__kernel_cosf>:
 80115ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f0:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80115f4:	f1b6 5f48 	cmp.w	r6, #838860800	; 0x32000000
 80115f8:	4605      	mov	r5, r0
 80115fa:	460f      	mov	r7, r1
 80115fc:	da5b      	bge.n	80116b6 <__kernel_cosf+0xca>
 80115fe:	f001 fd77 	bl	80130f0 <__aeabi_f2iz>
 8011602:	2800      	cmp	r0, #0
 8011604:	f000 80ca 	beq.w	801179c <__kernel_cosf+0x1b0>
 8011608:	4629      	mov	r1, r5
 801160a:	4628      	mov	r0, r5
 801160c:	f001 fbaa 	bl	8012d64 <__aeabi_fmul>
 8011610:	f24d 714e 	movw	r1, #55118	; 0xd74e
 8011614:	f6ca 5147 	movt	r1, #44359	; 0xad47
 8011618:	4604      	mov	r4, r0
 801161a:	f001 fba3 	bl	8012d64 <__aeabi_fmul>
 801161e:	f247 41f6 	movw	r1, #29942	; 0x74f6
 8011622:	f2c3 110f 	movt	r1, #12559	; 0x310f
 8011626:	f001 fa95 	bl	8012b54 <__addsf3>
 801162a:	4621      	mov	r1, r4
 801162c:	f001 fb9a 	bl	8012d64 <__aeabi_fmul>
 8011630:	f24f 217c 	movw	r1, #62076	; 0xf27c
 8011634:	f2c3 4193 	movt	r1, #13459	; 0x3493
 8011638:	f001 fa8a 	bl	8012b50 <__aeabi_fsub>
 801163c:	4621      	mov	r1, r4
 801163e:	f001 fb91 	bl	8012d64 <__aeabi_fmul>
 8011642:	f640 5101 	movw	r1, #3329	; 0xd01
 8011646:	f2c3 71d0 	movt	r1, #14288	; 0x37d0
 801164a:	f001 fa83 	bl	8012b54 <__addsf3>
 801164e:	4621      	mov	r1, r4
 8011650:	f001 fb88 	bl	8012d64 <__aeabi_fmul>
 8011654:	f640 3161 	movw	r1, #2913	; 0xb61
 8011658:	f6c3 21b6 	movt	r1, #15030	; 0x3ab6
 801165c:	f001 fa78 	bl	8012b50 <__aeabi_fsub>
 8011660:	4621      	mov	r1, r4
 8011662:	f001 fb7f 	bl	8012d64 <__aeabi_fmul>
 8011666:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 801166a:	f6c3 512a 	movt	r1, #15658	; 0x3d2a
 801166e:	f001 fa71 	bl	8012b54 <__addsf3>
 8011672:	4621      	mov	r1, r4
 8011674:	f001 fb76 	bl	8012d64 <__aeabi_fmul>
 8011678:	4680      	mov	r8, r0
 801167a:	4620      	mov	r0, r4
 801167c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011680:	f001 fb70 	bl	8012d64 <__aeabi_fmul>
 8011684:	4641      	mov	r1, r8
 8011686:	4606      	mov	r6, r0
 8011688:	4620      	mov	r0, r4
 801168a:	f001 fb6b 	bl	8012d64 <__aeabi_fmul>
 801168e:	4639      	mov	r1, r7
 8011690:	4604      	mov	r4, r0
 8011692:	4628      	mov	r0, r5
 8011694:	f001 fb66 	bl	8012d64 <__aeabi_fmul>
 8011698:	4601      	mov	r1, r0
 801169a:	4620      	mov	r0, r4
 801169c:	f001 fa58 	bl	8012b50 <__aeabi_fsub>
 80116a0:	4601      	mov	r1, r0
 80116a2:	4630      	mov	r0, r6
 80116a4:	f001 fa54 	bl	8012b50 <__aeabi_fsub>
 80116a8:	4601      	mov	r1, r0
 80116aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80116ae:	f001 fa4f 	bl	8012b50 <__aeabi_fsub>
 80116b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b6:	4601      	mov	r1, r0
 80116b8:	f001 fb54 	bl	8012d64 <__aeabi_fmul>
 80116bc:	f24d 714e 	movw	r1, #55118	; 0xd74e
 80116c0:	f6ca 5147 	movt	r1, #44359	; 0xad47
 80116c4:	4604      	mov	r4, r0
 80116c6:	f001 fb4d 	bl	8012d64 <__aeabi_fmul>
 80116ca:	f247 41f6 	movw	r1, #29942	; 0x74f6
 80116ce:	f2c3 110f 	movt	r1, #12559	; 0x310f
 80116d2:	f001 fa3f 	bl	8012b54 <__addsf3>
 80116d6:	4621      	mov	r1, r4
 80116d8:	f001 fb44 	bl	8012d64 <__aeabi_fmul>
 80116dc:	f24f 217c 	movw	r1, #62076	; 0xf27c
 80116e0:	f2c3 4193 	movt	r1, #13459	; 0x3493
 80116e4:	f001 fa34 	bl	8012b50 <__aeabi_fsub>
 80116e8:	4621      	mov	r1, r4
 80116ea:	f001 fb3b 	bl	8012d64 <__aeabi_fmul>
 80116ee:	f640 5101 	movw	r1, #3329	; 0xd01
 80116f2:	f2c3 71d0 	movt	r1, #14288	; 0x37d0
 80116f6:	f001 fa2d 	bl	8012b54 <__addsf3>
 80116fa:	4621      	mov	r1, r4
 80116fc:	f001 fb32 	bl	8012d64 <__aeabi_fmul>
 8011700:	f640 3161 	movw	r1, #2913	; 0xb61
 8011704:	f6c3 21b6 	movt	r1, #15030	; 0x3ab6
 8011708:	f001 fa22 	bl	8012b50 <__aeabi_fsub>
 801170c:	4621      	mov	r1, r4
 801170e:	f001 fb29 	bl	8012d64 <__aeabi_fmul>
 8011712:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8011716:	f6c3 512a 	movt	r1, #15658	; 0x3d2a
 801171a:	f001 fa1b 	bl	8012b54 <__addsf3>
 801171e:	4621      	mov	r1, r4
 8011720:	f001 fb20 	bl	8012d64 <__aeabi_fmul>
 8011724:	f649 1399 	movw	r3, #39321	; 0x9999
 8011728:	f6c3 6399 	movt	r3, #16025	; 0x3e99
 801172c:	429e      	cmp	r6, r3
 801172e:	4680      	mov	r8, r0
 8011730:	dda3      	ble.n	801167a <__kernel_cosf+0x8e>
 8011732:	2300      	movs	r3, #0
 8011734:	f6c3 7348 	movt	r3, #16200	; 0x3f48
 8011738:	429e      	cmp	r6, r3
 801173a:	dc27      	bgt.n	801178c <__kernel_cosf+0x1a0>
 801173c:	f106 467f 	add.w	r6, r6, #4278190080	; 0xff000000
 8011740:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011744:	4631      	mov	r1, r6
 8011746:	f001 fa03 	bl	8012b50 <__aeabi_fsub>
 801174a:	4681      	mov	r9, r0
 801174c:	4620      	mov	r0, r4
 801174e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011752:	f001 fb07 	bl	8012d64 <__aeabi_fmul>
 8011756:	4631      	mov	r1, r6
 8011758:	f001 f9fa 	bl	8012b50 <__aeabi_fsub>
 801175c:	4641      	mov	r1, r8
 801175e:	4606      	mov	r6, r0
 8011760:	4620      	mov	r0, r4
 8011762:	f001 faff 	bl	8012d64 <__aeabi_fmul>
 8011766:	4639      	mov	r1, r7
 8011768:	4604      	mov	r4, r0
 801176a:	4628      	mov	r0, r5
 801176c:	f001 fafa 	bl	8012d64 <__aeabi_fmul>
 8011770:	4601      	mov	r1, r0
 8011772:	4620      	mov	r0, r4
 8011774:	f001 f9ec 	bl	8012b50 <__aeabi_fsub>
 8011778:	4601      	mov	r1, r0
 801177a:	4630      	mov	r0, r6
 801177c:	f001 f9e8 	bl	8012b50 <__aeabi_fsub>
 8011780:	4601      	mov	r1, r0
 8011782:	4648      	mov	r0, r9
 8011784:	f001 f9e4 	bl	8012b50 <__aeabi_fsub>
 8011788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801178c:	f04f 0900 	mov.w	r9, #0
 8011790:	2600      	movs	r6, #0
 8011792:	f6c3 7938 	movt	r9, #16184	; 0x3f38
 8011796:	f6c3 6690 	movt	r6, #16016	; 0x3e90
 801179a:	e7d7      	b.n	801174c <__kernel_cosf+0x160>
 801179c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80117a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080117a4 <__kernel_rem_pio2f>:
 80117a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a8:	b0dd      	sub	sp, #372	; 0x174
 80117aa:	f64b 0504 	movw	r5, #47108	; 0xb804
 80117ae:	461c      	mov	r4, r3
 80117b0:	9107      	str	r1, [sp, #28]
 80117b2:	3b01      	subs	r3, #1
 80117b4:	9966      	ldr	r1, [sp, #408]	; 0x198
 80117b6:	f6c0 0501 	movt	r5, #2049	; 0x801
 80117ba:	9301      	str	r3, [sp, #4]
 80117bc:	1ed3      	subs	r3, r2, #3
 80117be:	bf48      	it	mi
 80117c0:	1d13      	addmi	r3, r2, #4
 80117c2:	9003      	str	r0, [sp, #12]
 80117c4:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80117c8:	10db      	asrs	r3, r3, #3
 80117ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80117ce:	9308      	str	r3, [sp, #32]
 80117d0:	43db      	mvns	r3, r3
 80117d2:	9506      	str	r5, [sp, #24]
 80117d4:	9906      	ldr	r1, [sp, #24]
 80117d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80117da:	9a01      	ldr	r2, [sp, #4]
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	eb11 0802 	adds.w	r8, r1, r2
 80117e2:	d41b      	bmi.n	801181c <__kernel_rem_pio2f+0x78>
 80117e4:	9b08      	ldr	r3, [sp, #32]
 80117e6:	af33      	add	r7, sp, #204	; 0xcc
 80117e8:	9967      	ldr	r1, [sp, #412]	; 0x19c
 80117ea:	1a9d      	subs	r5, r3, r2
 80117ec:	44a8      	add	r8, r5
 80117ee:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 80117f2:	e009      	b.n	8011808 <__kernel_rem_pio2f+0x64>
 80117f4:	6830      	ldr	r0, [r6, #0]
 80117f6:	3604      	adds	r6, #4
 80117f8:	f001 fa60 	bl	8012cbc <__aeabi_i2f>
 80117fc:	4545      	cmp	r5, r8
 80117fe:	f105 0501 	add.w	r5, r5, #1
 8011802:	f847 0f04 	str.w	r0, [r7, #4]!
 8011806:	d009      	beq.n	801181c <__kernel_rem_pio2f+0x78>
 8011808:	2d00      	cmp	r5, #0
 801180a:	daf3      	bge.n	80117f4 <__kernel_rem_pio2f+0x50>
 801180c:	2000      	movs	r0, #0
 801180e:	3604      	adds	r6, #4
 8011810:	4545      	cmp	r5, r8
 8011812:	f847 0f04 	str.w	r0, [r7, #4]!
 8011816:	f105 0501 	add.w	r5, r5, #1
 801181a:	d1f5      	bne.n	8011808 <__kernel_rem_pio2f+0x64>
 801181c:	9a06      	ldr	r2, [sp, #24]
 801181e:	2a00      	cmp	r2, #0
 8011820:	f2c0 82cc 	blt.w	8011dbc <__kernel_rem_pio2f+0x618>
 8011824:	9a06      	ldr	r2, [sp, #24]
 8011826:	a90c      	add	r1, sp, #48	; 0x30
 8011828:	46a1      	mov	r9, r4
 801182a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 801182e:	9105      	str	r1, [sp, #20]
 8011830:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 8011834:	9b01      	ldr	r3, [sp, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	f2c0 815f 	blt.w	8011afa <__kernel_rem_pio2f+0x356>
 801183c:	a934      	add	r1, sp, #208	; 0xd0
 801183e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011842:	eb01 0789 	add.w	r7, r1, r9, lsl #2
 8011846:	2600      	movs	r6, #0
 8011848:	2500      	movs	r5, #0
 801184a:	f857 1d04 	ldr.w	r1, [r7, #-4]!
 801184e:	3501      	adds	r5, #1
 8011850:	f858 0b04 	ldr.w	r0, [r8], #4
 8011854:	f001 fa86 	bl	8012d64 <__aeabi_fmul>
 8011858:	4601      	mov	r1, r0
 801185a:	4630      	mov	r0, r6
 801185c:	f001 f97a 	bl	8012b54 <__addsf3>
 8011860:	42a5      	cmp	r5, r4
 8011862:	4606      	mov	r6, r0
 8011864:	d1f1      	bne.n	801184a <__kernel_rem_pio2f+0xa6>
 8011866:	f84a 6f04 	str.w	r6, [sl, #4]!
 801186a:	45da      	cmp	sl, fp
 801186c:	f109 0901 	add.w	r9, r9, #1
 8011870:	d1e0      	bne.n	8011834 <__kernel_rem_pio2f+0x90>
 8011872:	9a06      	ldr	r2, [sp, #24]
 8011874:	a948      	add	r1, sp, #288	; 0x120
 8011876:	1e53      	subs	r3, r2, #1
 8011878:	4692      	mov	sl, r2
 801187a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801187e:	aa5c      	add	r2, sp, #368	; 0x170
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	910a      	str	r1, [sp, #40]	; 0x28
 8011884:	18d2      	adds	r2, r2, r3
 8011886:	9309      	str	r3, [sp, #36]	; 0x24
 8011888:	920b      	str	r2, [sp, #44]	; 0x2c
 801188a:	9b05      	ldr	r3, [sp, #20]
 801188c:	f1ba 0f00 	cmp.w	sl, #0
 8011890:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
 8011894:	dd22      	ble.n	80118dc <__kernel_rem_pio2f+0x138>
 8011896:	a948      	add	r1, sp, #288	; 0x120
 8011898:	eb03 068a 	add.w	r6, r3, sl, lsl #2
 801189c:	1f0f      	subs	r7, r1, #4
 801189e:	4699      	mov	r9, r3
 80118a0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80118a4:	4628      	mov	r0, r5
 80118a6:	f001 fa5d 	bl	8012d64 <__aeabi_fmul>
 80118aa:	f001 fc21 	bl	80130f0 <__aeabi_f2iz>
 80118ae:	f001 fa05 	bl	8012cbc <__aeabi_i2f>
 80118b2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80118b6:	4680      	mov	r8, r0
 80118b8:	f001 fa54 	bl	8012d64 <__aeabi_fmul>
 80118bc:	4601      	mov	r1, r0
 80118be:	4628      	mov	r0, r5
 80118c0:	f001 f946 	bl	8012b50 <__aeabi_fsub>
 80118c4:	f001 fc14 	bl	80130f0 <__aeabi_f2iz>
 80118c8:	4641      	mov	r1, r8
 80118ca:	f847 0f04 	str.w	r0, [r7, #4]!
 80118ce:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80118d2:	f001 f93f 	bl	8012b54 <__addsf3>
 80118d6:	454e      	cmp	r6, r9
 80118d8:	4605      	mov	r5, r0
 80118da:	d1e1      	bne.n	80118a0 <__kernel_rem_pio2f+0xfc>
 80118dc:	9904      	ldr	r1, [sp, #16]
 80118de:	4628      	mov	r0, r5
 80118e0:	f000 fbe0 	bl	80120a4 <scalbnf>
 80118e4:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80118e8:	4605      	mov	r5, r0
 80118ea:	f001 fa3b 	bl	8012d64 <__aeabi_fmul>
 80118ee:	f000 fb4b 	bl	8011f88 <floorf>
 80118f2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80118f6:	f001 fa35 	bl	8012d64 <__aeabi_fmul>
 80118fa:	4601      	mov	r1, r0
 80118fc:	4628      	mov	r0, r5
 80118fe:	f001 f927 	bl	8012b50 <__aeabi_fsub>
 8011902:	4605      	mov	r5, r0
 8011904:	f001 fbf4 	bl	80130f0 <__aeabi_f2iz>
 8011908:	4607      	mov	r7, r0
 801190a:	f001 f9d7 	bl	8012cbc <__aeabi_i2f>
 801190e:	4601      	mov	r1, r0
 8011910:	4628      	mov	r0, r5
 8011912:	f001 f91d 	bl	8012b50 <__aeabi_fsub>
 8011916:	9a04      	ldr	r2, [sp, #16]
 8011918:	2a00      	cmp	r2, #0
 801191a:	4606      	mov	r6, r0
 801191c:	f340 80d0 	ble.w	8011ac0 <__kernel_rem_pio2f+0x31c>
 8011920:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011924:	f1c2 0108 	rsb	r1, r2, #8
 8011928:	f1c2 0507 	rsb	r5, r2, #7
 801192c:	aa5c      	add	r2, sp, #368	; 0x170
 801192e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011932:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8011936:	fa52 f001 	asrs.w	r0, r2, r1
 801193a:	183f      	adds	r7, r7, r0
 801193c:	fa10 f101 	lsls.w	r1, r0, r1
 8011940:	1a52      	subs	r2, r2, r1
 8011942:	f843 2c50 	str.w	r2, [r3, #-80]
 8011946:	fa42 fb05 	asr.w	fp, r2, r5
 801194a:	f1bb 0f00 	cmp.w	fp, #0
 801194e:	dd32      	ble.n	80119b6 <__kernel_rem_pio2f+0x212>
 8011950:	3701      	adds	r7, #1
 8011952:	f1ba 0f00 	cmp.w	sl, #0
 8011956:	f340 822f 	ble.w	8011db8 <__kernel_rem_pio2f+0x614>
 801195a:	ab48      	add	r3, sp, #288	; 0x120
 801195c:	2500      	movs	r5, #0
 801195e:	eb03 018a 	add.w	r1, r3, sl, lsl #2
 8011962:	e007      	b.n	8011974 <__kernel_rem_pio2f+0x1d0>
 8011964:	b122      	cbz	r2, 8011970 <__kernel_rem_pio2f+0x1cc>
 8011966:	2501      	movs	r5, #1
 8011968:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801196c:	f843 2c04 	str.w	r2, [r3, #-4]
 8011970:	428b      	cmp	r3, r1
 8011972:	d00a      	beq.n	801198a <__kernel_rem_pio2f+0x1e6>
 8011974:	f853 2b04 	ldr.w	r2, [r3], #4
 8011978:	2d00      	cmp	r5, #0
 801197a:	d0f3      	beq.n	8011964 <__kernel_rem_pio2f+0x1c0>
 801197c:	2501      	movs	r5, #1
 801197e:	428b      	cmp	r3, r1
 8011980:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8011984:	f843 2c04 	str.w	r2, [r3, #-4]
 8011988:	d1f4      	bne.n	8011974 <__kernel_rem_pio2f+0x1d0>
 801198a:	9a04      	ldr	r2, [sp, #16]
 801198c:	2a00      	cmp	r2, #0
 801198e:	dd0f      	ble.n	80119b0 <__kernel_rem_pio2f+0x20c>
 8011990:	2a01      	cmp	r2, #1
 8011992:	f000 809e 	beq.w	8011ad2 <__kernel_rem_pio2f+0x32e>
 8011996:	2a02      	cmp	r2, #2
 8011998:	d10a      	bne.n	80119b0 <__kernel_rem_pio2f+0x20c>
 801199a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801199e:	aa5c      	add	r2, sp, #368	; 0x170
 80119a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80119a4:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80119a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80119ac:	f843 2c50 	str.w	r2, [r3, #-80]
 80119b0:	f1bb 0f02 	cmp.w	fp, #2
 80119b4:	d071      	beq.n	8011a9a <__kernel_rem_pio2f+0x2f6>
 80119b6:	4630      	mov	r0, r6
 80119b8:	2100      	movs	r1, #0
 80119ba:	f001 fb67 	bl	801308c <__aeabi_fcmpeq>
 80119be:	2800      	cmp	r0, #0
 80119c0:	f000 80a0 	beq.w	8011b04 <__kernel_rem_pio2f+0x360>
 80119c4:	9b06      	ldr	r3, [sp, #24]
 80119c6:	459a      	cmp	sl, r3
 80119c8:	dd0d      	ble.n	80119e6 <__kernel_rem_pio2f+0x242>
 80119ca:	a948      	add	r1, sp, #288	; 0x120
 80119cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80119ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80119d2:	2200      	movs	r2, #0
 80119d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119d8:	4283      	cmp	r3, r0
 80119da:	ea42 0201 	orr.w	r2, r2, r1
 80119de:	d1f9      	bne.n	80119d4 <__kernel_rem_pio2f+0x230>
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	f040 80c6 	bne.w	8011b72 <__kernel_rem_pio2f+0x3ce>
 80119e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119e8:	f852 3c50 	ldr.w	r3, [r2, #-80]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f040 81e1 	bne.w	8011db4 <__kernel_rem_pio2f+0x610>
 80119f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f4:	a948      	add	r1, sp, #288	; 0x120
 80119f6:	18ca      	adds	r2, r1, r3
 80119f8:	2301      	movs	r3, #1
 80119fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80119fe:	3301      	adds	r3, #1
 8011a00:	2900      	cmp	r1, #0
 8011a02:	d0fa      	beq.n	80119fa <__kernel_rem_pio2f+0x256>
 8011a04:	4453      	add	r3, sl
 8011a06:	f10a 0901 	add.w	r9, sl, #1
 8011a0a:	4599      	cmp	r9, r3
 8011a0c:	9302      	str	r3, [sp, #8]
 8011a0e:	dc38      	bgt.n	8011a82 <__kernel_rem_pio2f+0x2de>
 8011a10:	9a08      	ldr	r2, [sp, #32]
 8011a12:	eb0a 0304 	add.w	r3, sl, r4
 8011a16:	9967      	ldr	r1, [sp, #412]	; 0x19c
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	eb0a 0b02 	add.w	fp, sl, r2
 8011a1e:	9a05      	ldr	r2, [sp, #20]
 8011a20:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011a24:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 8011a28:	a934      	add	r1, sp, #208	; 0xd0
 8011a2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011a2e:	9100      	str	r1, [sp, #0]
 8011a30:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8011a34:	f001 f942 	bl	8012cbc <__aeabi_i2f>
 8011a38:	9b01      	ldr	r3, [sp, #4]
 8011a3a:	9a00      	ldr	r2, [sp, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a42:	9200      	str	r2, [sp, #0]
 8011a44:	db20      	blt.n	8011a88 <__kernel_rem_pio2f+0x2e4>
 8011a46:	eb09 0704 	add.w	r7, r9, r4
 8011a4a:	a934      	add	r1, sp, #208	; 0xd0
 8011a4c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011a50:	2600      	movs	r6, #0
 8011a52:	2500      	movs	r5, #0
 8011a54:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011a58:	f857 1d04 	ldr.w	r1, [r7, #-4]!
 8011a5c:	3501      	adds	r5, #1
 8011a5e:	f858 0b04 	ldr.w	r0, [r8], #4
 8011a62:	f001 f97f 	bl	8012d64 <__aeabi_fmul>
 8011a66:	4601      	mov	r1, r0
 8011a68:	4630      	mov	r0, r6
 8011a6a:	f001 f873 	bl	8012b54 <__addsf3>
 8011a6e:	42a5      	cmp	r5, r4
 8011a70:	4606      	mov	r6, r0
 8011a72:	d1f1      	bne.n	8011a58 <__kernel_rem_pio2f+0x2b4>
 8011a74:	9a02      	ldr	r2, [sp, #8]
 8011a76:	f109 0901 	add.w	r9, r9, #1
 8011a7a:	f84a 6f04 	str.w	r6, [sl, #4]!
 8011a7e:	4591      	cmp	r9, r2
 8011a80:	ddd6      	ble.n	8011a30 <__kernel_rem_pio2f+0x28c>
 8011a82:	f8dd a008 	ldr.w	sl, [sp, #8]
 8011a86:	e700      	b.n	801188a <__kernel_rem_pio2f+0xe6>
 8011a88:	9a02      	ldr	r2, [sp, #8]
 8011a8a:	f109 0901 	add.w	r9, r9, #1
 8011a8e:	2600      	movs	r6, #0
 8011a90:	f84a 6f04 	str.w	r6, [sl, #4]!
 8011a94:	4591      	cmp	r9, r2
 8011a96:	ddcb      	ble.n	8011a30 <__kernel_rem_pio2f+0x28c>
 8011a98:	e7f3      	b.n	8011a82 <__kernel_rem_pio2f+0x2de>
 8011a9a:	4631      	mov	r1, r6
 8011a9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011aa0:	f001 f856 	bl	8012b50 <__aeabi_fsub>
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	2d00      	cmp	r5, #0
 8011aa8:	d085      	beq.n	80119b6 <__kernel_rem_pio2f+0x212>
 8011aaa:	9904      	ldr	r1, [sp, #16]
 8011aac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011ab0:	f000 faf8 	bl	80120a4 <scalbnf>
 8011ab4:	4601      	mov	r1, r0
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f001 f84a 	bl	8012b50 <__aeabi_fsub>
 8011abc:	4606      	mov	r6, r0
 8011abe:	e77a      	b.n	80119b6 <__kernel_rem_pio2f+0x212>
 8011ac0:	d113      	bne.n	8011aea <__kernel_rem_pio2f+0x346>
 8011ac2:	a95c      	add	r1, sp, #368	; 0x170
 8011ac4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011ac8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8011acc:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8011ad0:	e73b      	b.n	801194a <__kernel_rem_pio2f+0x1a6>
 8011ad2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011ad6:	a95c      	add	r1, sp, #368	; 0x170
 8011ad8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011adc:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8011ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011ae4:	f843 2c50 	str.w	r2, [r3, #-80]
 8011ae8:	e762      	b.n	80119b0 <__kernel_rem_pio2f+0x20c>
 8011aea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011aee:	f001 faeb 	bl	80130c8 <__aeabi_fcmpge>
 8011af2:	b920      	cbnz	r0, 8011afe <__kernel_rem_pio2f+0x35a>
 8011af4:	f04f 0b00 	mov.w	fp, #0
 8011af8:	e75d      	b.n	80119b6 <__kernel_rem_pio2f+0x212>
 8011afa:	2600      	movs	r6, #0
 8011afc:	e6b3      	b.n	8011866 <__kernel_rem_pio2f+0xc2>
 8011afe:	f04f 0b02 	mov.w	fp, #2
 8011b02:	e725      	b.n	8011950 <__kernel_rem_pio2f+0x1ac>
 8011b04:	9700      	str	r7, [sp, #0]
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d134      	bne.n	8011b74 <__kernel_rem_pio2f+0x3d0>
 8011b0a:	9a04      	ldr	r2, [sp, #16]
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	4251      	negs	r1, r2
 8011b10:	f000 fac8 	bl	80120a4 <scalbnf>
 8011b14:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011b18:	4604      	mov	r4, r0
 8011b1a:	f001 fad5 	bl	80130c8 <__aeabi_fcmpge>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	f000 814f 	beq.w	8011dc2 <__kernel_rem_pio2f+0x61e>
 8011b24:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f001 f91b 	bl	8012d64 <__aeabi_fmul>
 8011b2e:	ab5c      	add	r3, sp, #368	; 0x170
 8011b30:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8011b34:	f001 fadc 	bl	80130f0 <__aeabi_f2iz>
 8011b38:	f001 f8c0 	bl	8012cbc <__aeabi_i2f>
 8011b3c:	f10a 0a01 	add.w	sl, sl, #1
 8011b40:	aa5c      	add	r2, sp, #368	; 0x170
 8011b42:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011b46:	eb02 078a 	add.w	r7, r2, sl, lsl #2
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	f001 f90a 	bl	8012d64 <__aeabi_fmul>
 8011b50:	4601      	mov	r1, r0
 8011b52:	4620      	mov	r0, r4
 8011b54:	f000 fffc 	bl	8012b50 <__aeabi_fsub>
 8011b58:	9b04      	ldr	r3, [sp, #16]
 8011b5a:	3308      	adds	r3, #8
 8011b5c:	9304      	str	r3, [sp, #16]
 8011b5e:	f001 fac7 	bl	80130f0 <__aeabi_f2iz>
 8011b62:	f845 0c50 	str.w	r0, [r5, #-80]
 8011b66:	4630      	mov	r0, r6
 8011b68:	f001 fac2 	bl	80130f0 <__aeabi_f2iz>
 8011b6c:	f847 0c50 	str.w	r0, [r7, #-80]
 8011b70:	e017      	b.n	8011ba2 <__kernel_rem_pio2f+0x3fe>
 8011b72:	9700      	str	r7, [sp, #0]
 8011b74:	9b04      	ldr	r3, [sp, #16]
 8011b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b7a:	ac5c      	add	r4, sp, #368	; 0x170
 8011b7c:	3b08      	subs	r3, #8
 8011b7e:	9304      	str	r3, [sp, #16]
 8011b80:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8011b84:	18e2      	adds	r2, r4, r3
 8011b86:	f852 2c50 	ldr.w	r2, [r2, #-80]
 8011b8a:	b952      	cbnz	r2, 8011ba2 <__kernel_rem_pio2f+0x3fe>
 8011b8c:	a948      	add	r1, sp, #288	; 0x120
 8011b8e:	9a04      	ldr	r2, [sp, #16]
 8011b90:	18cb      	adds	r3, r1, r3
 8011b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b9a:	3a08      	subs	r2, #8
 8011b9c:	2900      	cmp	r1, #0
 8011b9e:	d0f8      	beq.n	8011b92 <__kernel_rem_pio2f+0x3ee>
 8011ba0:	9204      	str	r2, [sp, #16]
 8011ba2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011ba6:	9904      	ldr	r1, [sp, #16]
 8011ba8:	f000 fa7c 	bl	80120a4 <scalbnf>
 8011bac:	f1ba 0f00 	cmp.w	sl, #0
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	db4c      	blt.n	8011c4e <__kernel_rem_pio2f+0x4aa>
 8011bb4:	f10a 0601 	add.w	r6, sl, #1
 8011bb8:	9a05      	ldr	r2, [sp, #20]
 8011bba:	af48      	add	r7, sp, #288	; 0x120
 8011bbc:	00b6      	lsls	r6, r6, #2
 8011bbe:	19bc      	adds	r4, r7, r6
 8011bc0:	1996      	adds	r6, r2, r6
 8011bc2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8011bc6:	f001 f879 	bl	8012cbc <__aeabi_i2f>
 8011bca:	4629      	mov	r1, r5
 8011bcc:	f001 f8ca 	bl	8012d64 <__aeabi_fmul>
 8011bd0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8011bd4:	f846 0d04 	str.w	r0, [r6, #-4]!
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f001 f8c3 	bl	8012d64 <__aeabi_fmul>
 8011bde:	42bc      	cmp	r4, r7
 8011be0:	4605      	mov	r5, r0
 8011be2:	d1ee      	bne.n	8011bc2 <__kernel_rem_pio2f+0x41e>
 8011be4:	f10a 39ff 	add.w	r9, sl, #4294967295
 8011be8:	f8cd a004 	str.w	sl, [sp, #4]
 8011bec:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011bf0:	f04f 0800 	mov.w	r8, #0
 8011bf4:	f1ba 0f00 	cmp.w	sl, #0
 8011bf8:	f2c0 80d8 	blt.w	8011dac <__kernel_rem_pio2f+0x608>
 8011bfc:	f1b8 0f00 	cmp.w	r8, #0
 8011c00:	f2c0 80d4 	blt.w	8011dac <__kernel_rem_pio2f+0x608>
 8011c04:	9905      	ldr	r1, [sp, #20]
 8011c06:	2500      	movs	r5, #0
 8011c08:	4f74      	ldr	r7, [pc, #464]	; (8011ddc <__kernel_rem_pio2f+0x638>)
 8011c0a:	2400      	movs	r4, #0
 8011c0c:	eb01 0689 	add.w	r6, r1, r9, lsl #2
 8011c10:	e001      	b.n	8011c16 <__kernel_rem_pio2f+0x472>
 8011c12:	4544      	cmp	r4, r8
 8011c14:	dc0d      	bgt.n	8011c32 <__kernel_rem_pio2f+0x48e>
 8011c16:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8011c1a:	3401      	adds	r4, #1
 8011c1c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8011c20:	f001 f8a0 	bl	8012d64 <__aeabi_fmul>
 8011c24:	4601      	mov	r1, r0
 8011c26:	4628      	mov	r0, r5
 8011c28:	f000 ff94 	bl	8012b54 <__addsf3>
 8011c2c:	45a2      	cmp	sl, r4
 8011c2e:	4605      	mov	r5, r0
 8011c30:	daef      	bge.n	8011c12 <__kernel_rem_pio2f+0x46e>
 8011c32:	ac5c      	add	r4, sp, #368	; 0x170
 8011c34:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c38:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 8011c3c:	f119 0f02 	cmn.w	r9, #2
 8011c40:	f108 0801 	add.w	r8, r8, #1
 8011c44:	f843 5cf0 	str.w	r5, [r3, #-240]
 8011c48:	d1d4      	bne.n	8011bf4 <__kernel_rem_pio2f+0x450>
 8011c4a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8011c4e:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8011c50:	2a03      	cmp	r2, #3
 8011c52:	d813      	bhi.n	8011c7c <__kernel_rem_pio2f+0x4d8>
 8011c54:	e8df f002 	tbb	[pc, r2]
 8011c58:	18656593 	.word	0x18656593
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	f1bb 0f00 	cmp.w	fp, #0
 8011c62:	d057      	beq.n	8011d14 <__kernel_rem_pio2f+0x570>
 8011c64:	9907      	ldr	r1, [sp, #28]
 8011c66:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011c6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c72:	6088      	str	r0, [r1, #8]
 8011c74:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8011c78:	604b      	str	r3, [r1, #4]
 8011c7a:	600a      	str	r2, [r1, #0]
 8011c7c:	9a00      	ldr	r2, [sp, #0]
 8011c7e:	f002 0007 	and.w	r0, r2, #7
 8011c82:	b05d      	add	sp, #372	; 0x174
 8011c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c88:	f1ba 0f00 	cmp.w	sl, #0
 8011c8c:	dde6      	ble.n	8011c5c <__kernel_rem_pio2f+0x4b8>
 8011c8e:	ad20      	add	r5, sp, #128	; 0x80
 8011c90:	eb05 048a 	add.w	r4, r5, sl, lsl #2
 8011c94:	f854 8c04 	ldr.w	r8, [r4, #-4]
 8011c98:	f854 7904 	ldr.w	r7, [r4], #-4
 8011c9c:	4640      	mov	r0, r8
 8011c9e:	4639      	mov	r1, r7
 8011ca0:	f000 ff58 	bl	8012b54 <__addsf3>
 8011ca4:	4606      	mov	r6, r0
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	4631      	mov	r1, r6
 8011caa:	f000 ff51 	bl	8012b50 <__aeabi_fsub>
 8011cae:	4601      	mov	r1, r0
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	f000 ff4f 	bl	8012b54 <__addsf3>
 8011cb6:	42ac      	cmp	r4, r5
 8011cb8:	6026      	str	r6, [r4, #0]
 8011cba:	6060      	str	r0, [r4, #4]
 8011cbc:	d1ea      	bne.n	8011c94 <__kernel_rem_pio2f+0x4f0>
 8011cbe:	f1ba 0f01 	cmp.w	sl, #1
 8011cc2:	ddcb      	ble.n	8011c5c <__kernel_rem_pio2f+0x4b8>
 8011cc4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011cc8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8011ccc:	f854 8904 	ldr.w	r8, [r4], #-4
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	68a7      	ldr	r7, [r4, #8]
 8011cd4:	4639      	mov	r1, r7
 8011cd6:	f000 ff3d 	bl	8012b54 <__addsf3>
 8011cda:	4606      	mov	r6, r0
 8011cdc:	4640      	mov	r0, r8
 8011cde:	4631      	mov	r1, r6
 8011ce0:	f000 ff36 	bl	8012b50 <__aeabi_fsub>
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	4638      	mov	r0, r7
 8011ce8:	f000 ff34 	bl	8012b54 <__addsf3>
 8011cec:	42ac      	cmp	r4, r5
 8011cee:	6066      	str	r6, [r4, #4]
 8011cf0:	60a0      	str	r0, [r4, #8]
 8011cf2:	d1eb      	bne.n	8011ccc <__kernel_rem_pio2f+0x528>
 8011cf4:	f10a 0a01 	add.w	sl, sl, #1
 8011cf8:	f104 0508 	add.w	r5, r4, #8
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8011d02:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011d06:	f000 ff25 	bl	8012b54 <__addsf3>
 8011d0a:	42ac      	cmp	r4, r5
 8011d0c:	d1f9      	bne.n	8011d02 <__kernel_rem_pio2f+0x55e>
 8011d0e:	f1bb 0f00 	cmp.w	fp, #0
 8011d12:	d1a7      	bne.n	8011c64 <__kernel_rem_pio2f+0x4c0>
 8011d14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d18:	9c07      	ldr	r4, [sp, #28]
 8011d1a:	60a0      	str	r0, [r4, #8]
 8011d1c:	6022      	str	r2, [r4, #0]
 8011d1e:	6063      	str	r3, [r4, #4]
 8011d20:	e7ac      	b.n	8011c7c <__kernel_rem_pio2f+0x4d8>
 8011d22:	f1ba 0f00 	cmp.w	sl, #0
 8011d26:	db57      	blt.n	8011dd8 <__kernel_rem_pio2f+0x634>
 8011d28:	f10a 0401 	add.w	r4, sl, #1
 8011d2c:	ad20      	add	r5, sp, #128	; 0x80
 8011d2e:	2000      	movs	r0, #0
 8011d30:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8011d34:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011d38:	f000 ff0c 	bl	8012b54 <__addsf3>
 8011d3c:	42ac      	cmp	r4, r5
 8011d3e:	d1f9      	bne.n	8011d34 <__kernel_rem_pio2f+0x590>
 8011d40:	f1bb 0f00 	cmp.w	fp, #0
 8011d44:	d034      	beq.n	8011db0 <__kernel_rem_pio2f+0x60c>
 8011d46:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8011d4a:	9907      	ldr	r1, [sp, #28]
 8011d4c:	600b      	str	r3, [r1, #0]
 8011d4e:	4601      	mov	r1, r0
 8011d50:	9820      	ldr	r0, [sp, #128]	; 0x80
 8011d52:	f000 fefd 	bl	8012b50 <__aeabi_fsub>
 8011d56:	f1ba 0f00 	cmp.w	sl, #0
 8011d5a:	dd08      	ble.n	8011d6e <__kernel_rem_pio2f+0x5ca>
 8011d5c:	ac20      	add	r4, sp, #128	; 0x80
 8011d5e:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8011d62:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8011d66:	f000 fef5 	bl	8012b54 <__addsf3>
 8011d6a:	4554      	cmp	r4, sl
 8011d6c:	d1f9      	bne.n	8011d62 <__kernel_rem_pio2f+0x5be>
 8011d6e:	f1bb 0f00 	cmp.w	fp, #0
 8011d72:	d001      	beq.n	8011d78 <__kernel_rem_pio2f+0x5d4>
 8011d74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011d78:	9a07      	ldr	r2, [sp, #28]
 8011d7a:	6050      	str	r0, [r2, #4]
 8011d7c:	e77e      	b.n	8011c7c <__kernel_rem_pio2f+0x4d8>
 8011d7e:	f1ba 0f00 	cmp.w	sl, #0
 8011d82:	db27      	blt.n	8011dd4 <__kernel_rem_pio2f+0x630>
 8011d84:	f10a 0401 	add.w	r4, sl, #1
 8011d88:	ad20      	add	r5, sp, #128	; 0x80
 8011d8a:	2000      	movs	r0, #0
 8011d8c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8011d90:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011d94:	f000 fede 	bl	8012b54 <__addsf3>
 8011d98:	42ac      	cmp	r4, r5
 8011d9a:	d1f9      	bne.n	8011d90 <__kernel_rem_pio2f+0x5ec>
 8011d9c:	f1bb 0f00 	cmp.w	fp, #0
 8011da0:	d001      	beq.n	8011da6 <__kernel_rem_pio2f+0x602>
 8011da2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011da6:	9c07      	ldr	r4, [sp, #28]
 8011da8:	6020      	str	r0, [r4, #0]
 8011daa:	e767      	b.n	8011c7c <__kernel_rem_pio2f+0x4d8>
 8011dac:	2500      	movs	r5, #0
 8011dae:	e740      	b.n	8011c32 <__kernel_rem_pio2f+0x48e>
 8011db0:	4603      	mov	r3, r0
 8011db2:	e7ca      	b.n	8011d4a <__kernel_rem_pio2f+0x5a6>
 8011db4:	2301      	movs	r3, #1
 8011db6:	e625      	b.n	8011a04 <__kernel_rem_pio2f+0x260>
 8011db8:	2500      	movs	r5, #0
 8011dba:	e5e6      	b.n	801198a <__kernel_rem_pio2f+0x1e6>
 8011dbc:	ab0c      	add	r3, sp, #48	; 0x30
 8011dbe:	9305      	str	r3, [sp, #20]
 8011dc0:	e557      	b.n	8011872 <__kernel_rem_pio2f+0xce>
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	a95c      	add	r1, sp, #368	; 0x170
 8011dc6:	eb01 048a 	add.w	r4, r1, sl, lsl #2
 8011dca:	f001 f991 	bl	80130f0 <__aeabi_f2iz>
 8011dce:	f844 0c50 	str.w	r0, [r4, #-80]
 8011dd2:	e6e6      	b.n	8011ba2 <__kernel_rem_pio2f+0x3fe>
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	e7e1      	b.n	8011d9c <__kernel_rem_pio2f+0x5f8>
 8011dd8:	2000      	movs	r0, #0
 8011dda:	e7b1      	b.n	8011d40 <__kernel_rem_pio2f+0x59c>
 8011ddc:	0801b80c 	.word	0x0801b80c

08011de0 <__kernel_sinf>:
 8011de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011de4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011de8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011dec:	4604      	mov	r4, r0
 8011dee:	460d      	mov	r5, r1
 8011df0:	4690      	mov	r8, r2
 8011df2:	da03      	bge.n	8011dfc <__kernel_sinf+0x1c>
 8011df4:	f001 f97c 	bl	80130f0 <__aeabi_f2iz>
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	d059      	beq.n	8011eb0 <__kernel_sinf+0xd0>
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 ffb0 	bl	8012d64 <__aeabi_fmul>
 8011e04:	4621      	mov	r1, r4
 8011e06:	4606      	mov	r6, r0
 8011e08:	f000 ffac 	bl	8012d64 <__aeabi_fmul>
 8011e0c:	f64c 11d3 	movw	r1, #51667	; 0xc9d3
 8011e10:	f6c2 712e 	movt	r1, #12078	; 0x2f2e
 8011e14:	4607      	mov	r7, r0
 8011e16:	4630      	mov	r0, r6
 8011e18:	f000 ffa4 	bl	8012d64 <__aeabi_fmul>
 8011e1c:	f642 7134 	movw	r1, #12084	; 0x2f34
 8011e20:	f2c3 21d7 	movt	r1, #13015	; 0x32d7
 8011e24:	f000 fe94 	bl	8012b50 <__aeabi_fsub>
 8011e28:	4631      	mov	r1, r6
 8011e2a:	f000 ff9b 	bl	8012d64 <__aeabi_fmul>
 8011e2e:	f64e 711b 	movw	r1, #61211	; 0xef1b
 8011e32:	f2c3 6138 	movt	r1, #13880	; 0x3638
 8011e36:	f000 fe8d 	bl	8012b54 <__addsf3>
 8011e3a:	4631      	mov	r1, r6
 8011e3c:	f000 ff92 	bl	8012d64 <__aeabi_fmul>
 8011e40:	f640 5101 	movw	r1, #3329	; 0xd01
 8011e44:	f6c3 1150 	movt	r1, #14672	; 0x3950
 8011e48:	f000 fe82 	bl	8012b50 <__aeabi_fsub>
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	f000 ff89 	bl	8012d64 <__aeabi_fmul>
 8011e52:	f648 0189 	movw	r1, #34953	; 0x8889
 8011e56:	f6c3 4108 	movt	r1, #15368	; 0x3c08
 8011e5a:	f000 fe7b 	bl	8012b54 <__addsf3>
 8011e5e:	4681      	mov	r9, r0
 8011e60:	f1b8 0f00 	cmp.w	r8, #0
 8011e64:	d027      	beq.n	8011eb6 <__kernel_sinf+0xd6>
 8011e66:	4628      	mov	r0, r5
 8011e68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011e6c:	f000 ff7a 	bl	8012d64 <__aeabi_fmul>
 8011e70:	4649      	mov	r1, r9
 8011e72:	4680      	mov	r8, r0
 8011e74:	4638      	mov	r0, r7
 8011e76:	f000 ff75 	bl	8012d64 <__aeabi_fmul>
 8011e7a:	4601      	mov	r1, r0
 8011e7c:	4640      	mov	r0, r8
 8011e7e:	f000 fe67 	bl	8012b50 <__aeabi_fsub>
 8011e82:	4631      	mov	r1, r6
 8011e84:	f000 ff6e 	bl	8012d64 <__aeabi_fmul>
 8011e88:	4629      	mov	r1, r5
 8011e8a:	f000 fe61 	bl	8012b50 <__aeabi_fsub>
 8011e8e:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8011e92:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 8011e96:	4605      	mov	r5, r0
 8011e98:	4638      	mov	r0, r7
 8011e9a:	f000 ff63 	bl	8012d64 <__aeabi_fmul>
 8011e9e:	4601      	mov	r1, r0
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	f000 fe57 	bl	8012b54 <__addsf3>
 8011ea6:	4601      	mov	r1, r0
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	f000 fe51 	bl	8012b50 <__aeabi_fsub>
 8011eae:	4604      	mov	r4, r0
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	4630      	mov	r0, r6
 8011eba:	f000 ff53 	bl	8012d64 <__aeabi_fmul>
 8011ebe:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8011ec2:	f6c3 612a 	movt	r1, #15914	; 0x3e2a
 8011ec6:	f000 fe43 	bl	8012b50 <__aeabi_fsub>
 8011eca:	4639      	mov	r1, r7
 8011ecc:	f000 ff4a 	bl	8012d64 <__aeabi_fmul>
 8011ed0:	4601      	mov	r1, r0
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 fe3e 	bl	8012b54 <__addsf3>
 8011ed8:	4604      	mov	r4, r0
 8011eda:	4620      	mov	r0, r4
 8011edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011ee0 <__fpclassifyd>:
 8011ee0:	ea50 0301 	orrs.w	r3, r0, r1
 8011ee4:	b410      	push	{r4}
 8011ee6:	d03c      	beq.n	8011f62 <__fpclassifyd+0x82>
 8011ee8:	f1d0 0201 	rsbs	r2, r0, #1
 8011eec:	bf38      	it	cc
 8011eee:	2200      	movcc	r2, #0
 8011ef0:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8011ef4:	bf14      	ite	ne
 8011ef6:	2300      	movne	r3, #0
 8011ef8:	f002 0301 	andeq.w	r3, r2, #1
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d130      	bne.n	8011f62 <__fpclassifyd+0x82>
 8011f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f04:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 8011f08:	f6c7 73df 	movt	r3, #32735	; 0x7fdf
 8011f0c:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 8011f10:	4298      	cmp	r0, r3
 8011f12:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 8011f16:	bf8c      	ite	hi
 8011f18:	2000      	movhi	r0, #0
 8011f1a:	2001      	movls	r0, #1
 8011f1c:	429c      	cmp	r4, r3
 8011f1e:	bf8c      	ite	hi
 8011f20:	4603      	movhi	r3, r0
 8011f22:	f040 0301 	orrls.w	r3, r0, #1
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d120      	bne.n	8011f6c <__fpclassifyd+0x8c>
 8011f2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8011f2e:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8011f32:	bf2c      	ite	cs
 8011f34:	2300      	movcs	r3, #0
 8011f36:	2301      	movcc	r3, #1
 8011f38:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8011f3c:	bf38      	it	cc
 8011f3e:	f043 0301 	orrcc.w	r3, r3, #1
 8011f42:	b98b      	cbnz	r3, 8011f68 <__fpclassifyd+0x88>
 8011f44:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
 8011f48:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8011f4c:	bf14      	ite	ne
 8011f4e:	2000      	movne	r0, #0
 8011f50:	2001      	moveq	r0, #1
 8011f52:	4299      	cmp	r1, r3
 8011f54:	bf14      	ite	ne
 8011f56:	4601      	movne	r1, r0
 8011f58:	f040 0101 	orreq.w	r1, r0, #1
 8011f5c:	ea02 0001 	and.w	r0, r2, r1
 8011f60:	e000      	b.n	8011f64 <__fpclassifyd+0x84>
 8011f62:	2002      	movs	r0, #2
 8011f64:	bc10      	pop	{r4}
 8011f66:	4770      	bx	lr
 8011f68:	2003      	movs	r0, #3
 8011f6a:	e7fb      	b.n	8011f64 <__fpclassifyd+0x84>
 8011f6c:	2004      	movs	r0, #4
 8011f6e:	e7f9      	b.n	8011f64 <__fpclassifyd+0x84>

08011f70 <matherr>:
 8011f70:	2000      	movs	r0, #0
 8011f72:	4770      	bx	lr

08011f74 <nan>:
 8011f74:	2100      	movs	r1, #0
 8011f76:	2000      	movs	r0, #0
 8011f78:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop

08011f80 <fabsf>:
 8011f80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop

08011f88 <floorf>:
 8011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8c:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8011f90:	4601      	mov	r1, r0
 8011f92:	4604      	mov	r4, r0
 8011f94:	0df5      	lsrs	r5, r6, #23
 8011f96:	3d7f      	subs	r5, #127	; 0x7f
 8011f98:	2d16      	cmp	r5, #22
 8011f9a:	dc1a      	bgt.n	8011fd2 <floorf+0x4a>
 8011f9c:	2d00      	cmp	r5, #0
 8011f9e:	4680      	mov	r8, r0
 8011fa0:	db20      	blt.n	8011fe4 <floorf+0x5c>
 8011fa2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8011fa6:	f2c0 077f 	movt	r7, #127	; 0x7f
 8011faa:	412f      	asrs	r7, r5
 8011fac:	4207      	tst	r7, r0
 8011fae:	d00d      	beq.n	8011fcc <floorf+0x44>
 8011fb0:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8011fb4:	f2c7 1149 	movt	r1, #29001	; 0x7149
 8011fb8:	f000 fdcc 	bl	8012b54 <__addsf3>
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	f001 f88d 	bl	80130dc <__aeabi_fcmpgt>
 8011fc2:	b1e8      	cbz	r0, 8012000 <floorf+0x78>
 8011fc4:	2c00      	cmp	r4, #0
 8011fc6:	db1f      	blt.n	8012008 <floorf+0x80>
 8011fc8:	ea28 0107 	bic.w	r1, r8, r7
 8011fcc:	4608      	mov	r0, r1
 8011fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fd2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011fd6:	d3f9      	bcc.n	8011fcc <floorf+0x44>
 8011fd8:	f000 fdbc 	bl	8012b54 <__addsf3>
 8011fdc:	4601      	mov	r1, r0
 8011fde:	4608      	mov	r0, r1
 8011fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe4:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8011fe8:	f2c7 1149 	movt	r1, #29001	; 0x7149
 8011fec:	f000 fdb2 	bl	8012b54 <__addsf3>
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	f001 f873 	bl	80130dc <__aeabi_fcmpgt>
 8011ff6:	b118      	cbz	r0, 8012000 <floorf+0x78>
 8011ff8:	2c00      	cmp	r4, #0
 8011ffa:	db0e      	blt.n	801201a <floorf+0x92>
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	e7e5      	b.n	8011fcc <floorf+0x44>
 8012000:	4621      	mov	r1, r4
 8012002:	4608      	mov	r0, r1
 8012004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012008:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801200c:	fa53 f505 	asrs.w	r5, r3, r5
 8012010:	eb04 0805 	add.w	r8, r4, r5
 8012014:	ea28 0107 	bic.w	r1, r8, r7
 8012018:	e7d8      	b.n	8011fcc <floorf+0x44>
 801201a:	2100      	movs	r1, #0
 801201c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
 8012020:	2e00      	cmp	r6, #0
 8012022:	bf08      	it	eq
 8012024:	4621      	moveq	r1, r4
 8012026:	e7d1      	b.n	8011fcc <floorf+0x44>

08012028 <__fpclassifyf>:
 8012028:	f1d0 0301 	rsbs	r3, r0, #1
 801202c:	bf38      	it	cc
 801202e:	2300      	movcc	r3, #0
 8012030:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8012034:	bf08      	it	eq
 8012036:	f043 0301 	orreq.w	r3, r3, #1
 801203a:	2b00      	cmp	r3, #0
 801203c:	d12e      	bne.n	801209c <__fpclassifyf+0x74>
 801203e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8012042:	f100 42ff 	add.w	r2, r0, #2139095040	; 0x7f800000
 8012046:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801204a:	bf2c      	ite	cs
 801204c:	2300      	movcs	r3, #0
 801204e:	2301      	movcc	r3, #1
 8012050:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8012054:	bf38      	it	cc
 8012056:	f043 0301 	orrcc.w	r3, r3, #1
 801205a:	b9eb      	cbnz	r3, 8012098 <__fpclassifyf+0x70>
 801205c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8012060:	1e41      	subs	r1, r0, #1
 8012062:	f2c0 037f 	movt	r3, #127	; 0x7f
 8012066:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801206a:	3a01      	subs	r2, #1
 801206c:	4299      	cmp	r1, r3
 801206e:	bf8c      	ite	hi
 8012070:	2100      	movhi	r1, #0
 8012072:	2101      	movls	r1, #1
 8012074:	429a      	cmp	r2, r3
 8012076:	bf8c      	ite	hi
 8012078:	460b      	movhi	r3, r1
 801207a:	f041 0301 	orrls.w	r3, r1, #1
 801207e:	b97b      	cbnz	r3, 80120a0 <__fpclassifyf+0x78>
 8012080:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 8012084:	bf14      	ite	ne
 8012086:	2300      	movne	r3, #0
 8012088:	2301      	moveq	r3, #1
 801208a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801208e:	bf14      	ite	ne
 8012090:	4618      	movne	r0, r3
 8012092:	f043 0001 	orreq.w	r0, r3, #1
 8012096:	4770      	bx	lr
 8012098:	2004      	movs	r0, #4
 801209a:	4770      	bx	lr
 801209c:	2002      	movs	r0, #2
 801209e:	4770      	bx	lr
 80120a0:	2003      	movs	r0, #3
 80120a2:	4770      	bx	lr

080120a4 <scalbnf>:
 80120a4:	b510      	push	{r4, lr}
 80120a6:	460c      	mov	r4, r1
 80120a8:	f030 4100 	bics.w	r1, r0, #2147483648	; 0x80000000
 80120ac:	4603      	mov	r3, r0
 80120ae:	4602      	mov	r2, r0
 80120b0:	d025      	beq.n	80120fe <scalbnf+0x5a>
 80120b2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80120b6:	d224      	bcs.n	8012102 <scalbnf+0x5e>
 80120b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80120bc:	d327      	bcc.n	801210e <scalbnf+0x6a>
 80120be:	0dc9      	lsrs	r1, r1, #23
 80120c0:	1909      	adds	r1, r1, r4
 80120c2:	29fe      	cmp	r1, #254	; 0xfe
 80120c4:	dc33      	bgt.n	801212e <scalbnf+0x8a>
 80120c6:	2900      	cmp	r1, #0
 80120c8:	bfc4      	itt	gt
 80120ca:	f022 42ff 	bicgt.w	r2, r2, #2139095040	; 0x7f800000
 80120ce:	ea42 53c1 	orrgt.w	r3, r2, r1, lsl #23
 80120d2:	dc14      	bgt.n	80120fe <scalbnf+0x5a>
 80120d4:	f111 0f16 	cmn.w	r1, #22
 80120d8:	da38      	bge.n	801214c <scalbnf+0xa8>
 80120da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80120de:	4294      	cmp	r4, r2
 80120e0:	dc25      	bgt.n	801212e <scalbnf+0x8a>
 80120e2:	f244 2060 	movw	r0, #16992	; 0x4260
 80120e6:	4619      	mov	r1, r3
 80120e8:	f6c0 50a2 	movt	r0, #3490	; 0xda2
 80120ec:	f000 f83a 	bl	8012164 <copysignf>
 80120f0:	f244 2160 	movw	r1, #16992	; 0x4260
 80120f4:	f6c0 51a2 	movt	r1, #3490	; 0xda2
 80120f8:	f000 fe34 	bl	8012d64 <__aeabi_fmul>
 80120fc:	4603      	mov	r3, r0
 80120fe:	4618      	mov	r0, r3
 8012100:	bd10      	pop	{r4, pc}
 8012102:	4601      	mov	r1, r0
 8012104:	f000 fd26 	bl	8012b54 <__addsf3>
 8012108:	4603      	mov	r3, r0
 801210a:	4618      	mov	r0, r3
 801210c:	bd10      	pop	{r4, pc}
 801210e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8012112:	f000 fe27 	bl	8012d64 <__aeabi_fmul>
 8012116:	f643 42b0 	movw	r2, #15536	; 0x3cb0
 801211a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 801211e:	4294      	cmp	r4, r2
 8012120:	4603      	mov	r3, r0
 8012122:	dbe5      	blt.n	80120f0 <scalbnf+0x4c>
 8012124:	f3c0 51c7 	ubfx	r1, r0, #23, #8
 8012128:	4602      	mov	r2, r0
 801212a:	3919      	subs	r1, #25
 801212c:	e7c8      	b.n	80120c0 <scalbnf+0x1c>
 801212e:	f24f 20ca 	movw	r0, #62154	; 0xf2ca
 8012132:	4619      	mov	r1, r3
 8012134:	f2c7 1049 	movt	r0, #29001	; 0x7149
 8012138:	f000 f814 	bl	8012164 <copysignf>
 801213c:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8012140:	f2c7 1149 	movt	r1, #29001	; 0x7149
 8012144:	f000 fe0e 	bl	8012d64 <__aeabi_fmul>
 8012148:	4603      	mov	r3, r0
 801214a:	e7d8      	b.n	80120fe <scalbnf+0x5a>
 801214c:	f101 0019 	add.w	r0, r1, #25
 8012150:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8012154:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8012158:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 801215c:	f000 fe02 	bl	8012d64 <__aeabi_fmul>
 8012160:	4603      	mov	r3, r0
 8012162:	e7cc      	b.n	80120fe <scalbnf+0x5a>

08012164 <copysignf>:
 8012164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012168:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801216c:	ea41 0000 	orr.w	r0, r1, r0
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop

08012174 <__aeabi_drsub>:
 8012174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8012178:	e002      	b.n	8012180 <__adddf3>
 801217a:	bf00      	nop

0801217c <__aeabi_dsub>:
 801217c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08012180 <__adddf3>:
 8012180:	b530      	push	{r4, r5, lr}
 8012182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8012186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801218a:	ea94 0f05 	teq	r4, r5
 801218e:	bf08      	it	eq
 8012190:	ea90 0f02 	teqeq	r0, r2
 8012194:	bf1f      	itttt	ne
 8012196:	ea54 0c00 	orrsne.w	ip, r4, r0
 801219a:	ea55 0c02 	orrsne.w	ip, r5, r2
 801219e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80121a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80121a6:	f000 80e2 	beq.w	801236e <__adddf3+0x1ee>
 80121aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80121ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80121b2:	bfb8      	it	lt
 80121b4:	426d      	neglt	r5, r5
 80121b6:	dd0c      	ble.n	80121d2 <__adddf3+0x52>
 80121b8:	442c      	add	r4, r5
 80121ba:	ea80 0202 	eor.w	r2, r0, r2
 80121be:	ea81 0303 	eor.w	r3, r1, r3
 80121c2:	ea82 0000 	eor.w	r0, r2, r0
 80121c6:	ea83 0101 	eor.w	r1, r3, r1
 80121ca:	ea80 0202 	eor.w	r2, r0, r2
 80121ce:	ea81 0303 	eor.w	r3, r1, r3
 80121d2:	2d36      	cmp	r5, #54	; 0x36
 80121d4:	bf88      	it	hi
 80121d6:	bd30      	pophi	{r4, r5, pc}
 80121d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80121dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80121e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80121e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80121e8:	d002      	beq.n	80121f0 <__adddf3+0x70>
 80121ea:	4240      	negs	r0, r0
 80121ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80121f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80121f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80121f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80121fc:	d002      	beq.n	8012204 <__adddf3+0x84>
 80121fe:	4252      	negs	r2, r2
 8012200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8012204:	ea94 0f05 	teq	r4, r5
 8012208:	f000 80a7 	beq.w	801235a <__adddf3+0x1da>
 801220c:	f1a4 0401 	sub.w	r4, r4, #1
 8012210:	f1d5 0e20 	rsbs	lr, r5, #32
 8012214:	db0d      	blt.n	8012232 <__adddf3+0xb2>
 8012216:	fa02 fc0e 	lsl.w	ip, r2, lr
 801221a:	fa22 f205 	lsr.w	r2, r2, r5
 801221e:	1880      	adds	r0, r0, r2
 8012220:	f141 0100 	adc.w	r1, r1, #0
 8012224:	fa03 f20e 	lsl.w	r2, r3, lr
 8012228:	1880      	adds	r0, r0, r2
 801222a:	fa43 f305 	asr.w	r3, r3, r5
 801222e:	4159      	adcs	r1, r3
 8012230:	e00e      	b.n	8012250 <__adddf3+0xd0>
 8012232:	f1a5 0520 	sub.w	r5, r5, #32
 8012236:	f10e 0e20 	add.w	lr, lr, #32
 801223a:	2a01      	cmp	r2, #1
 801223c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8012240:	bf28      	it	cs
 8012242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8012246:	fa43 f305 	asr.w	r3, r3, r5
 801224a:	18c0      	adds	r0, r0, r3
 801224c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8012250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8012254:	d507      	bpl.n	8012266 <__adddf3+0xe6>
 8012256:	f04f 0e00 	mov.w	lr, #0
 801225a:	f1dc 0c00 	rsbs	ip, ip, #0
 801225e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8012262:	eb6e 0101 	sbc.w	r1, lr, r1
 8012266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801226a:	d31b      	bcc.n	80122a4 <__adddf3+0x124>
 801226c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8012270:	d30c      	bcc.n	801228c <__adddf3+0x10c>
 8012272:	0849      	lsrs	r1, r1, #1
 8012274:	ea5f 0030 	movs.w	r0, r0, rrx
 8012278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801227c:	f104 0401 	add.w	r4, r4, #1
 8012280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8012284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8012288:	f080 809a 	bcs.w	80123c0 <__adddf3+0x240>
 801228c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8012290:	bf08      	it	eq
 8012292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8012296:	f150 0000 	adcs.w	r0, r0, #0
 801229a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801229e:	ea41 0105 	orr.w	r1, r1, r5
 80122a2:	bd30      	pop	{r4, r5, pc}
 80122a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80122a8:	4140      	adcs	r0, r0
 80122aa:	eb41 0101 	adc.w	r1, r1, r1
 80122ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80122b2:	f1a4 0401 	sub.w	r4, r4, #1
 80122b6:	d1e9      	bne.n	801228c <__adddf3+0x10c>
 80122b8:	f091 0f00 	teq	r1, #0
 80122bc:	bf04      	itt	eq
 80122be:	4601      	moveq	r1, r0
 80122c0:	2000      	moveq	r0, #0
 80122c2:	fab1 f381 	clz	r3, r1
 80122c6:	bf08      	it	eq
 80122c8:	3320      	addeq	r3, #32
 80122ca:	f1a3 030b 	sub.w	r3, r3, #11
 80122ce:	f1b3 0220 	subs.w	r2, r3, #32
 80122d2:	da0c      	bge.n	80122ee <__adddf3+0x16e>
 80122d4:	320c      	adds	r2, #12
 80122d6:	dd08      	ble.n	80122ea <__adddf3+0x16a>
 80122d8:	f102 0c14 	add.w	ip, r2, #20
 80122dc:	f1c2 020c 	rsb	r2, r2, #12
 80122e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80122e4:	fa21 f102 	lsr.w	r1, r1, r2
 80122e8:	e00c      	b.n	8012304 <__adddf3+0x184>
 80122ea:	f102 0214 	add.w	r2, r2, #20
 80122ee:	bfd8      	it	le
 80122f0:	f1c2 0c20 	rsble	ip, r2, #32
 80122f4:	fa01 f102 	lsl.w	r1, r1, r2
 80122f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80122fc:	bfdc      	itt	le
 80122fe:	ea41 010c 	orrle.w	r1, r1, ip
 8012302:	4090      	lslle	r0, r2
 8012304:	1ae4      	subs	r4, r4, r3
 8012306:	bfa2      	ittt	ge
 8012308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801230c:	4329      	orrge	r1, r5
 801230e:	bd30      	popge	{r4, r5, pc}
 8012310:	ea6f 0404 	mvn.w	r4, r4
 8012314:	3c1f      	subs	r4, #31
 8012316:	da1c      	bge.n	8012352 <__adddf3+0x1d2>
 8012318:	340c      	adds	r4, #12
 801231a:	dc0e      	bgt.n	801233a <__adddf3+0x1ba>
 801231c:	f104 0414 	add.w	r4, r4, #20
 8012320:	f1c4 0220 	rsb	r2, r4, #32
 8012324:	fa20 f004 	lsr.w	r0, r0, r4
 8012328:	fa01 f302 	lsl.w	r3, r1, r2
 801232c:	ea40 0003 	orr.w	r0, r0, r3
 8012330:	fa21 f304 	lsr.w	r3, r1, r4
 8012334:	ea45 0103 	orr.w	r1, r5, r3
 8012338:	bd30      	pop	{r4, r5, pc}
 801233a:	f1c4 040c 	rsb	r4, r4, #12
 801233e:	f1c4 0220 	rsb	r2, r4, #32
 8012342:	fa20 f002 	lsr.w	r0, r0, r2
 8012346:	fa01 f304 	lsl.w	r3, r1, r4
 801234a:	ea40 0003 	orr.w	r0, r0, r3
 801234e:	4629      	mov	r1, r5
 8012350:	bd30      	pop	{r4, r5, pc}
 8012352:	fa21 f004 	lsr.w	r0, r1, r4
 8012356:	4629      	mov	r1, r5
 8012358:	bd30      	pop	{r4, r5, pc}
 801235a:	f094 0f00 	teq	r4, #0
 801235e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8012362:	bf06      	itte	eq
 8012364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8012368:	3401      	addeq	r4, #1
 801236a:	3d01      	subne	r5, #1
 801236c:	e74e      	b.n	801220c <__adddf3+0x8c>
 801236e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8012372:	bf18      	it	ne
 8012374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8012378:	d029      	beq.n	80123ce <__adddf3+0x24e>
 801237a:	ea94 0f05 	teq	r4, r5
 801237e:	bf08      	it	eq
 8012380:	ea90 0f02 	teqeq	r0, r2
 8012384:	d005      	beq.n	8012392 <__adddf3+0x212>
 8012386:	ea54 0c00 	orrs.w	ip, r4, r0
 801238a:	bf04      	itt	eq
 801238c:	4619      	moveq	r1, r3
 801238e:	4610      	moveq	r0, r2
 8012390:	bd30      	pop	{r4, r5, pc}
 8012392:	ea91 0f03 	teq	r1, r3
 8012396:	bf1e      	ittt	ne
 8012398:	2100      	movne	r1, #0
 801239a:	2000      	movne	r0, #0
 801239c:	bd30      	popne	{r4, r5, pc}
 801239e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80123a2:	d105      	bne.n	80123b0 <__adddf3+0x230>
 80123a4:	0040      	lsls	r0, r0, #1
 80123a6:	4149      	adcs	r1, r1
 80123a8:	bf28      	it	cs
 80123aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80123ae:	bd30      	pop	{r4, r5, pc}
 80123b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80123b4:	bf3c      	itt	cc
 80123b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80123ba:	bd30      	popcc	{r4, r5, pc}
 80123bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80123c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80123c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80123c8:	f04f 0000 	mov.w	r0, #0
 80123cc:	bd30      	pop	{r4, r5, pc}
 80123ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80123d2:	bf1a      	itte	ne
 80123d4:	4619      	movne	r1, r3
 80123d6:	4610      	movne	r0, r2
 80123d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80123dc:	bf1c      	itt	ne
 80123de:	460b      	movne	r3, r1
 80123e0:	4602      	movne	r2, r0
 80123e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80123e6:	bf06      	itte	eq
 80123e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80123ec:	ea91 0f03 	teqeq	r1, r3
 80123f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80123f4:	bd30      	pop	{r4, r5, pc}
 80123f6:	bf00      	nop

080123f8 <__aeabi_ui2d>:
 80123f8:	f090 0f00 	teq	r0, #0
 80123fc:	bf04      	itt	eq
 80123fe:	2100      	moveq	r1, #0
 8012400:	4770      	bxeq	lr
 8012402:	b530      	push	{r4, r5, lr}
 8012404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8012408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801240c:	f04f 0500 	mov.w	r5, #0
 8012410:	f04f 0100 	mov.w	r1, #0
 8012414:	e750      	b.n	80122b8 <__adddf3+0x138>
 8012416:	bf00      	nop

08012418 <__aeabi_i2d>:
 8012418:	f090 0f00 	teq	r0, #0
 801241c:	bf04      	itt	eq
 801241e:	2100      	moveq	r1, #0
 8012420:	4770      	bxeq	lr
 8012422:	b530      	push	{r4, r5, lr}
 8012424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8012428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801242c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8012430:	bf48      	it	mi
 8012432:	4240      	negmi	r0, r0
 8012434:	f04f 0100 	mov.w	r1, #0
 8012438:	e73e      	b.n	80122b8 <__adddf3+0x138>
 801243a:	bf00      	nop

0801243c <__aeabi_f2d>:
 801243c:	0042      	lsls	r2, r0, #1
 801243e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8012442:	ea4f 0131 	mov.w	r1, r1, rrx
 8012446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801244a:	bf1f      	itttt	ne
 801244c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8012450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8012454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8012458:	4770      	bxne	lr
 801245a:	f092 0f00 	teq	r2, #0
 801245e:	bf14      	ite	ne
 8012460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8012464:	4770      	bxeq	lr
 8012466:	b530      	push	{r4, r5, lr}
 8012468:	f44f 7460 	mov.w	r4, #896	; 0x380
 801246c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8012470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012474:	e720      	b.n	80122b8 <__adddf3+0x138>
 8012476:	bf00      	nop

08012478 <__aeabi_ul2d>:
 8012478:	ea50 0201 	orrs.w	r2, r0, r1
 801247c:	bf08      	it	eq
 801247e:	4770      	bxeq	lr
 8012480:	b530      	push	{r4, r5, lr}
 8012482:	f04f 0500 	mov.w	r5, #0
 8012486:	e00a      	b.n	801249e <__aeabi_l2d+0x16>

08012488 <__aeabi_l2d>:
 8012488:	ea50 0201 	orrs.w	r2, r0, r1
 801248c:	bf08      	it	eq
 801248e:	4770      	bxeq	lr
 8012490:	b530      	push	{r4, r5, lr}
 8012492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8012496:	d502      	bpl.n	801249e <__aeabi_l2d+0x16>
 8012498:	4240      	negs	r0, r0
 801249a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801249e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80124a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80124a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80124aa:	f43f aedc 	beq.w	8012266 <__adddf3+0xe6>
 80124ae:	f04f 0203 	mov.w	r2, #3
 80124b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80124b6:	bf18      	it	ne
 80124b8:	3203      	addne	r2, #3
 80124ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80124be:	bf18      	it	ne
 80124c0:	3203      	addne	r2, #3
 80124c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80124c6:	f1c2 0320 	rsb	r3, r2, #32
 80124ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80124ce:	fa20 f002 	lsr.w	r0, r0, r2
 80124d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80124d6:	ea40 000e 	orr.w	r0, r0, lr
 80124da:	fa21 f102 	lsr.w	r1, r1, r2
 80124de:	4414      	add	r4, r2
 80124e0:	e6c1      	b.n	8012266 <__adddf3+0xe6>
 80124e2:	bf00      	nop

080124e4 <__aeabi_dmul>:
 80124e4:	b570      	push	{r4, r5, r6, lr}
 80124e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80124ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80124ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80124f2:	bf1d      	ittte	ne
 80124f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80124f8:	ea94 0f0c 	teqne	r4, ip
 80124fc:	ea95 0f0c 	teqne	r5, ip
 8012500:	f000 f8de 	bleq	80126c0 <__aeabi_dmul+0x1dc>
 8012504:	442c      	add	r4, r5
 8012506:	ea81 0603 	eor.w	r6, r1, r3
 801250a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 801250e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8012512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8012516:	bf18      	it	ne
 8012518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 801251c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012524:	d038      	beq.n	8012598 <__aeabi_dmul+0xb4>
 8012526:	fba0 ce02 	umull	ip, lr, r0, r2
 801252a:	f04f 0500 	mov.w	r5, #0
 801252e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8012532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8012536:	fbe0 e503 	umlal	lr, r5, r0, r3
 801253a:	f04f 0600 	mov.w	r6, #0
 801253e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8012542:	f09c 0f00 	teq	ip, #0
 8012546:	bf18      	it	ne
 8012548:	f04e 0e01 	orrne.w	lr, lr, #1
 801254c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8012550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8012554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8012558:	d204      	bcs.n	8012564 <__aeabi_dmul+0x80>
 801255a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 801255e:	416d      	adcs	r5, r5
 8012560:	eb46 0606 	adc.w	r6, r6, r6
 8012564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8012568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 801256c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8012570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8012574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8012578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801257c:	bf88      	it	hi
 801257e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8012582:	d81e      	bhi.n	80125c2 <__aeabi_dmul+0xde>
 8012584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8012588:	bf08      	it	eq
 801258a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801258e:	f150 0000 	adcs.w	r0, r0, #0
 8012592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8012596:	bd70      	pop	{r4, r5, r6, pc}
 8012598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 801259c:	ea46 0101 	orr.w	r1, r6, r1
 80125a0:	ea40 0002 	orr.w	r0, r0, r2
 80125a4:	ea81 0103 	eor.w	r1, r1, r3
 80125a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80125ac:	bfc2      	ittt	gt
 80125ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80125b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80125b6:	bd70      	popgt	{r4, r5, r6, pc}
 80125b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80125bc:	f04f 0e00 	mov.w	lr, #0
 80125c0:	3c01      	subs	r4, #1
 80125c2:	f300 80ab 	bgt.w	801271c <__aeabi_dmul+0x238>
 80125c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80125ca:	bfde      	ittt	le
 80125cc:	2000      	movle	r0, #0
 80125ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80125d2:	bd70      	pople	{r4, r5, r6, pc}
 80125d4:	f1c4 0400 	rsb	r4, r4, #0
 80125d8:	3c20      	subs	r4, #32
 80125da:	da35      	bge.n	8012648 <__aeabi_dmul+0x164>
 80125dc:	340c      	adds	r4, #12
 80125de:	dc1b      	bgt.n	8012618 <__aeabi_dmul+0x134>
 80125e0:	f104 0414 	add.w	r4, r4, #20
 80125e4:	f1c4 0520 	rsb	r5, r4, #32
 80125e8:	fa00 f305 	lsl.w	r3, r0, r5
 80125ec:	fa20 f004 	lsr.w	r0, r0, r4
 80125f0:	fa01 f205 	lsl.w	r2, r1, r5
 80125f4:	ea40 0002 	orr.w	r0, r0, r2
 80125f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80125fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8012604:	fa21 f604 	lsr.w	r6, r1, r4
 8012608:	eb42 0106 	adc.w	r1, r2, r6
 801260c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012610:	bf08      	it	eq
 8012612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	f1c4 040c 	rsb	r4, r4, #12
 801261c:	f1c4 0520 	rsb	r5, r4, #32
 8012620:	fa00 f304 	lsl.w	r3, r0, r4
 8012624:	fa20 f005 	lsr.w	r0, r0, r5
 8012628:	fa01 f204 	lsl.w	r2, r1, r4
 801262c:	ea40 0002 	orr.w	r0, r0, r2
 8012630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8012638:	f141 0100 	adc.w	r1, r1, #0
 801263c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012640:	bf08      	it	eq
 8012642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8012646:	bd70      	pop	{r4, r5, r6, pc}
 8012648:	f1c4 0520 	rsb	r5, r4, #32
 801264c:	fa00 f205 	lsl.w	r2, r0, r5
 8012650:	ea4e 0e02 	orr.w	lr, lr, r2
 8012654:	fa20 f304 	lsr.w	r3, r0, r4
 8012658:	fa01 f205 	lsl.w	r2, r1, r5
 801265c:	ea43 0302 	orr.w	r3, r3, r2
 8012660:	fa21 f004 	lsr.w	r0, r1, r4
 8012664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012668:	fa21 f204 	lsr.w	r2, r1, r4
 801266c:	ea20 0002 	bic.w	r0, r0, r2
 8012670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8012674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012678:	bf08      	it	eq
 801267a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801267e:	bd70      	pop	{r4, r5, r6, pc}
 8012680:	f094 0f00 	teq	r4, #0
 8012684:	d10f      	bne.n	80126a6 <__aeabi_dmul+0x1c2>
 8012686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801268a:	0040      	lsls	r0, r0, #1
 801268c:	eb41 0101 	adc.w	r1, r1, r1
 8012690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012694:	bf08      	it	eq
 8012696:	3c01      	subeq	r4, #1
 8012698:	d0f7      	beq.n	801268a <__aeabi_dmul+0x1a6>
 801269a:	ea41 0106 	orr.w	r1, r1, r6
 801269e:	f095 0f00 	teq	r5, #0
 80126a2:	bf18      	it	ne
 80126a4:	4770      	bxne	lr
 80126a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80126aa:	0052      	lsls	r2, r2, #1
 80126ac:	eb43 0303 	adc.w	r3, r3, r3
 80126b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80126b4:	bf08      	it	eq
 80126b6:	3d01      	subeq	r5, #1
 80126b8:	d0f7      	beq.n	80126aa <__aeabi_dmul+0x1c6>
 80126ba:	ea43 0306 	orr.w	r3, r3, r6
 80126be:	4770      	bx	lr
 80126c0:	ea94 0f0c 	teq	r4, ip
 80126c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80126c8:	bf18      	it	ne
 80126ca:	ea95 0f0c 	teqne	r5, ip
 80126ce:	d00c      	beq.n	80126ea <__aeabi_dmul+0x206>
 80126d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80126d4:	bf18      	it	ne
 80126d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80126da:	d1d1      	bne.n	8012680 <__aeabi_dmul+0x19c>
 80126dc:	ea81 0103 	eor.w	r1, r1, r3
 80126e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80126e4:	f04f 0000 	mov.w	r0, #0
 80126e8:	bd70      	pop	{r4, r5, r6, pc}
 80126ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80126ee:	bf06      	itte	eq
 80126f0:	4610      	moveq	r0, r2
 80126f2:	4619      	moveq	r1, r3
 80126f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80126f8:	d019      	beq.n	801272e <__aeabi_dmul+0x24a>
 80126fa:	ea94 0f0c 	teq	r4, ip
 80126fe:	d102      	bne.n	8012706 <__aeabi_dmul+0x222>
 8012700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8012704:	d113      	bne.n	801272e <__aeabi_dmul+0x24a>
 8012706:	ea95 0f0c 	teq	r5, ip
 801270a:	d105      	bne.n	8012718 <__aeabi_dmul+0x234>
 801270c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8012710:	bf1c      	itt	ne
 8012712:	4610      	movne	r0, r2
 8012714:	4619      	movne	r1, r3
 8012716:	d10a      	bne.n	801272e <__aeabi_dmul+0x24a>
 8012718:	ea81 0103 	eor.w	r1, r1, r3
 801271c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8012724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012728:	f04f 0000 	mov.w	r0, #0
 801272c:	bd70      	pop	{r4, r5, r6, pc}
 801272e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8012732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8012736:	bd70      	pop	{r4, r5, r6, pc}

08012738 <__aeabi_ddiv>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801273e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8012742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8012746:	bf1d      	ittte	ne
 8012748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801274c:	ea94 0f0c 	teqne	r4, ip
 8012750:	ea95 0f0c 	teqne	r5, ip
 8012754:	f000 f8a7 	bleq	80128a6 <__aeabi_ddiv+0x16e>
 8012758:	eba4 0405 	sub.w	r4, r4, r5
 801275c:	ea81 0e03 	eor.w	lr, r1, r3
 8012760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8012764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8012768:	f000 8088 	beq.w	801287c <__aeabi_ddiv+0x144>
 801276c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8012770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8012774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8012778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 801277c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8012780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8012784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8012788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 801278c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8012790:	429d      	cmp	r5, r3
 8012792:	bf08      	it	eq
 8012794:	4296      	cmpeq	r6, r2
 8012796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801279a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801279e:	d202      	bcs.n	80127a6 <__aeabi_ddiv+0x6e>
 80127a0:	085b      	lsrs	r3, r3, #1
 80127a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80127a6:	1ab6      	subs	r6, r6, r2
 80127a8:	eb65 0503 	sbc.w	r5, r5, r3
 80127ac:	085b      	lsrs	r3, r3, #1
 80127ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80127b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80127b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80127ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80127be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80127c2:	bf22      	ittt	cs
 80127c4:	1ab6      	subcs	r6, r6, r2
 80127c6:	4675      	movcs	r5, lr
 80127c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80127cc:	085b      	lsrs	r3, r3, #1
 80127ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80127d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80127d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80127da:	bf22      	ittt	cs
 80127dc:	1ab6      	subcs	r6, r6, r2
 80127de:	4675      	movcs	r5, lr
 80127e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80127e4:	085b      	lsrs	r3, r3, #1
 80127e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80127ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80127ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80127f2:	bf22      	ittt	cs
 80127f4:	1ab6      	subcs	r6, r6, r2
 80127f6:	4675      	movcs	r5, lr
 80127f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80127fc:	085b      	lsrs	r3, r3, #1
 80127fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8012802:	ebb6 0e02 	subs.w	lr, r6, r2
 8012806:	eb75 0e03 	sbcs.w	lr, r5, r3
 801280a:	bf22      	ittt	cs
 801280c:	1ab6      	subcs	r6, r6, r2
 801280e:	4675      	movcs	r5, lr
 8012810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8012814:	ea55 0e06 	orrs.w	lr, r5, r6
 8012818:	d018      	beq.n	801284c <__aeabi_ddiv+0x114>
 801281a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 801281e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8012822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8012826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801282a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 801282e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8012836:	d1c0      	bne.n	80127ba <__aeabi_ddiv+0x82>
 8012838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801283c:	d10b      	bne.n	8012856 <__aeabi_ddiv+0x11e>
 801283e:	ea41 0100 	orr.w	r1, r1, r0
 8012842:	f04f 0000 	mov.w	r0, #0
 8012846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801284a:	e7b6      	b.n	80127ba <__aeabi_ddiv+0x82>
 801284c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012850:	bf04      	itt	eq
 8012852:	4301      	orreq	r1, r0
 8012854:	2000      	moveq	r0, #0
 8012856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801285a:	bf88      	it	hi
 801285c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8012860:	f63f aeaf 	bhi.w	80125c2 <__aeabi_dmul+0xde>
 8012864:	ebb5 0c03 	subs.w	ip, r5, r3
 8012868:	bf04      	itt	eq
 801286a:	ebb6 0c02 	subseq.w	ip, r6, r2
 801286e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8012872:	f150 0000 	adcs.w	r0, r0, #0
 8012876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801287a:	bd70      	pop	{r4, r5, r6, pc}
 801287c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8012880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8012884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8012888:	bfc2      	ittt	gt
 801288a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801288e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8012892:	bd70      	popgt	{r4, r5, r6, pc}
 8012894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012898:	f04f 0e00 	mov.w	lr, #0
 801289c:	3c01      	subs	r4, #1
 801289e:	e690      	b.n	80125c2 <__aeabi_dmul+0xde>
 80128a0:	ea45 0e06 	orr.w	lr, r5, r6
 80128a4:	e68d      	b.n	80125c2 <__aeabi_dmul+0xde>
 80128a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80128aa:	ea94 0f0c 	teq	r4, ip
 80128ae:	bf08      	it	eq
 80128b0:	ea95 0f0c 	teqeq	r5, ip
 80128b4:	f43f af3b 	beq.w	801272e <__aeabi_dmul+0x24a>
 80128b8:	ea94 0f0c 	teq	r4, ip
 80128bc:	d10a      	bne.n	80128d4 <__aeabi_ddiv+0x19c>
 80128be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80128c2:	f47f af34 	bne.w	801272e <__aeabi_dmul+0x24a>
 80128c6:	ea95 0f0c 	teq	r5, ip
 80128ca:	f47f af25 	bne.w	8012718 <__aeabi_dmul+0x234>
 80128ce:	4610      	mov	r0, r2
 80128d0:	4619      	mov	r1, r3
 80128d2:	e72c      	b.n	801272e <__aeabi_dmul+0x24a>
 80128d4:	ea95 0f0c 	teq	r5, ip
 80128d8:	d106      	bne.n	80128e8 <__aeabi_ddiv+0x1b0>
 80128da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80128de:	f43f aefd 	beq.w	80126dc <__aeabi_dmul+0x1f8>
 80128e2:	4610      	mov	r0, r2
 80128e4:	4619      	mov	r1, r3
 80128e6:	e722      	b.n	801272e <__aeabi_dmul+0x24a>
 80128e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80128ec:	bf18      	it	ne
 80128ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80128f2:	f47f aec5 	bne.w	8012680 <__aeabi_dmul+0x19c>
 80128f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80128fa:	f47f af0d 	bne.w	8012718 <__aeabi_dmul+0x234>
 80128fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8012902:	f47f aeeb 	bne.w	80126dc <__aeabi_dmul+0x1f8>
 8012906:	e712      	b.n	801272e <__aeabi_dmul+0x24a>

08012908 <__gedf2>:
 8012908:	f04f 3cff 	mov.w	ip, #4294967295
 801290c:	e006      	b.n	801291c <__cmpdf2+0x4>
 801290e:	bf00      	nop

08012910 <__ledf2>:
 8012910:	f04f 0c01 	mov.w	ip, #1
 8012914:	e002      	b.n	801291c <__cmpdf2+0x4>
 8012916:	bf00      	nop

08012918 <__cmpdf2>:
 8012918:	f04f 0c01 	mov.w	ip, #1
 801291c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8012920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801292c:	bf18      	it	ne
 801292e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8012932:	d01b      	beq.n	801296c <__cmpdf2+0x54>
 8012934:	b001      	add	sp, #4
 8012936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801293a:	bf0c      	ite	eq
 801293c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8012940:	ea91 0f03 	teqne	r1, r3
 8012944:	bf02      	ittt	eq
 8012946:	ea90 0f02 	teqeq	r0, r2
 801294a:	2000      	moveq	r0, #0
 801294c:	4770      	bxeq	lr
 801294e:	f110 0f00 	cmn.w	r0, #0
 8012952:	ea91 0f03 	teq	r1, r3
 8012956:	bf58      	it	pl
 8012958:	4299      	cmppl	r1, r3
 801295a:	bf08      	it	eq
 801295c:	4290      	cmpeq	r0, r2
 801295e:	bf2c      	ite	cs
 8012960:	17d8      	asrcs	r0, r3, #31
 8012962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8012966:	f040 0001 	orr.w	r0, r0, #1
 801296a:	4770      	bx	lr
 801296c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012974:	d102      	bne.n	801297c <__cmpdf2+0x64>
 8012976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801297a:	d107      	bne.n	801298c <__cmpdf2+0x74>
 801297c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8012980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012984:	d1d6      	bne.n	8012934 <__cmpdf2+0x1c>
 8012986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801298a:	d0d3      	beq.n	8012934 <__cmpdf2+0x1c>
 801298c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop

08012994 <__aeabi_cdrcmple>:
 8012994:	4684      	mov	ip, r0
 8012996:	4610      	mov	r0, r2
 8012998:	4662      	mov	r2, ip
 801299a:	468c      	mov	ip, r1
 801299c:	4619      	mov	r1, r3
 801299e:	4663      	mov	r3, ip
 80129a0:	e000      	b.n	80129a4 <__aeabi_cdcmpeq>
 80129a2:	bf00      	nop

080129a4 <__aeabi_cdcmpeq>:
 80129a4:	b501      	push	{r0, lr}
 80129a6:	f7ff ffb7 	bl	8012918 <__cmpdf2>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	bf48      	it	mi
 80129ae:	f110 0f00 	cmnmi.w	r0, #0
 80129b2:	bd01      	pop	{r0, pc}

080129b4 <__aeabi_dcmpeq>:
 80129b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80129b8:	f7ff fff4 	bl	80129a4 <__aeabi_cdcmpeq>
 80129bc:	bf0c      	ite	eq
 80129be:	2001      	moveq	r0, #1
 80129c0:	2000      	movne	r0, #0
 80129c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80129c6:	bf00      	nop

080129c8 <__aeabi_dcmplt>:
 80129c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80129cc:	f7ff ffea 	bl	80129a4 <__aeabi_cdcmpeq>
 80129d0:	bf34      	ite	cc
 80129d2:	2001      	movcc	r0, #1
 80129d4:	2000      	movcs	r0, #0
 80129d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80129da:	bf00      	nop

080129dc <__aeabi_dcmple>:
 80129dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80129e0:	f7ff ffe0 	bl	80129a4 <__aeabi_cdcmpeq>
 80129e4:	bf94      	ite	ls
 80129e6:	2001      	movls	r0, #1
 80129e8:	2000      	movhi	r0, #0
 80129ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80129ee:	bf00      	nop

080129f0 <__aeabi_dcmpge>:
 80129f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80129f4:	f7ff ffce 	bl	8012994 <__aeabi_cdrcmple>
 80129f8:	bf94      	ite	ls
 80129fa:	2001      	movls	r0, #1
 80129fc:	2000      	movhi	r0, #0
 80129fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8012a02:	bf00      	nop

08012a04 <__aeabi_dcmpgt>:
 8012a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012a08:	f7ff ffc4 	bl	8012994 <__aeabi_cdrcmple>
 8012a0c:	bf34      	ite	cc
 8012a0e:	2001      	movcc	r0, #1
 8012a10:	2000      	movcs	r0, #0
 8012a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8012a16:	bf00      	nop

08012a18 <__aeabi_d2iz>:
 8012a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8012a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8012a20:	d215      	bcs.n	8012a4e <__aeabi_d2iz+0x36>
 8012a22:	d511      	bpl.n	8012a48 <__aeabi_d2iz+0x30>
 8012a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8012a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8012a2c:	d912      	bls.n	8012a54 <__aeabi_d2iz+0x3c>
 8012a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8012a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8012a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8012a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8012a42:	bf18      	it	ne
 8012a44:	4240      	negne	r0, r0
 8012a46:	4770      	bx	lr
 8012a48:	f04f 0000 	mov.w	r0, #0
 8012a4c:	4770      	bx	lr
 8012a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8012a52:	d105      	bne.n	8012a60 <__aeabi_d2iz+0x48>
 8012a54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8012a58:	bf08      	it	eq
 8012a5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8012a5e:	4770      	bx	lr
 8012a60:	f04f 0000 	mov.w	r0, #0
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop

08012a68 <__aeabi_d2uiz>:
 8012a68:	004a      	lsls	r2, r1, #1
 8012a6a:	d211      	bcs.n	8012a90 <__aeabi_d2uiz+0x28>
 8012a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8012a70:	d211      	bcs.n	8012a96 <__aeabi_d2uiz+0x2e>
 8012a72:	d50d      	bpl.n	8012a90 <__aeabi_d2uiz+0x28>
 8012a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8012a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8012a7c:	d40e      	bmi.n	8012a9c <__aeabi_d2uiz+0x34>
 8012a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8012a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8012a8a:	fa23 f002 	lsr.w	r0, r3, r2
 8012a8e:	4770      	bx	lr
 8012a90:	f04f 0000 	mov.w	r0, #0
 8012a94:	4770      	bx	lr
 8012a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8012a9a:	d102      	bne.n	8012aa2 <__aeabi_d2uiz+0x3a>
 8012a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa0:	4770      	bx	lr
 8012aa2:	f04f 0000 	mov.w	r0, #0
 8012aa6:	4770      	bx	lr

08012aa8 <__aeabi_d2f>:
 8012aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8012aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8012ab0:	bf24      	itt	cs
 8012ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8012ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8012aba:	d90d      	bls.n	8012ad8 <__aeabi_d2f+0x30>
 8012abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8012ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8012ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8012ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8012acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8012ad0:	bf08      	it	eq
 8012ad2:	f020 0001 	biceq.w	r0, r0, #1
 8012ad6:	4770      	bx	lr
 8012ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8012adc:	d121      	bne.n	8012b22 <__aeabi_d2f+0x7a>
 8012ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8012ae2:	bfbc      	itt	lt
 8012ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8012ae8:	4770      	bxlt	lr
 8012aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8012af2:	f1c2 0218 	rsb	r2, r2, #24
 8012af6:	f1c2 0c20 	rsb	ip, r2, #32
 8012afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8012afe:	fa20 f002 	lsr.w	r0, r0, r2
 8012b02:	bf18      	it	ne
 8012b04:	f040 0001 	orrne.w	r0, r0, #1
 8012b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8012b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8012b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8012b14:	ea40 000c 	orr.w	r0, r0, ip
 8012b18:	fa23 f302 	lsr.w	r3, r3, r2
 8012b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b20:	e7cc      	b.n	8012abc <__aeabi_d2f+0x14>
 8012b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8012b26:	d107      	bne.n	8012b38 <__aeabi_d2f+0x90>
 8012b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8012b2c:	bf1e      	ittt	ne
 8012b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8012b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8012b36:	4770      	bxne	lr
 8012b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8012b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8012b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop

08012b48 <__aeabi_frsub>:
 8012b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8012b4c:	e002      	b.n	8012b54 <__addsf3>
 8012b4e:	bf00      	nop

08012b50 <__aeabi_fsub>:
 8012b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08012b54 <__addsf3>:
 8012b54:	0042      	lsls	r2, r0, #1
 8012b56:	bf1f      	itttt	ne
 8012b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8012b5c:	ea92 0f03 	teqne	r2, r3
 8012b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8012b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8012b68:	d06a      	beq.n	8012c40 <__addsf3+0xec>
 8012b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8012b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8012b72:	bfc1      	itttt	gt
 8012b74:	18d2      	addgt	r2, r2, r3
 8012b76:	4041      	eorgt	r1, r0
 8012b78:	4048      	eorgt	r0, r1
 8012b7a:	4041      	eorgt	r1, r0
 8012b7c:	bfb8      	it	lt
 8012b7e:	425b      	neglt	r3, r3
 8012b80:	2b19      	cmp	r3, #25
 8012b82:	bf88      	it	hi
 8012b84:	4770      	bxhi	lr
 8012b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8012b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8012b92:	bf18      	it	ne
 8012b94:	4240      	negne	r0, r0
 8012b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8012b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8012b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8012ba2:	bf18      	it	ne
 8012ba4:	4249      	negne	r1, r1
 8012ba6:	ea92 0f03 	teq	r2, r3
 8012baa:	d03f      	beq.n	8012c2c <__addsf3+0xd8>
 8012bac:	f1a2 0201 	sub.w	r2, r2, #1
 8012bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8012bb4:	eb10 000c 	adds.w	r0, r0, ip
 8012bb8:	f1c3 0320 	rsb	r3, r3, #32
 8012bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8012bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012bc4:	d502      	bpl.n	8012bcc <__addsf3+0x78>
 8012bc6:	4249      	negs	r1, r1
 8012bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8012bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8012bd0:	d313      	bcc.n	8012bfa <__addsf3+0xa6>
 8012bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8012bd6:	d306      	bcc.n	8012be6 <__addsf3+0x92>
 8012bd8:	0840      	lsrs	r0, r0, #1
 8012bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8012bde:	f102 0201 	add.w	r2, r2, #1
 8012be2:	2afe      	cmp	r2, #254	; 0xfe
 8012be4:	d251      	bcs.n	8012c8a <__addsf3+0x136>
 8012be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8012bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8012bee:	bf08      	it	eq
 8012bf0:	f020 0001 	biceq.w	r0, r0, #1
 8012bf4:	ea40 0003 	orr.w	r0, r0, r3
 8012bf8:	4770      	bx	lr
 8012bfa:	0049      	lsls	r1, r1, #1
 8012bfc:	eb40 0000 	adc.w	r0, r0, r0
 8012c00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8012c04:	f1a2 0201 	sub.w	r2, r2, #1
 8012c08:	d1ed      	bne.n	8012be6 <__addsf3+0x92>
 8012c0a:	fab0 fc80 	clz	ip, r0
 8012c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8012c12:	ebb2 020c 	subs.w	r2, r2, ip
 8012c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8012c1a:	bfaa      	itet	ge
 8012c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8012c20:	4252      	neglt	r2, r2
 8012c22:	4318      	orrge	r0, r3
 8012c24:	bfbc      	itt	lt
 8012c26:	40d0      	lsrlt	r0, r2
 8012c28:	4318      	orrlt	r0, r3
 8012c2a:	4770      	bx	lr
 8012c2c:	f092 0f00 	teq	r2, #0
 8012c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8012c34:	bf06      	itte	eq
 8012c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8012c3a:	3201      	addeq	r2, #1
 8012c3c:	3b01      	subne	r3, #1
 8012c3e:	e7b5      	b.n	8012bac <__addsf3+0x58>
 8012c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8012c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8012c48:	bf18      	it	ne
 8012c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8012c4e:	d021      	beq.n	8012c94 <__addsf3+0x140>
 8012c50:	ea92 0f03 	teq	r2, r3
 8012c54:	d004      	beq.n	8012c60 <__addsf3+0x10c>
 8012c56:	f092 0f00 	teq	r2, #0
 8012c5a:	bf08      	it	eq
 8012c5c:	4608      	moveq	r0, r1
 8012c5e:	4770      	bx	lr
 8012c60:	ea90 0f01 	teq	r0, r1
 8012c64:	bf1c      	itt	ne
 8012c66:	2000      	movne	r0, #0
 8012c68:	4770      	bxne	lr
 8012c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8012c6e:	d104      	bne.n	8012c7a <__addsf3+0x126>
 8012c70:	0040      	lsls	r0, r0, #1
 8012c72:	bf28      	it	cs
 8012c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8012c78:	4770      	bx	lr
 8012c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8012c7e:	bf3c      	itt	cc
 8012c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8012c84:	4770      	bxcc	lr
 8012c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8012c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012c92:	4770      	bx	lr
 8012c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8012c98:	bf16      	itet	ne
 8012c9a:	4608      	movne	r0, r1
 8012c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8012ca0:	4601      	movne	r1, r0
 8012ca2:	0242      	lsls	r2, r0, #9
 8012ca4:	bf06      	itte	eq
 8012ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8012caa:	ea90 0f01 	teqeq	r0, r1
 8012cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8012cb2:	4770      	bx	lr

08012cb4 <__aeabi_ui2f>:
 8012cb4:	f04f 0300 	mov.w	r3, #0
 8012cb8:	e004      	b.n	8012cc4 <__aeabi_i2f+0x8>
 8012cba:	bf00      	nop

08012cbc <__aeabi_i2f>:
 8012cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8012cc0:	bf48      	it	mi
 8012cc2:	4240      	negmi	r0, r0
 8012cc4:	ea5f 0c00 	movs.w	ip, r0
 8012cc8:	bf08      	it	eq
 8012cca:	4770      	bxeq	lr
 8012ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8012cd0:	4601      	mov	r1, r0
 8012cd2:	f04f 0000 	mov.w	r0, #0
 8012cd6:	e01c      	b.n	8012d12 <__aeabi_l2f+0x2a>

08012cd8 <__aeabi_ul2f>:
 8012cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8012cdc:	bf08      	it	eq
 8012cde:	4770      	bxeq	lr
 8012ce0:	f04f 0300 	mov.w	r3, #0
 8012ce4:	e00a      	b.n	8012cfc <__aeabi_l2f+0x14>
 8012ce6:	bf00      	nop

08012ce8 <__aeabi_l2f>:
 8012ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8012cec:	bf08      	it	eq
 8012cee:	4770      	bxeq	lr
 8012cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8012cf4:	d502      	bpl.n	8012cfc <__aeabi_l2f+0x14>
 8012cf6:	4240      	negs	r0, r0
 8012cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8012cfc:	ea5f 0c01 	movs.w	ip, r1
 8012d00:	bf02      	ittt	eq
 8012d02:	4684      	moveq	ip, r0
 8012d04:	4601      	moveq	r1, r0
 8012d06:	2000      	moveq	r0, #0
 8012d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8012d0c:	bf08      	it	eq
 8012d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8012d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012d16:	fabc f28c 	clz	r2, ip
 8012d1a:	3a08      	subs	r2, #8
 8012d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8012d20:	db10      	blt.n	8012d44 <__aeabi_l2f+0x5c>
 8012d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8012d26:	4463      	add	r3, ip
 8012d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8012d2c:	f1c2 0220 	rsb	r2, r2, #32
 8012d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8012d34:	fa20 f202 	lsr.w	r2, r0, r2
 8012d38:	eb43 0002 	adc.w	r0, r3, r2
 8012d3c:	bf08      	it	eq
 8012d3e:	f020 0001 	biceq.w	r0, r0, #1
 8012d42:	4770      	bx	lr
 8012d44:	f102 0220 	add.w	r2, r2, #32
 8012d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8012d4c:	f1c2 0220 	rsb	r2, r2, #32
 8012d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8012d54:	fa21 f202 	lsr.w	r2, r1, r2
 8012d58:	eb43 0002 	adc.w	r0, r3, r2
 8012d5c:	bf08      	it	eq
 8012d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8012d62:	4770      	bx	lr

08012d64 <__aeabi_fmul>:
 8012d64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8012d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8012d6c:	bf1e      	ittt	ne
 8012d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8012d72:	ea92 0f0c 	teqne	r2, ip
 8012d76:	ea93 0f0c 	teqne	r3, ip
 8012d7a:	d06f      	beq.n	8012e5c <__aeabi_fmul+0xf8>
 8012d7c:	441a      	add	r2, r3
 8012d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8012d82:	0240      	lsls	r0, r0, #9
 8012d84:	bf18      	it	ne
 8012d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8012d8a:	d01e      	beq.n	8012dca <__aeabi_fmul+0x66>
 8012d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8012d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8012d98:	fba0 3101 	umull	r3, r1, r0, r1
 8012d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8012da0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8012da4:	bf3e      	ittt	cc
 8012da6:	0049      	lslcc	r1, r1, #1
 8012da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8012dac:	005b      	lslcc	r3, r3, #1
 8012dae:	ea40 0001 	orr.w	r0, r0, r1
 8012db2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8012db6:	2afd      	cmp	r2, #253	; 0xfd
 8012db8:	d81d      	bhi.n	8012df6 <__aeabi_fmul+0x92>
 8012dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8012dc2:	bf08      	it	eq
 8012dc4:	f020 0001 	biceq.w	r0, r0, #1
 8012dc8:	4770      	bx	lr
 8012dca:	f090 0f00 	teq	r0, #0
 8012dce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8012dd2:	bf08      	it	eq
 8012dd4:	0249      	lsleq	r1, r1, #9
 8012dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8012dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8012dde:	3a7f      	subs	r2, #127	; 0x7f
 8012de0:	bfc2      	ittt	gt
 8012de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8012de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8012dea:	4770      	bxgt	lr
 8012dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012df0:	f04f 0300 	mov.w	r3, #0
 8012df4:	3a01      	subs	r2, #1
 8012df6:	dc5d      	bgt.n	8012eb4 <__aeabi_fmul+0x150>
 8012df8:	f112 0f19 	cmn.w	r2, #25
 8012dfc:	bfdc      	itt	le
 8012dfe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8012e02:	4770      	bxle	lr
 8012e04:	f1c2 0200 	rsb	r2, r2, #0
 8012e08:	0041      	lsls	r1, r0, #1
 8012e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8012e0e:	f1c2 0220 	rsb	r2, r2, #32
 8012e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8012e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8012e1a:	f140 0000 	adc.w	r0, r0, #0
 8012e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8012e22:	bf08      	it	eq
 8012e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8012e28:	4770      	bx	lr
 8012e2a:	f092 0f00 	teq	r2, #0
 8012e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8012e32:	bf02      	ittt	eq
 8012e34:	0040      	lsleq	r0, r0, #1
 8012e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8012e3a:	3a01      	subeq	r2, #1
 8012e3c:	d0f9      	beq.n	8012e32 <__aeabi_fmul+0xce>
 8012e3e:	ea40 000c 	orr.w	r0, r0, ip
 8012e42:	f093 0f00 	teq	r3, #0
 8012e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8012e4a:	bf02      	ittt	eq
 8012e4c:	0049      	lsleq	r1, r1, #1
 8012e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8012e52:	3b01      	subeq	r3, #1
 8012e54:	d0f9      	beq.n	8012e4a <__aeabi_fmul+0xe6>
 8012e56:	ea41 010c 	orr.w	r1, r1, ip
 8012e5a:	e78f      	b.n	8012d7c <__aeabi_fmul+0x18>
 8012e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8012e60:	ea92 0f0c 	teq	r2, ip
 8012e64:	bf18      	it	ne
 8012e66:	ea93 0f0c 	teqne	r3, ip
 8012e6a:	d00a      	beq.n	8012e82 <__aeabi_fmul+0x11e>
 8012e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8012e70:	bf18      	it	ne
 8012e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8012e76:	d1d8      	bne.n	8012e2a <__aeabi_fmul+0xc6>
 8012e78:	ea80 0001 	eor.w	r0, r0, r1
 8012e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012e80:	4770      	bx	lr
 8012e82:	f090 0f00 	teq	r0, #0
 8012e86:	bf17      	itett	ne
 8012e88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8012e8c:	4608      	moveq	r0, r1
 8012e8e:	f091 0f00 	teqne	r1, #0
 8012e92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8012e96:	d014      	beq.n	8012ec2 <__aeabi_fmul+0x15e>
 8012e98:	ea92 0f0c 	teq	r2, ip
 8012e9c:	d101      	bne.n	8012ea2 <__aeabi_fmul+0x13e>
 8012e9e:	0242      	lsls	r2, r0, #9
 8012ea0:	d10f      	bne.n	8012ec2 <__aeabi_fmul+0x15e>
 8012ea2:	ea93 0f0c 	teq	r3, ip
 8012ea6:	d103      	bne.n	8012eb0 <__aeabi_fmul+0x14c>
 8012ea8:	024b      	lsls	r3, r1, #9
 8012eaa:	bf18      	it	ne
 8012eac:	4608      	movne	r0, r1
 8012eae:	d108      	bne.n	8012ec2 <__aeabi_fmul+0x15e>
 8012eb0:	ea80 0001 	eor.w	r0, r0, r1
 8012eb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8012ebc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012ec0:	4770      	bx	lr
 8012ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8012ec6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8012eca:	4770      	bx	lr

08012ecc <__aeabi_fdiv>:
 8012ecc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8012ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8012ed4:	bf1e      	ittt	ne
 8012ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8012eda:	ea92 0f0c 	teqne	r2, ip
 8012ede:	ea93 0f0c 	teqne	r3, ip
 8012ee2:	d069      	beq.n	8012fb8 <__aeabi_fdiv+0xec>
 8012ee4:	eba2 0203 	sub.w	r2, r2, r3
 8012ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8012eec:	0249      	lsls	r1, r1, #9
 8012eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8012ef2:	d037      	beq.n	8012f64 <__aeabi_fdiv+0x98>
 8012ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8012efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8012f00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8012f04:	428b      	cmp	r3, r1
 8012f06:	bf38      	it	cc
 8012f08:	005b      	lslcc	r3, r3, #1
 8012f0a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8012f0e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8012f12:	428b      	cmp	r3, r1
 8012f14:	bf24      	itt	cs
 8012f16:	1a5b      	subcs	r3, r3, r1
 8012f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8012f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8012f20:	bf24      	itt	cs
 8012f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8012f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8012f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8012f2e:	bf24      	itt	cs
 8012f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8012f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8012f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8012f3c:	bf24      	itt	cs
 8012f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8012f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8012f46:	011b      	lsls	r3, r3, #4
 8012f48:	bf18      	it	ne
 8012f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8012f4e:	d1e0      	bne.n	8012f12 <__aeabi_fdiv+0x46>
 8012f50:	2afd      	cmp	r2, #253	; 0xfd
 8012f52:	f63f af50 	bhi.w	8012df6 <__aeabi_fmul+0x92>
 8012f56:	428b      	cmp	r3, r1
 8012f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8012f5c:	bf08      	it	eq
 8012f5e:	f020 0001 	biceq.w	r0, r0, #1
 8012f62:	4770      	bx	lr
 8012f64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8012f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8012f6c:	327f      	adds	r2, #127	; 0x7f
 8012f6e:	bfc2      	ittt	gt
 8012f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8012f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8012f78:	4770      	bxgt	lr
 8012f7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012f7e:	f04f 0300 	mov.w	r3, #0
 8012f82:	3a01      	subs	r2, #1
 8012f84:	e737      	b.n	8012df6 <__aeabi_fmul+0x92>
 8012f86:	f092 0f00 	teq	r2, #0
 8012f8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8012f8e:	bf02      	ittt	eq
 8012f90:	0040      	lsleq	r0, r0, #1
 8012f92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8012f96:	3a01      	subeq	r2, #1
 8012f98:	d0f9      	beq.n	8012f8e <__aeabi_fdiv+0xc2>
 8012f9a:	ea40 000c 	orr.w	r0, r0, ip
 8012f9e:	f093 0f00 	teq	r3, #0
 8012fa2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8012fa6:	bf02      	ittt	eq
 8012fa8:	0049      	lsleq	r1, r1, #1
 8012faa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8012fae:	3b01      	subeq	r3, #1
 8012fb0:	d0f9      	beq.n	8012fa6 <__aeabi_fdiv+0xda>
 8012fb2:	ea41 010c 	orr.w	r1, r1, ip
 8012fb6:	e795      	b.n	8012ee4 <__aeabi_fdiv+0x18>
 8012fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8012fbc:	ea92 0f0c 	teq	r2, ip
 8012fc0:	d108      	bne.n	8012fd4 <__aeabi_fdiv+0x108>
 8012fc2:	0242      	lsls	r2, r0, #9
 8012fc4:	f47f af7d 	bne.w	8012ec2 <__aeabi_fmul+0x15e>
 8012fc8:	ea93 0f0c 	teq	r3, ip
 8012fcc:	f47f af70 	bne.w	8012eb0 <__aeabi_fmul+0x14c>
 8012fd0:	4608      	mov	r0, r1
 8012fd2:	e776      	b.n	8012ec2 <__aeabi_fmul+0x15e>
 8012fd4:	ea93 0f0c 	teq	r3, ip
 8012fd8:	d104      	bne.n	8012fe4 <__aeabi_fdiv+0x118>
 8012fda:	024b      	lsls	r3, r1, #9
 8012fdc:	f43f af4c 	beq.w	8012e78 <__aeabi_fmul+0x114>
 8012fe0:	4608      	mov	r0, r1
 8012fe2:	e76e      	b.n	8012ec2 <__aeabi_fmul+0x15e>
 8012fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8012fe8:	bf18      	it	ne
 8012fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8012fee:	d1ca      	bne.n	8012f86 <__aeabi_fdiv+0xba>
 8012ff0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8012ff4:	f47f af5c 	bne.w	8012eb0 <__aeabi_fmul+0x14c>
 8012ff8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8012ffc:	f47f af3c 	bne.w	8012e78 <__aeabi_fmul+0x114>
 8013000:	e75f      	b.n	8012ec2 <__aeabi_fmul+0x15e>
 8013002:	bf00      	nop

08013004 <__gesf2>:
 8013004:	f04f 3cff 	mov.w	ip, #4294967295
 8013008:	e006      	b.n	8013018 <__cmpsf2+0x4>
 801300a:	bf00      	nop

0801300c <__lesf2>:
 801300c:	f04f 0c01 	mov.w	ip, #1
 8013010:	e002      	b.n	8013018 <__cmpsf2+0x4>
 8013012:	bf00      	nop

08013014 <__cmpsf2>:
 8013014:	f04f 0c01 	mov.w	ip, #1
 8013018:	f84d cd04 	str.w	ip, [sp, #-4]!
 801301c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8013020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8013024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8013028:	bf18      	it	ne
 801302a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 801302e:	d011      	beq.n	8013054 <__cmpsf2+0x40>
 8013030:	b001      	add	sp, #4
 8013032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8013036:	bf18      	it	ne
 8013038:	ea90 0f01 	teqne	r0, r1
 801303c:	bf58      	it	pl
 801303e:	ebb2 0003 	subspl.w	r0, r2, r3
 8013042:	bf88      	it	hi
 8013044:	17c8      	asrhi	r0, r1, #31
 8013046:	bf38      	it	cc
 8013048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 801304c:	bf18      	it	ne
 801304e:	f040 0001 	orrne.w	r0, r0, #1
 8013052:	4770      	bx	lr
 8013054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8013058:	d102      	bne.n	8013060 <__cmpsf2+0x4c>
 801305a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 801305e:	d105      	bne.n	801306c <__cmpsf2+0x58>
 8013060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8013064:	d1e4      	bne.n	8013030 <__cmpsf2+0x1c>
 8013066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 801306a:	d0e1      	beq.n	8013030 <__cmpsf2+0x1c>
 801306c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8013070:	4770      	bx	lr
 8013072:	bf00      	nop

08013074 <__aeabi_cfrcmple>:
 8013074:	4684      	mov	ip, r0
 8013076:	4608      	mov	r0, r1
 8013078:	4661      	mov	r1, ip
 801307a:	e7ff      	b.n	801307c <__aeabi_cfcmpeq>

0801307c <__aeabi_cfcmpeq>:
 801307c:	b50f      	push	{r0, r1, r2, r3, lr}
 801307e:	f7ff ffc9 	bl	8013014 <__cmpsf2>
 8013082:	2800      	cmp	r0, #0
 8013084:	bf48      	it	mi
 8013086:	f110 0f00 	cmnmi.w	r0, #0
 801308a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0801308c <__aeabi_fcmpeq>:
 801308c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8013090:	f7ff fff4 	bl	801307c <__aeabi_cfcmpeq>
 8013094:	bf0c      	ite	eq
 8013096:	2001      	moveq	r0, #1
 8013098:	2000      	movne	r0, #0
 801309a:	f85d fb08 	ldr.w	pc, [sp], #8
 801309e:	bf00      	nop

080130a0 <__aeabi_fcmplt>:
 80130a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80130a4:	f7ff ffea 	bl	801307c <__aeabi_cfcmpeq>
 80130a8:	bf34      	ite	cc
 80130aa:	2001      	movcc	r0, #1
 80130ac:	2000      	movcs	r0, #0
 80130ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80130b2:	bf00      	nop

080130b4 <__aeabi_fcmple>:
 80130b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80130b8:	f7ff ffe0 	bl	801307c <__aeabi_cfcmpeq>
 80130bc:	bf94      	ite	ls
 80130be:	2001      	movls	r0, #1
 80130c0:	2000      	movhi	r0, #0
 80130c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80130c6:	bf00      	nop

080130c8 <__aeabi_fcmpge>:
 80130c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80130cc:	f7ff ffd2 	bl	8013074 <__aeabi_cfrcmple>
 80130d0:	bf94      	ite	ls
 80130d2:	2001      	movls	r0, #1
 80130d4:	2000      	movhi	r0, #0
 80130d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80130da:	bf00      	nop

080130dc <__aeabi_fcmpgt>:
 80130dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80130e0:	f7ff ffc8 	bl	8013074 <__aeabi_cfrcmple>
 80130e4:	bf34      	ite	cc
 80130e6:	2001      	movcc	r0, #1
 80130e8:	2000      	movcs	r0, #0
 80130ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80130ee:	bf00      	nop

080130f0 <__aeabi_f2iz>:
 80130f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80130f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80130f8:	d30f      	bcc.n	801311a <__aeabi_f2iz+0x2a>
 80130fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80130fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8013102:	d90d      	bls.n	8013120 <__aeabi_f2iz+0x30>
 8013104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8013108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801310c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8013110:	fa23 f002 	lsr.w	r0, r3, r2
 8013114:	bf18      	it	ne
 8013116:	4240      	negne	r0, r0
 8013118:	4770      	bx	lr
 801311a:	f04f 0000 	mov.w	r0, #0
 801311e:	4770      	bx	lr
 8013120:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8013124:	d101      	bne.n	801312a <__aeabi_f2iz+0x3a>
 8013126:	0242      	lsls	r2, r0, #9
 8013128:	d105      	bne.n	8013136 <__aeabi_f2iz+0x46>
 801312a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 801312e:	bf08      	it	eq
 8013130:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8013134:	4770      	bx	lr
 8013136:	f04f 0000 	mov.w	r0, #0
 801313a:	4770      	bx	lr

0801313c <__aeabi_f2uiz>:
 801313c:	0042      	lsls	r2, r0, #1
 801313e:	d20e      	bcs.n	801315e <__aeabi_f2uiz+0x22>
 8013140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8013144:	d30b      	bcc.n	801315e <__aeabi_f2uiz+0x22>
 8013146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 801314a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 801314e:	d409      	bmi.n	8013164 <__aeabi_f2uiz+0x28>
 8013150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8013154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013158:	fa23 f002 	lsr.w	r0, r3, r2
 801315c:	4770      	bx	lr
 801315e:	f04f 0000 	mov.w	r0, #0
 8013162:	4770      	bx	lr
 8013164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8013168:	d101      	bne.n	801316e <__aeabi_f2uiz+0x32>
 801316a:	0242      	lsls	r2, r0, #9
 801316c:	d102      	bne.n	8013174 <__aeabi_f2uiz+0x38>
 801316e:	f04f 30ff 	mov.w	r0, #4294967295
 8013172:	4770      	bx	lr
 8013174:	f04f 0000 	mov.w	r0, #0
 8013178:	4770      	bx	lr
 801317a:	bf00      	nop

0801317c <__errno>:
 801317c:	f240 1388 	movw	r3, #392	; 0x188
 8013180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013184:	6818      	ldr	r0, [r3, #0]
 8013186:	4770      	bx	lr

08013188 <malloc>:
 8013188:	f240 1388 	movw	r3, #392	; 0x188
 801318c:	4601      	mov	r1, r0
 801318e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013192:	6818      	ldr	r0, [r3, #0]
 8013194:	f000 b808 	b.w	80131a8 <_malloc_r>

08013198 <free>:
 8013198:	f240 1388 	movw	r3, #392	; 0x188
 801319c:	4601      	mov	r1, r0
 801319e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80131a2:	6818      	ldr	r0, [r3, #0]
 80131a4:	f000 bb5a 	b.w	801385c <_free_r>

080131a8 <_malloc_r>:
 80131a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	f101 040b 	add.w	r4, r1, #11
 80131b0:	2c16      	cmp	r4, #22
 80131b2:	b083      	sub	sp, #12
 80131b4:	4606      	mov	r6, r0
 80131b6:	d931      	bls.n	801321c <_malloc_r+0x74>
 80131b8:	f024 0407 	bic.w	r4, r4, #7
 80131bc:	0fe3      	lsrs	r3, r4, #31
 80131be:	428c      	cmp	r4, r1
 80131c0:	bf2c      	ite	cs
 80131c2:	4619      	movcs	r1, r3
 80131c4:	f043 0101 	orrcc.w	r1, r3, #1
 80131c8:	2900      	cmp	r1, #0
 80131ca:	d130      	bne.n	801322e <_malloc_r+0x86>
 80131cc:	4630      	mov	r0, r6
 80131ce:	f000 faa9 	bl	8013724 <__malloc_lock>
 80131d2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80131d6:	d22f      	bcs.n	8013238 <_malloc_r+0x90>
 80131d8:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 80131dc:	f240 257c 	movw	r5, #636	; 0x27c
 80131e0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80131e4:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 80131e8:	462f      	mov	r7, r5
 80131ea:	68d3      	ldr	r3, [r2, #12]
 80131ec:	4293      	cmp	r3, r2
 80131ee:	f000 822d 	beq.w	801364c <_malloc_r+0x4a4>
 80131f2:	685c      	ldr	r4, [r3, #4]
 80131f4:	f103 0808 	add.w	r8, r3, #8
 80131f8:	68da      	ldr	r2, [r3, #12]
 80131fa:	4630      	mov	r0, r6
 80131fc:	f024 0403 	bic.w	r4, r4, #3
 8013200:	6899      	ldr	r1, [r3, #8]
 8013202:	191b      	adds	r3, r3, r4
 8013204:	685c      	ldr	r4, [r3, #4]
 8013206:	60ca      	str	r2, [r1, #12]
 8013208:	f044 0401 	orr.w	r4, r4, #1
 801320c:	6091      	str	r1, [r2, #8]
 801320e:	605c      	str	r4, [r3, #4]
 8013210:	f000 fa8a 	bl	8013728 <__malloc_unlock>
 8013214:	4640      	mov	r0, r8
 8013216:	b003      	add	sp, #12
 8013218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801321c:	2300      	movs	r3, #0
 801321e:	2410      	movs	r4, #16
 8013220:	428c      	cmp	r4, r1
 8013222:	bf2c      	ite	cs
 8013224:	4619      	movcs	r1, r3
 8013226:	f043 0101 	orrcc.w	r1, r3, #1
 801322a:	2900      	cmp	r1, #0
 801322c:	d0ce      	beq.n	80131cc <_malloc_r+0x24>
 801322e:	230c      	movs	r3, #12
 8013230:	f04f 0800 	mov.w	r8, #0
 8013234:	6033      	str	r3, [r6, #0]
 8013236:	e7ed      	b.n	8013214 <_malloc_r+0x6c>
 8013238:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 801323c:	bf04      	itt	eq
 801323e:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8013242:	ea4f 00cc 	moveq.w	r0, ip, lsl #3
 8013246:	f040 8086 	bne.w	8013356 <_malloc_r+0x1ae>
 801324a:	f240 257c 	movw	r5, #636	; 0x27c
 801324e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8013252:	1828      	adds	r0, r5, r0
 8013254:	462f      	mov	r7, r5
 8013256:	68c3      	ldr	r3, [r0, #12]
 8013258:	4298      	cmp	r0, r3
 801325a:	d106      	bne.n	801326a <_malloc_r+0xc2>
 801325c:	e00d      	b.n	801327a <_malloc_r+0xd2>
 801325e:	2900      	cmp	r1, #0
 8013260:	f280 8179 	bge.w	8013556 <_malloc_r+0x3ae>
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	4298      	cmp	r0, r3
 8013268:	d007      	beq.n	801327a <_malloc_r+0xd2>
 801326a:	685a      	ldr	r2, [r3, #4]
 801326c:	f022 0203 	bic.w	r2, r2, #3
 8013270:	1b11      	subs	r1, r2, r4
 8013272:	290f      	cmp	r1, #15
 8013274:	ddf3      	ble.n	801325e <_malloc_r+0xb6>
 8013276:	f10c 3cff 	add.w	ip, ip, #4294967295
 801327a:	f10c 0c01 	add.w	ip, ip, #1
 801327e:	4abd      	ldr	r2, [pc, #756]	; (8013574 <_malloc_r+0x3cc>)
 8013280:	6893      	ldr	r3, [r2, #8]
 8013282:	429a      	cmp	r2, r3
 8013284:	bf08      	it	eq
 8013286:	6878      	ldreq	r0, [r7, #4]
 8013288:	d024      	beq.n	80132d4 <_malloc_r+0x12c>
 801328a:	6858      	ldr	r0, [r3, #4]
 801328c:	f020 0003 	bic.w	r0, r0, #3
 8013290:	1b01      	subs	r1, r0, r4
 8013292:	290f      	cmp	r1, #15
 8013294:	f300 81c0 	bgt.w	8013618 <_malloc_r+0x470>
 8013298:	2900      	cmp	r1, #0
 801329a:	60d2      	str	r2, [r2, #12]
 801329c:	6092      	str	r2, [r2, #8]
 801329e:	f280 8094 	bge.w	80133ca <_malloc_r+0x222>
 80132a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80132a6:	f080 8177 	bcs.w	8013598 <_malloc_r+0x3f0>
 80132aa:	08c0      	lsrs	r0, r0, #3
 80132ac:	f04f 0e01 	mov.w	lr, #1
 80132b0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80132b4:	eb07 01c0 	add.w	r1, r7, r0, lsl #3
 80132b8:	1080      	asrs	r0, r0, #2
 80132ba:	fa0e f000 	lsl.w	r0, lr, r0
 80132be:	60d9      	str	r1, [r3, #12]
 80132c0:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80132c4:	ea40 0008 	orr.w	r0, r0, r8
 80132c8:	6078      	str	r0, [r7, #4]
 80132ca:	f8c3 e008 	str.w	lr, [r3, #8]
 80132ce:	f8ce 300c 	str.w	r3, [lr, #12]
 80132d2:	608b      	str	r3, [r1, #8]
 80132d4:	f04f 0e01 	mov.w	lr, #1
 80132d8:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80132dc:	fa0e fe03 	lsl.w	lr, lr, r3
 80132e0:	4586      	cmp	lr, r0
 80132e2:	d87d      	bhi.n	80133e0 <_malloc_r+0x238>
 80132e4:	ea10 0f0e 	tst.w	r0, lr
 80132e8:	d108      	bne.n	80132fc <_malloc_r+0x154>
 80132ea:	f02c 0c03 	bic.w	ip, ip, #3
 80132ee:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80132f2:	f10c 0c04 	add.w	ip, ip, #4
 80132f6:	ea10 0f0e 	tst.w	r0, lr
 80132fa:	d0f8      	beq.n	80132ee <_malloc_r+0x146>
 80132fc:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
 8013300:	46e1      	mov	r9, ip
 8013302:	46d0      	mov	r8, sl
 8013304:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8013308:	4580      	cmp	r8, r0
 801330a:	d107      	bne.n	801331c <_malloc_r+0x174>
 801330c:	e196      	b.n	801363c <_malloc_r+0x494>
 801330e:	2b00      	cmp	r3, #0
 8013310:	f280 81a6 	bge.w	8013660 <_malloc_r+0x4b8>
 8013314:	68c0      	ldr	r0, [r0, #12]
 8013316:	4580      	cmp	r8, r0
 8013318:	f000 8190 	beq.w	801363c <_malloc_r+0x494>
 801331c:	6841      	ldr	r1, [r0, #4]
 801331e:	f021 0103 	bic.w	r1, r1, #3
 8013322:	1b0b      	subs	r3, r1, r4
 8013324:	2b0f      	cmp	r3, #15
 8013326:	ddf2      	ble.n	801330e <_malloc_r+0x166>
 8013328:	4680      	mov	r8, r0
 801332a:	68c5      	ldr	r5, [r0, #12]
 801332c:	1901      	adds	r1, r0, r4
 801332e:	f044 0e01 	orr.w	lr, r4, #1
 8013332:	f858 7f08 	ldr.w	r7, [r8, #8]!
 8013336:	f043 0401 	orr.w	r4, r3, #1
 801333a:	f8c0 e004 	str.w	lr, [r0, #4]
 801333e:	4630      	mov	r0, r6
 8013340:	604c      	str	r4, [r1, #4]
 8013342:	60fd      	str	r5, [r7, #12]
 8013344:	60af      	str	r7, [r5, #8]
 8013346:	60d1      	str	r1, [r2, #12]
 8013348:	6091      	str	r1, [r2, #8]
 801334a:	60ca      	str	r2, [r1, #12]
 801334c:	608a      	str	r2, [r1, #8]
 801334e:	50cb      	str	r3, [r1, r3]
 8013350:	f000 f9ea 	bl	8013728 <__malloc_unlock>
 8013354:	e75e      	b.n	8013214 <_malloc_r+0x6c>
 8013356:	f1bc 0f04 	cmp.w	ip, #4
 801335a:	bf9e      	ittt	ls
 801335c:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 8013360:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 8013364:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8013368:	f67f af6f 	bls.w	801324a <_malloc_r+0xa2>
 801336c:	f1bc 0f14 	cmp.w	ip, #20
 8013370:	bf9c      	itt	ls
 8013372:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8013376:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 801337a:	f67f af66 	bls.w	801324a <_malloc_r+0xa2>
 801337e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8013382:	bf9e      	ittt	ls
 8013384:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 8013388:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 801338c:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8013390:	f67f af5b 	bls.w	801324a <_malloc_r+0xa2>
 8013394:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8013398:	bf9e      	ittt	ls
 801339a:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 801339e:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 80133a2:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 80133a6:	f67f af50 	bls.w	801324a <_malloc_r+0xa2>
 80133aa:	f240 5354 	movw	r3, #1364	; 0x554
 80133ae:	459c      	cmp	ip, r3
 80133b0:	bf95      	itete	ls
 80133b2:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 80133b6:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 80133ba:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80133be:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80133c2:	bf98      	it	ls
 80133c4:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 80133c8:	e73f      	b.n	801324a <_malloc_r+0xa2>
 80133ca:	181a      	adds	r2, r3, r0
 80133cc:	f103 0808 	add.w	r8, r3, #8
 80133d0:	4630      	mov	r0, r6
 80133d2:	6853      	ldr	r3, [r2, #4]
 80133d4:	f043 0301 	orr.w	r3, r3, #1
 80133d8:	6053      	str	r3, [r2, #4]
 80133da:	f000 f9a5 	bl	8013728 <__malloc_unlock>
 80133de:	e719      	b.n	8013214 <_malloc_r+0x6c>
 80133e0:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80133e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80133e8:	f023 0903 	bic.w	r9, r3, #3
 80133ec:	454c      	cmp	r4, r9
 80133ee:	ebc4 0209 	rsb	r2, r4, r9
 80133f2:	bf94      	ite	ls
 80133f4:	2300      	movls	r3, #0
 80133f6:	2301      	movhi	r3, #1
 80133f8:	2a0f      	cmp	r2, #15
 80133fa:	bfd8      	it	le
 80133fc:	f043 0301 	orrle.w	r3, r3, #1
 8013400:	2b00      	cmp	r3, #0
 8013402:	f000 80b9 	beq.w	8013578 <_malloc_r+0x3d0>
 8013406:	f640 2a14 	movw	sl, #2580	; 0xa14
 801340a:	f8d5 3408 	ldr.w	r3, [r5, #1032]	; 0x408
 801340e:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8013412:	4630      	mov	r0, r6
 8013414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013418:	f8da 2000 	ldr.w	r2, [sl]
 801341c:	f102 0b10 	add.w	fp, r2, #16
 8013420:	44a3      	add	fp, r4
 8013422:	bf1f      	itttt	ne
 8013424:	f50b 6b7e 	addne.w	fp, fp, #4064	; 0xfe0
 8013428:	f10b 0b1f 	addne.w	fp, fp, #31
 801342c:	f42b 6b7e 	bicne.w	fp, fp, #4064	; 0xfe0
 8013430:	f02b 0b1f 	bicne.w	fp, fp, #31
 8013434:	4659      	mov	r1, fp
 8013436:	f000 f979 	bl	801372c <_sbrk_r>
 801343a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801343e:	4603      	mov	r3, r0
 8013440:	f000 8118 	beq.w	8013674 <_malloc_r+0x4cc>
 8013444:	eb08 0109 	add.w	r1, r8, r9
 8013448:	4281      	cmp	r1, r0
 801344a:	f200 8110 	bhi.w	801366e <_malloc_r+0x4c6>
 801344e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8013452:	4281      	cmp	r1, r0
 8013454:	445a      	add	r2, fp
 8013456:	f8ca 2004 	str.w	r2, [sl, #4]
 801345a:	f000 813e 	beq.w	80136da <_malloc_r+0x532>
 801345e:	f8d5 e408 	ldr.w	lr, [r5, #1032]	; 0x408
 8013462:	f240 257c 	movw	r5, #636	; 0x27c
 8013466:	f2c2 0500 	movt	r5, #8192	; 0x2000
 801346a:	f1be 3fff 	cmp.w	lr, #4294967295
 801346e:	bf17      	itett	ne
 8013470:	1882      	addne	r2, r0, r2
 8013472:	f8c5 0408 	streq.w	r0, [r5, #1032]	; 0x408
 8013476:	ebc1 0102 	rsbne	r1, r1, r2
 801347a:	f8ca 1004 	strne.w	r1, [sl, #4]
 801347e:	f010 0507 	ands.w	r5, r0, #7
 8013482:	bf17      	itett	ne
 8013484:	f1c5 0508 	rsbne	r5, r5, #8
 8013488:	f44f 5580 	moveq.w	r5, #4096	; 0x1000
 801348c:	1943      	addne	r3, r0, r5
 801348e:	f505 5580 	addne.w	r5, r5, #4096	; 0x1000
 8013492:	eb03 020b 	add.w	r2, r3, fp
 8013496:	4630      	mov	r0, r6
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	0512      	lsls	r2, r2, #20
 801349c:	0d12      	lsrs	r2, r2, #20
 801349e:	1aad      	subs	r5, r5, r2
 80134a0:	4629      	mov	r1, r5
 80134a2:	f000 f943 	bl	801372c <_sbrk_r>
 80134a6:	9b01      	ldr	r3, [sp, #4]
 80134a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80134ac:	f000 812c 	beq.w	8013708 <_malloc_r+0x560>
 80134b0:	1ac1      	subs	r1, r0, r3
 80134b2:	1949      	adds	r1, r1, r5
 80134b4:	f041 0101 	orr.w	r1, r1, #1
 80134b8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80134bc:	45b8      	cmp	r8, r7
 80134be:	f640 2b14 	movw	fp, #2580	; 0xa14
 80134c2:	60bb      	str	r3, [r7, #8]
 80134c4:	442a      	add	r2, r5
 80134c6:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 80134ca:	6059      	str	r1, [r3, #4]
 80134cc:	f8ca 2004 	str.w	r2, [sl, #4]
 80134d0:	d017      	beq.n	8013502 <_malloc_r+0x35a>
 80134d2:	f1b9 0f0f 	cmp.w	r9, #15
 80134d6:	f240 80e1 	bls.w	801369c <_malloc_r+0x4f4>
 80134da:	f1a9 030c 	sub.w	r3, r9, #12
 80134de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80134e2:	f023 0307 	bic.w	r3, r3, #7
 80134e6:	2005      	movs	r0, #5
 80134e8:	eb08 0103 	add.w	r1, r8, r3
 80134ec:	2b0f      	cmp	r3, #15
 80134ee:	f005 0501 	and.w	r5, r5, #1
 80134f2:	ea43 0505 	orr.w	r5, r3, r5
 80134f6:	f8c8 5004 	str.w	r5, [r8, #4]
 80134fa:	6048      	str	r0, [r1, #4]
 80134fc:	6088      	str	r0, [r1, #8]
 80134fe:	f200 80fb 	bhi.w	80136f8 <_malloc_r+0x550>
 8013502:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 8013506:	f640 2314 	movw	r3, #2580	; 0xa14
 801350a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801350e:	428a      	cmp	r2, r1
 8013510:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 8013514:	bf88      	it	hi
 8013516:	62da      	strhi	r2, [r3, #44]	; 0x2c
 8013518:	f640 2314 	movw	r3, #2580	; 0xa14
 801351c:	428a      	cmp	r2, r1
 801351e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013522:	f240 80a7 	bls.w	8013674 <_malloc_r+0x4cc>
 8013526:	f8d7 8008 	ldr.w	r8, [r7, #8]
 801352a:	631a      	str	r2, [r3, #48]	; 0x30
 801352c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013530:	f023 0303 	bic.w	r3, r3, #3
 8013534:	429c      	cmp	r4, r3
 8013536:	ebc4 0203 	rsb	r2, r4, r3
 801353a:	bf94      	ite	ls
 801353c:	2300      	movls	r3, #0
 801353e:	2301      	movhi	r3, #1
 8013540:	2a0f      	cmp	r2, #15
 8013542:	bfd8      	it	le
 8013544:	f043 0301 	orrle.w	r3, r3, #1
 8013548:	b1b3      	cbz	r3, 8013578 <_malloc_r+0x3d0>
 801354a:	4630      	mov	r0, r6
 801354c:	f04f 0800 	mov.w	r8, #0
 8013550:	f000 f8ea 	bl	8013728 <__malloc_unlock>
 8013554:	e65e      	b.n	8013214 <_malloc_r+0x6c>
 8013556:	189a      	adds	r2, r3, r2
 8013558:	68d9      	ldr	r1, [r3, #12]
 801355a:	689c      	ldr	r4, [r3, #8]
 801355c:	f103 0808 	add.w	r8, r3, #8
 8013560:	6855      	ldr	r5, [r2, #4]
 8013562:	4630      	mov	r0, r6
 8013564:	f045 0301 	orr.w	r3, r5, #1
 8013568:	60e1      	str	r1, [r4, #12]
 801356a:	608c      	str	r4, [r1, #8]
 801356c:	6053      	str	r3, [r2, #4]
 801356e:	f000 f8db 	bl	8013728 <__malloc_unlock>
 8013572:	e64f      	b.n	8013214 <_malloc_r+0x6c>
 8013574:	20000284 	.word	0x20000284
 8013578:	eb08 0304 	add.w	r3, r8, r4
 801357c:	f042 0201 	orr.w	r2, r2, #1
 8013580:	f044 0401 	orr.w	r4, r4, #1
 8013584:	4630      	mov	r0, r6
 8013586:	f8c8 4004 	str.w	r4, [r8, #4]
 801358a:	f108 0808 	add.w	r8, r8, #8
 801358e:	605a      	str	r2, [r3, #4]
 8013590:	60bb      	str	r3, [r7, #8]
 8013592:	f000 f8c9 	bl	8013728 <__malloc_unlock>
 8013596:	e63d      	b.n	8013214 <_malloc_r+0x6c>
 8013598:	0a41      	lsrs	r1, r0, #9
 801359a:	2904      	cmp	r1, #4
 801359c:	bf9c      	itt	ls
 801359e:	ea4f 1e90 	movls.w	lr, r0, lsr #6
 80135a2:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80135a6:	d91d      	bls.n	80135e4 <_malloc_r+0x43c>
 80135a8:	2914      	cmp	r1, #20
 80135aa:	bf98      	it	ls
 80135ac:	f101 0e5b 	addls.w	lr, r1, #91	; 0x5b
 80135b0:	d918      	bls.n	80135e4 <_malloc_r+0x43c>
 80135b2:	2954      	cmp	r1, #84	; 0x54
 80135b4:	bf9c      	itt	ls
 80135b6:	ea4f 3e10 	movls.w	lr, r0, lsr #12
 80135ba:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 80135be:	d911      	bls.n	80135e4 <_malloc_r+0x43c>
 80135c0:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 80135c4:	bf9c      	itt	ls
 80135c6:	ea4f 3ed0 	movls.w	lr, r0, lsr #15
 80135ca:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 80135ce:	d909      	bls.n	80135e4 <_malloc_r+0x43c>
 80135d0:	f240 5e54 	movw	lr, #1364	; 0x554
 80135d4:	4571      	cmp	r1, lr
 80135d6:	bf96      	itet	ls
 80135d8:	ea4f 4e90 	movls.w	lr, r0, lsr #18
 80135dc:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 80135e0:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 80135e4:	eb07 08ce 	add.w	r8, r7, lr, lsl #3
 80135e8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80135ec:	4541      	cmp	r1, r8
 80135ee:	d103      	bne.n	80135f8 <_malloc_r+0x450>
 80135f0:	e047      	b.n	8013682 <_malloc_r+0x4da>
 80135f2:	6889      	ldr	r1, [r1, #8]
 80135f4:	4588      	cmp	r8, r1
 80135f6:	d005      	beq.n	8013604 <_malloc_r+0x45c>
 80135f8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80135fc:	f02e 0e03 	bic.w	lr, lr, #3
 8013600:	4570      	cmp	r0, lr
 8013602:	d3f6      	bcc.n	80135f2 <_malloc_r+0x44a>
 8013604:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8013608:	f8c3 e00c 	str.w	lr, [r3, #12]
 801360c:	6099      	str	r1, [r3, #8]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	60cb      	str	r3, [r1, #12]
 8013612:	f8ce 3008 	str.w	r3, [lr, #8]
 8013616:	e65d      	b.n	80132d4 <_malloc_r+0x12c>
 8013618:	191d      	adds	r5, r3, r4
 801361a:	f041 0701 	orr.w	r7, r1, #1
 801361e:	60d5      	str	r5, [r2, #12]
 8013620:	f044 0401 	orr.w	r4, r4, #1
 8013624:	6095      	str	r5, [r2, #8]
 8013626:	4630      	mov	r0, r6
 8013628:	605c      	str	r4, [r3, #4]
 801362a:	f103 0808 	add.w	r8, r3, #8
 801362e:	60ea      	str	r2, [r5, #12]
 8013630:	60aa      	str	r2, [r5, #8]
 8013632:	606f      	str	r7, [r5, #4]
 8013634:	5069      	str	r1, [r5, r1]
 8013636:	f000 f877 	bl	8013728 <__malloc_unlock>
 801363a:	e5eb      	b.n	8013214 <_malloc_r+0x6c>
 801363c:	f109 0901 	add.w	r9, r9, #1
 8013640:	f019 0f03 	tst.w	r9, #3
 8013644:	d02f      	beq.n	80136a6 <_malloc_r+0x4fe>
 8013646:	f108 0808 	add.w	r8, r8, #8
 801364a:	e65b      	b.n	8013304 <_malloc_r+0x15c>
 801364c:	f103 0208 	add.w	r2, r3, #8
 8013650:	695b      	ldr	r3, [r3, #20]
 8013652:	429a      	cmp	r2, r3
 8013654:	bf08      	it	eq
 8013656:	f10c 0c02 	addeq.w	ip, ip, #2
 801365a:	f43f ae10 	beq.w	801327e <_malloc_r+0xd6>
 801365e:	e5c8      	b.n	80131f2 <_malloc_r+0x4a>
 8013660:	4680      	mov	r8, r0
 8013662:	1843      	adds	r3, r0, r1
 8013664:	68c2      	ldr	r2, [r0, #12]
 8013666:	4630      	mov	r0, r6
 8013668:	f858 1f08 	ldr.w	r1, [r8, #8]!
 801366c:	e5ca      	b.n	8013204 <_malloc_r+0x5c>
 801366e:	45b8      	cmp	r8, r7
 8013670:	f43f aeed 	beq.w	801344e <_malloc_r+0x2a6>
 8013674:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8013678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801367c:	f023 0303 	bic.w	r3, r3, #3
 8013680:	e758      	b.n	8013534 <_malloc_r+0x38c>
 8013682:	f04f 0901 	mov.w	r9, #1
 8013686:	f8d7 8004 	ldr.w	r8, [r7, #4]
 801368a:	ea4f 00ae 	mov.w	r0, lr, asr #2
 801368e:	468e      	mov	lr, r1
 8013690:	fa09 f000 	lsl.w	r0, r9, r0
 8013694:	ea48 0000 	orr.w	r0, r8, r0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	e7b5      	b.n	8013608 <_malloc_r+0x460>
 801369c:	4698      	mov	r8, r3
 801369e:	2201      	movs	r2, #1
 80136a0:	605a      	str	r2, [r3, #4]
 80136a2:	2300      	movs	r3, #0
 80136a4:	e746      	b.n	8013534 <_malloc_r+0x38c>
 80136a6:	4651      	mov	r1, sl
 80136a8:	f01c 0f03 	tst.w	ip, #3
 80136ac:	460b      	mov	r3, r1
 80136ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80136b2:	d02c      	beq.n	801370e <_malloc_r+0x566>
 80136b4:	f853 1908 	ldr.w	r1, [r3], #-8
 80136b8:	4299      	cmp	r1, r3
 80136ba:	d0f5      	beq.n	80136a8 <_malloc_r+0x500>
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80136c2:	459e      	cmp	lr, r3
 80136c4:	f63f ae8c 	bhi.w	80133e0 <_malloc_r+0x238>
 80136c8:	f1be 0f00 	cmp.w	lr, #0
 80136cc:	f43f ae88 	beq.w	80133e0 <_malloc_r+0x238>
 80136d0:	ea1e 0f03 	tst.w	lr, r3
 80136d4:	d020      	beq.n	8013718 <_malloc_r+0x570>
 80136d6:	46cc      	mov	ip, r9
 80136d8:	e610      	b.n	80132fc <_malloc_r+0x154>
 80136da:	ea4f 5e01 	mov.w	lr, r1, lsl #20
 80136de:	ea4f 5e1e 	mov.w	lr, lr, lsr #20
 80136e2:	f1be 0f00 	cmp.w	lr, #0
 80136e6:	f47f aeba 	bne.w	801345e <_malloc_r+0x2b6>
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	eb0b 0109 	add.w	r1, fp, r9
 80136f0:	f041 0101 	orr.w	r1, r1, #1
 80136f4:	6059      	str	r1, [r3, #4]
 80136f6:	e704      	b.n	8013502 <_malloc_r+0x35a>
 80136f8:	4630      	mov	r0, r6
 80136fa:	f108 0108 	add.w	r1, r8, #8
 80136fe:	f000 f8ad 	bl	801385c <_free_r>
 8013702:	f8db 2004 	ldr.w	r2, [fp, #4]
 8013706:	e6fc      	b.n	8013502 <_malloc_r+0x35a>
 8013708:	2101      	movs	r1, #1
 801370a:	2500      	movs	r5, #0
 801370c:	e6d4      	b.n	80134b8 <_malloc_r+0x310>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	ea23 030e 	bic.w	r3, r3, lr
 8013714:	607b      	str	r3, [r7, #4]
 8013716:	e7d1      	b.n	80136bc <_malloc_r+0x514>
 8013718:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801371c:	f109 0904 	add.w	r9, r9, #4
 8013720:	e7d6      	b.n	80136d0 <_malloc_r+0x528>
 8013722:	bf00      	nop

08013724 <__malloc_lock>:
 8013724:	4770      	bx	lr
 8013726:	bf00      	nop

08013728 <__malloc_unlock>:
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop

0801372c <_sbrk_r>:
 801372c:	b538      	push	{r3, r4, r5, lr}
 801372e:	f640 64f0 	movw	r4, #3824	; 0xef0
 8013732:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8013736:	4605      	mov	r5, r0
 8013738:	4608      	mov	r0, r1
 801373a:	2300      	movs	r3, #0
 801373c:	6023      	str	r3, [r4, #0]
 801373e:	f000 f999 	bl	8013a74 <_sbrk>
 8013742:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013746:	d000      	beq.n	801374a <_sbrk_r+0x1e>
 8013748:	bd38      	pop	{r3, r4, r5, pc}
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d0fb      	beq.n	8013748 <_sbrk_r+0x1c>
 8013750:	602b      	str	r3, [r5, #0]
 8013752:	bd38      	pop	{r3, r4, r5, pc}

08013754 <strlen>:
 8013754:	f020 0103 	bic.w	r1, r0, #3
 8013758:	f010 0003 	ands.w	r0, r0, #3
 801375c:	f1c0 0000 	rsb	r0, r0, #0
 8013760:	f851 3b04 	ldr.w	r3, [r1], #4
 8013764:	f100 0c04 	add.w	ip, r0, #4
 8013768:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801376c:	f06f 0200 	mvn.w	r2, #0
 8013770:	bf1c      	itt	ne
 8013772:	fa22 f20c 	lsrne.w	r2, r2, ip
 8013776:	4313      	orrne	r3, r2
 8013778:	f04f 0c01 	mov.w	ip, #1
 801377c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8013780:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8013784:	eba3 020c 	sub.w	r2, r3, ip
 8013788:	ea22 0203 	bic.w	r2, r2, r3
 801378c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8013790:	bf04      	itt	eq
 8013792:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013796:	3004      	addeq	r0, #4
 8013798:	d0f4      	beq.n	8013784 <strlen+0x30>
 801379a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801379e:	bf1f      	itttt	ne
 80137a0:	3001      	addne	r0, #1
 80137a2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80137a6:	3001      	addne	r0, #1
 80137a8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80137ac:	bf18      	it	ne
 80137ae:	3001      	addne	r0, #1
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop

080137b4 <_malloc_trim_r>:
 80137b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b6:	f240 247c 	movw	r4, #636	; 0x27c
 80137ba:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80137be:	460f      	mov	r7, r1
 80137c0:	4605      	mov	r5, r0
 80137c2:	f7ff ffaf 	bl	8013724 <__malloc_lock>
 80137c6:	68a3      	ldr	r3, [r4, #8]
 80137c8:	685e      	ldr	r6, [r3, #4]
 80137ca:	f026 0603 	bic.w	r6, r6, #3
 80137ce:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 80137d2:	330f      	adds	r3, #15
 80137d4:	1bdf      	subs	r7, r3, r7
 80137d6:	0b3f      	lsrs	r7, r7, #12
 80137d8:	3f01      	subs	r7, #1
 80137da:	033f      	lsls	r7, r7, #12
 80137dc:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80137e0:	db07      	blt.n	80137f2 <_malloc_trim_r+0x3e>
 80137e2:	2100      	movs	r1, #0
 80137e4:	4628      	mov	r0, r5
 80137e6:	f7ff ffa1 	bl	801372c <_sbrk_r>
 80137ea:	68a3      	ldr	r3, [r4, #8]
 80137ec:	199b      	adds	r3, r3, r6
 80137ee:	4298      	cmp	r0, r3
 80137f0:	d004      	beq.n	80137fc <_malloc_trim_r+0x48>
 80137f2:	4628      	mov	r0, r5
 80137f4:	f7ff ff98 	bl	8013728 <__malloc_unlock>
 80137f8:	2000      	movs	r0, #0
 80137fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137fc:	4279      	negs	r1, r7
 80137fe:	4628      	mov	r0, r5
 8013800:	f7ff ff94 	bl	801372c <_sbrk_r>
 8013804:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013808:	d010      	beq.n	801382c <_malloc_trim_r+0x78>
 801380a:	f640 2318 	movw	r3, #2584	; 0xa18
 801380e:	68a1      	ldr	r1, [r4, #8]
 8013810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013814:	1bf6      	subs	r6, r6, r7
 8013816:	4628      	mov	r0, r5
 8013818:	f046 0601 	orr.w	r6, r6, #1
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	604e      	str	r6, [r1, #4]
 8013820:	1bd7      	subs	r7, r2, r7
 8013822:	601f      	str	r7, [r3, #0]
 8013824:	f7ff ff80 	bl	8013728 <__malloc_unlock>
 8013828:	2001      	movs	r0, #1
 801382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801382c:	2100      	movs	r1, #0
 801382e:	4628      	mov	r0, r5
 8013830:	f7ff ff7c 	bl	801372c <_sbrk_r>
 8013834:	68a3      	ldr	r3, [r4, #8]
 8013836:	1ac2      	subs	r2, r0, r3
 8013838:	2a0f      	cmp	r2, #15
 801383a:	ddda      	ble.n	80137f2 <_malloc_trim_r+0x3e>
 801383c:	f240 6484 	movw	r4, #1668	; 0x684
 8013840:	f640 2118 	movw	r1, #2584	; 0xa18
 8013844:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8013848:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801384c:	f042 0201 	orr.w	r2, r2, #1
 8013850:	605a      	str	r2, [r3, #4]
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	1ac0      	subs	r0, r0, r3
 8013856:	6008      	str	r0, [r1, #0]
 8013858:	e7cb      	b.n	80137f2 <_malloc_trim_r+0x3e>
 801385a:	bf00      	nop

0801385c <_free_r>:
 801385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013860:	460d      	mov	r5, r1
 8013862:	4604      	mov	r4, r0
 8013864:	2900      	cmp	r1, #0
 8013866:	d058      	beq.n	801391a <_free_r+0xbe>
 8013868:	f7ff ff5c 	bl	8013724 <__malloc_lock>
 801386c:	f1a5 0208 	sub.w	r2, r5, #8
 8013870:	f240 207c 	movw	r0, #636	; 0x27c
 8013874:	6856      	ldr	r6, [r2, #4]
 8013876:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801387a:	f026 0301 	bic.w	r3, r6, #1
 801387e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8013882:	18d1      	adds	r1, r2, r3
 8013884:	458c      	cmp	ip, r1
 8013886:	684f      	ldr	r7, [r1, #4]
 8013888:	f027 0703 	bic.w	r7, r7, #3
 801388c:	d065      	beq.n	801395a <_free_r+0xfe>
 801388e:	f016 0601 	ands.w	r6, r6, #1
 8013892:	604f      	str	r7, [r1, #4]
 8013894:	d031      	beq.n	80138fa <_free_r+0x9e>
 8013896:	2600      	movs	r6, #0
 8013898:	19cd      	adds	r5, r1, r7
 801389a:	686d      	ldr	r5, [r5, #4]
 801389c:	f015 0f01 	tst.w	r5, #1
 80138a0:	d106      	bne.n	80138b0 <_free_r+0x54>
 80138a2:	19db      	adds	r3, r3, r7
 80138a4:	2e00      	cmp	r6, #0
 80138a6:	d04b      	beq.n	8013940 <_free_r+0xe4>
 80138a8:	688d      	ldr	r5, [r1, #8]
 80138aa:	68c9      	ldr	r1, [r1, #12]
 80138ac:	60e9      	str	r1, [r5, #12]
 80138ae:	608d      	str	r5, [r1, #8]
 80138b0:	f043 0101 	orr.w	r1, r3, #1
 80138b4:	50d3      	str	r3, [r2, r3]
 80138b6:	6051      	str	r1, [r2, #4]
 80138b8:	b9d6      	cbnz	r6, 80138f0 <_free_r+0x94>
 80138ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138be:	d32e      	bcc.n	801391e <_free_r+0xc2>
 80138c0:	0a59      	lsrs	r1, r3, #9
 80138c2:	2904      	cmp	r1, #4
 80138c4:	d86b      	bhi.n	801399e <_free_r+0x142>
 80138c6:	099e      	lsrs	r6, r3, #6
 80138c8:	3638      	adds	r6, #56	; 0x38
 80138ca:	00f5      	lsls	r5, r6, #3
 80138cc:	1945      	adds	r5, r0, r5
 80138ce:	68a9      	ldr	r1, [r5, #8]
 80138d0:	42a9      	cmp	r1, r5
 80138d2:	d103      	bne.n	80138dc <_free_r+0x80>
 80138d4:	e069      	b.n	80139aa <_free_r+0x14e>
 80138d6:	6889      	ldr	r1, [r1, #8]
 80138d8:	428d      	cmp	r5, r1
 80138da:	d004      	beq.n	80138e6 <_free_r+0x8a>
 80138dc:	6848      	ldr	r0, [r1, #4]
 80138de:	f020 0003 	bic.w	r0, r0, #3
 80138e2:	4283      	cmp	r3, r0
 80138e4:	d3f7      	bcc.n	80138d6 <_free_r+0x7a>
 80138e6:	68cb      	ldr	r3, [r1, #12]
 80138e8:	60d3      	str	r3, [r2, #12]
 80138ea:	6091      	str	r1, [r2, #8]
 80138ec:	60ca      	str	r2, [r1, #12]
 80138ee:	609a      	str	r2, [r3, #8]
 80138f0:	4620      	mov	r0, r4
 80138f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138f6:	f7ff bf17 	b.w	8013728 <__malloc_unlock>
 80138fa:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80138fe:	f100 0c08 	add.w	ip, r0, #8
 8013902:	1b52      	subs	r2, r2, r5
 8013904:	195b      	adds	r3, r3, r5
 8013906:	6895      	ldr	r5, [r2, #8]
 8013908:	4565      	cmp	r5, ip
 801390a:	d046      	beq.n	801399a <_free_r+0x13e>
 801390c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8013910:	f8c5 c00c 	str.w	ip, [r5, #12]
 8013914:	f8cc 5008 	str.w	r5, [ip, #8]
 8013918:	e7be      	b.n	8013898 <_free_r+0x3c>
 801391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391e:	08db      	lsrs	r3, r3, #3
 8013920:	2501      	movs	r5, #1
 8013922:	6846      	ldr	r6, [r0, #4]
 8013924:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 8013928:	109b      	asrs	r3, r3, #2
 801392a:	fa15 f303 	lsls.w	r3, r5, r3
 801392e:	60d1      	str	r1, [r2, #12]
 8013930:	688d      	ldr	r5, [r1, #8]
 8013932:	ea46 0303 	orr.w	r3, r6, r3
 8013936:	6043      	str	r3, [r0, #4]
 8013938:	6095      	str	r5, [r2, #8]
 801393a:	60ea      	str	r2, [r5, #12]
 801393c:	608a      	str	r2, [r1, #8]
 801393e:	e7d7      	b.n	80138f0 <_free_r+0x94>
 8013940:	688d      	ldr	r5, [r1, #8]
 8013942:	4f2b      	ldr	r7, [pc, #172]	; (80139f0 <_free_r+0x194>)
 8013944:	42bd      	cmp	r5, r7
 8013946:	d1b0      	bne.n	80138aa <_free_r+0x4e>
 8013948:	60ea      	str	r2, [r5, #12]
 801394a:	f043 0101 	orr.w	r1, r3, #1
 801394e:	60aa      	str	r2, [r5, #8]
 8013950:	60d5      	str	r5, [r2, #12]
 8013952:	6095      	str	r5, [r2, #8]
 8013954:	6051      	str	r1, [r2, #4]
 8013956:	50d3      	str	r3, [r2, r3]
 8013958:	e7ca      	b.n	80138f0 <_free_r+0x94>
 801395a:	f016 0f01 	tst.w	r6, #1
 801395e:	443b      	add	r3, r7
 8013960:	d107      	bne.n	8013972 <_free_r+0x116>
 8013962:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8013966:	1a52      	subs	r2, r2, r1
 8013968:	185b      	adds	r3, r3, r1
 801396a:	6895      	ldr	r5, [r2, #8]
 801396c:	68d1      	ldr	r1, [r2, #12]
 801396e:	60e9      	str	r1, [r5, #12]
 8013970:	608d      	str	r5, [r1, #8]
 8013972:	f240 6188 	movw	r1, #1672	; 0x688
 8013976:	f043 0501 	orr.w	r5, r3, #1
 801397a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801397e:	6055      	str	r5, [r2, #4]
 8013980:	6082      	str	r2, [r0, #8]
 8013982:	680a      	ldr	r2, [r1, #0]
 8013984:	4293      	cmp	r3, r2
 8013986:	d3b3      	bcc.n	80138f0 <_free_r+0x94>
 8013988:	f640 2314 	movw	r3, #2580	; 0xa14
 801398c:	4620      	mov	r0, r4
 801398e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013992:	6819      	ldr	r1, [r3, #0]
 8013994:	f7ff ff0e 	bl	80137b4 <_malloc_trim_r>
 8013998:	e7aa      	b.n	80138f0 <_free_r+0x94>
 801399a:	2601      	movs	r6, #1
 801399c:	e77c      	b.n	8013898 <_free_r+0x3c>
 801399e:	2914      	cmp	r1, #20
 80139a0:	d80c      	bhi.n	80139bc <_free_r+0x160>
 80139a2:	f101 065b 	add.w	r6, r1, #91	; 0x5b
 80139a6:	00f5      	lsls	r5, r6, #3
 80139a8:	e790      	b.n	80138cc <_free_r+0x70>
 80139aa:	2501      	movs	r5, #1
 80139ac:	6847      	ldr	r7, [r0, #4]
 80139ae:	10b6      	asrs	r6, r6, #2
 80139b0:	460b      	mov	r3, r1
 80139b2:	40b5      	lsls	r5, r6
 80139b4:	ea47 0505 	orr.w	r5, r7, r5
 80139b8:	6045      	str	r5, [r0, #4]
 80139ba:	e795      	b.n	80138e8 <_free_r+0x8c>
 80139bc:	2954      	cmp	r1, #84	; 0x54
 80139be:	d803      	bhi.n	80139c8 <_free_r+0x16c>
 80139c0:	0b1e      	lsrs	r6, r3, #12
 80139c2:	366e      	adds	r6, #110	; 0x6e
 80139c4:	00f5      	lsls	r5, r6, #3
 80139c6:	e781      	b.n	80138cc <_free_r+0x70>
 80139c8:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 80139cc:	d803      	bhi.n	80139d6 <_free_r+0x17a>
 80139ce:	0bde      	lsrs	r6, r3, #15
 80139d0:	3677      	adds	r6, #119	; 0x77
 80139d2:	00f5      	lsls	r5, r6, #3
 80139d4:	e77a      	b.n	80138cc <_free_r+0x70>
 80139d6:	f240 5554 	movw	r5, #1364	; 0x554
 80139da:	42a9      	cmp	r1, r5
 80139dc:	d803      	bhi.n	80139e6 <_free_r+0x18a>
 80139de:	0c9e      	lsrs	r6, r3, #18
 80139e0:	367c      	adds	r6, #124	; 0x7c
 80139e2:	00f5      	lsls	r5, r6, #3
 80139e4:	e772      	b.n	80138cc <_free_r+0x70>
 80139e6:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 80139ea:	267e      	movs	r6, #126	; 0x7e
 80139ec:	e76e      	b.n	80138cc <_free_r+0x70>
 80139ee:	bf00      	nop
 80139f0:	20000284 	.word	0x20000284

080139f4 <__cs3_premain>:
 80139f4:	b508      	push	{r3, lr}
 80139f6:	f000 f867 	bl	8013ac8 <__libc_init_array>
 80139fa:	4807      	ldr	r0, [pc, #28]	; (8013a18 <__cs3_premain+0x24>)
 80139fc:	b100      	cbz	r0, 8013a00 <__cs3_premain+0xc>
 80139fe:	6800      	ldr	r0, [r0, #0]
 8013a00:	4906      	ldr	r1, [pc, #24]	; (8013a1c <__cs3_premain+0x28>)
 8013a02:	b101      	cbz	r1, 8013a06 <__cs3_premain+0x12>
 8013a04:	6809      	ldr	r1, [r1, #0]
 8013a06:	2200      	movs	r2, #0
 8013a08:	f7f8 fdc4 	bl	800c594 <main>
 8013a0c:	4b04      	ldr	r3, [pc, #16]	; (8013a20 <__cs3_premain+0x2c>)
 8013a0e:	b10b      	cbz	r3, 8013a14 <__cs3_premain+0x20>
 8013a10:	f3af 8000 	nop.w
 8013a14:	e7fe      	b.n	8013a14 <__cs3_premain+0x20>
 8013a16:	bf00      	nop
	...

08013a24 <__cs3_start_c>:
 8013a24:	b580      	push	{r7, lr}
 8013a26:	4911      	ldr	r1, [pc, #68]	; (8013a6c <__cs3_start_c+0x48>)
 8013a28:	4a11      	ldr	r2, [pc, #68]	; (8013a70 <__cs3_start_c+0x4c>)
 8013a2a:	e01a      	b.n	8013a62 <__cs3_start_c+0x3e>
 8013a2c:	6855      	ldr	r5, [r2, #4]
 8013a2e:	6893      	ldr	r3, [r2, #8]
 8013a30:	68d4      	ldr	r4, [r2, #12]
 8013a32:	429d      	cmp	r5, r3
 8013a34:	d009      	beq.n	8013a4a <__cs3_start_c+0x26>
 8013a36:	2000      	movs	r0, #0
 8013a38:	e004      	b.n	8013a44 <__cs3_start_c+0x20>
 8013a3a:	e8f5 6702 	ldrd	r6, r7, [r5], #8
 8013a3e:	3008      	adds	r0, #8
 8013a40:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013a44:	42a0      	cmp	r0, r4
 8013a46:	d1f8      	bne.n	8013a3a <__cs3_start_c+0x16>
 8013a48:	e000      	b.n	8013a4c <__cs3_start_c+0x28>
 8013a4a:	191b      	adds	r3, r3, r4
 8013a4c:	6914      	ldr	r4, [r2, #16]
 8013a4e:	2000      	movs	r0, #0
 8013a50:	e004      	b.n	8013a5c <__cs3_start_c+0x38>
 8013a52:	3008      	adds	r0, #8
 8013a54:	2600      	movs	r6, #0
 8013a56:	2700      	movs	r7, #0
 8013a58:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013a5c:	42a0      	cmp	r0, r4
 8013a5e:	d1f8      	bne.n	8013a52 <__cs3_start_c+0x2e>
 8013a60:	3214      	adds	r2, #20
 8013a62:	3901      	subs	r1, #1
 8013a64:	d2e2      	bcs.n	8013a2c <__cs3_start_c+0x8>
 8013a66:	f7ff ffc5 	bl	80139f4 <__cs3_premain>
 8013a6a:	bf00      	nop
 8013a6c:	00000001 	.word	0x00000001
 8013a70:	0801b860 	.word	0x0801b860

08013a74 <_sbrk>:
 8013a74:	b508      	push	{r3, lr}
 8013a76:	490d      	ldr	r1, [pc, #52]	; (8013aac <_sbrk+0x38>)
 8013a78:	4b0d      	ldr	r3, [pc, #52]	; (8013ab0 <_sbrk+0x3c>)
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	680b      	ldr	r3, [r1, #0]
 8013a7e:	1818      	adds	r0, r3, r0
 8013a80:	b14a      	cbz	r2, 8013a96 <_sbrk+0x22>
 8013a82:	1a12      	subs	r2, r2, r0
 8013a84:	2a00      	cmp	r2, #0
 8013a86:	da06      	bge.n	8013a96 <_sbrk+0x22>
 8013a88:	f7ff fb78 	bl	801317c <__errno>
 8013a8c:	230c      	movs	r3, #12
 8013a8e:	6003      	str	r3, [r0, #0]
 8013a90:	f04f 30ff 	mov.w	r0, #4294967295
 8013a94:	bd08      	pop	{r3, pc}
 8013a96:	ebad 0203 	sub.w	r2, sp, r3
 8013a9a:	2a00      	cmp	r2, #0
 8013a9c:	db03      	blt.n	8013aa6 <_sbrk+0x32>
 8013a9e:	ebad 0200 	sub.w	r2, sp, r0
 8013aa2:	2aff      	cmp	r2, #255	; 0xff
 8013aa4:	ddf0      	ble.n	8013a88 <_sbrk+0x14>
 8013aa6:	6008      	str	r0, [r1, #0]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	bd08      	pop	{r3, pc}
 8013aac:	2000068c 	.word	0x2000068c
 8013ab0:	20000690 	.word	0x20000690

08013ab4 <__cs3_reset>:
 8013ab4:	4901      	ldr	r1, [pc, #4]	; (8013abc <__cs3_reset+0x8>)
 8013ab6:	468d      	mov	sp, r1
 8013ab8:	4901      	ldr	r1, [pc, #4]	; (8013ac0 <__cs3_reset+0xc>)
 8013aba:	4708      	bx	r1
 8013abc:	20005000 	.word	0x20005000
 8013ac0:	08013a25 	.word	0x08013a25

08013ac4 <__STM32DefaultExceptionHandler>:
 8013ac4:	e7fe      	b.n	8013ac4 <__STM32DefaultExceptionHandler>
	...

08013ac8 <__libc_init_array>:
 8013ac8:	b570      	push	{r4, r5, r6, lr}
 8013aca:	f64b 064c 	movw	r6, #47180	; 0xb84c
 8013ace:	f64b 054c 	movw	r5, #47180	; 0xb84c
 8013ad2:	f6c0 0601 	movt	r6, #2049	; 0x801
 8013ad6:	f6c0 0501 	movt	r5, #2049	; 0x801
 8013ada:	1b76      	subs	r6, r6, r5
 8013adc:	10b6      	asrs	r6, r6, #2
 8013ade:	d006      	beq.n	8013aee <__libc_init_array+0x26>
 8013ae0:	2400      	movs	r4, #0
 8013ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ae6:	3401      	adds	r4, #1
 8013ae8:	4798      	blx	r3
 8013aea:	42a6      	cmp	r6, r4
 8013aec:	d1f9      	bne.n	8013ae2 <__libc_init_array+0x1a>
 8013aee:	f64b 0650 	movw	r6, #47184	; 0xb850
 8013af2:	f64b 054c 	movw	r5, #47180	; 0xb84c
 8013af6:	f6c0 0601 	movt	r6, #2049	; 0x801
 8013afa:	f6c0 0501 	movt	r5, #2049	; 0x801
 8013afe:	1b76      	subs	r6, r6, r5
 8013b00:	f007 fe9e 	bl	801b840 <_init>
 8013b04:	10b6      	asrs	r6, r6, #2
 8013b06:	d006      	beq.n	8013b16 <__libc_init_array+0x4e>
 8013b08:	2400      	movs	r4, #0
 8013b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b0e:	3401      	adds	r4, #1
 8013b10:	4798      	blx	r3
 8013b12:	42a6      	cmp	r6, r4
 8013b14:	d1f9      	bne.n	8013b0a <__libc_init_array+0x42>
 8013b16:	bd70      	pop	{r4, r5, r6, pc}

08013b18 <MASS_DeviceDescriptor>:
 8013b18:	0112 0200 0000 4000 0483 5720 0200 0201     .......@.. W....
 8013b28:	0103 0000                                   ....

08013b2c <MASS_ConfigDescriptor>:
 8013b2c:	0209 0020 0101 c000 09fa 0004 0200 0608     .. .............
 8013b3c:	0450 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

08013b4c <MASS_StringLangID>:
 8013b4c:	0304 0409                                   ....

08013b50 <MASS_StringVendor>:
 8013b50:	0332 0055 006e 0069 0076 0065 0072 0073     2.U.n.i.v.e.r.s.
 8013b60:	0069 0074 0079 0020 006f 0066 0020 004e     i.t.y. .o.f. .N.
 8013b70:	006f 0074 0074 0069 006e 0067 0068 0061     o.t.t.i.n.g.h.a.
 8013b80:	006d 0000                                   m...

08013b84 <MASS_StringProduct>:
 8013b84:	032e 0043 0061 0070 0069 006c 006c 0061     ..C.a.p.i.l.l.a.
 8013b94:	0072 0079 0020 0072 0065 0066 0069 006c     r.y. .r.e.f.i.l.
 8013ba4:	006c 0020 0074 0069 006d 0065 0072 0000     l. .t.i.m.e.r...

08013bb4 <MASS_StringInterface>:
 8013bb4:	0310 0053 0054 0020 004d 0061 0073 0073     ..S.T. .M.a.s.s.

08013bc4 <uni2sjis>:
 8013bc4:	00a7 8198 00a8 814e 00b0 818b 00b1 817d     ......N.......}.
 8013bd4:	00b4 814c 00b6 81f7 00d7 817e 00f7 8180     ..L.......~.....
 8013be4:	0391 839f 0392 83a0 0393 83a1 0394 83a2     ................
 8013bf4:	0395 83a3 0396 83a4 0397 83a5 0398 83a6     ................
 8013c04:	0399 83a7 039a 83a8 039b 83a9 039c 83aa     ................
 8013c14:	039d 83ab 039e 83ac 039f 83ad 03a0 83ae     ................
 8013c24:	03a1 83af 03a3 83b0 03a4 83b1 03a5 83b2     ................
 8013c34:	03a6 83b3 03a7 83b4 03a8 83b5 03a9 83b6     ................
 8013c44:	03b1 83bf 03b2 83c0 03b3 83c1 03b4 83c2     ................
 8013c54:	03b5 83c3 03b6 83c4 03b7 83c5 03b8 83c6     ................
 8013c64:	03b9 83c7 03ba 83c8 03bb 83c9 03bc 83ca     ................
 8013c74:	03bd 83cb 03be 83cc 03bf 83cd 03c0 83ce     ................
 8013c84:	03c1 83cf 03c3 83d0 03c4 83d1 03c5 83d2     ................
 8013c94:	03c6 83d3 03c7 83d4 03c8 83d5 03c9 83d6     ................
 8013ca4:	0401 8446 0410 8440 0411 8441 0412 8442     ..F...@...A...B.
 8013cb4:	0413 8443 0414 8444 0415 8445 0416 8447     ..C...D...E...G.
 8013cc4:	0417 8448 0418 8449 0419 844a 041a 844b     ..H...I...J...K.
 8013cd4:	041b 844c 041c 844d 041d 844e 041e 844f     ..L...M...N...O.
 8013ce4:	041f 8450 0420 8451 0421 8452 0422 8453     ..P. .Q.!.R.".S.
 8013cf4:	0423 8454 0424 8455 0425 8456 0426 8457     #.T.$.U.%.V.&.W.
 8013d04:	0427 8458 0428 8459 0429 845a 042a 845b     '.X.(.Y.).Z.*.[.
 8013d14:	042b 845c 042c 845d 042d 845e 042e 845f     +.\.,.].-.^..._.
 8013d24:	042f 8460 0430 8470 0431 8471 0432 8472     /.`.0.p.1.q.2.r.
 8013d34:	0433 8473 0434 8474 0435 8475 0436 8477     3.s.4.t.5.u.6.w.
 8013d44:	0437 8478 0438 8479 0439 847a 043a 847b     7.x.8.y.9.z.:.{.
 8013d54:	043b 847c 043c 847d 043d 847e 043e 8480     ;.|.<.}.=.~.>...
 8013d64:	043f 8481 0440 8482 0441 8483 0442 8484     ?...@...A...B...
 8013d74:	0443 8485 0444 8486 0445 8487 0446 8488     C...D...E...F...
 8013d84:	0447 8489 0448 848a 0449 848b 044a 848c     G...H...I...J...
 8013d94:	044b 848d 044c 848e 044d 848f 044e 8490     K...L...M...N...
 8013da4:	044f 8491 0451 8476 2010 815d 2015 815c     O...Q.v.. ].. \.
 8013db4:	2018 8165 2019 8166 201c 8167 201d 8168     . e.. f.. g.. h.
 8013dc4:	2020 81f5 2021 81f6 2025 8164 2026 8163       ..! ..% d.& c.
 8013dd4:	2030 81f1 2032 818c 2033 818d 203b 81a6     0 ..2 ..3 ..; ..
 8013de4:	2103 818e 2116 8782 2121 8784 212b 81f0     .!...!..!!..+!..
 8013df4:	2160 8754 2161 8755 2162 8756 2163 8757     `!T.a!U.b!V.c!W.
 8013e04:	2164 8758 2165 8759 2166 875a 2167 875b     d!X.e!Y.f!Z.g![.
 8013e14:	2168 875c 2169 875d 2170 fa40 2171 fa41     h!\.i!].p!@.q!A.
 8013e24:	2172 fa42 2173 fa43 2174 fa44 2175 fa45     r!B.s!C.t!D.u!E.
 8013e34:	2176 fa46 2177 fa47 2178 fa48 2179 fa49     v!F.w!G.x!H.y!I.
 8013e44:	2190 81a9 2191 81aa 2192 81a8 2193 81ab     .!...!...!...!..
 8013e54:	21d2 81cb 21d4 81cc 2200 81cd 2202 81dd     .!...!..."..."..
 8013e64:	2203 81ce 2207 81de 2208 81b8 220b 81b9     ."..."..."..."..
 8013e74:	2211 8794 221a 81e3 221d 81e5 221e 8187     ."..."..."..."..
 8013e84:	221f 8798 2220 81da 2225 8161 2227 81c8     .".. "..%"a.'"..
 8013e94:	2228 81c9 2229 81bf 222a 81be 222b 81e7     ("..)"..*"..+"..
 8013ea4:	222c 81e8 222e 8793 2234 8188 2235 81e6     ,"..."..4"..5"..
 8013eb4:	223d 81e4 2252 81e0 2260 8182 2261 81df     ="..R"..`"..a"..
 8013ec4:	2266 8185 2267 8186 226a 81e1 226b 81e2     f"..g"..j"..k"..
 8013ed4:	2282 81bc 2283 81bd 2286 81ba 2287 81bb     ."..."..."..."..
 8013ee4:	22a5 81db 22bf 8799 2312 81dc 2460 8740     ."..."...#..`$@.
 8013ef4:	2461 8741 2462 8742 2463 8743 2464 8744     a$A.b$B.c$C.d$D.
 8013f04:	2465 8745 2466 8746 2467 8747 2468 8748     e$E.f$F.g$G.h$H.
 8013f14:	2469 8749 246a 874a 246b 874b 246c 874c     i$I.j$J.k$K.l$L.
 8013f24:	246d 874d 246e 874e 246f 874f 2470 8750     m$M.n$N.o$O.p$P.
 8013f34:	2471 8751 2472 8752 2473 8753 2500 849f     q$Q.r$R.s$S..%..
 8013f44:	2501 84aa 2502 84a0 2503 84ab 250c 84a1     .%...%...%...%..
 8013f54:	250f 84ac 2510 84a2 2513 84ad 2514 84a4     .%...%...%...%..
 8013f64:	2517 84af 2518 84a3 251b 84ae 251c 84a5     .%...%...%...%..
 8013f74:	251d 84ba 2520 84b5 2523 84b0 2524 84a7     .%.. %..#%..$%..
 8013f84:	2525 84bc 2528 84b7 252b 84b2 252c 84a6     %%..(%..+%..,%..
 8013f94:	252f 84b6 2530 84bb 2533 84b1 2534 84a8     /%..0%..3%..4%..
 8013fa4:	2537 84b8 2538 84bd 253b 84b3 253c 84a9     7%..8%..;%..<%..
 8013fb4:	253f 84b9 2542 84be 254b 84b4 25a0 81a1     ?%..B%..K%...%..
 8013fc4:	25a1 81a0 25b2 81a3 25b3 81a2 25bc 81a5     .%...%...%...%..
 8013fd4:	25bd 81a4 25c6 819f 25c7 819e 25cb 819b     .%...%...%...%..
 8013fe4:	25ce 819d 25cf 819c 25ef 81fc 2605 819a     .%...%...%...&..
 8013ff4:	2606 8199 2640 818a 2642 8189 266a 81f4     .&..@&..B&..j&..
 8014004:	266d 81f3 266f 81f2 3000 8140 3001 8141     m&..o&...0@..0A.
 8014014:	3002 8142 3003 8156 3005 8158 3006 8159     .0B..0V..0X..0Y.
 8014024:	3007 815a 3008 8171 3009 8172 300a 8173     .0Z..0q..0r..0s.
 8014034:	300b 8174 300c 8175 300d 8176 300e 8177     .0t..0u..0v..0w.
 8014044:	300f 8178 3010 8179 3011 817a 3012 81a7     .0x..0y..0z..0..
 8014054:	3013 81ac 3014 816b 3015 816c 301d 8780     .0...0k..0l..0..
 8014064:	301f 8781 3041 829f 3042 82a0 3043 82a1     .0..A0..B0..C0..
 8014074:	3044 82a2 3045 82a3 3046 82a4 3047 82a5     D0..E0..F0..G0..
 8014084:	3048 82a6 3049 82a7 304a 82a8 304b 82a9     H0..I0..J0..K0..
 8014094:	304c 82aa 304d 82ab 304e 82ac 304f 82ad     L0..M0..N0..O0..
 80140a4:	3050 82ae 3051 82af 3052 82b0 3053 82b1     P0..Q0..R0..S0..
 80140b4:	3054 82b2 3055 82b3 3056 82b4 3057 82b5     T0..U0..V0..W0..
 80140c4:	3058 82b6 3059 82b7 305a 82b8 305b 82b9     X0..Y0..Z0..[0..
 80140d4:	305c 82ba 305d 82bb 305e 82bc 305f 82bd     \0..]0..^0.._0..
 80140e4:	3060 82be 3061 82bf 3062 82c0 3063 82c1     `0..a0..b0..c0..
 80140f4:	3064 82c2 3065 82c3 3066 82c4 3067 82c5     d0..e0..f0..g0..
 8014104:	3068 82c6 3069 82c7 306a 82c8 306b 82c9     h0..i0..j0..k0..
 8014114:	306c 82ca 306d 82cb 306e 82cc 306f 82cd     l0..m0..n0..o0..
 8014124:	3070 82ce 3071 82cf 3072 82d0 3073 82d1     p0..q0..r0..s0..
 8014134:	3074 82d2 3075 82d3 3076 82d4 3077 82d5     t0..u0..v0..w0..
 8014144:	3078 82d6 3079 82d7 307a 82d8 307b 82d9     x0..y0..z0..{0..
 8014154:	307c 82da 307d 82db 307e 82dc 307f 82dd     |0..}0..~0...0..
 8014164:	3080 82de 3081 82df 3082 82e0 3083 82e1     .0...0...0...0..
 8014174:	3084 82e2 3085 82e3 3086 82e4 3087 82e5     .0...0...0...0..
 8014184:	3088 82e6 3089 82e7 308a 82e8 308b 82e9     .0...0...0...0..
 8014194:	308c 82ea 308d 82eb 308e 82ec 308f 82ed     .0...0...0...0..
 80141a4:	3090 82ee 3091 82ef 3092 82f0 3093 82f1     .0...0...0...0..
 80141b4:	309b 814a 309c 814b 309d 8154 309e 8155     .0J..0K..0T..0U.
 80141c4:	30a1 8340 30a2 8341 30a3 8342 30a4 8343     .0@..0A..0B..0C.
 80141d4:	30a5 8344 30a6 8345 30a7 8346 30a8 8347     .0D..0E..0F..0G.
 80141e4:	30a9 8348 30aa 8349 30ab 834a 30ac 834b     .0H..0I..0J..0K.
 80141f4:	30ad 834c 30ae 834d 30af 834e 30b0 834f     .0L..0M..0N..0O.
 8014204:	30b1 8350 30b2 8351 30b3 8352 30b4 8353     .0P..0Q..0R..0S.
 8014214:	30b5 8354 30b6 8355 30b7 8356 30b8 8357     .0T..0U..0V..0W.
 8014224:	30b9 8358 30ba 8359 30bb 835a 30bc 835b     .0X..0Y..0Z..0[.
 8014234:	30bd 835c 30be 835d 30bf 835e 30c0 835f     .0\..0]..0^..0_.
 8014244:	30c1 8360 30c2 8361 30c3 8362 30c4 8363     .0`..0a..0b..0c.
 8014254:	30c5 8364 30c6 8365 30c7 8366 30c8 8367     .0d..0e..0f..0g.
 8014264:	30c9 8368 30ca 8369 30cb 836a 30cc 836b     .0h..0i..0j..0k.
 8014274:	30cd 836c 30ce 836d 30cf 836e 30d0 836f     .0l..0m..0n..0o.
 8014284:	30d1 8370 30d2 8371 30d3 8372 30d4 8373     .0p..0q..0r..0s.
 8014294:	30d5 8374 30d6 8375 30d7 8376 30d8 8377     .0t..0u..0v..0w.
 80142a4:	30d9 8378 30da 8379 30db 837a 30dc 837b     .0x..0y..0z..0{.
 80142b4:	30dd 837c 30de 837d 30df 837e 30e0 8380     .0|..0}..0~..0..
 80142c4:	30e1 8381 30e2 8382 30e3 8383 30e4 8384     .0...0...0...0..
 80142d4:	30e5 8385 30e6 8386 30e7 8387 30e8 8388     .0...0...0...0..
 80142e4:	30e9 8389 30ea 838a 30eb 838b 30ec 838c     .0...0...0...0..
 80142f4:	30ed 838d 30ee 838e 30ef 838f 30f0 8390     .0...0...0...0..
 8014304:	30f1 8391 30f2 8392 30f3 8393 30f4 8394     .0...0...0...0..
 8014314:	30f5 8395 30f6 8396 30fb 8145 30fc 815b     .0...0...0E..0[.
 8014324:	30fd 8152 30fe 8153 3231 878a 3232 878b     .0R..0S.12..22..
 8014334:	3239 878c 32a4 8785 32a5 8786 32a6 8787     92...2...2...2..
 8014344:	32a7 8788 32a8 8789 3303 8765 330d 8769     .2...2...3e..3i.
 8014354:	3314 8760 3318 8763 3322 8761 3323 876b     .3`..3c."3a.#3k.
 8014364:	3326 876a 3327 8764 332b 876c 3336 8766     &3j.'3d.+3l.63f.
 8014374:	333b 876e 3349 875f 334a 876d 334d 8762     ;3n.I3_.J3m.M3b.
 8014384:	3351 8767 3357 8768 337b 877e 337c 878f     Q3g.W3h.{3~.|3..
 8014394:	337d 878e 337e 878d 338e 8772 338f 8773     }3..~3...3r..3s.
 80143a4:	339c 876f 339d 8770 339e 8771 33a1 8775     .3o..3p..3q..3u.
 80143b4:	33c4 8774 33cd 8783 4e00 88ea 4e01 929a     .3t..3...N...N..
 80143c4:	4e03 8eb5 4e07 969c 4e08 8fe4 4e09 8e4f     .N...N...N...NO.
 80143d4:	4e0a 8fe3 4e0b 89ba 4e0d 9573 4e0e 975e     .N...N...Ns..N^.
 80143e4:	4e10 98a0 4e11 894e 4e14 8a8e 4e15 98a1     .N...NN..N...N..
 80143f4:	4e16 90a2 4e17 99c0 4e18 8b75 4e19 95b8     .N...N...Nu..N..
 8014404:	4e1e 8fe5 4e21 97bc 4e26 95c0 4e28 fa68     .N..!N..&N..(Nh.
 8014414:	4e2a 98a2 4e2d 9286 4e31 98a3 4e32 8bf8     *N..-N..1N..2N..
 8014424:	4e36 98a4 4e38 8adb 4e39 924f 4e3b 8ee5     6N..8N..9NO.;N..
 8014434:	4e3c 98a5 4e3f 98a6 4e42 98a7 4e43 9454     <N..?N..BN..CNT.
 8014444:	4e45 8b76 4e4b 9456 4e4d 93e1 4e4e 8cc1     ENv.KNV.MN..NN..
 8014454:	4e4f 9652 4e55 e568 4e56 98a8 4e57 8fe6     ONR.UNh.VN..WN..
 8014464:	4e58 98a9 4e59 89b3 4e5d 8be3 4e5e 8cee     XN..YN..]N..^N..
 8014474:	4e5f 96e7 4e62 9ba4 4e71 9790 4e73 93fb     _N..bN..qN..sN..
 8014484:	4e7e 8aa3 4e80 8b54 4e82 98aa 4e85 98ab     ~N...NT..N...N..
 8014494:	4e86 97b9 4e88 975c 4e89 9188 4e8a 98ad     .N...N\..N...N..
 80144a4:	4e8b 8e96 4e8c 93f1 4e8e 98b0 4e91 895d     .N...N...N...N].
 80144b4:	4e92 8cdd 4e94 8cdc 4e95 88e4 4e98 986a     .N...N...N...Nj.
 80144c4:	4e99 9869 4e9b 8db1 4e9c 889f 4e9e 98b1     .Ni..N...N...N..
 80144d4:	4e9f 98b2 4ea0 98b3 4ea1 9653 4ea2 98b4     .N...N...NS..N..
 80144e4:	4ea4 8cf0 4ea5 88e5 4ea6 9692 4ea8 8b9c     .N...N...N...N..
 80144f4:	4eab 8b9d 4eac 8b9e 4ead 92e0 4eae 97ba     .N...N...N...N..
 8014504:	4eb0 98b5 4eb3 98b6 4eb6 98b7 4eba 906c     .N...N...N...Nl.
 8014514:	4ec0 8f59 4ec1 906d 4ec2 98bc 4ec4 98ba     .NY..Nm..N...N..
 8014524:	4ec6 98bb 4ec7 8b77 4eca 8da1 4ecb 89ee     .N...Nw..N...N..
 8014534:	4ecd 98b9 4ece 98b8 4ecf 95a7 4ed4 8e65     .N...N...N...Ne.
 8014544:	4ed5 8e64 4ed6 91bc 4ed7 98bd 4ed8 9574     .Nd..N...N...Nt.
 8014554:	4ed9 90e5 4edd 8157 4ede 98be 4edf 98c0     .N...NW..N...N..
 8014564:	4ee1 fa69 4ee3 91e3 4ee4 97df 4ee5 88c8     .Ni..N...N...N..
 8014574:	4eed 98bf 4eee 89bc 4ef0 8bc2 4ef2 9287     .N...N...N...N..
 8014584:	4ef6 8c8f 4ef7 98c1 4efb 9443 4efc fa6a     .N...N...NC..Nj.
 8014594:	4f00 fa6b 4f01 8ae9 4f03 fa6c 4f09 98c2     .Ok..O...Ol..O..
 80145a4:	4f0a 88c9 4f0d 8cde 4f0e 8aea 4f0f 959a     .O...O...O...O..
 80145b4:	4f10 94b0 4f11 8b78 4f1a 89ef 4f1c 98e5     .O...Ox..O...O..
 80145c4:	4f1d 9360 4f2f 948c 4f30 98c4 4f34 94ba     .O`./O..0O..4O..
 80145d4:	4f36 97e0 4f38 904c 4f39 fa6d 4f3a 8e66     6O..8OL.9Om.:Of.
 80145e4:	4f3c 8e97 4f3d 89be 4f43 92cf 4f46 9241     <O..=O..CO..FOA.
 80145f4:	4f47 98c8 4f4d 88ca 4f4e 92e1 4f4f 8f5a     GO..MO..NO..OOZ.
 8014604:	4f50 8db2 4f51 9743 4f53 91cc 4f55 89bd     PO..QOC.SO..UO..
 8014614:	4f56 fa6e 4f57 98c7 4f59 975d 4f5a 98c3     VOn.WO..YO].ZO..
 8014624:	4f5b 98c5 4f5c 8dec 4f5d 98c6 4f5e 9b43     [O..\O..]O..^OC.
 8014634:	4f69 98ce 4f6f 98d1 4f70 98cf 4f73 89c0     iO..oO..pO..sO..
 8014644:	4f75 95b9 4f76 98c9 4f7b 98cd 4f7c 8cf1     uO..vO..{O..|O..
 8014654:	4f7f 8e67 4f83 8aa4 4f86 98d2 4f88 98ca     .Og..O...O...O..
 8014664:	4f8a fa70 4f8b 97e1 4f8d 8e98 4f8f 98cb     .Op..O...O...O..
 8014674:	4f91 98d0 4f92 fa6f 4f94 fa72 4f96 98d3     .O...Oo..Or..O..
 8014684:	4f98 98cc 4f9a fa71 4f9b 8b9f 4f9d 88cb     .O...Oq..O...O..
 8014694:	4fa0 8ba0 4fa1 89bf 4fab 9b44 4fad 9699     .O...O...OD..O..
 80146a4:	4fae 958e 4faf 8cf2 4fb5 904e 4fb6 97b5     .O...O...ON..O..
 80146b4:	4fbf 95d6 4fc2 8c57 4fc3 91a3 4fc4 89e2     .O...OW..O...O..
 80146c4:	4fc9 fa61 4fca 8f72 4fcd fa73 4fce 98d7     .Oa..Or..Os..O..
 80146d4:	4fd0 98dc 4fd1 98da 4fd4 98d5 4fd7 91ad     .O...O...O...O..
 80146e4:	4fd8 98d8 4fda 98db 4fdb 98d9 4fdd 95db     .O...O...O...O..
 80146f4:	4fdf 98d6 4fe1 904d 4fe3 9693 4fe4 98dd     .O...OM..O...O..
 8014704:	4fe5 98de 4fee 8f43 4fef 98eb 4ff3 946f     .O...OC..O...Oo.
 8014714:	4ff5 9555 4ff6 98e6 4ff8 95ee 4ffa 89b4     .OU..O...O...O..
 8014724:	4ffe 98ea 4fff fa76 5005 98e4 5006 98ed     .O...Ov..P...P..
 8014734:	5009 9171 500b 8cc2 500d 947b 500f e0c5     .Pq..P...P{..P..
 8014744:	5011 98ec 5012 937c 5014 98e1 5016 8cf4     .P...P|..P...P..
 8014754:	5019 8cf3 501a 98df 501e fa77 501f 8ed8     .P...P...Pw..P..
 8014764:	5021 98e7 5022 fa75 5023 95ed 5024 926c     !P.."Pu.#P..$Pl.
 8014774:	5025 98e3 5026 8c91 5028 98e0 5029 98e8     %P..&P..(P..)P..
 8014784:	502a 98e2 502b 97cf 502c 98e9 502d 9860     *P..+P..,P..-P`.
 8014794:	5036 8be4 5039 8c90 5040 fa74 5042 fa7a     6P..9P..@Pt.BPz.
 80147a4:	5043 98ee 5046 fa78 5047 98ef 5048 98f3     CP..FPx.GP..HP..
 80147b4:	5049 88cc 504f 95ce 5050 98f2 5055 98f1     IP..OP..PP..UP..
 80147c4:	5056 98f5 505a 98f4 505c 92e2 5065 8c92     VP..ZP..\P..eP..
 80147d4:	506c 98f6 5070 fa79 5072 8ec3 5074 91a4     lP..pPy.rP..tP..
 80147e4:	5075 92e3 5076 8bf4 5078 98f7 507d 8b55     uP..vP..xP..}PU.
 80147f4:	5080 98f8 5085 98fa 508d 9654 5091 8c86     .P...P...PT..P..
 8014804:	5094 fa7b 5098 8e50 5099 94f5 509a 98f9     .P{..PP..P...P..
 8014814:	50ac 8dc3 50ad 9762 50b2 98fc 50b3 9942     .P...Pb..P...PB.
 8014824:	50b4 98fb 50b5 8dc2 50b7 8f9d 50be 8c58     .P...P...P...PX.
 8014834:	50c2 9943 50c5 8bcd 50c9 9940 50ca 9941     .PC..P...P@..PA.
 8014844:	50cd 93ad 50cf 919c 50d1 8ba1 50d5 966c     .P...P...P...Pl.
 8014854:	50d6 9944 50d8 fa7d 50da 97bb 50de 9945     .PD..P}..P...PE.
 8014864:	50e3 9948 50e5 9946 50e7 916d 50ed 9947     .PH..PF..Pm..PG.
 8014874:	50ee 9949 50f4 fa7c 50f5 994b 50f9 994a     .PI..P|..PK..PJ.
 8014884:	50fb 95c6 5100 8b56 5101 994d 5102 994e     .P...QV..QM..QN.
 8014894:	5104 89ad 5109 994c 5112 8ef2 5114 9951     .Q...QL..Q...QQ.
 80148a4:	5115 9950 5116 994f 5118 98d4 511a 9952     .QP..QO..Q...QR.
 80148b4:	511f 8f9e 5121 9953 512a 9744 5132 96d7     .Q..!QS.*QD.2Q..
 80148c4:	5137 9955 513a 9954 513b 9957 513c 9956     7QU.:QT.;QW.<QV.
 80148d4:	513f 9958 5140 9959 5141 88f2 5143 8cb3     ?QX.@QY.AQ..CQ..
 80148e4:	5144 8c5a 5145 8f5b 5146 929b 5147 8ba2     DQZ.EQ[.FQ..GQ..
 80148f4:	5148 90e6 5149 8cf5 514a fa7e 514b 8d8e     HQ..IQ..JQ~.KQ..
 8014904:	514c 995b 514d 96c6 514e 9365 5150 8e99     LQ[.MQ..NQe.PQ..
 8014914:	5152 995a 5154 995c 515a 937d 515c 8a95     RQZ.TQ\.ZQ}.\Q..
 8014924:	5162 995d 5164 fa80 5165 93fc 5168 9153     bQ].dQ..eQ..hQS.
 8014934:	5169 995f 516a 9960 516b 94aa 516c 8cf6     iQ_.jQ`.kQ..lQ..
 8014944:	516d 985a 516e 9961 5171 8ba4 5175 95ba     mQZ.nQa.qQ..uQ..
 8014954:	5176 91b4 5177 8bef 5178 9354 517c 8c93     vQ..wQ..xQT.|Q..
 8014964:	5180 9962 5182 9963 5185 93e0 5186 897e     .Qb..Qc..Q...Q~.
 8014974:	5189 9966 518a 8dfb 518c 9965 518d 8dc4     .Qf..Q...Qe..Q..
 8014984:	518f 9967 5190 e3ec 5191 9968 5192 9660     .Qg..Q...Qh..Q`.
 8014994:	5193 9969 5195 996a 5196 996b 5197 8fe7     .Qi..Qj..Qk..Q..
 80149a4:	5199 8eca 519d fa81 51a0 8aa5 51a2 996e     .Q...Q...Q...Qn.
 80149b4:	51a4 996c 51a5 96bb 51a6 996d 51a8 9579     .Ql..Q...Qm..Qy.
 80149c4:	51a9 996f 51aa 9970 51ab 9971 51ac 937e     .Qo..Qp..Qq..Q~.
 80149d4:	51b0 9975 51b1 9973 51b2 9974 51b3 9972     .Qu..Qs..Qt..Qr.
 80149e4:	51b4 8de1 51b5 9976 51b6 96e8 51b7 97e2     .Q...Qv..Q...Q..
 80149f4:	51bd 9977 51be fa82 51c4 90a6 51c5 9978     .Qw..Q...Q...Qx.
 8014a04:	51c6 8f79 51c9 9979 51cb 929c 51cc 97bd     .Qy..Qy..Q...Q..
 8014a14:	51cd 9380 51d6 99c3 51db 997a 51dc eaa3     .Q...Q...Qz..Q..
 8014a24:	51dd 8bc3 51e0 997b 51e1 967d 51e6 8f88     .Q...Q{..Q}..Q..
 8014a34:	51e7 91fa 51e9 997d 51ea 93e2 51ec fa83     .Q...Q}..Q...Q..
 8014a44:	51ed 997e 51f0 9980 51f1 8a4d 51f5 9981     .Q~..Q...QM..Q..
 8014a54:	51f6 8ba5 51f8 93ca 51f9 899a 51fa 8f6f     .Q...Q...Q...Qo.
 8014a64:	51fd 949f 51fe 9982 5200 9381 5203 906e     .Q...Q...R...Rn.
 8014a74:	5204 9983 5206 95aa 5207 90d8 5208 8aa0     .R...R...R...R..
 8014a84:	520a 8aa7 520b 9984 520e 9986 5211 8c59     .R...R...R...RY.
 8014a94:	5214 9985 5215 fa84 5217 97f1 521d 8f89     .R...R...R...R..
 8014aa4:	5224 94bb 5225 95ca 5227 9987 5229 9798     $R..%R..'R..)R..
 8014ab4:	522a 9988 522e 9989 5230 939e 5233 998a     *R...R..0R..3R..
 8014ac4:	5236 90a7 5237 8dfc 5238 8c94 5239 998b     6R..7R..8R..9R..
 8014ad4:	523a 8e68 523b 8d8f 5243 92e4 5244 998d     :Rh.;R..CR..DR..
 8014ae4:	5247 91a5 524a 8ded 524b 998e 524c 998f     GR..JR..KR..LR..
 8014af4:	524d 914f 524f 998c 5254 9991 5256 9655     MRO.OR..TR..VRU.
 8014b04:	525b 8d84 525e 9990 5263 8c95 5264 8ddc     [R..^R..cR..dR..
 8014b14:	5265 948d 5269 9994 526a 9992 526f 959b     eR..iR..jR..oR..
 8014b24:	5270 8fe8 5271 999b 5272 8a84 5273 9995     pR..qR..rR..sR..
 8014b34:	5274 9993 5275 916e 527d 9997 527f 9996     tR..uRn.}R...R..
 8014b44:	5283 8a63 5287 8c80 5288 999c 5289 97ab     .Rc..R...R...R..
 8014b54:	528d 9998 5291 999d 5292 999a 5294 9999     .R...R...R...R..
 8014b64:	529b 97cd 529c fa85 529f 8cf7 52a0 89c1     .R...R...R...R..
 8014b74:	52a3 97f2 52a6 fa86 52a9 8f95 52aa 9377     .R...R...R...Rw.
 8014b84:	52ab 8d85 52ac 99a0 52ad 99a1 52af fb77     .R...R...R...Rw.
 8014b94:	52b1 97e3 52b4 984a 52b5 99a3 52b9 8cf8     .R...RJ..R...R..
 8014ba4:	52bc 99a2 52be 8a4e 52c0 fa87 52c1 99a4     .R...RN..R...R..
 8014bb4:	52c3 9675 52c5 92ba 52c7 9745 52c9 95d7     .Ru..R...RE..R..
 8014bc4:	52cd 99a5 52d2 e8d3 52d5 93ae 52d7 99a6     .R...R...R...R..
 8014bd4:	52d8 8aa8 52d9 96b1 52db fa88 52dd 8f9f     .R...R...R...R..
 8014be4:	52de 99a7 52df 95e5 52e0 99ab 52e2 90a8     .R...R...R...R..
 8014bf4:	52e3 99a8 52e4 8bce 52e6 99a9 52e7 8aa9     .R...R...R...R..
 8014c04:	52f2 8c4d 52f3 99ac 52f5 99ad 52f8 99ae     .RM..R...R...R..
 8014c14:	52f9 99af 52fa 8ed9 52fe 8cf9 52ff 96dc     .R...R...R...R..
 8014c24:	5300 fa89 5301 96e6 5302 93f5 5305 95ef     .S...S...S...S..
 8014c34:	5306 99b0 5307 fa8a 5308 99b1 530d 99b3     .S...S...S...S..
 8014c44:	530f 99b5 5310 99b4 5315 99b6 5316 89bb     .S...S...S...S..
 8014c54:	5317 966b 5319 8dfa 531a 99b7 531d 9178     .Sk..S...S...Sx.
 8014c64:	5320 8fa0 5321 8ba7 5323 99b8 5324 fa8b      S..!S..#S..$S..
 8014c74:	532a 94d9 532f 99b9 5331 99ba 5333 99bb     *S../S..1S..3S..
 8014c84:	5338 99bc 5339 9543 533a 8be6 533b 88e3     8S..9SC.:S..;S..
 8014c94:	533f 93bd 5340 99bd 5341 8f5c 5343 90e7     ?S..@S..AS\.CS..
 8014ca4:	5345 99bf 5346 99be 5347 8fa1 5348 8cdf     ES..FS..GS..HS..
 8014cb4:	5349 99c1 534a 94bc 534d 99c2 5351 94da     IS..JS..MS..QS..
 8014cc4:	5352 91b2 5353 91ec 5354 8ba6 5357 93ec     RS..SS..TS..WS..
 8014cd4:	5358 9250 535a 948e 535c 966d 535e 99c4     XSP.ZS..\Sm.^S..
 8014ce4:	5360 90e8 5366 8c54 5369 99c5 536e 99c6     `S..fST.iS..nS..
 8014cf4:	536f 894b 5370 88f3 5371 8aeb 5372 fa8c     oSK.pS..qS..rS..
 8014d04:	5373 91a6 5374 8b70 5375 9791 5377 99c9     sS..tSp.uS..wS..
 8014d14:	5378 89b5 537b 99c8 537f 8ba8 5382 99ca     xS..{S...S...S..
 8014d24:	5384 96ef 5393 fa8d 5396 99cb 5398 97d0     .S...S...S...S..
 8014d34:	539a 8cfa 539f 8cb4 53a0 99cc 53a5 99ce     .S...S...S...S..
 8014d44:	53a6 99cd 53a8 907e 53a9 8958 53ad 897d     .S...S~..SX..S}.
 8014d54:	53ae 99cf 53b0 99d0 53b2 fa8e 53b3 8cb5     .S...S...S...S..
 8014d64:	53b6 99d1 53bb 8b8e 53c2 8e51 53c3 99d2     .S...S...SQ..S..
 8014d74:	53c8 9694 53c9 8db3 53ca 8b79 53cb 9746     .S...S...Sy..SF.
 8014d84:	53cc 916f 53cd 94bd 53ce 8efb 53d4 8f66     .So..S...S...Sf.
 8014d94:	53d6 8ee6 53d7 8ef3 53d9 8f96 53db 94be     .S...S...S...S..
 8014da4:	53dd fa8f 53df 99d5 53e1 8962 53e2 9170     .S...S...Sb..Sp.
 8014db4:	53e3 8cfb 53e4 8cc3 53e5 8be5 53e8 99d9     .S...S...S...S..
 8014dc4:	53e9 9240 53ea 91fc 53eb 8ba9 53ec 8fa2     .S@..S...S...S..
 8014dd4:	53ed 99da 53ee 99d8 53ef 89c2 53f0 91e4     .S...S...S...S..
 8014de4:	53f1 8eb6 53f2 8e6a 53f3 8945 53f6 8a90     .S...Sj..SE..S..
 8014df4:	53f7 8d86 53f8 8e69 53fa 99db 5401 99dc     .S...Si..S...T..
 8014e04:	5403 8b68 5404 8a65 5408 8d87 5409 8b67     .Th..Te..T...Tg.
 8014e14:	540a 92dd 540b 8944 540c 93af 540d 96bc     .T...TD..T...T..
 8014e24:	540e 8d40 540f 9799 5410 9366 5411 8cfc     .T@..T...Tf..T..
 8014e34:	541b 8c4e 541d 99e5 541f 8be1 5420 9669     .TN..T...T.. Ti.
 8014e44:	5426 94db 5429 99e4 542b 8adc 542c 99df     &T..)T..+T..,T..
 8014e54:	542d 99e0 542e 99e2 5436 99e3 5438 8b7a     -T...T..6T..8Tz.
 8014e64:	5439 9081 543b 95ab 543c 99e1 543d 99dd     9T..;T..<T..=T..
 8014e74:	543e 8ce1 5440 99de 5442 9843 5446 95f0     >T..@T..BTC.FT..
 8014e84:	5448 92e6 5449 8ce0 544a 8d90 544e 99e6     HT..IT..JT..NT..
 8014e94:	5451 93db 545f 99ea 5468 8efc 546a 8ef4     QT.._T..hT..jT..
 8014ea4:	5470 99ed 5471 99eb 5473 96a1 5475 99e8     pT..qT..sT..uT..
 8014eb4:	5476 99f1 5477 99ec 547b 99ef 547c 8cc4     vT..wT..{T..|T..
 8014ec4:	547d 96bd 5480 99f0 5484 99f2 5486 99f4     }T...T...T...T..
 8014ed4:	548a fa92 548b 8dee 548c 9861 548e 99e9     .T...T...Ta..T..
 8014ee4:	548f 99e7 5490 99f3 5492 99ee 549c fa91     .T...T...T...T..
 8014ef4:	54a2 99f6 54a4 9a42 54a5 99f8 54a8 99fc     .T...TB..T...T..
 8014f04:	54a9 fa93 54ab 9a40 54ac 99f9 54af 9a5d     .T...T@..T...T].
 8014f14:	54b2 8de7 54b3 8a50 54b8 99f7 54bc 9a44     .T...TP..T...TD.
 8014f24:	54bd 88f4 54be 9a43 54c0 88a3 54c1 9569     .T...TC..T...Ti.
 8014f34:	54c2 9a41 54c4 99fa 54c7 99f5 54c8 99fb     .TA..T...T...T..
 8014f44:	54c9 8dc6 54d8 9a45 54e1 88f5 54e2 9a4e     .T...TE..T...TN.
 8014f54:	54e5 9a46 54e6 9a47 54e8 8fa3 54e9 9689     .TF..TG..T...T..
 8014f64:	54ed 9a4c 54ee 9a4b 54f2 934e 54fa 9a4d     .TL..TK..TN..TM.
 8014f74:	54fd 9a4a 54ff fa94 5504 8953 5506 8db4     .TJ..T...US..U..
 8014f84:	5507 904f 550f 9a48 5510 9382 5514 9a49     .UO..UH..U...UI.
 8014f94:	5516 88a0 552e 9a53 552f 9742 5531 8fa5     .U...US./UB.1U..
 8014fa4:	5533 9a59 5538 9a58 5539 9a4f 553e 91c1     3UY.8UX.9UO.>U..
 8014fb4:	5540 9a50 5544 91ed 5545 9a55 5546 8fa4     @UP.DU..EUU.FU..
 8014fc4:	554c 9a52 554f 96e2 5553 8c5b 5556 9a56     LUR.OU..SU[.VUV.
 8014fd4:	5557 9a57 555c 9a54 555d 9a5a 5563 9a51     WUW.\UT.]UZ.cUQ.
 8014fe4:	557b 9a60 557c 9a65 557e 9a61 5580 9a5c     {U`.|Ue.~Ua..U\.
 8014ff4:	5583 9a66 5584 9150 5586 fa95 5587 9a68     .Uf..UP..U...Uh.
 8015004:	5589 8d41 558a 9a5e 558b 929d 5598 9a62     .UA..U^..U...Ub.
 8015014:	5599 9a5b 559a 8aab 559c 8aec 559d 8a85     .U[..U...U...U..
 8015024:	559e 9a63 559f 9a5f 55a7 8c96 55a8 9a69     .Uc..U_..U...Ui.
 8015034:	55a9 9a67 55aa 9172 55ab 8b69 55ac 8baa     .Ug..Ur..Ui..U..
 8015044:	55ae 9a64 55b0 8bf2 55b6 8963 55c4 9a6d     .Ud..U...Uc..Um.
 8015054:	55c5 9a6b 55c7 9aa5 55d4 9a70 55da 9a6a     .Uk..U...Up..Uj.
 8015064:	55dc 9a6e 55df 9a6c 55e3 8e6b 55e4 9a6f     .Un..Ul..Uk..Uo.
 8015074:	55f7 9a72 55f9 9a77 55fd 9a75 55fe 9a74     .Ur..Uw..Uu..Ut.
 8015084:	5606 9251 5609 89c3 5614 9a71 5616 9a73     .VQ..V...Vq..Vs.
 8015094:	5617 8fa6 5618 8952 561b 9a76 5629 89dc     .V...VR..Vv.)V..
 80150a4:	562f 9a82 5631 8ffa 5632 9a7d 5634 9a7b     /V..1V..2V}.4V{.
 80150b4:	5636 9a7c 5638 9a7e 5642 895c 564c 9158     6V|.8V~.BV\.LVX.
 80150c4:	564e 9a78 5650 9a79 565b 8a9a 5664 9a81     NVx.PVy.[V..dV..
 80150d4:	5668 8aed 566a 9a84 566b 9a80 566c 9a83     hV..jV..kV..lV..
 80150e4:	5674 95ac 5678 93d3 567a 94b6 5680 9a86     tV..xV..zV...V..
 80150f4:	5686 9a85 5687 8a64 568a 9a87 568f 9a8a     .V...Vd..V...V..
 8015104:	5694 9a89 56a0 9a88 56a2 9458 56a5 9a8b     .V...V...VX..V..
 8015114:	56ae 9a8c 56b4 9a8e 56b6 9a8d 56bc 9a90     .V...V...V...V..
 8015124:	56c0 9a93 56c1 9a91 56c2 9a8f 56c3 9a92     .V...V...V...V..
 8015134:	56c8 9a94 56ce 9a95 56d1 9a96 56d3 9a97     .V...V...V...V..
 8015144:	56d7 9a98 56d8 9964 56da 8efa 56db 8e6c     .V...Vd..V...Vl.
 8015154:	56de 89f1 56e0 88f6 56e3 9263 56ee 9a99     .V...V...Vc..V..
 8015164:	56f0 8da2 56f2 88cd 56f3 907d 56f9 9a9a     .V...V...V}..V..
 8015174:	56fa 8cc5 56fd 8d91 56ff 9a9c 5700 9a9b     .V...V...V...W..
 8015184:	5703 95de 5704 9a9d 5708 9a9f 5709 9a9e     .W...W...W...W..
 8015194:	570b 9aa0 570d 9aa1 570f 8c97 5712 8980     .W...W...W...W..
 80151a4:	5713 9aa2 5716 9aa4 5718 9aa3 571c 9aa6     .W...W...W...W..
 80151b4:	571f 9379 5726 9aa7 5727 88b3 5728 8ddd     .Wy.&W..'W..(W..
 80151c4:	572d 8c5c 5730 926e 5737 9aa8 5738 9aa9     -W\.0Wn.7W..8W..
 80151d4:	573b 9aab 5740 9aac 5742 8de2 5747 8bcf     ;W..@W..BW..GW..
 80151e4:	574a 9656 574e 9aaa 574f 9aad 5750 8dbf     JWV.NW..OW..PW..
 80151f4:	5751 8d42 5759 fa96 5761 9ab1 5764 8da3     QWB.YW..aW..dW..
 8015204:	5765 fa97 5766 9252 5769 9aae 576a 92d8     eW..fWR.iW..jW..
 8015214:	577f 9ab2 5782 9082 5788 9ab0 5789 9ab3     .W...W...W...W..
 8015224:	578b 8c5e 5793 9ab4 57a0 9ab5 57a2 8d43     .W^..W...W...WC.
 8015234:	57a3 8a5f 57a4 9ab7 57aa 9ab8 57ac fa98     .W_..W...W...W..
 8015244:	57b0 9ab9 57b3 9ab6 57c0 9aaf 57c3 9aba     .W...W...W...W..
 8015254:	57c6 9abb 57c7 fa9a 57c8 fa99 57cb 9684     .W...W...W...W..
 8015264:	57ce 8fe9 57d2 9abd 57d3 9abe 57d4 9abc     .W...W...W...W..
 8015274:	57d6 9ac0 57dc 9457 57df 88e6 57e0 9575     .W...WW..W...Wu.
 8015284:	57e3 9ac1 57f4 8ffb 57f7 8eb7 57f9 947c     .W...W...W...W|.
 8015294:	57fa 8aee 57fc 8de9 5800 9678 5802 93b0     .W...W...Xx..X..
 80152a4:	5805 8c98 5806 91cd 580a 9abf 580b 9ac2     .X...X...X...X..
 80152b4:	5815 91c2 5819 9ac3 581d 9ac4 5821 9ac6     .X...X...X..!X..
 80152c4:	5824 92e7 582a 8aac 582f ea9f 5830 8981     $X..*X../X..0X..
 80152d4:	5831 95f1 5834 8fea 5835 9367 583a 8de4     1X..4X..5Xg.:X..
 80152e4:	583d 9acc 5840 95bb 5841 97db 584a 89f2     =X..@X..AX..JX..
 80152f4:	584b 9ac8 5851 9159 5852 9acb 5854 9383     KX..QXY.RX..TX..
 8015304:	5857 9368 5858 9384 5859 94b7 585a 92cb     WXh.XX..YX..ZX..
 8015314:	585e 8dc7 5862 9ac7 5869 8996 586b 9355     ^X..bX..iX..kXU.
 8015324:	5870 9ac9 5872 9ac5 5875 906f 5879 9acd     pX..rX..uXo.yX..
 8015334:	587e 8f6d 5883 8bab 5885 9ace 5893 95e6     ~Xm..X...X...X..
 8015344:	5897 919d 589c 92c4 589e fa9d 589f 9ad0     .X...X...X...X..
 8015354:	58a8 966e 58ab 9ad1 58ae 9ad6 58b2 fa9e     .Xn..X...X...X..
 8015364:	58b3 95ad 58b8 9ad5 58b9 9acf 58ba 9ad2     .X...X...X...X..
 8015374:	58bb 9ad4 58be 8da4 58c1 95c7 58c5 9ad7     .X...X...X...X..
 8015384:	58c7 9264 58ca 89f3 58cc 8feb 58d1 9ad9     .Xd..X...X...X..
 8015394:	58d3 9ad8 58d5 8d88 58d7 9ada 58d8 9adc     .X...X...X...X..
 80153a4:	58d9 9adb 58dc 9ade 58de 9ad3 58df 9ae0     .X...X...X...X..
 80153b4:	58e4 9adf 58e5 9add 58eb 8e6d 58ec 9070     .X...X...Xm..Xp.
 80153c4:	58ee 9173 58ef 9ae1 58f0 90ba 58f1 88eb     .Xs..X...X...X..
 80153d4:	58f2 9484 58f7 92d9 58f9 9ae3 58fa 9ae2     .X...X...X...X..
 80153e4:	58fb 9ae4 58fc 9ae5 58fd 9ae6 5902 9ae7     .X...X...X...Y..
 80153f4:	5909 95cf 590a 9ae8 590b fa9f 590f 89c4     .Y...Y...Y...Y..
 8015404:	5910 9ae9 5915 975b 5916 8a4f 5918 99c7     .Y...Y[..YO..Y..
 8015414:	5919 8f67 591a 91bd 591b 9aea 591c 96e9     .Yg..Y...Y...Y..
 8015424:	5922 96b2 5925 9aec 5927 91e5 5929 9356     "Y..%Y..'Y..)YV.
 8015434:	592a 91be 592b 9576 592c 9aed 592d 9aee     *Y..+Yv.,Y..-Y..
 8015444:	592e 899b 5931 8eb8 5932 9aef 5937 88ce     .Y..1Y..2Y..7Y..
 8015454:	5938 9af0 593e 9af1 5944 8982 5947 8aef     8Y..>Y..DY..GY..
 8015464:	5948 93de 5949 95f2 594e 9af5 594f 9174     HY..IY..NY..OYt.
 8015474:	5950 9af4 5951 8c5f 5953 faa0 5954 967a     PY..QY_.SY..TYz.
 8015484:	5955 9af3 5957 9385 5958 9af7 595a 9af6     UY..WY..XY..ZY..
 8015494:	595b faa1 595d faa2 5960 9af9 5962 9af8     [Y..]Y..`Y..bY..
 80154a4:	5963 faa3 5965 899c 5967 9afa 5968 8fa7     cY..eY..gY..hY..
 80154b4:	5969 9afc 596a 9244 596c 9afb 596e 95b1     iY..jYD.lY..nY..
 80154c4:	5973 8f97 5974 937a 5978 9b40 597d 8d44     sY..tYz.xY@.}YD.
 80154d4:	5981 9b41 5982 9440 5983 94dc 5984 96cf     .YA..Y@..Y...Y..
 80154e4:	598a 9444 598d 9b4a 5993 8b57 5996 9764     .YD..YJ..YW..Yd.
 80154f4:	5999 96ad 599b 9baa 599d 9b42 59a3 9b45     .Y...Y...YB..YE.
 8015504:	59a4 faa4 59a5 91c3 59a8 9657 59ac 9369     .Y...Y...YW..Yi.
 8015514:	59b2 9b46 59b9 9685 59ba faa5 59bb 8dc8     .YF..Y...Y...Y..
 8015524:	59be 8fa8 59c6 9b47 59c9 8e6f 59cb 8e6e     .Y...YG..Yo..Yn.
 8015534:	59d0 88b7 59d1 8cc6 59d3 90a9 59d4 88cf     .Y...Y...Y...Y..
 8015544:	59d9 9b4b 59da 9b4c 59dc 9b49 59e5 8957     .YK..YL..YI..YW.
 8015554:	59e6 8aad 59e8 9b48 59ea 96c3 59eb 9550     .Y...YH..Y...YP.
 8015564:	59f6 88a6 59fb 88f7 59ff 8e70 5a01 88d0     .Y...Y...Yp..Z..
 8015574:	5a03 88a1 5a09 9b51 5a11 9b4f 5a18 96ba     .Z...ZQ..ZO..Z..
 8015584:	5a1a 9b52 5a1c 9b50 5a1f 9b4e 5a20 9050     .ZR..ZP..ZN. ZP.
 8015594:	5a25 9b4d 5a29 95d8 5a2f 8ce2 5a35 9b56     %ZM.)Z../Z..5ZV.
 80155a4:	5a36 9b57 5a3c 8fa9 5a40 9b53 5a41 984b     6ZW.<Z..@ZS.AZK.
 80155b4:	5a46 946b 5a49 9b55 5a5a 8da5 5a62 9b58     FZk.IZU.ZZ..bZX.
 80155c4:	5a66 9577 5a6a 9b59 5a6c 9b54 5a7f 96b9     fZw.jZY.lZT..Z..
 80155d4:	5a92 947d 5a9a 9b5a 5a9b 9551 5abc 9b5b     .Z}..ZZ..ZQ..Z[.
 80155e4:	5abd 9b5f 5abe 9b5c 5ac1 89c5 5ac2 9b5e     .Z_..Z\..Z...Z^.
 80155f4:	5ac9 8eb9 5acb 9b5d 5acc 8c99 5ad0 9b6b     .Z...Z]..Z...Zk.
 8015604:	5ad6 9b64 5ad7 9b61 5ae1 9284 5ae3 9b60     .Zd..Za..Z...Z`.
 8015614:	5ae6 9b62 5ae9 9b63 5afa 9b65 5afb 9b66     .Zb..Zc..Ze..Zf.
 8015624:	5b09 8af0 5b0b 9b68 5b0c 9b67 5b16 9b69     .[...[h..[g..[i.
 8015634:	5b22 8fec 5b2a 9b6c 5b2c 92da 5b30 8964     "[..*[l.,[..0[d.
 8015644:	5b32 9b6a 5b36 9b6d 5b3e 9b6e 5b40 9b71     2[j.6[m.>[n.@[q.
 8015654:	5b43 9b6f 5b45 9b70 5b50 8e71 5b51 9b72     C[o.E[p.P[q.Q[r.
 8015664:	5b54 8d45 5b55 9b73 5b56 faa6 5b57 8e9a     T[E.U[s.V[..W[..
 8015674:	5b58 91b6 5b5a 9b74 5b5b 9b75 5b5c 8e79     X[..Z[t.[[u.\[y.
 8015684:	5b5d 8d46 5b5f 96d0 5b63 8b47 5b64 8cc7     ][F._[..c[G.d[..
 8015694:	5b65 9b76 5b66 8a77 5b69 9b77 5b6b 91b7     e[v.f[w.i[w.k[..
 80156a4:	5b70 9b78 5b71 9ba1 5b73 9b79 5b75 9b7a     p[x.q[..s[y.u[z.
 80156b4:	5b78 9b7b 5b7a 9b7d 5b80 9b7e 5b83 9b80     x[{.z[}..[~..[..
 80156c4:	5b85 91ee 5b87 8946 5b88 8ee7 5b89 88c0     .[...[F..[...[..
 80156d4:	5b8b 9176 5b8c 8aae 5b8d 8eb3 5b8f 8d47     .[v..[...[...[G.
 80156e4:	5b95 9386 5b97 8f40 5b98 8aaf 5b99 9288     .[...[@..[...[..
 80156f4:	5b9a 92e8 5b9b 88b6 5b9c 8b58 5b9d 95f3     .[...[...[X..[..
 8015704:	5b9f 8ec0 5ba2 8b71 5ba3 90e9 5ba4 8eba     .[...[q..[...[..
 8015714:	5ba5 9747 5ba6 9b81 5bae 8b7b 5bb0 8dc9     .[G..[...[{..[..
 8015724:	5bb3 8a51 5bb4 8983 5bb5 8faa 5bb6 89c6     .[Q..[...[...[..
 8015734:	5bb8 9b82 5bb9 9765 5bbf 8f68 5bc0 faa7     .[...[e..[h..[..
 8015744:	5bc2 8ee2 5bc3 9b83 5bc4 8af1 5bc5 93d0     .[...[...[...[..
 8015754:	5bc6 96a7 5bc7 9b84 5bc9 9b85 5bcc 9578     .[...[...[...[x.
 8015764:	5bd0 9b87 5bd2 8aa6 5bd3 8bf5 5bd4 9b86     .[...[...[...[..
 8015774:	5bd8 faa9 5bdb 8ab0 5bdd 9051 5bde 9b8b     .[...[...[Q..[..
 8015784:	5bdf 8e40 5be1 89c7 5be2 9b8a 5be4 9b88     .[@..[...[...[..
 8015794:	5be5 9b8c 5be6 9b89 5be7 944a 5be8 9ecb     .[...[...[J..[..
 80157a4:	5be9 9052 5beb 9b8d 5bec faaa 5bee 97be     .[R..[...[...[..
 80157b4:	5bf0 9b8e 5bf3 9b90 5bf5 929e 5bf6 9b8f     .[...[...[...[..
 80157c4:	5bf8 90a1 5bfa 8e9b 5bfe 91ce 5bff 8ef5     .[...[...[...[..
 80157d4:	5c01 9595 5c02 90ea 5c04 8ecb 5c05 9b91     .\...\...\...\..
 80157e4:	5c06 8fab 5c07 9b92 5c08 9b93 5c09 88d1     .\...\...\...\..
 80157f4:	5c0a 91b8 5c0b 9071 5c0d 9b94 5c0e 93b1     .\...\q..\...\..
 8015804:	5c0f 8fac 5c11 8fad 5c13 9b95 5c16 90eb     .\...\...\...\..
 8015814:	5c1a 8fae 5c1e faab 5c20 9b96 5c22 9b97     .\...\.. \.."\..
 8015824:	5c24 96de 5c28 9b98 5c2d 8bc4 5c31 8f41     $\..(\..-\..1\A.
 8015834:	5c38 9b99 5c39 9b9a 5c3a 8eda 5c3b 904b     8\..9\..:\..;\K.
 8015844:	5c3c 93f2 5c3d 9073 5c3e 94f6 5c3f 9441     <\..=\s.>\..?\A.
 8015854:	5c40 8bc7 5c41 9b9b 5c45 8b8f 5c46 9b9c     @\..A\..E\..F\..
 8015864:	5c48 8bfc 5c4a 93cd 5c4b 89ae 5c4d 8e72     H\..J\..K\..M\r.
 8015874:	5c4e 9b9d 5c4f 9ba0 5c50 9b9f 5c51 8bfb     N\..O\..P\..Q\..
 8015884:	5c53 9b9e 5c55 9357 5c5e 91ae 5c60 936a     S\..U\W.^\..`\j.
 8015894:	5c61 8ec6 5c64 9177 5c65 979a 5c6c 9ba2     a\..d\w.e\..l\..
 80158a4:	5c6e 9ba3 5c6f 93d4 5c71 8e52 5c76 9ba5     n\..o\..q\R.v\..
 80158b4:	5c79 9ba6 5c8c 9ba7 5c90 8af2 5c91 9ba8     y\...\...\...\..
 80158c4:	5c94 9ba9 5ca1 89aa 5ca6 faac 5ca8 915a     .\...\...\...\Z.
 80158d4:	5ca9 8ae2 5cab 9bab 5cac 96a6 5cb1 91d0     .\...\...\...\..
 80158e4:	5cb3 8a78 5cb6 9bad 5cb7 9baf 5cb8 8add     .\x..\...\...\..
 80158f4:	5cba faad 5cbb 9bac 5cbc 9bae 5cbe 9bb1     .\...\...\...\..
 8015904:	5cc5 9bb0 5cc7 9bb2 5cd9 9bb3 5ce0 93bb     .\...\...\...\..
 8015914:	5ce1 8bac 5ce8 89e3 5ce9 9bb4 5cea 9bb9     .\...\...\...\..
 8015924:	5ced 9bb7 5cef 95f5 5cf0 95f4 5cf5 faae     .\...\...\...\..
 8015934:	5cf6 9387 5cfa 9bb6 5cfb 8f73 5cfd 9bb5     .\...\...\s..\..
 8015944:	5d07 9092 5d0b 9bba 5d0e 8de8 5d11 9bc0     .]...]...]...]..
 8015954:	5d14 9bc1 5d15 9bbb 5d16 8a52 5d17 9bbc     .]...]...]R..]..
 8015964:	5d18 9bc5 5d19 9bc4 5d1a 9bc3 5d1b 9bbf     .]...]...]...]..
 8015974:	5d1f 9bbe 5d22 9bc2 5d27 faaf 5d29 95f6     .].."]..']..)]..
 8015984:	5d42 fab2 5d4b 9bc9 5d4c 9bc6 5d4e 9bc8     B]..K]..L]..N]..
 8015994:	5d50 9792 5d52 9bc7 5d53 fab0 5d5c 9bbd     P]..R]..S]..\]..
 80159a4:	5d69 9093 5d6c 9bca 5d6d fab3 5d6f 8db5     i]..l]..m]..o]..
 80159b4:	5d73 9bcb 5d76 9bcc 5d82 9bcf 5d84 9bce     s]..v]...]...]..
 80159c4:	5d87 9bcd 5d8b 9388 5d8c 9bb8 5d90 9bd5     .]...]...]...]..
 80159d4:	5d9d 9bd1 5da2 9bd0 5dac 9bd2 5dae 9bd3     .]...]...]...]..
 80159e4:	5db7 9bd6 5db8 fab4 5db9 fab5 5dba 97e4     .]...]...]...]..
 80159f4:	5dbc 9bd7 5dbd 9bd4 5dc9 9bd8 5dcc 8ade     .]...]...]...]..
 8015a04:	5dcd 9bd9 5dd0 fab6 5dd2 9bdb 5dd3 9bda     .]...]...]...]..
 8015a14:	5dd6 9bdc 5ddb 9bdd 5ddd 90ec 5dde 8f42     .]...]...]...]B.
 8015a24:	5de1 8f84 5de3 9183 5de5 8d48 5de6 8db6     .]...]...]H..]..
 8015a34:	5de7 8d49 5de8 8b90 5deb 9bde 5dee 8db7     .]I..]...]...]..
 8015a44:	5df1 8cc8 5df2 9bdf 5df3 96a4 5df4 9462     .]...]...]...]b.
 8015a54:	5df5 9be0 5df7 8d4a 5dfb 8aaa 5dfd 9246     .]...]J..]...]F.
 8015a64:	5dfe 8bd0 5e02 8e73 5e03 957a 5e06 94bf     .]...^s..^z..^..
 8015a74:	5e0b 9be1 5e0c 8af3 5e11 9be4 5e16 929f     .^...^...^...^..
 8015a84:	5e19 9be3 5e1a 9be2 5e1b 9be5 5e1d 92e9     .^...^...^...^..
 8015a94:	5e25 9083 5e2b 8e74 5e2d 90c8 5e2f 91d1     %^..+^t.-^../^..
 8015aa4:	5e30 8b41 5e33 92a0 5e36 9be6 5e37 9be7     0^A.3^..6^..7^..
 8015ab4:	5e38 8fed 5e3d 9658 5e40 9bea 5e43 9be9     8^..=^X.@^..C^..
 8015ac4:	5e44 9be8 5e45 959d 5e47 9bf1 5e4c 9679     D^..E^..G^..L^y.
 8015ad4:	5e4e 9beb 5e54 9bed 5e55 968b 5e57 9bec     N^..T^..U^..W^..
 8015ae4:	5e5f 9bee 5e61 94a6 5e62 9bef 5e63 95bc     _^..a^..b^..c^..
 8015af4:	5e64 9bf0 5e72 8ab1 5e73 95bd 5e74 944e     d^..r^..s^..t^N.
 8015b04:	5e75 9bf2 5e76 9bf3 5e78 8d4b 5e79 8ab2     u^..v^..x^K.y^..
 8015b14:	5e7a 9bf4 5e7b 8cb6 5e7c 9763 5e7d 9748     z^..{^..|^c.}^H.
 8015b24:	5e7e 8af4 5e7f 9bf6 5e81 92a1 5e83 8d4c     ~^...^...^...^L.
 8015b34:	5e84 8faf 5e87 94dd 5e8a 8fb0 5e8f 8f98     .^...^...^...^..
 8015b44:	5e95 92ea 5e96 95f7 5e97 9358 5e9a 8d4d     .^...^...^X..^M.
 8015b54:	5e9c 957b 5ea0 9bf7 5ea6 9378 5ea7 8dc0     .^{..^...^x..^..
 8015b64:	5eab 8cc9 5ead 92eb 5eb5 88c1 5eb6 8f8e     .^...^...^...^..
 8015b74:	5eb7 8d4e 5eb8 9766 5ec1 9bf8 5ec2 9bf9     .^N..^f..^...^..
 8015b84:	5ec3 9470 5ec8 9bfa 5ec9 97f5 5eca 984c     .^p..^...^...^L.
 8015b94:	5ecf 9bfc 5ed0 9bfb 5ed3 8a66 5ed6 9c40     .^...^...^f..^@.
 8015ba4:	5eda 9c43 5edb 9c44 5edd 9c42 5edf 955f     .^C..^D..^B..^_.
 8015bb4:	5ee0 8fb1 5ee1 9c46 5ee2 9c45 5ee3 9c41     .^...^F..^E..^A.
 8015bc4:	5ee8 9c47 5ee9 9c48 5eec 9c49 5ef0 9c4c     .^G..^H..^I..^L.
 8015bd4:	5ef1 9c4a 5ef3 9c4b 5ef4 9c4d 5ef6 8984     .^J..^K..^M..^..
 8015be4:	5ef7 92ec 5ef8 9c4e 5efa 8c9a 5efb 89f4     .^...^N..^...^..
 8015bf4:	5efc 9455 5efe 9c4f 5eff 93f9 5f01 95d9     .^U..^O..^..._..
 8015c04:	5f03 9c50 5f04 984d 5f09 9c51 5f0a 95be     ._P.._M.._Q.._..
 8015c14:	5f0b 9c54 5f0c 989f 5f0d 98af 5f0f 8eae     ._T.._..._..._..
 8015c24:	5f10 93f3 5f11 9c55 5f13 8b7c 5f14 92a2     ._..._U.._|.._..
 8015c34:	5f15 88f8 5f16 9c56 5f17 95a4 5f18 8d4f     ._..._V.._..._O.
 8015c44:	5f1b 926f 5f1f 92ed 5f21 fab7 5f25 96ed     ._o.._..!_..%_..
 8015c54:	5f26 8cb7 5f27 8cca 5f29 9c57 5f2d 9c58     &_..'_..)_W.-_X.
 8015c64:	5f2f 9c5e 5f31 8ee3 5f34 fab8 5f35 92a3     /_^.1_..4_..5_..
 8015c74:	5f37 8bad 5f38 9c59 5f3c 954a 5f3e 9265     7_..8_Y.<_J.>_e.
 8015c84:	5f41 9c5a 5f45 fa67 5f48 9c5b 5f4a 8bae     A_Z.E_g.H_[.J_..
 8015c94:	5f4c 9c5c 5f4e 9c5d 5f51 9c5f 5f53 9396     L_\.N_].Q__.S_..
 8015ca4:	5f56 9c60 5f57 9c61 5f59 9c62 5f5c 9c53     V_`.W_a.Y_b.\_S.
 8015cb4:	5f5d 9c52 5f61 9c63 5f62 8c60 5f66 9546     ]_R.a_c.b_`.f_F.
 8015cc4:	5f67 fab9 5f69 8dca 5f6a 9556 5f6b 92a4     g_..i_..j_V.k_..
 8015cd4:	5f6c 956a 5f6d 9c64 5f70 8fb2 5f71 8965     l_j.m_d.p_..q_e.
 8015ce4:	5f73 9c65 5f77 9c66 5f79 96f0 5f7c 94de     s_e.w_f.y_..|_..
 8015cf4:	5f7f 9c69 5f80 899d 5f81 90aa 5f82 9c68     ._i.._..._..._h.
 8015d04:	5f83 9c67 5f84 8c61 5f85 91d2 5f87 9c6d     ._g.._a.._..._m.
 8015d14:	5f88 9c6b 5f8a 9c6a 5f8b 97a5 5f8c 8ce3     ._k.._j.._..._..
 8015d24:	5f90 8f99 5f91 9c6c 5f92 936b 5f93 8f5d     ._..._l.._k.._].
 8015d34:	5f97 93be 5f98 9c70 5f99 9c6f 5f9e 9c6e     ._..._p.._o.._n.
 8015d44:	5fa0 9c71 5fa1 8ce4 5fa8 9c72 5fa9 959c     ._q.._..._r.._..
 8015d54:	5faa 8f7a 5fad 9c73 5fae 94f7 5fb3 93bf     ._z.._s.._..._..
 8015d64:	5fb4 92a5 5fb7 faba 5fb9 934f 5fbc 9c74     ._..._..._O.._t.
 8015d74:	5fbd 8b4a 5fc3 9053 5fc5 954b 5fcc 8af5     ._J.._S.._K.._..
 8015d84:	5fcd 9445 5fd6 9c75 5fd7 8e75 5fd8 9659     ._E.._u.._u.._Y.
 8015d94:	5fd9 965a 5fdc 899e 5fdd 9c7a 5fde fabb     ._Z.._..._z.._..
 8015da4:	5fe0 9289 5fe4 9c77 5feb 89f5 5ff0 9cab     ._..._w.._..._..
 8015db4:	5ff1 9c79 5ff5 944f 5ff8 9c78 5ffb 9c76     ._y.._O.._x.._v.
 8015dc4:	5ffd 8d9a 5fff 9c7c 600e 9c83 600f 9c89     ._..._|..`...`..
 8015dd4:	6010 9c81 6012 937b 6015 9c86 6016 957c     .`...`{..`...`|.
 8015de4:	6019 9c80 601b 9c85 601c 97e5 601d 8e76     .`...`...`...`v.
 8015df4:	6020 91d3 6021 9c7d 6025 8b7d 6026 9c88      `..!`}.%`}.&`..
 8015e04:	6027 90ab 6028 8985 6029 9c82 602a 89f6     '`..(`..)`..*`..
 8015e14:	602b 9c87 602f 8baf 6031 9c84 603a 9c8a     +`../`..1`..:`..
 8015e24:	6041 9c8c 6042 9c96 6043 9c94 6046 9c91     A`..B`..C`..F`..
 8015e34:	604a 9c90 604b 97f6 604d 9c92 6050 8bb0     J`..K`..M`..P`..
 8015e44:	6052 8d50 6055 8f9a 6059 9c99 605a 9c8b     R`P.U`..Y`..Z`..
 8015e54:	605d fabc 605f 9c8f 6060 9c7e 6062 89f8     ]`.._`..``~.b`..
 8015e64:	6063 9c93 6064 9c95 6065 9270 6068 8da6     c`..d`..e`p.h`..
 8015e74:	6069 89b6 606a 9c8d 606b 9c98 606c 9c97     i`..j`..k`..l`..
 8015e84:	606d 8bb1 606f 91a7 6070 8a86 6075 8c62     m`..o`..p`..u`b.
 8015e94:	6077 9c8e 6081 9c9a 6083 9c9d 6084 9c9f     w`...`...`...`..
 8015ea4:	6085 fabd 6089 8ebb 608a fabe 608b 9ca5     .`...`...`...`..
 8015eb4:	608c 92ee 608d 9c9b 6092 9ca3 6094 89f7     .`...`...`...`..
 8015ec4:	6096 9ca1 6097 9ca2 609a 9c9e 609b 9ca0     .`...`...`...`..
 8015ed4:	609f 8ce5 60a0 9749 60a3 8ab3 60a6 8978     .`...`I..`...`x.
 8015ee4:	60a7 9ca4 60a9 9459 60aa 88ab 60b2 94df     .`...`Y..`...`..
 8015ef4:	60b3 9c7b 60b4 9caa 60b5 9cae 60b6 96e3     .`{..`...`...`..
 8015f04:	60b8 9ca7 60bc 9389 60bd 9cac 60c5 8fee     .`...`...`...`..
 8015f14:	60c6 9cad 60c7 93d5 60d1 9866 60d3 9ca9     .`...`...`f..`..
 8015f24:	60d5 fac0 60d8 9caf 60da 8d9b 60dc 90c9     .`...`...`...`..
 8015f34:	60de fabf 60df 88d2 60e0 9ca8 60e1 9ca6     .`...`...`...`..
 8015f44:	60e3 9179 60e7 9c9c 60e8 8e53 60f0 91c4     .`y..`...`S..`..
 8015f54:	60f1 9cbb 60f2 fac2 60f3 917a 60f4 9cb6     .`...`...`z..`..
 8015f64:	60f6 9cb3 60f7 9cb4 60f9 8ee4 60fa 9cb7     .`...`...`...`..
 8015f74:	60fb 9cba 6100 9cb5 6101 8f44 6103 9cb8     .`...a...aD..a..
 8015f84:	6106 9cb2 6108 96fa 6109 96f9 610d 9cbc     .a...a...a...a..
 8015f94:	610e 9cbd 610f 88d3 6111 fac3 6115 9cb1     .a...a...a...a..
 8015fa4:	611a 8bf0 611b 88a4 611f 8ab4 6120 fac1     .a...a...a.. a..
 8015fb4:	6121 9cb9 6127 9cc1 6128 9cc0 612c 9cc5     !a..'a..(a..,a..
 8015fc4:	6130 fac5 6134 9cc6 6137 fac4 613c 9cc4     0a..4a..7a..<a..
 8015fd4:	613d 9cc7 613e 9cbf 613f 9cc3 6142 9cc8     =a..>a..?a..Ba..
 8015fe4:	6144 9cc9 6147 9cbe 6148 8e9c 614a 9cc2     Da..Ga..Ha..Ja..
 8015ff4:	614b 91d4 614c 8d51 614d 9cb0 614e 9054     Ka..LaQ.Ma..NaT.
 8016004:	6153 9cd6 6155 95e7 6158 9ccc 6159 9ccd     Sa..Ua..Xa..Ya..
 8016014:	615a 9cce 615d 9cd5 615f 9cd4 6162 969d     Za..]a.._a..ba..
 8016024:	6163 8ab5 6165 9cd2 6167 8c64 6168 8a53     ca..ea..gad.haS.
 8016034:	616b 9ccf 616e 97b6 616f 9cd1 6170 88d4     ka..na..oa..pa..
 8016044:	6171 9cd3 6173 9cca 6174 9cd0 6175 9cd7     qa..sa..ta..ua..
 8016054:	6176 8c63 6177 9ccb 617e 977c 6182 974a     vac.wa..~a|..aJ.
 8016064:	6187 9cda 618a 9cde 618e 919e 6190 97f7     .a...a...a...a..
 8016074:	6191 9cdf 6194 9cdc 6196 9cd9 6198 fac6     .a...a...a...a..
 8016084:	6199 9cd8 619a 9cdd 61a4 95ae 61a7 93b2     .a...a...a...a..
 8016094:	61a9 8c65 61ab 9ce0 61ac 9cdb 61ae 9ce1     .ae..a...a...a..
 80160a4:	61b2 8c9b 61b6 89af 61ba 9ce9 61be 8ab6     .a...a...a...a..
 80160b4:	61c3 9ce7 61c6 9ce8 61c7 8da7 61c8 9ce6     .a...a...a...a..
 80160c4:	61c9 9ce4 61ca 9ce3 61cb 9cea 61cc 9ce2     .a...a...a...a..
 80160d4:	61cd 9cec 61d0 89f9 61e3 9cee 61e6 9ced     .a...a...a...a..
 80160e4:	61f2 92a6 61f4 9cf1 61f6 9cef 61f7 9ce5     .a...a...a...a..
 80160f4:	61f8 8c9c 61fa 9cf0 61fc 9cf4 61fd 9cf3     .a...a...a...a..
 8016104:	61fe 9cf5 61ff 9cf2 6200 9cf6 6208 9cf7     .a...a...b...b..
 8016114:	6209 9cf8 620a 95e8 620c 9cfa 620d 9cf9     .b...b...b...b..
 8016124:	620e 8f5e 6210 90ac 6211 89e4 6212 89fa     .b^..b...b...b..
 8016134:	6213 fac7 6214 9cfb 6216 88bd 621a 90ca     .b...b...b...b..
 8016144:	621b 9cfc 621d e6c1 621e 9d40 621f 8c81     .b...b...b@..b..
 8016154:	6221 9d41 6226 90ed 622a 9d42 622e 9d43     !bA.&b..*bB..bC.
 8016164:	622f 8b59 6230 9d44 6232 9d45 6233 9d46     /bY.0bD.2bE.3bF.
 8016174:	6234 91d5 6238 8ccb 623b 96df 623f 965b     4b..8b..;b..?b[.
 8016184:	6240 8f8a 6241 9d47 6247 90ee 6248 e7bb     @b..AbG.Gb..Hb..
 8016194:	6249 94e0 624b 8ee8 624d 8dcb 624e 9d48     Ib..Kb..Mb..NbH.
 80161a4:	6253 91c5 6255 95a5 6258 91ef 625b 9d4b     Sb..Ub..Xb..[bK.
 80161b4:	625e 9d49 6260 9d4c 6263 9d4a 6268 9d4d     ^bI.`bL.cbJ.hbM.
 80161c4:	626e 95af 6271 88b5 6276 957d 6279 94e1     nb..qb..vb}.yb..
 80161d4:	627c 9d4e 627e 9d51 627f 8fb3 6280 8b5a     |bN.~bQ..b...bZ.
 80161e4:	6282 9d4f 6283 9d56 6284 8fb4 6289 9d50     .bO..bV..b...bP.
 80161f4:	628a 9463 6291 977d 6292 9d52 6293 9d53     .bc..b}..bR..bS.
 8016204:	6294 9d57 6295 938a 6296 9d54 6297 8d52     .bW..b...bT..bR.
 8016214:	6298 90dc 629b 9d65 629c 94b2 629e 91f0     .b...be..b...b..
 8016224:	62a6 fac8 62ab 94e2 62ac 9dab 62b1 95f8     .b...b...b...b..
 8016234:	62b5 92ef 62b9 9695 62bb 9d5a 62bc 899f     .b...b...bZ..b..
 8016244:	62bd 928a 62c2 9d63 62c5 9253 62c6 9d5d     .b...bc..bS..b].
 8016254:	62c7 9d64 62c8 9d5f 62c9 9d66 62ca 9d62     .bd..b_..bf..bb.
 8016264:	62cc 9d61 62cd 948f 62cf 9d5b 62d0 89fb     .ba..b...b[..b..
 8016274:	62d1 9d59 62d2 8b91 62d3 91f1 62d4 9d55     .bY..b...b...bU.
 8016284:	62d7 9d58 62d8 8d53 62d9 90d9 62db 8fb5     .bX..bS..b...b..
 8016294:	62dc 9d60 62dd 9471 62e0 8b92 62e1 8a67     .b`..bq..b...bg.
 80162a4:	62ec 8a87 62ed 9040 62ee 9d68 62ef 9d6d     .b...b@..bh..bm.
 80162b4:	62f1 9d69 62f3 8c9d 62f5 9d6e 62f6 8e41     .bi..b...bn..bA.
 80162c4:	62f7 8d89 62fe 8f45 62ff 9d5c 6301 8e9d     .b...bE..b\..c..
 80162d4:	6302 9d6b 6307 8e77 6308 9d6c 6309 88c2     .ck..cw..cl..c..
 80162e4:	630c 9d67 6311 92a7 6319 8b93 631f 8bb2     .cg..c...c...c..
 80162f4:	6327 9d6a 6328 88a5 632b 8dc1 632f 9055     'cj.(c..+c../cU.
 8016304:	633a 92f0 633d 94d2 633e 9d70 633f 917d     :c..=c..>cp.?c}.
 8016314:	6349 91a8 634c 8e4a 634d 9d71 634f 9d73     Ic..LcJ.Mcq.Ocs.
 8016324:	6350 9d6f 6355 95df 6357 92bb 635c 917b     Pco.Uc..Wc..\c{.
 8016334:	6367 95f9 6368 8ecc 6369 9d80 636b 9d7e     gc..hc..ic..kc~.
 8016344:	636e 9098 6372 8c9e 6376 9d78 6377 8fb7     nc..rc..vcx.wc..
 8016354:	637a 93e6 637b 9450 6380 9d76 6383 917c     zc..{cP..cv..c|.
 8016364:	6388 8ef6 6389 9d7b 638c 8fb6 638e 9d75     .c...c{..c...cu.
 8016374:	638f 9d7a 6392 9472 6396 9d74 6398 8c40     .cz..cr..ct..c@.
 8016384:	639b 8a7c 639f 9d7c 63a0 97a9 63a1 8dcc     .c|..c|..c...c..
 8016394:	63a2 9254 63a3 9d79 63a5 90da 63a7 8d54     .cT..cy..c...cT.
 80163a4:	63a8 9084 63a9 8986 63aa 915b 63ab 9d77     .c...c...c[..cw.
 80163b4:	63ac 8b64 63b2 8c66 63b4 92cd 63b5 9d7d     .cd..cf..c...c}.
 80163c4:	63bb 917e 63be 9d81 63c0 9d83 63c3 91b5     .c~..c...c...c..
 80163d4:	63c4 9d89 63c6 9d84 63c9 9d86 63cf 9560     .c...c...c...c`.
 80163e4:	63d0 92f1 63d2 9d87 63d6 974b 63da 9767     .c...c...cK..cg.
 80163f4:	63db 8ab7 63e1 88ac 63e3 9d85 63e9 9d82     .c...c...c...c..
 8016404:	63ee 8af6 63f4 8987 63f5 fac9 63f6 9d88     .c...c...c...c..
 8016414:	63fa 9768 6406 9d8c 640d 91b9 640f 9d93     .ch..d...d...d..
 8016424:	6413 9d8d 6416 9d8a 6417 9d91 641c 9d72     .d...d...d...dr.
 8016434:	6426 9d8e 6428 9d92 642c 94c0 642d 938b     &d..(d..,d..-d..
 8016444:	6434 9d8b 6436 9d8f 643a 8c67 643e 8def     4d..6d..:dg.>d..
 8016454:	6442 90db 644e 9d97 6458 9345 6460 faca     Bd..Nd..XdE.`d..
 8016464:	6467 9d94 6469 9680 646f 9d95 6476 9d96     gd..id..od..vd..
 8016474:	6478 96cc 647a 90a0 6483 8c82 6488 9d9d     xd..zd...d...d..
 8016484:	6492 8e54 6493 9d9a 6495 9d99 649a 9451     .dT..d...d...dQ.
 8016494:	649d facb 649e 93b3 64a4 9350 64a5 9d9b     .d...d...dP..d..
 80164a4:	64a9 9d9c 64ab 958f 64ad 9464 64ae 8e42     .d...d...dd..dB.
 80164b4:	64b0 90ef 64b2 966f 64b9 8a68 64bb 9da3     .d...do..dh..d..
 80164c4:	64bc 9d9e 64c1 9769 64c2 9da5 64c5 9da1     .d...di..d...d..
 80164d4:	64c7 9da2 64cd 9180 64ce facc 64d2 9da0     .d...d...d...d..
 80164e4:	64d4 9d5e 64d8 9da4 64da 9d9f 64e0 9da9     .d^..d...d...d..
 80164f4:	64e1 9daa 64e2 9346 64e3 9dac 64e6 8e43     .d...dF..d...dC.
 8016504:	64e7 9da7 64ec 8b5b 64ef 9dad 64f1 9da6     .d...d[..d...d..
 8016514:	64f2 9db1 64f4 9db0 64f6 9daf 64fa 9db2     .d...d...d...d..
 8016524:	64fd 9db4 64fe 8fef 6500 9db3 6505 9db7     .d...d...e...e..
 8016534:	6518 9db5 651c 9db6 651d 9d90 6523 9db9     .e...e...e..#e..
 8016544:	6524 9db8 652a 9d98 652b 9dba 652c 9dae     $e..*e..+e..,e..
 8016554:	652f 8e78 6534 9dbb 6535 9dbc 6536 9dbe     /ex.4e..5e..6e..
 8016564:	6537 9dbd 6538 9dbf 6539 89fc 653b 8d55     7e..8e..9e..;eU.
 8016574:	653e 95fa 653f 90ad 6545 8ccc 6548 9dc1     >e..?e..Ee..He..
 8016584:	654d 9dc4 654e facd 654f 9571 6551 8b7e     Me..Ne..Oeq.Qe~.
 8016594:	6555 9dc3 6556 9dc2 6557 9473 6558 9dc5     Ue..Ve..Wes.Xe..
 80165a4:	6559 8bb3 655d 9dc7 655e 9dc6 6562 8ab8     Ye..]e..^e..be..
 80165b4:	6563 8e55 6566 93d6 656c 8c68 6570 9094     ceU.fe..leh.pe..
 80165c4:	6572 9dc8 6574 90ae 6575 9347 6577 957e     re..te..ueG.we~.
 80165d4:	6578 9dc9 6582 9dca 6583 9dcb 6587 95b6     xe...e...e...e..
 80165e4:	6588 9b7c 6589 90c4 658c 956b 658e 8dd6     .e|..e...ek..e..
 80165f4:	6590 94e3 6591 94c1 6597 936c 6599 97bf     .e...e...el..e..
 8016604:	659b 9dcd 659c 8ece 659f 9dce 65a1 88b4     .e...e...e...e..
 8016614:	65a4 8bd2 65a5 90cb 65a7 9580 65ab 9dcf     .e...e...e...e..
 8016624:	65ac 8e61 65ad 9266 65af 8e7a 65b0 9056     .ea..ef..ez..eV.
 8016634:	65b7 9dd0 65b9 95fb 65bc 8997 65bd 8e7b     .e...e...e...e{.
 8016644:	65c1 9dd3 65c3 9dd1 65c4 9dd4 65c5 97b7     .e...e...e...e..
 8016654:	65c6 9dd2 65cb 90f9 65cc 9dd5 65cf 91b0     .e...e...e...e..
 8016664:	65d2 9dd6 65d7 8af8 65d9 9dd8 65db 9dd7     .e...e...e...e..
 8016674:	65e0 9dd9 65e1 9dda 65e2 8af9 65e5 93fa     .e...e...e...e..
 8016684:	65e6 9255 65e7 8b8c 65e8 8e7c 65e9 9181     .eU..e...e|..e..
 8016694:	65ec 8f7b 65ed 88ae 65f1 9ddb 65fa 89a0     .e{..e...e...e..
 80166a4:	65fb 9ddf 6600 face 6602 8d56 6603 9dde     .e...f...fV..f..
 80166b4:	6606 8da9 6607 8fb8 6609 fad1 660a 9ddd     .f...f...f...f..
 80166c4:	660c 8fb9 660e 96be 660f 8da8 6613 88d5     .f...f...f...f..
 80166d4:	6614 90cc 6615 facf 661c 9de4 661e fad3     .f...f...f...f..
 80166e4:	661f 90af 6620 8966 6624 fad4 6625 8f74     .f.. ff.$f..%ft.
 80166f4:	6627 9686 6628 8df0 662d 8fba 662e fad2     'f..(f..-f...f..
 8016704:	662f 90a5 6631 fa63 6634 9de3 6635 9de1     /f..1fc.4f..5f..
 8016714:	6636 9de2 663b fad0 663c 928b 663f 9e45     6f..;f..<f..?fE.
 8016724:	6641 9de8 6642 8e9e 6643 8d57 6644 9de6     Af..Bf..CfW.Df..
 8016734:	6649 9de7 664b 9057 664f 9de5 6652 8e4e     If..KfW.Of..RfN.
 8016744:	6657 fad6 6659 fad7 665d 9dea 665e 9de9     Wf..Yf..]f..^f..
 8016754:	665f 9dee 6662 9def 6664 9deb 6665 fad5     _f..bf..df..ef..
 8016764:	6666 8a41 6667 9dec 6668 9ded 6669 94d3     ffA.gf..hf..if..
 8016774:	666e 9581 666f 8c69 6670 9df0 6673 fad9     nf..ofi.pf..sf..
 8016784:	6674 90b0 6676 8fbb 667a 9271 6681 8bc5     tf..vf..zfq..f..
 8016794:	6683 9df1 6684 9df5 6687 89c9 6688 9df2     .f...f...f...f..
 80167a4:	6689 9df4 668e 9df3 6691 8f8b 6696 9267     .f...f...f...fg.
 80167b4:	6697 88c3 6698 9df6 6699 fada 669d 9df7     .f...f...f...f..
 80167c4:	66a0 fadb 66a2 92a8 66a6 97ef 66ab 8e62     .f...f...f...fb.
 80167d4:	66ae 95e9 66b2 fadc 66b4 965c 66b8 9e41     .f...f...f\..fA.
 80167e4:	66b9 9df9 66bc 9dfc 66be 9dfb 66bf fadd     .f...f...f...f..
 80167f4:	66c1 9df8 66c4 9e40 66c7 93dc 66c9 9dfa     .f...f@..f...f..
 8016804:	66d6 9e42 66d9 8f8c 66da 9e43 66dc 976a     .fB..f...fC..fj.
 8016814:	66dd 9498 66e0 9e44 66e6 9e46 66e9 9e47     .f...fD..fF..fG.
 8016824:	66f0 9e48 66f2 8bc8 66f3 8967 66f4 8d58     .fH..f...fg..fX.
 8016834:	66f5 9e49 66f7 9e4a 66f8 8f91 66f9 9182     .fI..fJ..f...f..
 8016844:	66fa fade 66fb fa66 66fc 99d6 66fd 915d     .f...ff..f...f].
 8016854:	66fe 915c 66ff 91d6 6700 8dc5 6703 98f0     .f\..f...g...g..
 8016864:	6708 8c8e 6709 974c 670b 95fc 670d 959e     .g...gL..g...g..
 8016874:	670e fadf 670f 9e4b 6714 8df1 6715 92bd     .g...gK..g...g..
 8016884:	6716 9e4c 6717 984e 671b 965d 671d 92a9     .gL..gN..g]..g..
 8016894:	671e 9e4d 671f 8afa 6726 9e4e 6727 9e4f     .gM..g..&gN.'gO.
 80168a4:	6728 96d8 672a 96a2 672b 9696 672c 967b     (g..*g..+g..,g{.
 80168b4:	672d 8e44 672e 9e51 6731 8ee9 6734 9670     -gD..gQ.1g..4gp.
 80168c4:	6736 9e53 6737 9e56 6738 9e55 673a 8af7     6gS.7gV.8gU.:g..
 80168d4:	673d 8b80 673f 9e52 6741 9e54 6746 9e57     =g..?gR.AgT.FgW.
 80168e4:	6749 9099 674e 979b 674f 88c7 6750 8dde     Ig..Ng..Og..Pg..
 80168f4:	6751 91ba 6753 8edb 6756 8ff1 6759 9e5a     Qg..Sg..Vg..YgZ.
 8016904:	675c 936d 675e 9e58 675f 91a9 6760 9e59     \gm.^gX._g..`gY.
 8016914:	6761 8ff0 6762 96db 6763 9e5b 6764 9e5c     ag..bg..cg[.dg\.
 8016924:	6765 9788 6766 fae1 676a 9e61 676d 8d59     eg..fg..jga.mgY.
 8016934:	676f 9474 6770 9e5e 6771 938c 6772 9ddc     ogt.pg^.qg..rg..
 8016944:	6773 9de0 6775 8b6e 6777 9466 677c 9e60     sg..ugn.wgf.|g`.
 8016954:	677e 8fbc 677f 94c2 6785 9e66 6787 94f8     ~g...g...gf..g..
 8016964:	6789 9e5d 678b 9e63 678c 9e62 6790 90cd     .g]..gc..gb..g..
 8016974:	6795 968d 6797 97d1 679a 9687 679c 89ca     .g...g...g...g..
 8016984:	679d 8e7d 67a0 9867 67a1 9e65 67a2 9095     .g}..gg..ge..g..
 8016994:	67a6 9e64 67a9 9e5f 67af 8ccd 67b3 9e6b     .gd..g_..g...gk.
 80169a4:	67b4 9e69 67b6 89cb 67b7 9e67 67b8 9e6d     .gi..g...gg..gm.
 80169b4:	67b9 9e73 67bb fae2 67c0 fae4 67c1 91c6     .gs..g...g...g..
 80169c4:	67c4 95bf 67c6 9e75 67ca 9541 67ce 9e74     .g...gu..gA..gt.
 80169d4:	67cf 9490 67d0 965e 67d1 8ab9 67d3 90f5     .g...g^..g...g..
 80169e4:	67d4 8f5f 67d8 92d1 67da 974d 67dd 9e70     .g_..g...gM..gp.
 80169f4:	67de 9e6f 67e2 9e71 67e4 9e6e 67e7 9e76     .go..gq..gn..gv.
 8016a04:	67e9 9e6c 67ec 9e6a 67ee 9e72 67ef 9e68     .gl..gj..gr..gh.
 8016a14:	67f1 928c 67f3 96f6 67f4 8ec4 67f5 8df2     .g...g...g...g..
 8016a24:	67fb 8db8 67fe 968f 67ff 8a60 6801 fae5     .g...g...g`..h..
 8016a34:	6802 92cc 6803 93c8 6804 8968 6813 90f0     .h...h...hh..h..
 8016a44:	6816 90b2 6817 8c49 681e 9e78 6821 8d5a     .h...hI..hx.!hZ.
 8016a54:	6822 8a9c 6829 9e7a 682a 8a94 682b 9e81     "h..)hz.*h..+h..
 8016a64:	6832 9e7d 6834 90f1 6838 8a6a 6839 8daa     2h}.4h..8hj.9h..
 8016a74:	683c 8a69 683d 8dcd 6840 9e7b 6841 8c85     <hi.=h..@h{.Ah..
 8016a84:	6842 8c6a 6843 938d 6844 fae6 6846 9e79     Bhj.Ch..Dh..Fhy.
 8016a94:	6848 88c4 684d 9e7c 684e 9e7e 6850 8bcb     Hh..Mh|.Nh~.Ph..
 8016aa4:	6851 8c4b 6852 fae3 6853 8aba 6854 8b6a     QhK.Rh..Sh..Thj.
 8016ab4:	6859 9e82 685c 8df7 685d 9691 685f 8e56     Yh..\h..]h.._hV.
 8016ac4:	6863 9e83 6867 954f 6874 9e8f 6876 89b1     ch..ghO.th..vh..
 8016ad4:	6877 9e84 687e 9e95 687f 9e85 6881 97c0     wh..~h...h...h..
 8016ae4:	6883 9e8c 6885 947e 688d 9e94 688f 9e87     .h...h~..h...h..
 8016af4:	6893 88b2 6894 9e89 6897 8d5b 689b 9e8b     .h...h...h[..h..
 8016b04:	689d 9e8a 689f 9e86 68a0 9e91 68a2 8fbd     .h...h...h...h..
 8016b14:	68a6 9aeb 68a7 8ce6 68a8 979c 68ad 9e88     .h...h...h...h..
 8016b24:	68af 92f2 68b0 8a42 68b1 8dab 68b3 9e80     .h...hB..h...h..
 8016b34:	68b5 9e90 68b6 8a81 68b9 9e8e 68ba 9e92     .h...h...h...h..
 8016b44:	68bc 938e 68c4 8afc 68c6 9eb0 68c8 fa64     .h...h...h...hd.
 8016b54:	68c9 96c7 68ca 9e97 68cb 8afb 68cd 9e9e     .h...h...h...h..
 8016b64:	68cf fae7 68d2 965f 68d4 9e9f 68d5 9ea1     .h...h_..h...h..
 8016b74:	68d7 9ea5 68d8 9e99 68da 9249 68df 938f     .h...h...hI..h..
 8016b84:	68e0 9ea9 68e1 9e9c 68e3 9ea6 68e7 9ea0     .h...h...h...h..
 8016b94:	68ee 9058 68ef 9eaa 68f2 90b1 68f9 9ea8     .hX..h...h...h..
 8016ba4:	68fa 8abb 6900 986f 6901 9e96 6904 9ea4     .h...io..i...i..
 8016bb4:	6905 88d6 6908 9e98 690b 96b8 690c 9e9d     .i...i...i...i..
 8016bc4:	690d 9041 690e 92c5 690f 9e93 6912 9ea3     .iA..i...i...i..
 8016bd4:	6919 909a 691a 9ead 691b 8a91 691c 8c9f     .i...i...i...i..
 8016be4:	6921 9eaf 6922 9e9a 6923 9eae 6925 9ea7     !i.."i..#i..%i..
 8016bf4:	6926 9e9b 6928 9eab 692a 9eac 6930 9ebd     &i..(i..*i..0i..
 8016c04:	6934 93cc 6936 9ea2 6939 9eb9 693d 9ebb     4i..6i..9i..=i..
 8016c14:	693f 92d6 694a 976b 6953 9596 6954 9eb6     ?i..Jik.Si..Ti..
 8016c24:	6955 91c8 6959 9ebc 695a 915e 695c 9eb3     Ui..Yi..Zi^.\i..
 8016c34:	695d 9ec0 695e 9ebf 6960 93ed 6961 9ebe     ]i..^i..`i..ai..
 8016c44:	6962 93e8 6968 fae9 696a 9ec2 696b 9eb5     bi..hi..ji..ki..
 8016c54:	696d 8bc6 696e 9eb8 696f 8f7c 6973 9480     mi..ni..oi|.si..
 8016c64:	6974 9eba 6975 8bc9 6977 9eb2 6978 9eb4     ti..ui..wi..xi..
 8016c74:	6979 9eb1 697c 984f 697d 8a79 697e 9eb7     yi..|iO.}iy.~i..
 8016c84:	6981 9ec1 6982 8a54 698a 8de5 698e 897c     .i...iT..i...i|.
 8016c94:	6991 9ed2 6994 9850 6995 9ed5 6998 faeb     .i...iP..i...i..
 8016ca4:	699b 9059 699c 9ed4 69a0 9ed3 69a7 9ed0     .iY..i...i...i..
 8016cb4:	69ae 9ec4 69b1 9ee1 69b2 9ec3 69b4 9ed6     .i...i...i...i..
 8016cc4:	69bb 9ece 69be 9ec9 69bf 9ec6 69c1 9ec7     .i...i...i...i..
 8016cd4:	69c3 9ecf 69c7 eaa0 69ca 9ecc 69cb 8d5c     .i...i...i...i\.
 8016ce4:	69cc 92c6 69cd 9184 69ce 9eca 69d0 9ec5     .i...i...i...i..
 8016cf4:	69d3 9ec8 69d8 976c 69d9 968a 69dd 9ecd     .i...il..i...i..
 8016d04:	69de 9ed7 69e2 faec 69e7 9edf 69e8 9ed8     .i...i...i...i..
 8016d14:	69eb 9ee5 69ed 9ee3 69f2 9ede 69f9 9edd     .i...i...i...i..
 8016d24:	69fb 92ce 69fd 9185 69ff 9edb 6a02 9ed9     .i...i...i...j..
 8016d34:	6a05 9ee0 6a0a 9ee6 6a0b 94f3 6a0c 9eec     .j...j...j...j..
 8016d44:	6a12 9ee7 6a13 9eea 6a14 9ee4 6a17 9294     .j...j...j...j..
 8016d54:	6a19 9557 6a1b 9eda 6a1e 9ee2 6a1f 8fbe     .jW..j...j...j..
 8016d64:	6a21 96cd 6a22 9ef6 6a23 9ee9 6a29 8ca0     !j.."j..#j..)j..
 8016d74:	6a2a 89a1 6a2b 8a7e 6a2e 9ed1 6a30 faed     *j..+j~..j..0j..
 8016d84:	6a35 8fbf 6a36 9eee 6a38 9ef5 6a39 8ef7     5j..6j..8j..9j..
 8016d94:	6a3a 8a92 6a3d 924d 6a44 9eeb 6a46 faef     :j..=jM.Dj..Fj..
 8016da4:	6a47 9ef0 6a48 9ef4 6a4b 8bb4 6a58 8b6b     Gj..Hj..Kj..Xjk.
 8016db4:	6a59 9ef2 6a5f 8b40 6a61 93c9 6a62 9ef1     Yj.._j@.aj..bj..
 8016dc4:	6a66 9ef3 6a6b faee 6a72 9eed 6a73 faf0     fj..kj..rj..sj..
 8016dd4:	6a78 9eef 6a7e faf1 6a7f 8a80 6a80 9268     xj..~j...j...jh.
 8016de4:	6a84 9efa 6a8d 9ef8 6a8e 8ce7 6a90 9ef7     .j...j...j...j..
 8016df4:	6a97 9f40 6a9c 9e77 6aa0 9ef9 6aa2 9efb     .j@..jw..j...j..
 8016e04:	6aa3 9efc 6aaa 9f4b 6aac 9f47 6aae 9e8d     .j...jK..jG..j..
 8016e14:	6ab3 9f46 6ab8 9f45 6abb 9f42 6ac1 9ee8     .jF..jE..jB..j..
 8016e24:	6ac2 9f44 6ac3 9f43 6ad1 9f49 6ad3 9845     .jD..jC..jI..jE.
 8016e34:	6ada 9f4c 6adb 8bf9 6ade 9f48 6adf 9f4a     .jL..j...jH..jJ.
 8016e44:	6ae2 faf2 6ae4 faf3 6ae8 94a5 6aea 9f4d     .j...j...j...jM.
 8016e54:	6afa 9f51 6afb 9f4e 6b04 9793 6b05 9f4f     .jQ..jN..k...kO.
 8016e64:	6b0a 9edc 6b12 9f52 6b16 9f53 6b1d 8954     .k...kR..kS..kT.
 8016e74:	6b1f 9f55 6b20 8c87 6b21 8e9f 6b23 8bd3     .kU. k..!k..#k..
 8016e84:	6b27 89a2 6b32 977e 6b37 9f57 6b38 9f56     'k..2k~.7kW.8kV.
 8016e94:	6b39 9f59 6b3a 8b5c 6b3d 8bd4 6b3e 8abc     9kY.:k\.=k..>k..
 8016ea4:	6b43 9f5c 6b47 9f5b 6b49 9f5d 6b4c 89cc     Ck\.Gk[.Ik].Lk..
 8016eb4:	6b4e 9256 6b50 9f5e 6b53 8abd 6b54 9f60     NkV.Pk^.Sk..Tk`.
 8016ec4:	6b59 9f5f 6b5b 9f61 6b5f 9f62 6b61 9f63     Yk_.[ka._kb.akc.
 8016ed4:	6b62 8e7e 6b63 90b3 6b64 8d9f 6b66 9590     bk~.ck..dk..fk..
 8016ee4:	6b69 95e0 6b6a 9863 6b6f 8e95 6b73 8dce     ik..jkc.ok..sk..
 8016ef4:	6b74 97f0 6b78 9f64 6b79 9f65 6b7b 8e80     tk..xkd.yke.{k..
 8016f04:	6b7f 9f66 6b80 9f67 6b83 9f69 6b84 9f68     .kf..kg..ki..kh.
 8016f14:	6b86 9677 6b89 8f7d 6b8a 8eea 6b8b 8e63     .kw..k}..k...kc.
 8016f24:	6b8d 9f6a 6b95 9f6c 6b96 9042 6b98 9f6b     .kj..kl..kB..kk.
 8016f34:	6b9e 9f6d 6ba4 9f6e 6baa 9f6f 6bab 9f70     .km..kn..ko..kp.
 8016f44:	6baf 9f71 6bb1 9f73 6bb2 9f72 6bb3 9f74     .kq..ks..kr..kt.
 8016f54:	6bb4 89a3 6bb5 9269 6bb7 9f75 6bba 8e45     .k...ki..ku..kE.
 8016f64:	6bbb 8a6b 6bbc 9f76 6bbf 9361 6bc0 9aca     .kk..kv..ka..k..
 8016f74:	6bc5 8b42 6bc6 9f77 6bcb 9f78 6bcd 95ea     .kB..kw..kx..k..
 8016f84:	6bce 9688 6bd2 93c5 6bd3 9f79 6bd4 94e4     .k...k...ky..k..
 8016f94:	6bd6 faf4 6bd8 94f9 6bdb 96d1 6bdf 9f7a     .k...k...k...kz.
 8016fa4:	6beb 9f7c 6bec 9f7b 6bef 9f7e 6bf3 9f7d     .k|..k{..k~..k}.
 8016fb4:	6c08 9f81 6c0f 8e81 6c11 96af 6c13 9f82     .l...l...l...l..
 8016fc4:	6c14 9f83 6c17 8b43 6c1b 9f84 6c23 9f86     .l...lC..l..#l..
 8016fd4:	6c24 9f85 6c34 9085 6c37 9558 6c38 8969     $l..4l..7lX.8li.
 8016fe4:	6c3e 94c3 6c3f faf5 6c40 92f3 6c41 8f60     >l..?l..@l..Al`.
 8016ff4:	6c42 8b81 6c4e 94c4 6c50 8eac 6c55 9f88     Bl..Nl..Pl..Ul..
 8017004:	6c57 8abe 6c5a 8998 6c5c faf6 6c5d 93f0     Wl..Zl..\l..]l..
 8017014:	6c5e 9f87 6c5f 8d5d 6c60 9272 6c62 9f89     ^l.._l].`lr.bl..
 8017024:	6c68 9f91 6c6a 9f8a 6c6f faf8 6c70 91bf     hl..jl..ol..pl..
 8017034:	6c72 8b82 6c73 9f92 6c7a 8c88 6c7d 8b44     rl..sl..zl..}lD.
 8017044:	6c7e 9f90 6c81 9f8e 6c82 9f8b 6c83 9780     ~l...l...l...l..
 8017054:	6c86 faf7 6c88 92be 6c8c 93d7 6c8d 9f8c     .l...l...l...l..
 8017064:	6c90 9f94 6c92 9f93 6c93 8c42 6c96 89ab     .l...l...lB..l..
 8017074:	6c99 8db9 6c9a 9f8d 6c9b 9f8f 6ca1 9676     .l...l...l...lv.
 8017084:	6ca2 91f2 6cab 9697 6cae 9f9c 6cb1 9f9d     .l...l...l...l..
 8017094:	6cb3 89cd 6cb8 95a6 6cb9 96fb 6cba 9f9f     .l...l...l...l..
 80170a4:	6cbb 8ea1 6cbc 8fc0 6cbd 9f98 6cbe 9f9e     .l...l...l...l..
 80170b4:	6cbf 8988 6cc1 8bb5 6cc4 9f95 6cc5 9f9a     .l...l...l...l..
 80170c4:	6cc9 90f2 6cca 9491 6ccc 94e5 6cd3 9f97     .l...l...l...l..
 80170d4:	6cd5 9640 6cd7 9f99 6cd9 9fa2 6cda faf9     .l@..l...l...l..
 80170e4:	6cdb 9fa0 6cdd 9f9b 6ce1 9641 6ce2 9467     .l...l...lA..lg.
 80170f4:	6ce3 8b83 6ce5 9344 6ce8 928d 6cea 9fa3     .l...lD..l...l..
 8017104:	6cef 9fa1 6cf0 91d7 6cf1 9f96 6cf3 896a     .l...l...l...lj.
 8017114:	6d04 fafa 6d0b 976d 6d0c 9fae 6d12 9fad     .m...mm..m...m..
 8017124:	6d17 90f4 6d19 9faa 6d1b 978c 6d1e 93b4     .m...m...m...m..
 8017134:	6d1f 9fa4 6d25 92c3 6d29 896b 6d2a 8d5e     .m..%m..)mk.*m^.
 8017144:	6d2b 9fa7 6d32 8f46 6d33 9fac 6d35 9fab     +m..2mF.3m..5m..
 8017154:	6d36 9fa6 6d38 9fa9 6d3b 8a88 6d3d 9fa8     6m..8m..;m..=m..
 8017164:	6d3e 9468 6d41 97ac 6d44 8ff2 6d45 90f3     >mh.Am..Dm..Em..
 8017174:	6d59 9fb4 6d5a 9fb2 6d5c 956c 6d63 9faf     Ym..Zm..\ml.cm..
 8017184:	6d64 9fb1 6d66 8959 6d69 8d5f 6d6a 9851     dm..fmY.im_.jmQ.
 8017194:	6d6c 8a5c 6d6e 9582 6d6f fafc 6d74 9781     lm\.nm..om..tm..
 80171a4:	6d77 8a43 6d78 905a 6d79 9fb3 6d85 9fb8     wmC.xmZ.ym...m..
 80171b4:	6d87 fafb 6d88 8fc1 6d8c 974f 6d8e 9fb5     .m...m...mO..m..
 80171c4:	6d93 9fb0 6d95 9fb6 6d96 fb40 6d99 97dc     .m...m...m@..m..
 80171d4:	6d9b 9393 6d9c 93c0 6dac fb41 6daf 8a55     .m...m...mA..mU.
 80171e4:	6db2 8974 6db5 9fbc 6db8 9fbf 6dbc 97c1     .mt..m...m...m..
 80171f4:	6dc0 9784 6dc5 9fc6 6dc6 9fc0 6dc7 9fbd     .m...m...m...m..
 8017204:	6dcb 97d2 6dcc 9fc3 6dcf fb42 6dd1 8f69     .m...m...mB..mi.
 8017214:	6dd2 9fc5 6dd5 9fca 6dd8 9391 6dd9 9fc8     .m...m...m...m..
 8017224:	6dde 9fc2 6de1 9257 6de4 9fc9 6de6 9fbe     .m...mW..m...m..
 8017234:	6de8 9fc4 6dea 9fcb 6deb 88fa 6dec 9fc1     .m...m...m...m..
 8017244:	6dee 9fcc 6df1 905b 6df2 fb44 6df3 8f7e     .m...m[..mD..m~.
 8017254:	6df5 95a3 6df7 8dac 6df8 fb43 6df9 9fb9     .m...m...mC..m..
 8017264:	6dfa 9fc7 6dfb 9359 6dfc fb45 6e05 90b4     .m...mY..mE..n..
 8017274:	6e07 8a89 6e08 8dcf 6e09 8fc2 6e0a 9fbb     .n...n...n...n..
 8017284:	6e0b 8f61 6e13 8c6b 6e15 9fba 6e19 9fd0     .na..nk..n...n..
 8017294:	6e1a 8f8d 6e1b 8cb8 6e1d 9fdf 6e1f 9fd9     .n...n...n...n..
 80172a4:	6e20 8b94 6e21 936e 6e23 9fd4 6e24 9fdd      n..!nn.#n..$n..
 80172b4:	6e25 88ad 6e26 8951 6e27 fb48 6e29 89b7     %n..&nQ.'nH.)n..
 80172c4:	6e2b 9fd6 6e2c 91aa 6e2d 9fcd 6e2e 9fcf     +n..,n..-n...n..
 80172d4:	6e2f 8d60 6e38 9fe0 6e39 fb46 6e3a 9fdb     /n`.8n..9nF.:n..
 80172e4:	6e3c fb49 6e3e 9fd3 6e43 9fda 6e4a 96a9     <nI.>n..Cn..Jn..
 80172f4:	6e4d 9fd8 6e4e 9fdc 6e56 8cce 6e58 8fc3     Mn..Nn..Vn..Xn..
 8017304:	6e5b 9258 6e5c fb47 6e5f 9fd2 6e67 974e     [nX.\nG._n..gnN.
 8017314:	6e6b 9fd5 6e6e 9fce 6e6f 9392 6e72 9fd1     kn..nn..on..rn..
 8017324:	6e76 9fd7 6e7e 9870 6e7f 8ebc 6e80 969e     vn..~np..n...n..
 8017334:	6e82 9fe1 6e8c 94ac 6e8f 9fed 6e90 8cb9     .n...n...n...n..
 8017344:	6e96 8f80 6e98 9fe3 6e9c 97ad 6e9d 8d61     .n...n...n...na.
 8017354:	6e9f 9ff0 6ea2 88ec 6ea5 9fee 6eaa 9fe2     .n...n...n...n..
 8017364:	6eaf 9fe8 6eb2 9fea 6eb6 976e 6eb7 9fe5     .n...n...nn..n..
 8017374:	6eba 934d 6ebd 9fe7 6ebf fb4a 6ec2 9fef     .nM..n...nJ..n..
 8017384:	6ec4 9fe9 6ec5 96c5 6ec9 9fe4 6ecb 8ea0     .n...n...n...n..
 8017394:	6ecc 9ffc 6ed1 8a8a 6ed3 9fe6 6ed4 9feb     .n...n...n...n..
 80173a4:	6ed5 9fec 6edd 91ea 6ede 91d8 6eec 9ff4     .n...n...n...n..
 80173b4:	6eef 9ffa 6ef2 9ff8 6ef4 9348 6ef7 e042     .n...n...nH..nB.
 80173c4:	6ef8 9ff5 6efe 9ff6 6eff 9fde 6f01 8b99     .n...n...n...o..
 80173d4:	6f02 9559 6f06 8ebd 6f09 8d97 6f0f 9852     .oY..o...o...oR.
 80173e4:	6f11 9ff2 6f13 e041 6f14 8989 6f15 9186     .o...oA..o...o..
 80173f4:	6f20 9499 6f22 8abf 6f23 97f8 6f2b 969f      o.."o..#o..+o..
 8017404:	6f2c 92d0 6f31 9ff9 6f32 9ffb 6f38 9151     ,o..1o..2o..8oQ.
 8017414:	6f3e e040 6f3f 9ff7 6f41 9ff1 6f45 8ac1     >o@.?o..Ao..Eo..
 8017424:	6f54 8c89 6f58 e04e 6f5b e049 6f5c 90f6     To..XoN.[oI.\o..
 8017434:	6f5f 8a83 6f64 8f81 6f66 e052 6f6d e04b     _o..do..foR.moK.
 8017444:	6f6e 92aa 6f6f e048 6f70 92d7 6f74 e06b     no..ooH.po..tok.
 8017454:	6f78 e045 6f7a e044 6f7c e04d 6f80 e047     xoE.zoD.|oM..oG.
 8017464:	6f81 e046 6f82 e04c 6f84 909f 6f86 e043     .oF..oL..o...oC.
 8017474:	6f88 fb4b 6f8e e04f 6f91 e050 6f97 8ac0     .oK..oO..oP..o..
 8017484:	6fa1 e055 6fa3 e054 6fa4 e056 6faa e059     .oU..oT..oV..oY.
 8017494:	6fb1 9362 6fb3 e053 6fb5 fb4c 6fb9 e057     .ob..oS..oL..oW.
 80174a4:	6fc0 8c83 6fc1 91f7 6fc2 e051 6fc3 945a     .o...o...oQ..oZ.
 80174b4:	6fc6 e058 6fd4 e05d 6fd5 e05b 6fd8 e05e     .oX..o]..o[..o^.
 80174c4:	6fdb e061 6fdf e05a 6fe0 8d8a 6fe1 9447     .oa..oZ..o...oG.
 80174d4:	6fe4 9fb7 6feb 9794 6fec e05c 6fee e060     .o...o...o\..o`.
 80174e4:	6fef 91f3 6ff1 e05f 6ff3 e04a 6ff5 fb4d     .o...o_..oJ..oM.
 80174f4:	6ff6 e889 6ffa e064 6ffe e068 7001 e066     .o...od..oh..pf.
 8017504:	7005 fb4e 7007 fb4f 7009 e062 700b e063     .pN..pO..pb..pc.
 8017514:	700f e067 7011 e065 7015 956d 7018 e06d     .pg..pe..pm..pm.
 8017524:	701a e06a 701b e069 701d e06c 701e 93d2     .pj..pi..pl..p..
 8017534:	701f e06e 7026 9295 7027 91eb 7028 fb50     .pn.&p..'p..(pP.
 8017544:	702c 90a3 7030 e06f 7032 e071 703e e070     ,p..0po.2pq.>pp.
 8017554:	704c 9ff3 7051 e072 7058 93e5 7063 e073     Lp..Qpr.Xp..cps.
 8017564:	706b 89ce 706f 9394 7070 8a44 7078 8b84     kp..op..ppD.xp..
 8017574:	707c 8edc 707d 8dd0 7085 fb51 7089 9846     |p..}p...pQ..pF.
 8017584:	708a 9086 708e 898a 7092 e075 7099 e074     .p...p...pu..pt.
 8017594:	70ab fb52 70ac e078 70ad 9259 70ae e07b     .pR..px..pY..p{.
 80175a4:	70af e076 70b3 e07a 70b8 e079 70b9 935f     .pv..pz..py..p_.
 80175b4:	70ba 88d7 70bb fa62 70c8 97f3 70cb e07d     .p...pb..p...p}.
 80175c4:	70cf 8947 70d9 e080 70dd e07e 70df e07c     .pG..p...p~..p|.
 80175d4:	70f1 e077 70f9 9642 70fd e082 7104 fb54     .pw..pB..p...qT.
 80175e4:	7109 e081 710f fb53 7114 898b 7119 e084     .q...qS..q...q..
 80175f4:	711a 95b0 711c e083 7121 96b3 7126 8fc5     .q...q..!q..&q..
 8017604:	7136 9152 713c 8fc4 7146 fb56 7147 fb57     6qR.<q..FqV.GqW.
 8017614:	7149 97f9 714c e08a 714e 90f7 7155 e086     Iq..Lq..Nq..Uq..
 8017624:	7156 e08b 7159 898c 715c fb55 7162 e089     Vq..Yq..\qU.bq..
 8017634:	7164 9481 7165 e085 7166 e088 7167 8fc6     dq..eq..fq..gq..
 8017644:	7169 94cf 716c e08c 716e 8ecf 717d 90f8     iq..lq..nq..}q..
 8017654:	7184 e08f 7188 e087 718a 8c46 718f e08d     .q...q...qF..q..
 8017664:	7194 976f 7195 e090 7199 eaa4 719f 8f6e     .qo..q...q...qn.
 8017674:	71a8 e091 71ac e092 71b1 944d 71b9 e094     .q...q...qM..q..
 8017684:	71be e095 71c1 fb59 71c3 9452 71c8 9395     .q...qY..qR..q..
 8017694:	71c9 e097 71ce e099 71d0 97d3 71d2 e096     .q...q...q...q..
 80176a4:	71d4 e098 71d5 898d 71d7 e093 71df 9a7a     .q...q...q...qz.
 80176b4:	71e0 e09a 71e5 9187 71e6 8e57 71e7 e09c     .q...q...qW..q..
 80176c4:	71ec e09b 71ed 9043 71ee 99d7 71f5 e09d     .q...qC..q...q..
 80176d4:	71f9 e09f 71fb e08e 71fc e09e 71fe fb5a     .q...q...q...qZ.
 80176e4:	71ff e0a0 7206 949a 720d e0a1 7210 e0a2     .q...r...r...r..
 80176f4:	721b e0a3 7228 e0a4 722a 92dc 722c e0a6     .r..(r..*r..,r..
 8017704:	722d e0a5 7230 e0a7 7232 e0a8 7235 8edd     -r..0r..2r..5r..
 8017714:	7236 9583 723a 96ea 723b e0a9 723c e0aa     6r..:r..;r..<r..
 8017724:	723d 9175 723e 8ea2 723f e0ab 7240 e0ac     =ru.>r..?r..@r..
 8017734:	7246 e0ad 7247 95d0 7248 94c5 724b e0ae     Fr..Gr..Hr..Kr..
 8017744:	724c 9476 7252 92ab 7258 e0af 7259 89e5     Lrv.Rr..Xr..Yr..
 8017754:	725b 8b8d 725d 96c4 725f 96b4 7261 89b2     [r..]r.._r..ar..
 8017764:	7262 9853 7267 9671 7269 95a8 7272 90b5     brS.grq.ir..rr..
 8017774:	7274 e0b0 7279 93c1 727d 8ca1 727e e0b1     tr..yr..}r..~r..
 8017784:	7280 8dd2 7281 e0b3 7282 e0b2 7287 e0b4     .r...r...r...r..
 8017794:	7292 e0b5 7296 e0b6 72a0 8b5d 72a2 e0b7     .r...r...r]..r..
 80177a4:	72a7 e0b8 72ac 8ca2 72af 94c6 72b1 fb5b     .r...r...r...r[.
 80177b4:	72b2 e0ba 72b6 8ff3 72b9 e0b9 72be fb5c     .r...r...r...r\.
 80177c4:	72c2 8bb6 72c3 e0bb 72c4 e0bd 72c6 e0bc     .r...r...r...r..
 80177d4:	72ce e0be 72d0 8ccf 72d2 e0bf 72d7 8be7     .r...r...r...r..
 80177e4:	72d9 915f 72db 8d9d 72e0 e0c1 72e1 e0c2     .r_..r...r...r..
 80177f4:	72e2 e0c0 72e9 8eeb 72ec 93c6 72ed 8bb7     .r...r...r...r..
 8017804:	72f7 e0c4 72f8 924b 72f9 e0c3 72fc 9854     .r...rK..r...rT.
 8017814:	72fd 9482 730a e0c7 7316 e0c9 7317 e0c6     .r...s...s...s..
 8017824:	731b 96d2 731c e0c8 731d e0ca 731f 97c2     .s...s...s...s..
 8017834:	7324 fb5d 7325 e0ce 7329 e0cd 732a 9296     $s].%s..)s..*s..
 8017844:	732b 944c 732e 8ca3 732f e0cc 7334 e0cb     +sL..s../s..4s..
 8017854:	7336 9750 7337 9751 733e e0cf 733f 898e     6sP.7sQ.>s..?s..
 8017864:	7344 8d96 7345 8e82 734e e0d0 734f e0d1     Ds..Es..Ns..Os..
 8017874:	7357 e0d3 7363 8f62 7368 e0d5 736a e0d4     Ws..csb.hs..js..
 8017884:	7370 e0d6 7372 8a6c 7375 e0d8 7377 fb5f     ps..rsl.us..ws_.
 8017894:	7378 e0d7 737a e0da 737b e0d9 7384 8cba     xs..zs..{s...s..
 80178a4:	7387 97a6 7389 8bca 738b 89a4 7396 8be8     .s...s...s...s..
 80178b4:	73a9 8adf 73b2 97e6 73b3 e0dc 73bb e0de     .s...s...s...s..
 80178c4:	73bd fb60 73c0 e0df 73c2 89cf 73c8 e0db     .s`..s...s...s..
 80178d4:	73c9 fb61 73ca 8e58 73cd 92bf 73ce e0dd     .sa..sX..s...s..
 80178e4:	73d2 fb64 73d6 fb62 73de e0e2 73e0 8eec     .sd..sb..s...s..
 80178f4:	73e3 fb63 73e5 e0e0 73ea 8c5d 73ed 94c7     .sc..s...s]..s..
 8017904:	73ee e0e1 73f1 e0fc 73f5 fb66 73f8 e0e7     .s...s...sf..s..
 8017914:	73fe 8cbb 7403 8b85 7405 e0e4 7406 979d     .s...t...t...t..
 8017924:	7407 fb65 7409 97ae 7422 91f4 7425 e0e6     .te..t.."t..%t..
 8017934:	7426 fb67 7429 fb69 742a fb68 742e fb6a     &tg.)ti.*th..tj.
 8017944:	7432 e0e8 7433 97d4 7434 8bd5 7435 94fa     2t..3t..4t..5t..
 8017954:	7436 9469 743a e0e9 743f e0eb 7441 e0ee     6ti.:t..?t..At..
 8017964:	7455 e0ea 7459 e0ed 745a 8ce8 745b 896c     Ut..Yt..Zt..[tl.
 8017974:	745c e0ef 745e 9090 745f e0ec 7460 97da     \t..^t.._t..`t..
 8017984:	7462 fb6b 7463 e0f2 7464 eaa2 7469 e0f0     btk.ct..dt..it..
 8017994:	746a e0f3 746f e0e5 7470 e0f1 7473 8dba     jt..ot..pt..st..
 80179a4:	7476 e0f4 747e e0f5 7483 979e 7489 fb6c     vt..~t...t...tl.
 80179b4:	748b e0f6 749e e0f7 749f fb6d 74a2 e0e3     .t...t...tm..t..
 80179c4:	74a7 e0f8 74b0 8ac2 74bd 8ea3 74ca e0f9     .t...t...t...t..
 80179d4:	74cf e0fa 74d4 e0fb 74dc 895a 74e0 e140     .t...t...tZ..t@.
 80179e4:	74e2 955a 74e3 e141 74e6 8aa2 74e7 e142     .tZ..tA..t...tB.
 80179f4:	74e9 e143 74ee e144 74f0 e146 74f1 e147     .tC..tD..tF..tG.
 8017a04:	74f2 e145 74f6 9572 74f7 e149 74f8 e148     .tE..tr..tI..tH.
 8017a14:	7501 fb6e 7503 e14b 7504 e14a 7505 e14c     .un..uK..uJ..uL.
 8017a24:	750c e14d 750d e14f 750e e14e 7511 8d99     .uM..uO..uN..u..
 8017a34:	7513 e151 7515 e150 7518 8ac3 751a 9072     .uQ..uP..u...ur.
 8017a44:	751c 935b 751e e152 751f 90b6 7523 8e59     .u[..uR..u..#uY.
 8017a54:	7525 8999 7526 e153 7528 9770 752b 95e1     %u..&uS.(up.+u..
 8017a64:	752c e154 752f faa8 7530 9363 7531 9752     ,uT./u..0uc.1uR.
 8017a74:	7532 8d62 7533 905c 7537 926a 7538 99b2     2ub.3u\.7uj.8u..
 8017a84:	753a 92ac 753b 89e6 753c e155 7544 e156     :u..;u..<uU.DuV.
 8017a94:	7546 e15b 7549 e159 754a e158 754b 9dc0     Fu[.IuY.JuX.Ku..
 8017aa4:	754c 8a45 754d e157 754f 88d8 7551 94a8     LuE.MuW.Ou..Qu..
 8017ab4:	7554 94c8 7559 97af 755a e15c 755b e15a     Tu..Yu..Zu\.[uZ.
 8017ac4:	755c 927b 755d 90a4 7560 94a9 7562 954c     \u{.]u..`u..buL.
 8017ad4:	7564 e15e 7565 97aa 7566 8c6c 7567 e15f     du^.eu..ful.gu_.
 8017ae4:	7569 e15d 756a 94d4 756b e160 756d e161     iu].ju..ku`.mua.
 8017af4:	756f fb6f 7570 88d9 7573 8ff4 7574 e166     ouo.pu..su..tuf.
 8017b04:	7576 e163 7577 93eb 7578 e162 757f 8b45     vuc.wu..xub..uE.
 8017b14:	7582 e169 7586 e164 7587 e165 7589 e168     .ui..ud..ue..uh.
 8017b24:	758a e167 758b 9544 758e 9161 758f 9160     .ug..uD..ua..u`.
 8017b34:	7591 8b5e 7594 e16a 759a e16b 759d e16c     .u^..uj..uk..ul.
 8017b44:	75a3 e16e 75a5 e16d 75ab 8975 75b1 e176     .un..um..uu..uv.
 8017b54:	75b2 94e6 75b3 e170 75b5 e172 75b8 e174     .u...up..ur..ut.
 8017b64:	75b9 905d 75bc e175 75bd e173 75be 8ebe     .u]..uu..us..u..
 8017b74:	75c2 e16f 75c3 e171 75c5 9561 75c7 8fc7     .uo..uq..ua..u..
 8017b84:	75ca e178 75cd e177 75d2 e179 75d4 8ea4     .ux..uw..uy..u..
 8017b94:	75d5 8dad 75d8 9397 75d9 e17a 75db 92c9     .u...u...uz..u..
 8017ba4:	75de e17c 75e2 979f 75e3 e17b 75e9 9189     .u|..u...u{..u..
 8017bb4:	75f0 e182 75f2 e184 75f3 e185 75f4 9273     .u...u...u...us.
 8017bc4:	75fa e183 75fc e180 75fe e17d 75ff e17e     .u...u...u}..u~.
 8017bd4:	7601 e181 7609 e188 760b e186 760d e187     .v...v...v...v..
 8017be4:	761f e189 7620 e18b 7621 e18c 7622 e18d     .v.. v..!v.."v..
 8017bf4:	7624 e18e 7627 e18a 7630 e190 7634 e18f     $v..'v..0v..4v..
 8017c04:	763b e191 7642 97c3 7646 e194 7647 e192     ;v..Bv..Fv..Gv..
 8017c14:	7648 e193 764c 8ae0 7652 96fc 7656 95c8     Hv..Lv..Rv..Vv..
 8017c24:	7658 e196 765c e195 7661 e197 7662 e198     Xv..\v..av..bv..
 8017c34:	7667 e19c 7668 e199 7669 e19a 766a e19b     gv..hv..iv..jv..
 8017c44:	766c e19d 7670 e19e 7672 e19f 7676 e1a0     lv..pv..rv..vv..
 8017c54:	7678 e1a1 767a 94ad 767b 936f 767c e1a2     xv..zv..{vo.|v..
 8017c64:	767d 9492 767e 9553 7680 e1a3 7682 fb70     }v..~vS..v...vp.
 8017c74:	7683 e1a4 7684 9349 7686 8a46 7687 8d63     .v...vI..vF..vc.
 8017c84:	7688 e1a5 768b e1a6 768e e1a7 7690 8e48     .v...v...v...vH.
 8017c94:	7693 e1a9 7696 e1a8 7699 e1aa 769a e1ab     .v...v...v...v..
 8017ca4:	769b fb73 769c fb71 769e fb72 76a6 fb74     .vs..vq..vr..vt.
 8017cb4:	76ae 94e7 76b0 e1ac 76b4 e1ad 76b7 ea89     .v...v...v...v..
 8017cc4:	76b8 e1ae 76b9 e1af 76ba e1b0 76bf 8e4d     .v...v...v...vM.
 8017cd4:	76c2 e1b1 76c3 9475 76c6 967e 76c8 896d     .v...vu..v~..vm.
 8017ce4:	76ca 8976 76cd e1b2 76d2 e1b4 76d6 e1b3     .vv..v...v...v..
 8017cf4:	76d7 9390 76db 90b7 76dc 9f58 76de e1b5     .v...v...vX..v..
 8017d04:	76df 96bf 76e1 e1b6 76e3 8ac4 76e4 94d5     .v...v...v...v..
 8017d14:	76e5 e1b7 76e7 e1b8 76ea e1b9 76ee 96da     .v...v...v...v..
 8017d24:	76f2 96d3 76f4 92bc 76f8 918a 76fb e1bb     .v...v...v...v..
 8017d34:	76fe 8f82 7701 8fc8 7704 e1be 7707 e1bd     .v...w...w...w..
 8017d44:	7708 e1bc 7709 94fb 770b 8ac5 770c 8ca7     .w...w...w...w..
 8017d54:	771b e1c4 771e e1c1 771f 905e 7720 96b0     .w...w...w^. w..
 8017d64:	7724 e1c0 7725 e1c2 7726 e1c3 7729 e1bf     $w..%w..&w..)w..
 8017d74:	7737 e1c5 7738 e1c6 773a 92ad 773c 8ae1     7w..8w..:w..<w..
 8017d84:	7740 9285 7746 fb76 7747 e1c7 775a e1c8     @w..Fwv.Gw..Zw..
 8017d94:	775b e1cb 7761 9087 7763 93c2 7765 e1cc     [w..aw..cw..ew..
 8017da4:	7766 9672 7768 e1c9 776b e1ca 7779 e1cf     fwr.hw..kw..yw..
 8017db4:	777e e1ce 777f e1cd 778b e1d1 778e e1d0     ~w...w...w...w..
 8017dc4:	7791 e1d2 779e e1d4 77a0 e1d3 77a5 95cb     .w...w...w...w..
 8017dd4:	77ac 8f75 77ad 97c4 77b0 e1d5 77b3 93b5     .wu..w...w...w..
 8017de4:	77b6 e1d6 77b9 e1d7 77bb e1db 77bc e1d9     .w...w...w...w..
 8017df4:	77bd e1da 77bf e1d8 77c7 e1dc 77cd e1dd     .w...w...w...w..
 8017e04:	77d7 e1de 77da e1df 77db 96b5 77dc e1e0     .w...w...w...w..
 8017e14:	77e2 96ee 77e3 e1e1 77e5 926d 77e7 948a     .w...w...wm..w..
 8017e24:	77e9 8be9 77ed 925a 77ee e1e2 77ef 8bb8     .w...wZ..w...w..
 8017e34:	77f3 90ce 77fc e1e3 7802 8dbb 780c e1e4     .w...w...x...x..
 8017e44:	7812 e1e5 7814 8ca4 7815 8dd3 7820 e1e7     .x...x...x.. x..
 8017e54:	7821 fb78 7825 9375 7826 8dd4 7827 8b6d     !xx.%xu.&x..'xm.
 8017e64:	7832 9643 7834 946a 783a 9376 783f 8d7b     2xC.4xj.:xv.?x{.
 8017e74:	7845 e1e9 784e fb79 785d 8fc9 7864 fb7a     Ex..Nxy.]x..dxz.
 8017e84:	786b 97b0 786c 8d64 786f 8ca5 7872 94a1     kx..lxd.ox..rx..
 8017e94:	7874 e1eb 787a fb7b 787c e1ed 7881 8ce9     tx..zx{.|x...x..
 8017ea4:	7886 e1ec 7887 92f4 788c e1ef 788d 8a56     .x...x...x...xV.
 8017eb4:	788e e1ea 7891 94e8 7893 894f 7895 8dea     .x...x...xO..x..
 8017ec4:	7897 9871 789a e1ee 78a3 e1f0 78a7 95c9     .xq..x...x...x..
 8017ed4:	78a9 90d7 78aa e1f2 78af e1f3 78b5 e1f1     .x...x...x...x..
 8017ee4:	78ba 8a6d 78bc e1f9 78be e1f8 78c1 8ea5     .xm..x...x...x..
 8017ef4:	78c5 e1fa 78c6 e1f5 78ca e1fb 78cb e1f6     .x...x...x...x..
 8017f04:	78d0 94d6 78d1 e1f4 78d4 e1f7 78da e241     .x...x...x...xA.
 8017f14:	78e7 e240 78e8 9681 78ec e1fc 78ef 88e9     .x@..x...x...x..
 8017f24:	78f4 e243 78fd e242 7901 8fca 7907 e244     .xC..xB..y...yD.
 8017f34:	790e 9162 7911 e246 7912 e245 7919 e247     .yb..yF..yE..yG.
 8017f44:	7926 e1e6 792a e1e8 792b e249 792c e248     &y..*y..+yI.,yH.
 8017f54:	7930 fb7c 793a 8ea6 793c 97e7 793e 8ed0     0y|.:y..<y..>y..
 8017f64:	7940 e24a 7941 8c56 7947 8b5f 7948 8b46     @yJ.AyV.Gy_.HyF.
 8017f74:	7949 8e83 7950 9753 7953 e250 7955 e24f     Iy..PyS.SyP.UyO.
 8017f84:	7956 9163 7957 e24c 795a e24e 795d 8f6a     Vyc.WyL.ZyN.]yj.
 8017f94:	795e 905f 795f e24d 7960 e24b 7962 9449     ^y_._yM.`yK.byI.
 8017fa4:	7965 8fcb 7968 955b 796d 8dd5 7977 9398     ey..hy[.my..wy..
 8017fb4:	797a e251 797f e252 7980 e268 7981 8bd6     zyQ..yR..yh..y..
 8017fc4:	7984 985c 7985 9154 798a e253 798d 89d0     .y\..yT..yS..y..
 8017fd4:	798e 92f5 798f 959f 7994 fb81 799b fb83     .y...y...y...y..
 8017fe4:	799d e254 79a6 8b9a 79a7 e255 79aa e257     .yT..y...yU..yW.
 8017ff4:	79ae e258 79b0 9448 79b3 e259 79b9 e25a     .yX..yH..yY..yZ.
 8018004:	79ba e25b 79bd 8bd7 79be 89d1 79bf 93c3     .y[..y...y...y..
 8018014:	79c0 8f47 79c1 8e84 79c9 e25c 79cb 8f48     .yG..y...y\..yH.
 8018024:	79d1 89c8 79d2 9562 79d5 e25d 79d8 94e9     .y...yb..y]..y..
 8018034:	79df 9164 79e1 e260 79e3 e261 79e4 9489     .yd..y`..ya..y..
 8018044:	79e6 9060 79e7 e25e 79e9 9281 79ec e25f     .y`..y^..y...y_.
 8018054:	79f0 8fcc 79fb 88da 7a00 8b48 7a08 e262     .y...y...zH..zb.
 8018064:	7a0b 92f6 7a0d e263 7a0e 90c5 7a14 96ab     .z...zc..z...z..
 8018074:	7a17 9542 7a18 e264 7a19 e265 7a1a 9274     .zB..zd..ze..zt.
 8018084:	7a1c 97c5 7a1f e267 7a20 e266 7a2e 8eed     .z...zg. zf..z..
 8018094:	7a31 e269 7a32 88ee 7a37 e26c 7a3b e26a     1zi.2z..7zl.;zj.
 80180a4:	7a3c 89d2 7a3d 8c6d 7a3e e26b 7a3f 8d65     <z..=zm.>zk.?ze.
 80180b4:	7a40 8d92 7a42 95e4 7a43 e26d 7a46 9673     @z..Bz..Czm.Fzs.
 80180c4:	7a49 e26f 7a4d 90cf 7a4e 896e 7a4f 89b8     Izo.Mz..Nzn.Oz..
 80180d4:	7a50 88aa 7a57 e26e 7a61 e270 7a62 e271     Pz..Wzn.azp.bzq.
 80180e4:	7a63 8ff5 7a69 e272 7a6b 8a6e 7a70 e274     cz..izr.kzn.pzt.
 80180f4:	7a74 8c8a 7a76 8b86 7a79 e275 7a7a 8bf3     tz..vz..yzu.zz..
 8018104:	7a7d e276 7a7f 90fa 7a81 93cb 7a83 90de     }zv..z...z...z..
 8018114:	7a84 8df3 7a88 e277 7a92 9282 7a93 918b     .z...zw..z...z..
 8018124:	7a95 e279 7a96 e27b 7a97 e278 7a98 e27a     .zy..z{..zx..zz.
 8018134:	7a9f 8c41 7aa9 e27c 7aaa 8c45 7aae 8b87     .zA..z|..zE..z..
 8018144:	7aaf 9771 7ab0 e27e 7ab6 e280 7aba 894d     .zq..z~..z...zM.
 8018154:	7abf e283 7ac3 8a96 7ac4 e282 7ac5 e281     .z...z...z...z..
 8018164:	7ac7 e285 7ac8 e27d 7aca e286 7acb 97a7     .z...z}..z...z..
 8018174:	7acd e287 7acf e288 7ad1 fb84 7ad2 9af2     .z...z...z...z..
 8018184:	7ad3 e28a 7ad5 e289 7ad9 e28b 7ada e28c     .z...z...z...z..
 8018194:	7adc 97b3 7add e28d 7adf e8ed 7ae0 8fcd     .z...z...z...z..
 80181a4:	7ae1 e28e 7ae2 e28f 7ae3 8f76 7ae5 93b6     .z...z...zv..z..
 80181b4:	7ae6 e290 7ae7 fb85 7aea 9247 7aeb fb87     .z...z...zG..z..
 80181c4:	7aed e291 7aef 925b 7af0 e292 7af6 8ba3     .z...z[..z...z..
 80181d4:	7af8 995e 7af9 927c 7afa 8eb1 7aff 8ac6     .z^..z|..z...z..
 80181e4:	7b02 e293 7b04 e2a0 7b06 e296 7b08 8b88     .{...{...{...{..
 80181f4:	7b0a e295 7b0b e2a2 7b0f e294 7b11 8fce     .{...{...{...{..
 8018204:	7b18 e298 7b19 e299 7b1b 934a 7b1e e29a     .{...{...{J..{..
 8018214:	7b20 8a7d 7b25 9079 7b26 9584 7b28 e29c      {}.%{y.&{..({..
 8018224:	7b2c 91e6 7b33 e297 7b35 e29b 7b36 e29d     ,{..3{..5{..6{..
 8018234:	7b39 8df9 7b45 e2a4 7b46 954d 7b48 94a4     9{..E{..F{M.H{..
 8018244:	7b49 9399 7b4b 8bd8 7b4c e2a3 7b4d e2a1     I{..K{..L{..M{..
 8018254:	7b4f 94b3 7b50 e29e 7b51 927d 7b52 939b     O{..P{..Q{}.R{..
 8018264:	7b54 939a 7b56 8df4 7b5d e2b6 7b65 e2a6     T{..V{..]{..e{..
 8018274:	7b67 e2a8 7b6c e2ab 7b6e e2ac 7b70 e2a9     g{..l{..n{..p{..
 8018284:	7b71 e2aa 7b74 e2a7 7b75 e2a5 7b7a e29f     q{..t{..u{..z{..
 8018294:	7b86 95cd 7b87 89d3 7b8b e2b3 7b8d e2b0     .{...{...{...{..
 80182a4:	7b8f e2b5 7b92 e2b4 7b94 9493 7b95 96a5     .{...{...{...{..
 80182b4:	7b97 8e5a 7b98 e2ae 7b99 e2b7 7b9a e2b2     .{Z..{...{...{..
 80182c4:	7b9c e2b1 7b9d e2ad 7b9e fb88 7b9f e2af     .{...{...{...{..
 80182d4:	7ba1 8ac7 7baa 925c 7bad 90fb 7bb1 94a0     .{...{\..{...{..
 80182e4:	7bb4 e2bc 7bb8 94a2 7bc0 90df 7bc1 e2b9     .{...{...{...{..
 80182f4:	7bc4 94cd 7bc6 e2bd 7bc7 95d1 7bc9 927a     .{...{...{...{z.
 8018304:	7bcb e2b8 7bcc e2ba 7bcf e2bb 7bdd e2be     .{...{...{...{..
 8018314:	7be0 8ec2 7be4 93c4 7be5 e2c3 7be6 e2c2     .{...{...{...{..
 8018324:	7be9 e2bf 7bed 9855 7bf3 e2c8 7bf6 e2cc     .{...{U..{...{..
 8018334:	7bf7 e2c9 7c00 e2c5 7c07 e2c6 7c0d e2cb     .{...|...|...|..
 8018344:	7c11 e2c0 7c12 99d3 7c13 e2c7 7c14 e2c1     .|...|...|...|..
 8018354:	7c17 e2ca 7c1f e2d0 7c21 8ac8 7c23 e2cd     .|...|..!|..#|..
 8018364:	7c27 e2ce 7c2a e2cf 7c2b e2d2 7c37 e2d1     '|..*|..+|..7|..
 8018374:	7c38 94f4 7c3d e2d3 7c3e 97fa 7c3f 95eb     8|..=|..>|..?|..
 8018384:	7c40 e2d8 7c43 e2d5 7c4c e2d4 7c4d 90d0     @|..C|..L|..M|..
 8018394:	7c4f e2d7 7c50 e2d9 7c54 e2d6 7c56 e2dd     O|..P|..T|..V|..
 80183a4:	7c58 e2da 7c5f e2db 7c60 e2c4 7c64 e2dc     X|.._|..`|..d|..
 80183b4:	7c65 e2de 7c6c e2df 7c73 95c4 7c75 e2e0     e|..l|..s|..u|..
 80183c4:	7c7e 96e0 7c81 8bcc 7c82 8c48 7c83 e2e1     ~|...|...|H..|..
 80183d4:	7c89 95b2 7c8b 9088 7c8d 96ae 7c90 e2e2     .|...|...|...|..
 80183e4:	7c92 97b1 7c95 9494 7c97 9165 7c98 9453     .|...|...|e..|S.
 80183f4:	7c9b 8f6c 7c9f 88be 7ca1 e2e7 7ca2 e2e5     .|l..|...|...|..
 8018404:	7ca4 e2e3 7ca5 8a9f 7ca7 8fcf 7ca8 e2e8     .|...|...|...|..
 8018414:	7cab e2e6 7cad e2e4 7cae e2ec 7cb1 e2eb     .|...|...|...|..
 8018424:	7cb2 e2ea 7cb3 e2e9 7cb9 e2ed 7cbd e2ee     .|...|...|...|..
 8018434:	7cbe 90b8 7cc0 e2ef 7cc2 e2f1 7cc5 e2f0     .|...|...|...|..
 8018444:	7cca 8cd0 7cce 9157 7cd2 e2f3 7cd6 939c     .|...|W..|...|..
 8018454:	7cd8 e2f2 7cdc e2f4 7cde 95b3 7cdf 918c     .|...|...|...|..
 8018464:	7ce0 8d66 7ce2 e2f5 7ce7 97c6 7cef e2f7     .|f..|...|...|..
 8018474:	7cf2 e2f8 7cf4 e2f9 7cf6 e2fa 7cf8 8e85     .|...|...|...|..
 8018484:	7cfa e2fb 7cfb 8c6e 7cfe 8b8a 7d00 8b49     .|...|n..|...}I.
 8018494:	7d02 e340 7d04 96f1 7d05 8d67 7d06 e2fc     .}@..}...}g..}..
 80184a4:	7d0a e343 7d0b 96e4 7d0d 945b 7d10 9552     .}C..}...}[..}R.
 80184b4:	7d14 8f83 7d15 e342 7d17 8ed1 7d18 8d68     .}...}B..}...}h.
 80184c4:	7d19 8e86 7d1a 8b89 7d1b 95b4 7d1c e341     .}...}...}...}A.
 80184d4:	7d20 9166 7d21 9661 7d22 8df5 7d2b 8e87      }f.!}a."}..+}..
 80184e4:	7d2c 92db 7d2e e346 7d2f 97dd 7d30 8dd7     ,}...}F./}..0}..
 80184f4:	7d32 e347 7d33 9061 7d35 e349 7d39 8fd0     2}G.3}a.5}I.9}..
 8018504:	7d3a 8dae 7d3f e348 7d42 8f49 7d43 8cbc     :}..?}H.B}I.C}..
 8018514:	7d44 9167 7d45 e344 7d46 e34a 7d48 fb8a     D}g.E}D.F}J.H}..
 8018524:	7d4b e345 7d4c 8c6f 7d4e e34d 7d4f e351     K}E.L}o.N}M.O}Q.
 8018534:	7d50 8c8b 7d56 e34c 7d5b e355 7d5c fb8b     P}..V}L.[}U.\}..
 8018544:	7d5e 8d69 7d61 978d 7d62 88ba 7d63 e352     ^}i.a}..b}..c}R.
 8018554:	7d66 8b8b 7d68 e34f 7d6e e350 7d71 939d     f}..h}O.n}P.q}..
 8018564:	7d72 e34e 7d73 e34b 7d75 8a47 7d76 90e2     r}N.s}K.u}G.v}..
 8018574:	7d79 8ca6 7d7d e357 7d89 e354 7d8f e356     y}..}}W..}T..}V.
 8018584:	7d93 e353 7d99 8c70 7d9a 91b1 7d9b e358     .}S..}p..}...}X.
 8018594:	7d9c 918e 7d9f e365 7da0 fb8d 7da2 e361     .}...}e..}...}a.
 80185a4:	7da3 e35b 7dab e35f 7dac 8ef8 7dad 88db     .}[..}_..}...}..
 80185b4:	7dae e35a 7daf e362 7db0 e366 7db1 8d6a     .}Z..}b..}f..}j.
 80185c4:	7db2 96d4 7db4 92d4 7db5 e35c 7db7 fb8c     .}...}...}\..}..
 80185d4:	7db8 e364 7dba e359 7dbb 925d 7dbd e35e     .}d..}Y..}]..}^.
 80185e4:	7dbe 88bb 7dbf 96c8 7dc7 e35d 7dca 8bd9     .}...}...}]..}..
 80185f4:	7dcb 94ea 7dcf 918d 7dd1 97ce 7dd2 8f8f     .}...}...}...}..
 8018604:	7dd5 e38e 7dd6 fb8e 7dd8 e367 7dda 90fc     .}...}...}g..}..
 8018614:	7ddc e363 7ddd e368 7dde e36a 7de0 92f7     .}c..}h..}j..}..
 8018624:	7de1 e36d 7de4 e369 7de8 95d2 7de9 8ac9     .}m..}i..}...}..
 8018634:	7dec 96c9 7def 88dc 7df2 e36c 7df4 97fb     .}...}...}l..}..
 8018644:	7dfb e36b 7e01 898f 7e04 93ea 7e05 e36e     .}k..~...~...~n.
 8018654:	7e09 e375 7e0a e36f 7e0b e376 7e12 e372     .~u..~o..~v..~r.
 8018664:	7e1b 949b 7e1e 8ec8 7e1f e374 7e21 e371     .~...~...~t.!~q.
 8018674:	7e22 e377 7e23 e370 7e26 8f63 7e2b 9644     "~w.#~p.&~c.+~D.
 8018684:	7e2e 8f6b 7e31 e373 7e32 e380 7e35 e37b     .~k.1~s.2~..5~{.
 8018694:	7e37 e37e 7e39 e37c 7e3a e381 7e3b e37a     7~~.9~|.:~..;~z.
 80186a4:	7e3d e360 7e3e 90d1 7e41 94c9 7e43 e37d     =~`.>~..A~..C~}.
 80186b4:	7e46 e378 7e4a 9140 7e4b 8c71 7e4d 8f4a     F~x.J~@.K~q.M~J.
 80186c4:	7e52 fb8f 7e54 9044 7e55 9155 7e56 e384     R~..T~D.U~U.V~..
 80186d4:	7e59 e386 7e5a e387 7e5d e383 7e5e e385     Y~..Z~..]~..^~..
 80186e4:	7e66 e379 7e67 e382 7e69 e38a 7e6a e389     f~y.g~..i~..j~..
 80186f4:	7e6d 969a 7e70 8c4a 7e79 e388 7e7b e38c     m~..p~J.y~..{~..
 8018704:	7e7c e38b 7e7d e38f 7e7f e391 7e82 8e5b     |~..}~...~...~[.
 8018714:	7e83 e38d 7e88 e392 7e89 e393 7e8a fa5c     .~...~...~...~\.
 8018724:	7e8c e394 7e8e e39a 7e8f 935a 7e90 e396     .~...~...~Z..~..
 8018734:	7e92 e395 7e93 e397 7e94 e398 7e96 e399     .~...~...~...~..
 8018744:	7e9b e39b 7e9c e39c 7f36 8aca 7f38 e39d     .~...~..6...8...
 8018754:	7f3a e39e 7f45 e39f 7f47 fb90 7f4c e3a0     :...E...G...L...
 8018764:	7f4d e3a1 7f4e e3a2 7f50 e3a3 7f51 e3a4     M...N...P...Q...
 8018774:	7f54 e3a6 7f55 e3a5 7f58 e3a7 7f5f e3a8     T...U...X..._...
 8018784:	7f60 e3a9 7f67 e3ac 7f68 e3aa 7f69 e3ab     `...g...h...i...
 8018794:	7f6a 8ddf 7f6b 8c72 7f6e 9275 7f70 94b1     j...k.r.n.u.p...
 80187a4:	7f72 8f90 7f75 946c 7f77 94eb 7f78 e3ad     r...u.l.w...x...
 80187b4:	7f79 9ceb 7f82 e3ae 7f83 e3b0 7f85 9785     y...............
 80187c4:	7f86 e3af 7f87 e3b2 7f88 e3b1 7f8a 9772     ..............r.
 80187d4:	7f8c e3b3 7f8e 94fc 7f94 e3b4 7f9a e3b7     ................
 80187e4:	7f9d e3b6 7f9e e3b5 7fa1 fb91 7fa3 e3b8     ................
 80187f4:	7fa4 8c51 7fa8 9141 7fa9 8b60 7fae e3bc     ..Q...A...`.....
 8018804:	7faf e3b9 7fb2 e3ba 7fb6 e3bd 7fb8 e3be     ................
 8018814:	7fb9 e3bb 7fbd 8948 7fc1 89a5 7fc5 e3c0     ......H.........
 8018824:	7fc6 e3c1 7fca e3c2 7fcc 9782 7fd2 8f4b     ..............K.
 8018834:	7fd4 e3c4 7fd5 e3c3 7fe0 9089 7fe1 e3c5     ................
 8018844:	7fe6 e3c6 7fe9 e3c7 7feb 8ae3 7ff0 8acb     ................
 8018854:	7ff3 e3c8 7ff9 e3c9 7ffb 967c 7ffc 9783     ..........|.....
 8018864:	8000 9773 8001 9856 8003 8d6c 8004 e3cc     ..s...V...l.....
 8018874:	8005 8ed2 8006 e3cb 800b e3cd 800c 8ea7     ................
 8018884:	8010 91cf 8012 e3ce 8015 8d6b 8017 96d5     ..........k.....
 8018894:	8018 e3cf 8019 e3d0 801c e3d1 8021 e3d2     ............!...
 80188a4:	8028 e3d3 8033 8ea8 8036 96eb 803b e3d5     (...3...6...;...
 80188b4:	803d 925e 803f e3d4 8046 e3d7 804a e3d6     =.^.?...F...J...
 80188c4:	8052 e3d8 8056 90b9 8058 e3d9 805a e3da     R...V...X...Z...
 80188d4:	805e 95b7 805f e3db 8061 918f 8062 e3dc     ^..._...a...b...
 80188e4:	8068 e3dd 806f 97fc 8070 e3e0 8072 e3df     h...o...p...r...
 80188f4:	8073 e3de 8074 92ae 8076 e3e1 8077 9045     s...t...v...w.E.
 8018904:	8079 e3e2 807d e3e3 807e 9857 807f e3e4     y...}...~.W.....
 8018914:	8084 e3e5 8085 e3e7 8086 e3e6 8087 94a3     ................
 8018924:	8089 93f7 808b 985d 808c 94a7 8093 e3e9     ......].........
 8018934:	8096 8fd1 8098 9549 809a e3ea 809b e3e8     ......I.........
 8018944:	809d 8acc 80a1 8cd2 80a2 8e88 80a5 94ec     ................
 8018954:	80a9 8ca8 80aa 9662 80ac e3ed 80ad e3eb     ......b.........
 8018964:	80af 8d6d 80b1 8d6e 80b2 88e7 80b4 8de6     ..m...n.........
 8018974:	80ba 9478 80c3 88dd 80c4 e3f2 80c6 925f     ..x..........._.
 8018984:	80cc 9477 80ce 91d9 80d6 e3f4 80d9 e3f0     ..w.............
 8018994:	80da e3f3 80db e3ee 80dd e3f1 80de 9645     ..............E.
 80189a4:	80e1 8cd3 80e4 88fb 80e5 e3ef 80ef e3f6     ................
 80189b4:	80f1 e3f7 80f4 93b7 80f8 8bb9 80fc e445     ..............E.
 80189c4:	80fd 945c 8102 8e89 8105 8bba 8106 90c6     ..\.............
 80189d4:	8107 9865 8108 96ac 8109 e3f5 810a 90d2     ..e.............
 80189e4:	811a 8b72 811b e3f8 8123 e3fa 8129 e3f9     ..r.....#...)...
 80189f4:	812f e3fb 8131 9245 8133 945d 8139 92af     /...1.E.3.].9...
 8018a04:	813e e442 8146 e441 814b e3fc 814e 9074     >.B.F.A.K...N.t.
 8018a14:	8150 9585 8151 e444 8153 e443 8154 8d6f     P...Q.D.S.C.T.o.
 8018a24:	8155 9872 815f e454 8165 e448 8166 e449     U.r._.T.e.H.f.I.
 8018a34:	816b 8eee 816e e447 8170 8d98 8171 e446     k...n.G.p...q.F.
 8018a44:	8174 e44a 8178 92b0 8179 95a0 817a 9142     t.J.x...y...z.B.
 8018a54:	817f 91da 8180 e44e 8182 e44f 8183 e44b     ......N...O...K.
 8018a64:	8188 e44c 818a e44d 818f 8d70 8193 e455     ..L...M...p...U.
 8018a74:	8195 e451 819a 9586 819c 968c 819d 9547     ..Q...........G.
 8018a84:	81a0 e450 81a3 e453 81a4 e452 81a8 9663     ..P...S...R...c.
 8018a94:	81a9 e456 81b0 e457 81b3 9156 81b5 e458     ..V...W...V...X.
 8018aa4:	81b8 e45a 81ba e45e 81bd e45b 81be e459     ..Z...^...[...Y.
 8018ab4:	81bf 945e 81c0 e45c 81c2 e45d 81c6 89b0     ..^...\...].....
 8018ac4:	81c8 e464 81c9 e45f 81cd e460 81d1 e461     ..d..._...`...a.
 8018ad4:	81d3 919f 81d8 e463 81d9 e462 81da e465     ......c...b...e.
 8018ae4:	81df e466 81e0 e467 81e3 9062 81e5 89e7     ..f...g...b.....
 8018af4:	81e7 e468 81e8 97d5 81ea 8ea9 81ed 8f4c     ..h...........L.
 8018b04:	81f3 8e8a 81f4 9276 81fa e469 81fb e46a     ......v...i...j.
 8018b14:	81fc 8950 81fe e46b 8201 e46c 8202 e46d     ..P...k...l...m.
 8018b24:	8205 e46e 8207 e46f 8208 8bbb 8209 9da8     ..n...o.........
 8018b34:	820a e470 820c 90e3 820d e471 820e 8ec9     ..p.......q.....
 8018b44:	8210 e472 8212 98ae 8216 e473 8217 95dc     ..r.......s.....
 8018b54:	8218 8ada 821b 9143 821c 8f77 821e 9591     ......C...w.....
 8018b64:	821f 8f4d 8229 e474 822a 8d71 822b e475     ..M.).t.*.q.+.u.
 8018b74:	822c 94ca 822e e484 8233 e477 8235 91c7     ,.......3.w.5...
 8018b84:	8236 9495 8237 8cbd 8238 e476 8239 9144     6...7...8.v.9.D.
 8018b94:	8240 e478 8247 92f8 8258 e47a 8259 e479     @.x.G...X.z.Y.y.
 8018ba4:	825a e47c 825d e47b 825f e47d 8262 e480     Z.|.].{._.}.b...
 8018bb4:	8264 e47e 8266 8acd 8268 e481 826a e482     d.~.f...h...j...
 8018bc4:	826b e483 826e 8daf 826f 97c7 8271 e485     k...n...o...q...
 8018bd4:	8272 9046 8276 8990 8277 e486 8278 e487     r.F.v...w...x...
 8018be4:	827e e488 828b 88f0 828d e489 8292 e48a     ~...............
 8018bf4:	8299 9587 829d 8ec5 829f e48c 82a5 8a48     ..............H.
 8018c04:	82a6 88b0 82ab e48b 82ac e48e 82ad 946d     ..............m.
 8018c14:	82af 9063 82b1 89d4 82b3 9646 82b8 8c7c     ..c.......F...|.
 8018c24:	82b9 8bda 82bb e48d 82bd 89e8 82c5 8aa1     ................
 8018c34:	82d1 8991 82d2 e492 82d3 97e8 82d4 91db     ................
 8018c44:	82d7 9563 82d9 e49e 82db 89d5 82dc e49c     ..c.............
 8018c54:	82de e49a 82df e491 82e1 e48f 82e3 e490     ................
 8018c64:	82e5 8ee1 82e6 8bea 82e7 9297 82eb 93cf     ................
 8018c74:	82f1 8970 82f3 e494 82f4 e493 82f9 e499     ..p.............
 8018c84:	82fa e495 82fb e498 8301 fb93 8302 96ce     ................
 8018c94:	8303 e497 8304 89d6 8305 8a9d 8306 e49b     ................
 8018ca4:	8309 e49d 830e 8c73 8316 e4a1 8317 e4aa     ......s.........
 8018cb4:	8318 e4ab 831c 88a9 8323 e4b2 8328 88ef     ........#...(...
 8018cc4:	832b e4a9 832f e4a8 8331 e4a3 8332 e4a2     +.../...1...2...
 8018cd4:	8334 e4a0 8335 e49f 8336 9283 8338 91f9     4...5...6...8...
 8018ce4:	8339 e4a5 8340 e4a4 8345 e4a7 8349 9190     9...@...E...I...
 8018cf4:	834a 8c74 834f 8960 8350 e4a6 8352 8d72     J.t.O.`.P...R.r.
 8018d04:	8358 9191 8362 fb94 8373 e4b8 8375 e4b9     X...b...s...u...
 8018d14:	8377 89d7 837b 89ac 837c e4b6 837f fb95     w...{...|.......
 8018d24:	8385 e4ac 8387 e4b4 8389 e4bb 838a e4b5     ................
 8018d34:	838e e4b3 8393 e496 8396 e4b1 839a e4ad     ................
 8018d44:	839e 8ace 839f e4af 83a0 e4ba 83a2 e4b0     ................
 8018d54:	83a8 e4bc 83aa e4ae 83ab 949c 83b1 9789     ................
 8018d64:	83b5 e4b7 83bd e4cd 83c1 e4c5 83c5 909b     ................
 8018d74:	83c7 fb96 83ca 8b65 83cc 8bdb 83ce e4c0     ......e.........
 8018d84:	83d3 89d9 83d6 8fd2 83d8 e4c3 83dc 8dd8     ................
 8018d94:	83df 9370 83e0 e4c8 83e9 95ec 83eb e4bf     ..p.............
 8018da4:	83ef 89d8 83f0 8cd4 83f1 9548 83f2 e4c9     ..........H.....
 8018db4:	83f4 e4bd 83f6 fb97 83f7 e4c6 83fb e4d0     ................
 8018dc4:	83fd e4c1 8403 e4c2 8404 93b8 8407 e4c7     ................
 8018dd4:	840b e4c4 840c 9647 840d e4ca 840e 88de     ......G.........
 8018de4:	8413 e4be 8420 e4cc 8422 e4cb 8429 948b     .... ..."...)...
 8018df4:	842a e4d2 842c e4dd 8431 8a9e 8435 e4e0     *...,...1...5...
 8018e04:	8438 e4ce 843c e4d3 843d 978e 8446 e4dc     8...<...=...F...
 8018e14:	8448 fb98 8449 9774 844e 97a8 8457 9298     H...I.t.N...W...
 8018e24:	845b 8a8b 8461 9592 8462 e4e2 8463 939f     [...a...b...c...
 8018e34:	8466 88af 8469 e4db 846b e4d7 846c 9192     f...i...k...l...
 8018e44:	846d e4d1 846e e4d9 846f e4de 8471 944b     m...n...o...q.K.
 8018e54:	8475 88a8 8477 e4d6 8479 e4df 847a 9598     u...w...y...z...
 8018e64:	8482 e4da 8484 e4d5 848b 8fd3 8490 8f4e     ..............N.
 8018e74:	8494 8eaa 8499 96d6 849c 9566 849f e4e5     ..........f.....
 8018e84:	84a1 e4ee 84ad e4d8 84b2 8a97 84b4 fb99     ................
 8018e94:	84b8 8ff6 84b9 e4e3 84bb e4e8 84bc 9193     ................
 8018ea4:	84bf e4e4 84c1 e4eb 84c4 927e 84c6 e4ec     ..........~.....
 8018eb4:	84c9 9775 84ca e4e1 84cb 8a57 84cd e4e7     ..u.......W.....
 8018ec4:	84d0 e4ea 84d1 96aa 84d6 e4ed 84d9 e4e6     ................
 8018ed4:	84da e4e9 84dc fa60 84ec 9648 84ee 9840     ......`...H...@.
 8018ee4:	84f4 e4f1 84fc e4f8 84ff e4f0 8500 8ec1     ................
 8018ef4:	8506 e4cf 8511 95cc 8513 96a0 8514 e4f7     ................
 8018f04:	8515 e4f6 8517 e4f2 8518 e4f3 851a 8955     ..............U.
 8018f14:	851f e4f5 8521 e4ef 8526 92d3 852c e4f4     ....!...&...,...
 8018f24:	852d 88fc 8535 91a0 853d 95c1 8540 e4f9     -...5...=...@...
 8018f34:	8541 e540 8543 94d7 8548 e4fc 8549 8fd4     A.@.C...H...I...
 8018f44:	854a 8ec7 854b e542 854e 8bbc 8553 fb9a     J...K.B.N...S...
 8018f54:	8555 e543 8557 9599 8558 e4fb 8559 fb9b     U.C.W...X...Y...
 8018f64:	855a e4d4 8563 e4fa 8568 986e 8569 93a0     Z...c...h.n.i...
 8018f74:	856a 9593 856b fb9c 856d e54a 8577 e550     j...k...m.J.w.P.
 8018f84:	857e e551 8580 e544 8584 9496 8587 e54e     ~.Q...D.......N.
 8018f94:	8588 e546 858a e548 8590 e552 8591 e547     ..F...H...R...G.
 8018fa4:	8594 e54b 8597 8992 8599 93e3 859b e54c     ..K...........L.
 8018fb4:	859c e54f 85a4 e545 85a6 9145 85a8 e549     ..O...E...E...I.
 8018fc4:	85a9 8e46 85aa 9064 85ab 8c4f 85ac 96f2     ..F...d...O.....
 8018fd4:	85ae 96f7 85af 8f92 85b0 fb9e 85b9 e556     ..............V.
 8018fe4:	85ba e554 85c1 986d 85c9 e553 85cd 9795     ..T...m...S.....
 8018ff4:	85cf e555 85d0 e557 85d5 e558 85dc e55b     ..U...W...X...[.
 8019004:	85dd e559 85e4 93a1 85e5 e55a 85e9 94cb     ..Y.......Z.....
 8019014:	85ea e54d 85f7 8f93 85f9 e55c 85fa e561     ..M.......\...a.
 8019024:	85fb 9194 85fe e560 8602 e541 8606 e562     ......`...A...b.
 8019034:	8607 9168 860a e55d 860b e55f 8613 e55e     ..h...]..._...^.
 8019044:	8616 9f50 8617 9f41 861a e564 8622 e563     ..P...A...d.".c.
 8019054:	862d 9796 862f e1ba 8630 e565 863f e566     -.../...0.e.?.f.
 8019064:	864d e567 864e 8cd5 8650 8b73 8654 e569     M.g.N...P.s.T.i.
 8019074:	8655 997c 865a 8b95 865c 97b8 865e 8bf1     U.|.Z...\...^...
 8019084:	865f e56a 8667 e56b 866b 928e 8671 e56c     _.j.g.k.k...q.l.
 8019094:	8679 93f8 867b 88b8 868a 89e1 868b e571     y...{.........q.
 80190a4:	868c e572 8693 e56d 8695 8e5c 86a3 e56e     ..r...m...\...n.
 80190b4:	86a4 9461 86a9 e56f 86aa e570 86ab e57a     ..a...o...p...z.
 80190c4:	86af e574 86b0 e577 86b6 e573 86c4 e575     ..t...w...s...u.
 80190d4:	86c6 e576 86c7 8ed6 86c9 e578 86cb 9260     ..v.......x...`.
 80190e4:	86cd 8c75 86ce 8a61 86d4 e57b 86d9 8a5e     ..u...a...{...^.
 80190f4:	86db e581 86de e57c 86df e580 86e4 94b8     ......|.........
 8019104:	86e9 e57d 86ec e57e 86ed 9567 86ee 94d8     ..}...~...g.....
 8019114:	86ef e582 86f8 91fb 86f9 e58c 86fb e588     ................
 8019124:	86fe 89e9 8700 e586 8702 9649 8703 e587     ..........I.....
 8019134:	8706 e584 8708 e585 8709 e58a 870a e58d     ................
 8019144:	870d e58b 8711 e589 8712 e583 8718 9277     ..............w.
 8019154:	871a e594 871c 96a8 8725 e592 8729 e593     ........%...)...
 8019164:	8734 e58e 8737 e590 873b e591 873f e58f     4...7...;...?...
 8019174:	8749 90e4 874b 9858 874c e598 874e e599     I...K.X.L...N...
 8019184:	8753 e59f 8755 9049 8757 e59b 8759 e59e     S...U.I.W...Y...
 8019194:	875f e596 8760 e595 8763 e5a0 8766 89da     _...`...c...f...
 80191a4:	8768 e59c 876a e5a1 876e e59d 8774 e59a     h...j...n...t...
 80191b4:	8776 92b1 8778 e597 877f 9488 8782 e5a5     v...x...........
 80191c4:	878d 975a 879f e5a4 87a2 e5a3 87ab e5ac     ..Z.............
 80191d4:	87af e5a6 87b3 e5ae 87ba 9786 87bb e5b1     ................
 80191e4:	87bd e5a8 87c0 e5a9 87c4 e5ad 87c6 e5b0     ................
 80191f4:	87c7 e5af 87cb e5a7 87d0 e5aa 87d2 e5bb     ................
 8019204:	87e0 e5b4 87ef e5b2 87f2 e5b3 87f6 e5b8     ................
 8019214:	87f7 e5b9 87f9 8a49 87fb 8b61 87fe e5b7     ......I...a.....
 8019224:	8805 e5a2 8807 fba1 880d e5b6 880e e5ba     ................
 8019234:	880f e5b5 8811 e5bc 8815 e5be 8816 e5bd     ................
 8019244:	8821 e5c0 8822 e5bf 8823 e579 8827 e5c4     !..."...#.y.'...
 8019254:	8831 e5c1 8836 e5c2 8839 e5c3 883b e5c5     1...6...9...;...
 8019264:	8840 8c8c 8842 e5c7 8844 e5c6 8846 8f4f     @...B...D...F.O.
 8019274:	884c 8d73 884d 9fa5 8852 e5c8 8853 8f70     L.s.M...R...S.p.
 8019284:	8857 8a58 8859 e5c9 885b 8971 885d 8fd5     W.X.Y...[.q.]...
 8019294:	885e e5ca 8861 8d74 8862 e5cb 8863 88df     ^...a.t.b...c...
 80192a4:	8868 955c 886b e5cc 8870 908a 8872 e5d3     h.\.k...p...r...
 80192b4:	8875 e5d0 8877 928f 887d e5d1 887e e5ce     u...w...}...~...
 80192c4:	887f 8bdc 8881 e5cd 8882 e5d4 8888 8c55     ..............U.
 80192d4:	888b 91dc 888d e5da 8892 e5d6 8896 91b3     ................
 80192e4:	8897 e5d5 8899 e5d8 889e e5cf 88a2 e5d9     ................
 80192f4:	88a4 e5db 88ab 94ed 88ae e5d7 88b0 e5dc     ................
 8019304:	88b1 e5de 88b4 8cd1 88b5 e5d2 88b7 88bf     ................
 8019314:	88bf e5dd 88c1 8dd9 88c2 97f4 88c3 e5df     ................
 8019324:	88c4 e5e0 88c5 9195 88cf 97a0 88d4 e5e1     ................
 8019334:	88d5 9754 88d8 e5e2 88d9 e5e3 88dc 95e2     ..T.............
 8019344:	88dd e5e4 88df 8dbe 88e1 97a1 88e8 e5e9     ................
 8019354:	88f2 e5ea 88f3 8fd6 88f4 e5e8 88f5 fba2     ................
 8019364:	88f8 9787 88f9 e5e5 88fc e5e7 88fd 90bb     ................
 8019374:	88fe 909e 8902 e5e6 8904 e5eb 8907 95a1     ................
 8019384:	890a e5ed 890c e5ec 8910 8a8c 8912 964a     ..............J.
 8019394:	8913 e5ee 891c fa5d 891d e5fa 891e e5f0     ......].........
 80193a4:	8925 e5f1 892a e5f2 892b e5f3 8936 e5f7     %...*...+...6...
 80193b4:	8938 e5f8 893b e5f6 8941 e5f4 8943 e5ef     8...;...A...C...
 80193c4:	8944 e5f5 894c e5f9 894d e8b5 8956 89a6     D...L...M...V...
 80193d4:	895e e5fc 895f 8bdd 8960 e5fb 8964 e641     ^..._...`...d.A.
 80193e4:	8966 e640 896a e643 896d e642 896f e644     f.@.j.C.m.B.o.D.
 80193f4:	8972 8f50 8974 e645 8977 e646 897e e647     r.P.t.E.w.F.~.G.
 8019404:	897f 90bc 8981 9776 8983 e648 8986 95a2     ......v...H.....
 8019414:	8987 9465 8988 e649 898a e64a 898b 8ca9     ..e...I...J.....
 8019424:	898f 8b4b 8993 e64b 8996 8e8b 8997 9460     ..K...K.......`.
 8019434:	8998 e64c 899a 8a6f 89a1 e64d 89a6 e64f     ..L...o...M...O.
 8019444:	89a7 9797 89a9 e64e 89aa 9065 89ac e650     ......N...e...P.
 8019454:	89af e651 89b2 e652 89b3 8acf 89ba e653     ..Q...R.......S.
 8019464:	89bd e654 89bf e655 89c0 e656 89d2 8a70     ..T...U...V...p.
 8019474:	89da e657 89dc e658 89dd e659 89e3 89f0     ..W...X...Y.....
 8019484:	89e6 9047 89e7 e65a 89f4 e65b 89f8 e65c     ..G...Z...[...\.
 8019494:	8a00 8cbe 8a02 92f9 8a03 e65d 8a08 8c76     ..........]...v.
 80194a4:	8a0a 9075 8a0c e660 8a0e 93a2 8a10 e65f     ..u...`......._.
 80194b4:	8a12 fba3 8a13 8c50 8a16 e65e 8a17 91f5     ......P...^.....
 80194c4:	8a18 8b4c 8a1b e661 8a1d e662 8a1f 8fd7     ..L...a...b.....
 80194d4:	8a23 8c8d 8a25 e663 8a2a 964b 8a2d 90dd     #...%.c.*.K.-...
 80194e4:	8a31 8b96 8a33 96f3 8a34 9169 8a36 e664     1...3...4.i.6.d.
 80194f4:	8a37 fba4 8a3a 9066 8a3b 9290 8a3c 8fd8     7...:.f.;...<...
 8019504:	8a41 e665 8a46 e668 8a48 e669 8a50 8dbc     A.e.F.h.H.i.P...
 8019514:	8a51 91c0 8a52 e667 8a54 8fd9 8a55 955d     Q...R.g.T...U.].
 8019524:	8a5b e666 8a5e 8e8c 8a60 8972 8a62 e66d     [.f.^...`.r.b.m.
 8019534:	8a63 8c77 8a66 8e8e 8a69 8e8d 8a6b 986c     c.w.f...i...k.l.
 8019544:	8a6c e66c 8a6d e66b 8a6e 9146 8a70 8b6c     l.l.m.k.n.F.p.l.
 8019554:	8a71 9862 8a72 8a59 8a73 8fda 8a79 fba5     q.b.r.Y.s...y...
 8019564:	8a7c e66a 8a82 e66f 8a84 e670 8a85 e66e     |.j...o...p...n.
 8019574:	8a87 8cd6 8a89 975f 8a8c 8e8f 8a8d 9446     ......_.......F.
 8019584:	8a91 e673 8a93 90be 8a95 9261 8a98 9755     ..s.......a...U.
 8019594:	8a9a e676 8a9e 8cea 8aa0 90bd 8aa1 e672     ..v...........r.
 80195a4:	8aa3 e677 8aa4 8ceb 8aa5 e674 8aa6 e675     ..w.......t...u.
 80195b4:	8aa7 fba6 8aa8 e671 8aac 90e0 8aad 93c7     ......q.........
 80195c4:	8ab0 924e 8ab2 89db 8ab9 94ee 8abc 8b62     ..N...........b.
 80195d4:	8abe fba7 8abf 92b2 8ac2 e67a 8ac4 e678     ..........z...x.
 80195e4:	8ac7 926b 8acb 90bf 8acc 8ad0 8acd e679     ..k...........y.
 80195f4:	8acf 907a 8ad2 97c8 8ad6 985f 8ada e67b     ..z......._...{.
 8019604:	8adb e687 8adc 92b3 8ade e686 8adf fba8     ................
 8019614:	8ae0 e683 8ae1 e68b 8ae2 e684 8ae4 e680     ................
 8019624:	8ae6 92fa 8ae7 e67e 8aeb e67c 8aed 9740     ......~...|...@.
 8019634:	8aee 8e90 8af1 e681 8af3 e67d 8af6 fbaa     ..........}.....
 8019644:	8af7 e685 8af8 8f94 8afa 8cbf 8afe 91f8     ................
 8019654:	8b00 9664 8b01 8979 8b02 88e0 8b04 93a3     ..d...y.........
 8019664:	8b07 e689 8b0c e688 8b0e 93e4 8b10 e68d     ................
 8019674:	8b14 e682 8b16 e68c 8b17 e68e 8b19 8caa     ................
 8019684:	8b1a e68a 8b1b 8d75 8b1d 8ed3 8b20 e68f     ......u..... ...
 8019694:	8b21 9777 8b26 e692 8b28 e695 8b2b e693     !.w.&...(...+...
 80196a4:	8b2c 9554 8b33 e690 8b39 8bde 8b3e e694     ,.T.3...9...>...
 80196b4:	8b41 e696 8b49 e69a 8b4c e697 8b4e e699     A...I...L...N...
 80196c4:	8b4f e698 8b53 fbab 8b56 e69b 8b58 8eaf     O...S...V...X...
 80196d4:	8b5a e69d 8b5b e69c 8b5c 9588 8b5f e69f     Z...[...\..._...
 80196e4:	8b66 8c78 8b6b e69e 8b6c e6a0 8b6f e6a1     f.x.k...l...o...
 80196f4:	8b70 8b63 8b71 e3bf 8b72 8ff7 8b74 e6a2     p.c.q...r...t...
 8019704:	8b77 8cec 8b7d e6a3 8b7f fbac 8b80 e6a4     w...}...........
 8019714:	8b83 8e5d 8b8a 9dcc 8b8c e6a5 8b8e e6a6     ..].............
 8019724:	8b90 8f51 8b92 e6a7 8b93 e6a8 8b96 e6a9     ..Q.............
 8019734:	8b99 e6aa 8b9a e6ab 8c37 924a 8c3a e6ac     ........7.J.:...
 8019744:	8c3f e6ae 8c41 e6ad 8c46 93a4 8c48 e6af     ?...A...F...H...
 8019754:	8c4a 964c 8c4c e6b0 8c4e e6b1 8c50 e6b2     J.L.L...N...P...
 8019764:	8c55 e6b3 8c5a 93d8 8c61 8fdb 8c62 e6b4     U...Z...a...b...
 8019774:	8c6a 8d8b 8c6b 98ac 8c6c e6b5 8c78 e6b6     j...k...l...x...
 8019784:	8c79 955e 8c7a e6b7 8c7c e6bf 8c82 e6b8     y.^.z...|.......
 8019794:	8c85 e6ba 8c89 e6b9 8c8a e6bb 8c8c 9665     ..............e.
 80197a4:	8c8d e6bc 8c8e e6bd 8c94 e6be 8c98 e6c0     ................
 80197b4:	8c9d 8a4c 8c9e 92e5 8ca0 9589 8ca1 8de0     ..L.............
 80197c4:	8ca2 8d76 8ca7 956e 8ca8 89dd 8ca9 94cc     ..v...n.........
 80197d4:	8caa e6c3 8cab 8ad1 8cac 90d3 8cad e6c2     ................
 80197e4:	8cae e6c7 8caf 9299 8cb0 96e1 8cb2 e6c5     ................
 80197f4:	8cb3 e6c6 8cb4 8b4d 8cb6 e6c8 8cb7 9483     ......M.........
 8019804:	8cb8 91dd 8cbb 94ef 8cbc 935c 8cbd e6c4     ..........\.....
 8019814:	8cbf 9666 8cc0 89ea 8cc1 e6ca 8cc2 9847     ..f...........G.
 8019824:	8cc3 92c0 8cc4 9864 8cc7 8e91 8cc8 e6c9     ......d.........
 8019834:	8cca 91af 8ccd e6da 8cce 9147 8cd1 93f6     ..........G.....
 8019844:	8cd3 956f 8cda e6cd 8cdb 8e5e 8cdc 8e92     ..o.......^.....
 8019854:	8cde 8fdc 8ce0 9485 8ce2 8cab 8ce3 e6cc     ................
 8019864:	8ce4 e6cb 8ce6 958a 8cea 8ebf 8ced 9371     ..............q.
 8019874:	8cf0 fbad 8cf4 fbae 8cfa e6cf 8cfb e6d0     ................
 8019884:	8cfc 8d77 8cfd e6ce 8d04 e6d1 8d05 e6d2     ..w.............
 8019894:	8d07 e6d4 8d08 91a1 8d0a e6d3 8d0b 8ae4     ................
 80198a4:	8d0d e6d6 8d0f e6d5 8d10 e6d7 8d12 fbaf     ................
 80198b4:	8d13 e6d9 8d14 e6db 8d16 e6dc 8d64 90d4     ............d...
 80198c4:	8d66 8ecd 8d67 e6dd 8d6b 8a71 8d6d e6de     f...g...k.q.m...
 80198d4:	8d70 9196 8d71 e6df 8d73 e6e0 8d74 958b     p...q...s...t...
 80198e4:	8d76 fbb0 8d77 8b4e 8d81 e6e1 8d85 92b4     v...w.N.........
 80198f4:	8d8a 897a 8d99 e6e2 8da3 8eef 8da8 9096     ..z.............
 8019904:	8db3 91ab 8dba e6e5 8dbe e6e4 8dc2 e6e3     ................
 8019914:	8dcb e6eb 8dcc e6e9 8dcf e6e6 8dd6 e6e8     ................
 8019924:	8dda e6e7 8ddb e6ea 8ddd 8b97 8ddf e6ee     ................
 8019934:	8de1 90d5 8de3 e6ef 8de8 8cd7 8dea e6ec     ................
 8019944:	8deb e6ed 8def 9848 8df3 92b5 8df5 9148     ......H.......H.
 8019954:	8dfc e6f0 8dff e6f3 8e08 e6f1 8e09 e6f2     ................
 8019964:	8e0a 9778 8e0f 93a5 8e10 e6f6 8e1d e6f4     ..x.............
 8019974:	8e1e e6f5 8e1f e6f7 8e2a e748 8e30 e6fa     ........*.H.0...
 8019984:	8e34 e6fb 8e35 e6f9 8e42 e6f8 8e44 92fb     4...5...B...D...
 8019994:	8e47 e740 8e48 e744 8e49 e741 8e4a e6fc     G.@.H.D.I.A.J...
 80199a4:	8e4c e742 8e50 e743 8e55 e74a 8e59 e745     L.B.P.C.U.J.Y.E.
 80199b4:	8e5f 90d6 8e60 e747 8e63 e749 8e64 e746     _...`.G.c.I.d.F.
 80199c4:	8e72 e74c 8e74 8f52 8e76 e74b 8e7c e74d     r.L.t.R.v.K.|.M.
 80199d4:	8e81 e74e 8e84 e751 8e85 e750 8e87 e74f     ..N...Q...P...O.
 80199e4:	8e8a e753 8e8b e752 8e8d 96f4 8e91 e755     ..S...R.......U.
 80199f4:	8e93 e754 8e94 e756 8e99 e757 8ea1 e759     ..T...V...W...Y.
 8019a04:	8eaa e758 8eab 9067 8eac e75a 8eaf 8beb     ..X...g...Z.....
 8019a14:	8eb0 e75b 8eb1 e75d 8ebe e75e 8ec5 e75f     ..[...]...^..._.
 8019a24:	8ec6 e75c 8ec8 e760 8eca 8ed4 8ecb e761     ..\...`.......a.
 8019a34:	8ecc 8b4f 8ecd 8c52 8ecf fbb2 8ed2 8cac     ..O...R.........
 8019a44:	8edb e762 8edf 93ee 8ee2 935d 8ee3 e763     ..b.......]...c.
 8019a54:	8eeb e766 8ef8 8eb2 8efb e765 8efc e764     ..f.......e...d.
 8019a64:	8efd 8c79 8efe e767 8f03 8a72 8f05 e769     ..y...g...r...i.
 8019a74:	8f09 8dda 8f0a e768 8f0c e771 8f12 e76b     ......h...q...k.
 8019a84:	8f13 e76d 8f14 95e3 8f15 e76a 8f19 e76c     ..m.......j...l.
 8019a94:	8f1b e770 8f1c e76e 8f1d 8b50 8f1f e76f     ..p...n...P...o.
 8019aa4:	8f26 e772 8f29 9479 8f2a 97d6 8f2f 8f53     &.r.).y.*.../.S.
 8019ab4:	8f33 e773 8f38 9741 8f39 e775 8f3b e774     3.s.8.A.9.u.;.t.
 8019ac4:	8f3e e778 8f3f 9760 8f42 e777 8f44 8a8d     >.x.?.`.B.w.D...
 8019ad4:	8f45 e776 8f46 e77b 8f49 e77a 8f4c e779     E.v.F.{.I.z.L.y.
 8019ae4:	8f4d 9351 8f4e e77c 8f57 e77d 8f5c e77e     M.Q.N.|.W.}.\.~.
 8019af4:	8f5f 8d8c 8f61 8c44 8f62 e780 8f63 e781     _...a.D.b...c...
 8019b04:	8f64 e782 8f9b 9068 8f9c e783 8f9e 8eab     d.....h.........
 8019b14:	8f9f e784 8fa3 e785 8fa7 999f 8fa8 999e     ................
 8019b24:	8fad e786 8fae e390 8faf e787 8fb0 9243     ..............C.
 8019b34:	8fb1 904a 8fb2 945f 8fb7 e788 8fba 95d3     ..J..._.........
 8019b44:	8fbb 92d2 8fbc 8d9e 8fbf 9248 8fc2 8949     ..........H...I.
 8019b54:	8fc4 9698 8fc5 9076 8fce 8c7d 8fd1 8bdf     ......v...}.....
 8019b64:	8fd4 95d4 8fda e789 8fe2 e78b 8fe5 e78a     ................
 8019b74:	8fe6 89de 8fe9 93f4 8fea e78c 8feb 9497     ................
 8019b84:	8fed 9352 8fef e78d 8ff0 8f71 8ff4 e78f     ..R.......q.....
 8019b94:	8ff7 96c0 8ff8 e79e 8ff9 e791 8ffa e792     ................
 8019ba4:	8ffd 92c7 9000 91de 9001 9197 9003 93a6     ................
 8019bb4:	9005 e790 9006 8b74 900b e799 900d e796     ......t.........
 8019bc4:	900e e7a3 900f 93a7 9010 9280 9011 e793     ................
 8019bd4:	9013 92fc 9014 9372 9015 e794 9016 e798     ......r.........
 8019be4:	9017 9080 9019 9487 901a 92ca 901d 90c0     ................
 8019bf4:	901e e797 901f 91ac 9020 91a2 9021 e795     ........ ...!...
 8019c04:	9022 88a7 9023 9841 9027 e79a 902e 91df     "...#.A.'.......
 8019c14:	9031 8f54 9032 9069 9035 e79c 9036 e79b     1.T.2.i.5...6...
 8019c24:	9038 88ed 9039 e79d 903c 954e 903e e7a5     8...9...<.N.>...
 8019c34:	9041 93d9 9042 908b 9045 9278 9047 8bf6     A...B...E.x.G...
 8019c44:	9049 e7a4 904a 9756 904b 895e 904d 95d5     I...J.V.K.^.M...
 8019c54:	904e 89df 904f e79f 9050 e7a0 9051 e7a1     N...O...P...Q...
 8019c64:	9052 e7a2 9053 93b9 9054 9242 9055 88e1     R...S...T.B.U...
 8019c74:	9056 e7a6 9058 e7a7 9059 eaa1 905c 91bb     V...X...Y...\...
 8019c84:	905e e7a8 9060 8993 9061 916b 9063 8cad     ^...`...a.k.c...
 8019c94:	9065 9779 9067 fbb5 9068 e7a9 9069 934b     e.y.g...h...i.K.
 8019ca4:	906d 9198 906e 8ed5 906f e7aa 9072 e7ad     m...n...o...r...
 8019cb4:	9075 8f85 9076 e7ab 9077 914a 9078 9149     u...v...w.J.x.I.
 8019cc4:	907a 88e2 907c 97c9 907d e7af 907f 94f0     z...|...}.......
 8019cd4:	9080 e7b1 9081 e7b0 9082 e7ae 9083 e284     ................
 8019ce4:	9084 8ad2 9087 e78e 9089 e7b3 908a e7b2     ................
 8019cf4:	908f e7b4 9091 9757 90a3 93df 90a6 964d     ......W.......M.
 8019d04:	90a8 e7b5 90aa 8ed7 90af e7b6 90b1 e7b7     ................
 8019d14:	90b5 e7b8 90b8 9340 90c1 88e8 90ca 8d78     ......@.......x.
 8019d24:	90ce 9859 90db e7bc 90de fbb6 90e1 8c53     ..Y...........S.
 8019d34:	90e2 e7b9 90e4 e7ba 90e8 9594 90ed 8a73     ..............s.
 8019d44:	90f5 9758 90f7 8bbd 90fd 9373 9102 e7bd     ..X.......s.....
 8019d54:	9112 e7be 9115 fbb8 9119 e7bf 9127 fbb9     ............'...
 8019d64:	912d 9341 9130 e7c1 9132 e7c0 9149 93d1     -.A.0...2...I...
 8019d74:	914a e7c2 914b 8f55 914c 8ede 914d 947a     J...K.U.L...M.z.
 8019d84:	914e 9291 9152 8ef0 9154 908c 9156 e7c3     N...R...T...V...
 8019d94:	9158 e7c4 9162 907c 9163 e7c5 9165 e7c6     X...b.|.c...e...
 8019da4:	9169 e7c7 916a 978f 916c 8f56 9172 e7c9     i...j...l.V.r...
 8019db4:	9173 e7c8 9175 8d79 9177 8d93 9178 8e5f     s...u.y.w...x._.
 8019dc4:	9182 e7cc 9187 8f86 9189 e7cb 918b e7ca     ................
 8019dd4:	918d 91e7 9190 8ced 9192 90c1 9197 94ae     ................
 8019de4:	919c 8f58 91a2 e7cd 91a4 8fdd 91aa e7d0     ..X.............
 8019df4:	91ab e7ce 91af e7cf 91b4 e7d2 91b5 e7d1     ................
 8019e04:	91b8 8ff8 91ba e7d3 91c0 e7d4 91c1 e7d5     ................
 8019e14:	91c6 94ce 91c7 8dd1 91c8 8edf 91c9 e7d6     ................
 8019e24:	91cb e7d7 91cc 97a2 91cd 8f64 91ce 96ec     ..........d.....
 8019e34:	91cf 97ca 91d0 e7d8 91d1 8be0 91d6 e7d9     ................
 8019e44:	91d7 fbbb 91d8 9342 91da fbba 91db e7dc     ......B.........
 8019e54:	91dc 8a98 91dd 906a 91de fbbc 91df e7da     ......j.........
 8019e64:	91e1 e7db 91e3 92de 91e4 fbbf 91e5 fbc0     ................
 8019e74:	91e6 9674 91e7 8bfa 91ed fbbd 91ee fbbe     ..t.............
 8019e84:	91f5 e7de 91f6 e7df 91fc e7dd 91ff e7e1     ................
 8019e94:	9206 fbc1 920a fbc3 920d 93dd 920e 8a62     ..............b.
 8019ea4:	9210 fbc2 9211 e7e5 9214 e7e2 9215 e7e4     ................
 8019eb4:	921e e7e0 9229 e86e 922c e7e3 9234 97e9     ....).n.,...4...
 8019ec4:	9237 8cd8 9239 fbca 923a fbc4 923c fbc6     7...9...:...<...
 8019ed4:	923f e7ed 9240 fbc5 9244 9353 9245 e7e8     ?...@...D.S.E...
 8019ee4:	9248 e7eb 9249 e7e9 924b e7ee 924e fbc7     H...I...K...N...
 8019ef4:	9250 e7ef 9251 fbc9 9257 e7e7 9259 fbc8     P...Q...W...Y...
 8019f04:	925a e7f4 925b 8994 925e e7e6 9262 94ab     Z...[...^...b...
 8019f14:	9264 e7ea 9266 8fde 9267 fbcb 9271 8d7a     d...f...g...q.z.
 8019f24:	9277 fbcd 9278 fbce 927e 9667 9280 8be2     w...x...~.g.....
 8019f34:	9283 8f65 9285 93ba 9288 fa5f 9291 914c     ..e......._...L.
 8019f44:	9293 e7f2 9295 e7ec 9296 e7f1 9298 96c1     ................
 8019f54:	929a 92b6 929b e7f3 929c e7f0 92a7 fbcc     ................
 8019f64:	92ad 914b 92b7 e7f7 92b9 e7f6 92cf e7f5     ..K.............
 8019f74:	92d0 fbd2 92d2 964e 92d3 fbd6 92d5 fbd4     ......N.........
 8019f84:	92d7 fbd0 92d9 fbd1 92e0 fbd5 92e4 8f9b     ................
 8019f94:	92e7 fbcf 92e9 e7f8 92ea 95dd 92ed 8973     ..............s.
 8019fa4:	92f2 9565 92f3 9292 92f8 8b98 92f9 fa65     ..e...........e.
 8019fb4:	92fa e7fa 92fb fbd9 92fc 8d7c 92ff fbdc     ..........|.....
 8019fc4:	9302 fbde 9306 8e4b 930f e7f9 9310 908d     ......K.........
 8019fd4:	9318 908e 9319 e840 931a e842 931d fbdd     ......@...B.....
 8019fe4:	931e fbdb 9320 8ff9 9321 fbd8 9322 e841     .... ...!...".A.
 8019ff4:	9323 e843 9325 fbd7 9326 8bd1 9328 9564     #.C.%...&...(.d.
 801a004:	932b 8ee0 932c 9842 932e e7fc 932f 8df6     +...,.B...../...
 801a014:	9332 985e 9335 e845 933a e844 933b e846     2.^.5.E.:.D.;.F.
 801a024:	9344 e7fb 9348 fa5e 934b 93e7 934d 9374     D...H.^.K...M.t.
 801a034:	9354 92d5 9356 e84b 9357 fbe0 935b 9262     T...V.K.W...[.b.
 801a044:	935c e847 9360 e848 936c 8c4c 936e e84a     \.G.`.H.l.L.n.J.
 801a054:	9370 fbdf 9375 8cae 937c e849 937e 8fdf     p...u...|.I.~...
 801a064:	938c 8a99 9394 e84f 9396 8dbd 9397 9199     ......O.........
 801a074:	939a 92c8 93a4 fbe1 93a7 8a5a 93ac e84d     ..........Z...M.
 801a084:	93ad e84e 93ae 92c1 93b0 e84c 93b9 e850     ..N.......L...P.
 801a094:	93c3 e856 93c6 fbe2 93c8 e859 93d0 e858     ..V.......Y...X.
 801a0a4:	93d1 934c 93d6 e851 93d7 e852 93d8 e855     ..L...Q...R...U.
 801a0b4:	93dd e857 93de fbe3 93e1 8bbe 93e4 e85a     ..W...........Z.
 801a0c4:	93e5 e854 93e8 e853 93f8 fbe4 9403 e85e     ..T...S.......^.
 801a0d4:	9407 e85f 9410 e860 9413 e85d 9414 e85c     .._...`...]...\.
 801a0e4:	9418 8fe0 9419 93a8 941a e85b 9421 e864     ..........[.!.d.
 801a0f4:	942b e862 9431 fbe5 9435 e863 9436 e861     +.b.1...5.c.6.a.
 801a104:	9438 91f6 943a e865 9441 e866 9444 e868     8...:.e.A.f.D.h.
 801a114:	9445 fbe6 9448 fbe7 9451 8ad3 9452 e867     E...H...Q...R.g.
 801a124:	9453 96f8 945a e873 945b e869 945e e86c     S...Z.s.[.i.^.l.
 801a134:	9460 e86a 9462 e86b 946a e86d 9470 e86f     `.j.b.k.j.m.p.o.
 801a144:	9475 e870 9477 e871 947c e874 947d e872     u.p.w.q.|.t.}.r.
 801a154:	947e e875 947f e877 9481 e876 9577 92b7     ~.u...w...v.w...
 801a164:	9580 96e5 9582 e878 9583 914d 9587 e879     ......x...M...y.
 801a174:	9589 95c2 958a e87a 958b 8a4a 958f 895b     ......z...J...[.
 801a184:	9591 8ad5 9592 fbe8 9593 8ad4 9594 e87b     ..............{.
 801a194:	9596 e87c 9598 e87d 9599 e87e 95a0 e880     ..|...}...~.....
 801a1a4:	95a2 8ad6 95a3 8a74 95a4 8d7d 95a5 94b4     ......t...}.....
 801a1b4:	95a7 e882 95a8 e881 95ad e883 95b2 897b     ..............{.
 801a1c4:	95b9 e886 95bb e885 95bc e884 95be e887     ................
 801a1d4:	95c3 e88a 95c7 88c5 95ca e888 95cc e88c     ................
 801a1e4:	95cd e88b 95d4 e88e 95d5 e88d 95d6 e88f     ................
 801a1f4:	95d8 93ac 95dc e890 95e1 e891 95e2 e893     ................
 801a204:	95e5 e892 961c 958c 9621 e894 9628 e895     ........!...(...
 801a214:	962a 8de3 962e e896 962f e897 9632 9668     *......./...2.h.
 801a224:	963b 916a 963f 88a2 9640 91c9 9642 e898     ;.j.?...@...B...
 801a234:	9644 958d 964b e89b 964c e899 964d 8d7e     D...K...L...M.~.
 801a244:	964f e89a 9650 8cc0 965b 95c3 965c e89d     O...P...[...\...
 801a254:	965d e89f 965e e89e 965f e8a0 9662 8940     ]...^..._...b.@.
 801a264:	9663 9077 9664 8f9c 9665 8ad7 9666 e8a1     c.w.d...e...f...
 801a274:	966a 9486 966c e8a3 9670 8941 9672 e8a2     j...l...p.A.r...
 801a284:	9673 92c2 9675 97cb 9676 93a9 9677 e89c     s...u...v...w...
 801a294:	9678 97a4 967a 8caf 967d 977a 9685 8bf7     x...z...}.z.....
 801a2a4:	9686 97b2 9688 8c47 968a 91e0 968b e440     ......G.......@.
 801a2b4:	968d e8a4 968e 8a4b 968f 908f 9694 8a75     ......K.......u.
 801a2c4:	9695 e8a6 9697 e8a7 9698 e8a5 9699 8c84     ................
 801a2d4:	969b 8ddb 969c 8fe1 969d fbeb 96a0 8942     ..............B.
 801a2e4:	96a3 97d7 96a7 e8a9 96a8 e7ac 96aa e8a8     ................
 801a2f4:	96af fbec 96b0 e8ac 96b1 e8aa 96b2 e8ab     ................
 801a304:	96b4 e8ad 96b6 e8ae 96b7 97ea 96b8 e8af     ................
 801a314:	96b9 e8b0 96bb 90c7 96bc 94b9 96c0 909d     ................
 801a324:	96c1 8ae5 96c4 9759 96c5 89eb 96c6 8f57     ......Y.......W.
 801a334:	96c7 8cd9 96c9 e8b3 96cb e8b2 96cc 8e93     ................
 801a344:	96cd e8b4 96ce e8b1 96d1 8e47 96d5 e8b8     ..........G.....
 801a354:	96d6 e5ab 96d9 99d4 96db 9097 96dc e8b6     ................
 801a364:	96e2 97a3 96e3 93ef 96e8 894a 96ea 90e1     ..........J.....
 801a374:	96eb 8eb4 96f0 95b5 96f2 895f 96f6 97eb     .........._.....
 801a384:	96f7 978b 96f9 e8b9 96fb 9364 9700 8ef9     ..........d.....
 801a394:	9704 e8ba 9706 e8bb 9707 906b 9708 e8bc     ..........k.....
 801a3a4:	970a 97ec 970d e8b7 970e e8be 970f e8c0     ................
 801a3b4:	9711 e8bf 9713 e8bd 9716 e8c1 9719 e8c2     ................
 801a3c4:	971c 919a 971e 89e0 9724 e8c3 9727 96b6     ........$...'...
 801a3d4:	972a e8c4 9730 e8c5 9732 9849 9733 fbed     *...0...2.I.3...
 801a3e4:	9738 9e50 9739 e8c6 973b fbee 973d e8c7     8.P.9...;...=...
 801a3f4:	973e e8c8 9742 e8cc 9743 fbef 9744 e8c9     >...B...C...D...
 801a404:	9746 e8ca 9748 e8cb 9749 e8cd 974d fbf0     F...H...I...M...
 801a414:	974f fbf1 9751 fbf2 9752 90c2 9755 fbf3     O...Q...R...U...
 801a424:	9756 96f5 9759 90c3 975c e8ce 975e 94f1     V...Y...\...^...
 801a434:	9760 e8cf 9761 ea72 9762 96ca 9764 e8d0     `...a.r.b...d...
 801a444:	9766 e8d1 9768 e8d2 9769 8a76 976b e8d4     f...h...i.v.k...
 801a454:	976d 9078 9771 e8d5 9774 8c43 9779 e8d6     m.x.q...t.C.y...
 801a464:	977a e8da 977c e8d8 9781 e8d9 9784 8a93     z...|...........
 801a474:	9785 e8d7 9786 e8db 978b e8dc 978d 88c6     ................
 801a484:	978f e8dd 9790 e8de 9798 8fe2 979c e8df     ................
 801a494:	97a0 8b66 97a3 e8e2 97a6 e8e1 97a8 e8e0     ..f.............
 801a4a4:	97ab e691 97ad 95da 97b3 e8e3 97b4 e8e4     ................
 801a4b4:	97c3 e8e5 97c6 e8e6 97c8 e8e7 97cb e8e8     ................
 801a4c4:	97d3 8ad8 97dc e8e9 97ed e8ea 97ee 9442     ..............B.
 801a4d4:	97f2 e8ec 97f3 89b9 97f5 e8ef 97f6 e8ee     ................
 801a4e4:	97fb 8943 97ff 8bbf 9801 95c5 9802 92b8     ..C.............
 801a4f4:	9803 8da0 9805 8d80 9806 8f87 9808 907b     ..............{.
 801a504:	980c e8f1 980f e8f0 9810 9761 9811 8ae6     ..........a.....
 801a514:	9812 94d0 9813 93da 9817 909c 9818 97cc     ................
 801a524:	981a 8c7a 9821 e8f4 9824 e8f3 982c 966a     ..z.!...$...,.j.
 801a534:	982d 93aa 9834 896f 9837 e8f5 9838 e8f2     -...4.o.7...8...
 801a544:	983b 9570 983c 978a 983d e8f6 9846 e8f7     ;.p.<...=...F...
 801a554:	984b e8f9 984c 91e8 984d 8a7a 984e 8a7b     K...L...M.z.N.{.
 801a564:	984f e8f8 9854 8ae7 9855 8cb0 9857 fbf4     O...T...U...W...
 801a574:	9858 8ae8 985b 935e 985e 97de 9865 fbf5     X...[.^.^...e...
 801a584:	9867 8cda 986b e8fa 986f e8fb 9870 e8fc     g...k...o...p...
 801a594:	9871 e940 9873 e942 9874 e941 98a8 9597     q.@.s.B.t.A.....
 801a5a4:	98aa e943 98af e944 98b1 e945 98b6 e946     ..C...D...E...F.
 801a5b4:	98c3 e948 98c4 e947 98c6 e949 98db 94f2     ..H...G...I.....
 801a5c4:	98dc e3ca 98df 9048 98e2 8b51 98e9 e94a     ......H...Q...J.
 801a5d4:	98eb e94b 98ed 99aa 98ee 9f5a 98ef 94d1     ..K.......Z.....
 801a5e4:	98f2 88f9 98f4 88b9 98fc 8e94 98fd 964f     ..............O.
 801a5f4:	98fe 8ffc 9903 e94c 9905 96dd 9909 e94d     ......L.......M.
 801a604:	990a 977b 990c 8961 9910 8e60 9912 e94e     ..{...a...`...N.
 801a614:	9913 89ec 9914 e94f 9918 e950 991d e952     ......O...P...R.
 801a624:	991e e953 9920 e955 9921 e951 9924 e954     ..S. .U.!.Q.$.T.
 801a634:	9927 fbf8 9928 8ad9 992c e956 992e e957     '...(...,.V...W.
 801a644:	993d e958 993e e959 9942 e95a 9945 e95c     =.X.>.Y.B.Z.E.\.
 801a654:	9949 e95b 994b e95e 994c e961 9950 e95d     I.[.K.^.L.a.P.].
 801a664:	9951 e95f 9952 e960 9955 e962 9957 8bc0     Q._.R.`.U.b.W...
 801a674:	9996 8ef1 9997 e963 9998 e964 9999 8d81     ......c...d.....
 801a684:	999e fbfa 99a5 e965 99a8 8a5d 99ac 946e     ......e...]...n.
 801a694:	99ad e966 99ae e967 99b3 9279 99b4 93e9     ..f...g...y.....
 801a6a4:	99bc e968 99c1 949d 99c4 91ca 99c5 8977     ..h...........w.
 801a6b4:	99c6 8bec 99c8 8bed 99d0 9293 99d1 e96d     ..............m.
 801a6c4:	99d2 8bee 99d5 89ed 99d8 e96c 99db e96a     ..........l...j.
 801a6d4:	99dd e96b 99df e969 99e2 e977 99ed e96e     ..k...i...w...n.
 801a6e4:	99ee e96f 99f1 e970 99f2 e971 99f8 e973     ..o...p...q...s.
 801a6f4:	99fb e972 99ff 8f78 9a01 e974 9a05 e976     ..r...x...t...v.
 801a704:	9a0e 8b52 9a0f e975 9a12 919b 9a13 8cb1     ..R...u.........
 801a714:	9a19 e978 9a28 91cb 9a2b e979 9a30 93ab     ..x.(...+.y.0...
 801a724:	9a37 e97a 9a3e e980 9a40 e97d 9a42 e97c     7.z.>...@.}.B.|.
 801a734:	9a43 e97e 9a45 e97b 9a4d e982 9a4e fbfb     C.~.E.{.M...N...
 801a744:	9a55 e981 9a57 e984 9a5a 8bc1 9a5b e983     U...W...Z...[...
 801a754:	9a5f e985 9a62 e986 9a64 e988 9a65 e987     _...b...d...e...
 801a764:	9a69 e989 9a6a e98b 9a6b e98a 9aa8 8d9c     i...j...k.......
 801a774:	9aad e98c 9ab0 e98d 9ab8 8a5b 9abc e98e     ..........[.....
 801a784:	9ac0 e98f 9ac4 9091 9acf e990 9ad1 e991     ................
 801a794:	9ad3 e992 9ad4 e993 9ad8 8d82 9ad9 fbfc     ................
 801a7a4:	9adc fc40 9ade e994 9adf e995 9ae2 e996     ..@.............
 801a7b4:	9ae3 e997 9ae6 e998 9aea 94af 9aeb e99a     ................
 801a7c4:	9aed 9545 9aee e99b 9aef e999 9af1 e99d     ..E.............
 801a7d4:	9af4 e99c 9af7 e99e 9afb e99f 9b06 e9a0     ................
 801a7e4:	9b18 e9a1 9b1a e9a2 9b1f e9a3 9b22 e9a4     ............"...
 801a7f4:	9b23 e9a5 9b25 e9a6 9b27 e9a7 9b28 e9a8     #...%...'...(...
 801a804:	9b29 e9a9 9b2a e9aa 9b2e e9ab 9b2f e9ac     )...*......./...
 801a814:	9b31 9f54 9b32 e9ad 9b3b e2f6 9b3c 8b53     1.T.2...;...<.S.
 801a824:	9b41 8a40 9b42 8db0 9b43 e9af 9b44 e9ae     A.@.B...C...D...
 801a834:	9b45 96a3 9b4d e9b1 9b4e e9b2 9b4f e9b0     E...M...N...O...
 801a844:	9b51 e9b3 9b54 9682 9b58 e9b4 9b5a 8b9b     Q...T...X...Z...
 801a854:	9b6f 9844 9b72 fc42 9b74 e9b5 9b75 fc41     o.D.r.B.t...u.A.
 801a864:	9b83 e9b7 9b8e 88bc 9b8f fc43 9b91 e9b8     ..........C.....
 801a874:	9b92 95a9 9b93 e9b6 9b96 e9b9 9b97 e9ba     ................
 801a884:	9b9f e9bb 9ba0 e9bc 9ba8 e9bd 9baa 968e     ................
 801a894:	9bab 8e4c 9bad 8df8 9bae 914e 9bb1 fc44     ..L.......N...D.
 801a8a4:	9bb4 e9be 9bb9 e9c1 9bbb fc45 9bc0 e9bf     ..........E.....
 801a8b4:	9bc6 e9c2 9bc9 8cef 9bca e9c0 9bcf e9c3     ................
 801a8c4:	9bd1 e9c4 9bd2 e9c5 9bd4 e9c9 9bd6 8e49     ..............I.
 801a8d4:	9bdb 91e2 9be1 e9ca 9be2 e9c7 9be3 e9c6     ................
 801a8e4:	9be4 e9c8 9be8 8c7e 9bf0 e9ce 9bf1 e9cd     ......~.........
 801a8f4:	9bf2 e9cc 9bf5 88b1 9c00 fc46 9c04 e9d8     ..........F.....
 801a904:	9c06 e9d4 9c08 e9d5 9c09 e9d1 9c0a e9d7     ................
 801a914:	9c0c e9d3 9c0d 8a82 9c10 986b 9c12 e9d6     ..........k.....
 801a924:	9c13 e9d2 9c14 e9d0 9c15 e9cf 9c1b e9da     ................
 801a934:	9c21 e9dd 9c24 e9dc 9c25 e9db 9c2d 9568     !...$...%...-.h.
 801a944:	9c2e e9d9 9c2f 88f1 9c30 e9de 9c32 e9e0     ..../...0...2...
 801a954:	9c39 8a8f 9c3a e9cb 9c3b 8956 9c3e e9e2     9...:...;.V.>...
 801a964:	9c46 e9e1 9c47 e9df 9c48 924c 9c52 9690     F...G...H.L.R...
 801a974:	9c57 97d8 9c5a e9e3 9c60 e9e4 9c67 e9e5     W...Z...`...g...
 801a984:	9c76 e9e6 9c78 e9e7 9ce5 92b9 9ce7 e9e8     v...x...........
 801a994:	9ce9 94b5 9ceb e9ed 9cec e9e9 9cf0 e9ea     ................
 801a9a4:	9cf3 9650 9cf4 96c2 9cf6 93ce 9d03 e9ee     ..P.............
 801a9b4:	9d06 e9ef 9d07 93bc 9d08 e9ec 9d09 e9eb     ................
 801a9c4:	9d0e 89a8 9d12 e9f7 9d15 e9f6 9d1b 8995     ................
 801a9d4:	9d1f e9f4 9d23 e9f3 9d26 e9f1 9d28 8a9b     ....#...&...(...
 801a9e4:	9d2a e9f0 9d2b 8eb0 9d2c 89a7 9d3b 8d83     *...+...,...;...
 801a9f4:	9d3e e9fa 9d3f e9f9 9d41 e9f8 9d44 e9f5     >...?...A...D...
 801aa04:	9d46 e9fb 9d48 e9fc 9d50 ea44 9d51 ea43     F...H...P.D.Q.C.
 801aa14:	9d59 ea45 9d5c 894c 9d5d ea40 9d5e ea41     Y.E.\.L.].@.^.A.
 801aa24:	9d60 8d94 9d61 96b7 9d64 ea42 9d6b fc48     `...a...d.B.k.H.
 801aa34:	9d6c 9651 9d6f ea4a 9d70 fc47 9d72 ea46     l.Q.o.J.p.G.r.F.
 801aa44:	9d7a ea4b 9d87 ea48 9d89 ea47 9d8f 8c7b     z.K...H...G...{.
 801aa54:	9d9a ea4c 9da4 ea4d 9da9 ea4e 9dab ea49     ..L...M...N...I.
 801aa64:	9daf e9f2 9db2 ea4f 9db4 92df 9db8 ea53     ......O.......S.
 801aa74:	9dba ea54 9dbb ea52 9dc1 ea51 9dc2 ea57     ..T...R...Q...W.
 801aa84:	9dc4 ea50 9dc6 ea55 9dcf ea56 9dd3 ea59     ..P...U...V...Y.
 801aa94:	9dd9 ea58 9de6 ea5b 9ded ea5c 9def ea5d     ..X...[...\...].
 801aaa4:	9df2 9868 9df8 ea5a 9df9 91e9 9dfa 8deb     ..h...Z.........
 801aab4:	9dfd ea5e 9e19 fc4a 9e1a ea5f 9e1b ea60     ..^...J..._...`.
 801aac4:	9e1e ea61 9e75 ea62 9e78 8cb2 9e79 ea63     ..a.u.b.x...y.c.
 801aad4:	9e7d ea64 9e7f 8ead 9e81 ea65 9e88 ea66     }.d.......e...f.
 801aae4:	9e8b ea67 9e8c ea68 9e91 ea6b 9e92 ea69     ..g...h...k...i.
 801aaf4:	9e93 985b 9e95 ea6a 9e97 97ed 9e9d ea6c     ..[...j.......l.
 801ab04:	9e9f 97d9 9ea5 ea6d 9ea6 949e 9ea9 ea6e     ......m.......n.
 801ab14:	9eaa ea70 9ead ea71 9eb8 ea6f 9eb9 8d8d     ..p...q...o.....
 801ab24:	9eba 96cb 9ebb 9683 9ebc 9bf5 9ebe 9f80     ................
 801ab34:	9ebf 969b 9ec4 89a9 9ecc ea73 9ecd 8b6f     ..........s...o.
 801ab44:	9ece ea74 9ecf ea75 9ed0 ea76 9ed1 fc4b     ..t...u...v...K.
 801ab54:	9ed2 8d95 9ed4 ea77 9ed8 e0d2 9ed9 96d9     ......w.........
 801ab64:	9edb 91e1 9edc ea78 9edd ea7a 9ede ea79     ......x...z...y.
 801ab74:	9ee0 ea7b 9ee5 ea7c 9ee8 ea7d 9eef ea7e     ..{...|...}...~.
 801ab84:	9ef4 ea80 9ef6 ea81 9ef7 ea82 9ef9 ea83     ................
 801ab94:	9efb ea84 9efc ea85 9efd ea86 9f07 ea87     ................
 801aba4:	9f08 ea88 9f0e 9343 9f13 8cdb 9f15 ea8a     ......C.........
 801abb4:	9f20 916c 9f21 ea8b 9f2c ea8c 9f3b 9540      .l.!...,...;.@.
 801abc4:	9f3e ea8d 9f4a ea8e 9f4b e256 9f4e e6d8     >...J...K.V.N...
 801abd4:	9f4f e8eb 9f52 ea8f 9f54 ea90 9f5f ea92     O...R...T..._...
 801abe4:	9f60 ea93 9f61 ea94 9f62 97ee 9f63 ea91     `...a...b...c...
 801abf4:	9f66 ea95 9f67 ea96 9f6a ea98 9f6c ea97     f...g...j...l...
 801ac04:	9f72 ea9a 9f76 ea9b 9f77 ea99 9f8d 97b4     r...v...w.......
 801ac14:	9f95 ea9c 9f9c ea9d 9f9d e273 9fa0 ea9e     ..........s.....
 801ac24:	f929 fae0 f9dc fbe9 fa0e fa90 fa0f fa9b     )...............
 801ac34:	fa10 fa9c fa11 fab1 fa12 fad8 fa13 fae8     ................
 801ac44:	fa14 faea fa15 fb58 fa16 fb5e fa17 fb75     ......X...^...u.
 801ac54:	fa18 fb7d fa19 fb7e fa1a fb80 fa1b fb82     ..}...~.........
 801ac64:	fa1c fb86 fa1d fb89 fa1e fb92 fa1f fb9d     ................
 801ac74:	fa20 fb9f fa21 fba0 fa22 fba9 fa23 fbb1      ...!..."...#...
 801ac84:	fa24 fbb3 fa25 fbb4 fa26 fbb7 fa27 fbd3     $...%...&...'...
 801ac94:	fa28 fbda fa29 fbea fa2a fbf6 fa2b fbf7     (...)...*...+...
 801aca4:	fa2c fbf9 fa2d fc49 ff01 8149 ff02 fa57     ,...-.I...I...W.
 801acb4:	ff03 8194 ff04 8190 ff05 8193 ff06 8195     ................
 801acc4:	ff07 fa56 ff08 8169 ff09 816a ff0a 8196     ..V...i...j.....
 801acd4:	ff0b 817b ff0c 8143 ff0d 817c ff0e 8144     ..{...C...|...D.
 801ace4:	ff0f 815e ff10 824f ff11 8250 ff12 8251     ..^...O...P...Q.
 801acf4:	ff13 8252 ff14 8253 ff15 8254 ff16 8255     ..R...S...T...U.
 801ad04:	ff17 8256 ff18 8257 ff19 8258 ff1a 8146     ..V...W...X...F.
 801ad14:	ff1b 8147 ff1c 8183 ff1d 8181 ff1e 8184     ..G.............
 801ad24:	ff1f 8148 ff20 8197 ff21 8260 ff22 8261     ..H. ...!.`.".a.
 801ad34:	ff23 8262 ff24 8263 ff25 8264 ff26 8265     #.b.$.c.%.d.&.e.
 801ad44:	ff27 8266 ff28 8267 ff29 8268 ff2a 8269     '.f.(.g.).h.*.i.
 801ad54:	ff2b 826a ff2c 826b ff2d 826c ff2e 826d     +.j.,.k.-.l...m.
 801ad64:	ff2f 826e ff30 826f ff31 8270 ff32 8271     /.n.0.o.1.p.2.q.
 801ad74:	ff33 8272 ff34 8273 ff35 8274 ff36 8275     3.r.4.s.5.t.6.u.
 801ad84:	ff37 8276 ff38 8277 ff39 8278 ff3a 8279     7.v.8.w.9.x.:.y.
 801ad94:	ff3b 816d ff3c 815f ff3d 816e ff3e 814f     ;.m.<._.=.n.>.O.
 801ada4:	ff3f 8151 ff40 814d ff41 8281 ff42 8282     ?.Q.@.M.A...B...
 801adb4:	ff43 8283 ff44 8284 ff45 8285 ff46 8286     C...D...E...F...
 801adc4:	ff47 8287 ff48 8288 ff49 8289 ff4a 828a     G...H...I...J...
 801add4:	ff4b 828b ff4c 828c ff4d 828d ff4e 828e     K...L...M...N...
 801ade4:	ff4f 828f ff50 8290 ff51 8291 ff52 8292     O...P...Q...R...
 801adf4:	ff53 8293 ff54 8294 ff55 8295 ff56 8296     S...T...U...V...
 801ae04:	ff57 8297 ff58 8298 ff59 8299 ff5a 829a     W...X...Y...Z...
 801ae14:	ff5b 816f ff5c 8162 ff5d 8170 ff5e 8160     [.o.\.b.].p.^.`.
 801ae24:	ff61 00a1 ff62 00a2 ff63 00a3 ff64 00a4     a...b...c...d...
 801ae34:	ff65 00a5 ff66 00a6 ff67 00a7 ff68 00a8     e...f...g...h...
 801ae44:	ff69 00a9 ff6a 00aa ff6b 00ab ff6c 00ac     i...j...k...l...
 801ae54:	ff6d 00ad ff6e 00ae ff6f 00af ff70 00b0     m...n...o...p...
 801ae64:	ff71 00b1 ff72 00b2 ff73 00b3 ff74 00b4     q...r...s...t...
 801ae74:	ff75 00b5 ff76 00b6 ff77 00b7 ff78 00b8     u...v...w...x...
 801ae84:	ff79 00b9 ff7a 00ba ff7b 00bb ff7c 00bc     y...z...{...|...
 801ae94:	ff7d 00bd ff7e 00be ff7f 00bf ff80 00c0     }...~...........
 801aea4:	ff81 00c1 ff82 00c2 ff83 00c3 ff84 00c4     ................
 801aeb4:	ff85 00c5 ff86 00c6 ff87 00c7 ff88 00c8     ................
 801aec4:	ff89 00c9 ff8a 00ca ff8b 00cb ff8c 00cc     ................
 801aed4:	ff8d 00cd ff8e 00ce ff8f 00cf ff90 00d0     ................
 801aee4:	ff91 00d1 ff92 00d2 ff93 00d3 ff94 00d4     ................
 801aef4:	ff95 00d5 ff96 00d6 ff97 00d7 ff98 00d8     ................
 801af04:	ff99 00d9 ff9a 00da ff9b 00db ff9c 00dc     ................
 801af14:	ff9d 00dd ff9e 00de ff9f 00df ffe0 8191     ................
 801af24:	ffe1 8192 ffe2 81ca ffe3 8150 ffe4 fa55     ..........P...U.
 801af34:	ffe5 818f 0000 0000                         ........

0801af3c <tbl_lower.4122>:
 801af3c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
 801af4c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
 801af5c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
 801af6c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
 801af7c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
 801af8c:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
 801af9c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
 801afac:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
 801afbc:	0103 0105 0107 0109 010b 010d 010f 0111     ................
 801afcc:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
 801afdc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
 801afec:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
 801affc:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
 801b00c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
 801b01c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
 801b02c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
 801b03c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
 801b04c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
 801b05c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
 801b06c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
 801b07c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
 801b08c:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
 801b09c:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
 801b0ac:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
 801b0bc:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
 801b0cc:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
 801b0dc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
 801b0ec:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
 801b0fc:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
 801b10c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0801b11c <tbl_upper.4123>:
 801b11c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
 801b12c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
 801b13c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
 801b14c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
 801b15c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
 801b16c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
 801b17c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
 801b18c:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
 801b19c:	0102 0104 0106 0108 010a 010c 010e 0110     ................
 801b1ac:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
 801b1bc:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
 801b1cc:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
 801b1dc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
 801b1ec:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
 801b1fc:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
 801b20c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
 801b21c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
 801b22c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
 801b23c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
 801b24c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
 801b25c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
 801b26c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
 801b27c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
 801b28c:	0402 0403 0404 0405 0406 0407 0408 0409     ................
 801b29c:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
 801b2ac:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
 801b2bc:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
 801b2cc:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
 801b2dc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
 801b2ec:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
 801b2fc:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
 801b30c:	5d5b 0000                                   []..

0801b310 <DaysInMonth>:
 801b310:	1d1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

0801b31c <HexChars>:
 801b31c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 801b32c:	0000 0000 3130 3332 3534 3736 3938 4241     ....0123456789AB
 801b33c:	4443 4645 0000 0000 6e28 6c69 0029 0000     CDEF....(nil)...

0801b34c <TMP102_setup>:
 801b34c:	f0f0 0000 0a0d 6f4c 2077 6142 7474 7265     ......Low Batter
 801b35c:	0d79 000a                                   y...

0801b360 <SystemFrequency>:
 801b360:	a200 044a                                   ..J.

0801b364 <SystemFrequency_SysClk>:
 801b364:	a200 044a                                   ..J.

0801b368 <SystemFrequency_AHBClk>:
 801b368:	a200 044a                                   ..J.

0801b36c <SystemFrequency_APB1Clk>:
 801b36c:	5100 0225                                   .Q%.

0801b370 <SystemFrequency_APB2Clk>:
 801b370:	a200 044a 6425 0000 6146 4674 2073 6f6d     ..J.%d..FatFs mo
 801b380:	6e75 2074 7265 6f72 0d72 000a 6974 656d     unt error...time
 801b390:	742e 7478 0000 0000 5452 2043 6573 2074     .txt....RTC set 
 801b3a0:	6f74 2520 2f64 6425 252f 2064 6425 253a     to %d/%d/%d %d:%
 801b3b0:	3a64 6425 000a 0000 6f6c 6667 6c69 2e65     d:%d....logfile.
 801b3c0:	7874 0074 6146 4674 2073 7264 7669 2065     txt.FatFs drive 
 801b3d0:	7265 6f72 2072 6425 0a0d 0000 6f4e 7520     error %d....No u
 801b3e0:	4453 6320 7261 2064 6e69 6573 7472 6465     SD card inserted
 801b3f0:	0d3f 000a 7250 2d65 6c41 6f6c 6163 6974     ?...Pre-Allocati
 801b400:	6e6f 6520 7272 726f 0a0d 0000 6553 6b65     on error....Seek
 801b410:	6520 7272 726f 0a0d 0000 0000 6425 252d      error......%d-%
 801b420:	2d64 6425 2554 3a64 6425 253a 0a64 0000     d-%dT%d:%d:%d...
 801b430:	3325 2c66 6c25 2c75 6c25 0075 252c 6632     %3f,%lu,%lu.,%2f
 801b440:	0000 0000 0a0d 6f4c 6767 7265 7420 7275     ......Logger tur
 801b450:	656e 2064 666f 0d66 000a 0000 7173 7472     ned off.....sqrt
 801b460:	0000 0000 7361 6e69 0066 0000               ....asinf...

0801b46c <npio2_hw>:
 801b46c:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 801b47c:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 801b48c:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 801b49c:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 801b4ac:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 801b4bc:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 801b4cc:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 801b4dc:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

0801b4ec <two_over_pi>:
 801b4ec:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 801b4fc:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 801b50c:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 801b51c:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 801b52c:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 801b53c:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 801b54c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 801b55c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 801b56c:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 801b57c:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 801b58c:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 801b59c:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 801b5ac:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 801b5bc:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 801b5cc:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 801b5dc:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 801b5ec:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 801b5fc:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 801b60c:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 801b61c:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 801b62c:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 801b63c:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 801b64c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 801b65c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 801b66c:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 801b67c:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 801b68c:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 801b69c:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 801b6ac:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 801b6bc:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 801b6cc:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 801b6dc:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 801b6ec:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 801b6fc:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 801b70c:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 801b71c:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 801b72c:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 801b73c:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 801b74c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 801b75c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 801b76c:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 801b77c:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 801b78c:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 801b79c:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 801b7ac:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 801b7bc:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 801b7cc:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 801b7dc:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 801b7ec:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 801b7fc:	008c 0000 006b 0000                         ....k...

0801b804 <init_jk>:
 801b804:	0004 0000 0007 0000 0009 0000               ............

0801b810 <PIo2>:
 801b810:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 801b820:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 801b830:	0000 1fc4 0000 1bc6 0000 1744 0043 0000     ..........D.C...

0801b840 <_init>:
 801b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b842:	bf00      	nop
 801b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b846:	bc08      	pop	{r3}
 801b848:	469e      	mov	lr, r3
 801b84a:	4770      	bx	lr

0801b84c <__init_array_start>:
 801b84c:	08000101 	.word	0x08000101

0801b850 <_fini>:
 801b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b852:	bf00      	nop
 801b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b856:	bc08      	pop	{r3}
 801b858:	469e      	mov	lr, r3
 801b85a:	4770      	bx	lr

0801b85c <__fini_array_start>:
 801b85c:	080000ed 	.word	0x080000ed

0801b860 <__cs3_regions>:
 801b860:	00000000 	.word	0x00000000
 801b864:	0801b878 	.word	0x0801b878
 801b868:	20000000 	.word	0x20000000
 801b86c:	00000698 	.word	0x00000698
 801b870:	00000870 	.word	0x00000870
